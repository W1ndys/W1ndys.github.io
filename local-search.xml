<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>从应用内存上来研究智慧曲园模拟请假条</title>
    <link href="/2024/01/09/QFNU_JiaTiao/"/>
    <url>/2024/01/09/QFNU_JiaTiao/</url>
    
    <content type="html"><![CDATA[<h1 id="研究背景"><a href="#研究背景" class="headerlink" title="研究背景"></a>研究背景</h1><p>首先，我知道你曾经用过 P 图软件对假条截图进行修改，但是你好像发现，始终找不到与修改后的与原来的假条字体完全匹配的方法，本教程旨在通过程序内存进行修改，实现无损替换文字。</p><p><span style="border:1px solid #00FF00; color:#00FF00;"> 首先，请认真阅读本文文末的免责声明 </span></p><h1 id="必备工具"><a href="#必备工具" class="headerlink" title="必备工具"></a>必备工具</h1><ol><li>雷电模拟器</li><li>智慧曲园</li><li>GameGuardian 修改器</li></ol><p>雷电模拟器下载地址 <a href="https://www.ldmnq.com/">https://www.ldmnq.com/</a></p><p>GameGuardian 修改器下载地址 <a href="https://dmod.3dmgame.com/mod/Download/196410">https://dmod.3dmgame.com/mod/Download/196410</a></p><h1 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h1><p>未完待续……………………</p><h2 id="看看成品"><a href="#看看成品" class="headerlink" title="看看成品"></a>看看成品</h2><p><img src="/img/jiatiao/end.png" srcset="/img/loading.gif" lazyload alt="end"></p><h1 id="免责声明"><a href="#免责声明" class="headerlink" title="免责声明"></a>免责声明</h1><p>本教程旨在提供技术交流目的。使用本教程中的信息和示例所造成的任何行为或后果由使用者自行承担责任。</p><p>本教程提供的是模拟学校请假条的示例，仅供参考和学习之用。任何使用本教程生成的虚拟请假条与真实情况无关，不得用于实际学校或其他机构。请在实际情况下遵循相应机构的规章制度和规定。</p><p>作者和相关团队力求确保本教程提供的信息准确可靠，但不保证信息的绝对准确性和完整性。使用者应审慎对待并自行承担使用本教程信息可能带来的风险。</p><p>本教程作者不对因使用本教程而引发的任何直接或间接损失或损害承担责任，包括但不限于任何利润损失、数据丢失或业务中断。</p><p>使用本教程即表示您同意遵守此免责声明。如果您不同意此免责声明，请不要使用本教程提供的信息和示例。</p>]]></content>
    
    
    <categories>
      
      <category>QFNU</category>
      
    </categories>
    
    
    <tags>
      
      <tag>QFNU</tag>
      
      <tag>逆向技术</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记录我的2023年</title>
    <link href="/2023/12/31/my2023/"/>
    <url>/2023/12/31/my2023/</url>
    
    <content type="html"><![CDATA[<h1 id="简单记录自己的-2023-年"><a href="#简单记录自己的-2023-年" class="headerlink" title="简单记录自己的 2023 年"></a>简单记录自己的 2023 年</h1><blockquote><p>看到朋友圈都在晒，也一直想记录一下自己的 2023 年，想不到有什么好的方法，看到康哥用博客记录，我也跟风写一下吧。</p><p>非常庆幸自己有一本大厚日记本，不如真不知道怎么写这篇博文</p><p>截止目前日记本已经写完三个本子了，记忆里大概是从高一下学期开始写一直到现在（虽然最近一个月没写，大抵是没空了）</p><p><span style="color:#FF0000;"> 呼呼光这一篇就写了快一个小时 </span></p></blockquote><p><img src="/img/my2023/%E6%97%A5%E8%AE%B0%E6%9C%AC.jpg" srcset="/img/loading.gif" lazyload alt="日记本"></p><h2 id="孟春之月（一月）"><a href="#孟春之月（一月）" class="headerlink" title="孟春之月（一月）"></a>孟春之月（一月）</h2><p>翻开日记发现竟然没有 1 月，那 1 月我到底干了些什么呢，打开相册回忆一下。</p><p>原因竟然是 <strong>疫情</strong>！1 月大概是大一上学期刚放寒假，那时候还在疫情时代，大家都阳了没什么好写的。</p><p><img src="/img/my2023/%E5%9B%9E%E5%AE%B6.jpg" srcset="/img/loading.gif" lazyload alt="日记本"></p><h2 id="仲春之月（二月）"><a href="#仲春之月（二月）" class="headerlink" title="仲春之月（二月）"></a>仲春之月（二月）</h2><p>大一上初识 CTF，但是也没什么入门，一直处在门外边的水平</p><p>整个寒假算是我 CTF 学习阶段进步比较大的一段时间，用一个寒假来入了一下门，知道了什么是编码，什么是 IDA，什么是加壳脱壳……</p><p>放一波刷题记录</p><p>大概是从 2 月开始跑步减肥的（虽然只减了十几斤，而且现在已经吃回来了）</p><div style="display: flex; justify-content: center;">    <figure style="margin-right: 20px;">        <img src="/img/my2023/编码.png" srcset="/img/loading.gif" lazyload alt="buu刷题记录" style="max-width: 100%;">        <figcaption> Caption for Image 1 </figcaption>    </figure>    <figure>        <img src="/img/my2023/ctfshow刷题.png" srcset="/img/loading.gif" lazyload alt="ctfshow刷题记录" style="max-width: 100%;">        <figcaption> Caption for Image 2 </figcaption>    </figure></div><p>一入网安深似海，从此 hacker 不能改</p><p>从小一个黑客梦，还是想感叹 <span style="color:#FF0000;"> 高考能考到自己喜欢的专业是多么幸福的一件事 </span></p><h2 id="季春之月（三月）"><a href="#季春之月（三月）" class="headerlink" title="季春之月（三月）"></a>季春之月（三月）</h2><p>三月就已经开学上课了，一开始听课还能听点，结果是越来越不听了吧</p><p>三月的时候还挺爱打羽毛球的，现在怎么不打了</p><p>三月学院 <a href="https://mp.weixin.qq.com/s/nuZqsShR668drH-b8POC-w">班歌比赛</a>，负责剪辑班歌视频，嘻嘻，荣获一等奖，当时还跟朋友们拍了一张合影（照片里面现在貌似只剩我没对象了 hhhhh）</p><p><img src="/img/my2023/%E5%90%88%E5%BD%B1.jpg" srcset="/img/loading.gif" lazyload alt="合影"></p><h2 id="孟夏之月（四月）"><a href="#孟夏之月（四月）" class="headerlink" title="孟夏之月（四月）"></a>孟夏之月（四月）</h2><p>四月发生的印象最深的事情就是烫了个发吧，当时还觉得蛮好看的</p><p>现在已经剪没了，也没再继续烫。</p><p><img src="/img/my2023/%E7%83%AB%E5%8F%91.jpg" srcset="/img/loading.gif" lazyload alt="烫发"></p><h2 id="仲夏之月（五月）"><a href="#仲夏之月（五月）" class="headerlink" title="仲夏之月（五月）"></a>仲夏之月（五月）</h2><p>四月五月是打扮自己最多的几个月（大概是受食人鱼的指点了吧🤔不过也确实学到点东西）</p><p>跟好鸽们打电话时候的正规军。</p><p><img src="/img/my2023/gwl%E8%A7%86%E9%A2%91%E7%94%B5%E8%AF%9D.jpg" srcset="/img/loading.gif" lazyload alt="视频电话"></p><p>在毕业晚会幕后道具工作</p><div style="display: flex; align-items: flex-start;">    <div style="flex: 1; text-align: center;">        <img src="/img/my2023/毕业晚会门票.jpg" srcset="/img/loading.gif" lazyload alt="毕业晚会门票" style="width: 85%; vertical-align: top;">        <p style="text-align: center;"> 毕业晚会门票 </p>    </div>    <div style="flex: 1; text-align: center;">        <img src="/img/my2023/毕业晚会幕后.jpg" srcset="/img/loading.gif" lazyload alt="毕业晚会幕后" style="width: 100%; vertical-align: bottom;">        <p style="text-align: center;"> 毕业晚会幕后 </p>    </div></div><p>5 月 20 号简历设计大赛二等奖 <span style="color:#FF0000;"> 证书 </span> 发下来了</p><p>5 月 30 号，二阳了</p><h2 id="季夏之月（六月）"><a href="#季夏之月（六月）" class="headerlink" title="季夏之月（六月）"></a>季夏之月（六月）</h2><p>这个月一开始看了历史文化学院的最美汉服代言人表演，太惊艳了，全是戏曲</p><p><img src="/img/my2023/%E6%B1%89%E6%9C%8D%E4%BB%A3%E8%A8%80%E4%BA%BA.jpg" srcset="/img/loading.gif" lazyload alt="最美汉服代言人"></p><p>上课看完了深海哈哈哈哈，物理课不听课看电影，挺有教育意义的一部动画电影</p><p><img src="/img/my2023/%E6%B7%B1%E6%B5%B7.jpg" srcset="/img/loading.gif" lazyload alt="深海"></p><p>填了积极分子相关资料</p><p>在百佳宿舍评选幕后，也是这时候认识了 myk 师哥</p><p><img src="/img/my2023/%E7%99%BE%E4%BD%B3%E5%AE%BF%E8%88%8D.jpg" srcset="/img/loading.gif" lazyload alt="百佳宿舍"></p><p>献血最光荣嘻嘻，我不在意最后这一袋血会拿去干什么，至于他是否被卖掉或者被浪费，我不关心，但行好事莫问前程</p><p><img src="/img/my2023/%E7%8C%AE%E8%A1%80.jpg" srcset="/img/loading.gif" lazyload alt="献血"></p><p>月末放暑假假回家咯</p><p><img src="/img/my2023/%E6%9A%91%E5%81%87%E6%94%BE%E5%81%87.jpg" srcset="/img/loading.gif" lazyload alt="暑假极爱"></p><p>讲真的，这次回家是为了考驾照，如果不是为了考驾照，我是真的想留校学习的，毕竟还有很多东西要学。</p><h2 id="孟秋之月（七月）"><a href="#孟秋之月（七月）" class="headerlink" title="孟秋之月（七月）"></a>孟秋之月（七月）</h2><p>考驾照的第一个月，下半身没做防晒，从脚踝开始上面是黑的下面是白的，已经是泾渭分明了</p><p><img src="/img/my2023/%E8%85%BF%E5%AD%90.jpg" srcset="/img/loading.gif" lazyload alt="黑白分明"></p><p>好在科一到科四都一把过，科二满分，驾照到手，也算没白费</p><h2 id="仲秋之月（八月）"><a href="#仲秋之月（八月）" class="headerlink" title="仲秋之月（八月）"></a>仲秋之月（八月）</h2><p>8 月多久已经快开学了，我实在是在家待不住了，提前返校学一会，不得不说，一个人是真的舒服</p><p>见证了日本核污水不负责任排放大海</p><p><img src="/img/my2023/%E6%9B%B2%E9%98%9C%E6%B1%BD%E8%BD%A6%E7%AB%99.jpg" srcset="/img/loading.gif" lazyload></p><p>8 月 23 一次突发奇想，做了大学时代的第一个面向全校的公益项目（也不能说是项目）——<a href="https://w1ndys.top/2023/09/01/QFNU_Course_Selection_Guide_North/#/">曲阜师范大学选课指北</a>，旨在帮助大家选择合适的任课老师</p><p>目前已经有 120+参与贡献者，浏览量 4w+</p><p><img src="/img/my2023/%E9%80%89%E8%AF%BE%E6%8C%87%E5%8C%97.png" srcset="/img/loading.gif" lazyload alt="image-20231231234930273"></p><h2 id="季秋之月（九月）"><a href="#季秋之月（九月）" class="headerlink" title="季秋之月（九月）"></a>季秋之月（九月）</h2><p>九月迎新，大一新生开学了，也是又老了一年，接了两个师弟。</p><p>然后紧张激烈的纳新也开始了，出席了社团管理部的宣讲，网络空间安全协会的宣讲，还有有关于逆向等方面的知识（虽然我也很菜）</p><h2 id="孟冬之月（十月）"><a href="#孟冬之月（十月）" class="headerlink" title="孟冬之月（十月）"></a>孟冬之月（十月）</h2><p>十月一回来之后就长胖了，再也没减下去</p><p>认识了几个大一的师弟师妹，都挺好的，好学又调皮可爱</p><p>然后就是去山东警察学院打了省赛，跟着师哥去打了科来杯，人生第一次线下赛，总体体验还是学到很多东西的，特别是让我明白人外有人，自己永远是菜狗</p><p><a href="https://w1ndys.top/2023/10/29/CTF_think_kelai_10/#/">科来杯心得</a></p><p><img src="https://w1ndys.top/img/%E7%A7%91%E6%9D%A5%E6%9D%AF10/%E5%B1%B1%E4%B8%9C%E8%AD%A6%E5%AF%9F%E5%AD%A6%E9%99%A2.jpg" srcset="/img/loading.gif" lazyload alt="山东警察学院大门"></p><p><img src="/img/my2023/%E7%A7%91%E6%9D%A5%E6%9D%AF.jpg" srcset="/img/loading.gif" lazyload alt="科来杯"></p><h2 id="仲冬之月（十一月）"><a href="#仲冬之月（十一月）" class="headerlink" title="仲冬之月（十一月）"></a>仲冬之月（十一月）</h2><p>十一月在迎新晚会幕后主持道具组</p><p><a href="https://w1ndys.top/2023/11/30/CTF_think_jnxl2023/#/">参加了技能兴鲁网络安全技能挑战赛</a></p><p><img src="/img/my2023/%E6%8A%80%E8%83%BD%E5%85%B4%E9%B2%81.jpg" srcset="/img/loading.gif" lazyload alt="技能兴鲁"></p><p><img src="https://w1ndys.top/img/jnxl2023/1701356901716.jpg" srcset="/img/loading.gif" lazyload></p><p>好大儿送的一本刑法，旨在叫我好好遵守网络安全法，将来做一个白帽子不要误入歧途</p><p><img src="/img/my2023/%E5%A5%BD%E5%A4%A7%E5%84%BF.png" srcset="/img/loading.gif" lazyload alt="好大儿"></p><h2 id="季冬之月（十二月）"><a href="#季冬之月（十二月）" class="headerlink" title="季冬之月（十二月）"></a>季冬之月（十二月）</h2><p>已经沦为卷比的形状了捏😭😭😭😭😭😭</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随笔</tag>
      
      <tag>W1ndys年度总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>怎样理解离散数学中的自反 反自反 对称 反对称与传递？</title>
    <link href="/2023/12/30/How_to_understand_antisymmetry_and_transfer_of_reflexive_antireflexive_symmetry_in_discrete_mathematics/"/>
    <url>/2023/12/30/How_to_understand_antisymmetry_and_transfer_of_reflexive_antireflexive_symmetry_in_discrete_mathematics/</url>
    
    <content type="html"><![CDATA[<p>看到一个很好的很容易理解的解释。</p><p>首先你应该理解“关系”Relation</p><p>比如你有一个集合X（通俗地说就是一类东西），某些元素之间（比如x、y）之间有某一种关系R，就记做R(x,y)。</p><p>这个关系可以是“x和y认识”，或者“x比y大”，或者“x和y发生过<strong>关系</strong>”（对就是你想的意思）或者是任意你说了算的关系，你说他两有关系就有关系。</p><p>自反：对于任意X的元素x、必有R(x,x)。虽然不太直观，因为一般语境下“关系”是两个对象的。但是我可以举一个例子，比如X&#x3D;班级，x&#x3D;小明，R&#x3D;同班。那么小明一定和自己同班，所以R(x,x)。</p><p>反自反：就是任意的x不满足R(x,x)。比如关系R是“我是你爸爸”，那么显然任意的x都不是自己的爸爸，所以“我是你爸爸”满足反自反性质。</p><p>对称：R(x,y)则R(y,x)。还是“同班”的例子，“我是你同学”意味着“你是我同学”；或者结婚，我和你结婚，你必然和我结婚等等。（这里“意味着”就是推导）。</p><p>反对称：R(x,y)则R(y,x)不成立。“我是你爸爸”就满足反对称，因为“我是你爸爸”不意味着“你是我爸爸”</p><p>传递性：如果R(x,y)和R(y,z)则R(x,z)。比如“同班”这个时（特定班级，不是“同过班”）就是传递的。再比如“直系血亲”就是传递的，比如爸爸的爸爸是爷爷。</p><p>不传递（注意，不是反传递）：很多关系都不满足传递性，“朋友”，“我是你爸爸”，“接过吻”就不满足。</p><p>总的来说，如果一个关系满足“反身，对称，传递”，那么这个关系就叫“等价关系”，也就是“分类关系”。也可以反过来理解，所有“分类关系”里面，必然满足“反身，对称，传递”。</p><blockquote><p>转载</p></blockquote><blockquote><p>作者：伍易东<br>链接：<a href="https://www.zhihu.com/question/426552337/answer/1536598149">https://www.zhihu.com/question/426552337/answer/1536598149</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>离散数学</category>
      
      <category>关系</category>
      
    </categories>
    
    
    <tags>
      
      <tag>离散数学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>本博客免责声明</title>
    <link href="/2023/12/23/Disclaimer/"/>
    <url>/2023/12/23/Disclaimer/</url>
    
    <content type="html"><![CDATA[<p>在使用本教程前，请务必阅读并理解以下内容。使用本教程即代表您同意以下用户协议：</p><ol><li><strong>用户协议</strong>：使用本教程即表示您同意遵守本免责声明和用户协议。若您不同意此协议，请勿使用本教程提供的信息和指南。</li><li><strong>个人责任</strong>：本教程所提供的信息仅供参考，使用者需自行承担因使用产品A而产生的任何风险和后果。</li><li><strong>消费责任</strong>：使用本教程涉及的任何消费或购买行为与本人无关，用户需自行对其行为负责并承担相应风险。</li><li><strong>禁止转载</strong>：未经本人允许，严禁对本教程内容进行转载或再分发。任何未经授权的转载行为都将被视为侵权行为。</li><li><strong>结果不保证</strong>：本教程提供的建议和技巧并不能保证用户能够取得特定的结果或效果。实际使用中的成果可能因个人技能、环境差异或其他因素而有所不同。</li></ol><p>在使用本教程提供的信息前，请谨慎考虑个人能力和环境因素，并在必要时寻求专业建议。对于因使用本教程而产生的任何问题或损失，我们概不负责。</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手把手教你注册Google账号</title>
    <link href="/2023/12/23/Google_account/"/>
    <url>/2023/12/23/Google_account/</url>
    
    <content type="html"><![CDATA[<h1 id="Google账号的注册教程"><a href="#Google账号的注册教程" class="headerlink" title="Google账号的注册教程"></a>Google账号的注册教程</h1><blockquote><p>本部分基于<a href="https://blog.csdn.net/qq_45138120/article/details/131347452#/">这篇文章</a>进行编辑，致敬</p></blockquote><ol><li>首先打开浏览器，然后进入设置把浏览器设置成英文语言，来提高成功率</li></ol><p>特别说明一下，<span style="color:#FF0000;">是浏览器的总语言，在浏览器设置里，而不只是设置当前页面的语言</span></p><ol><li>我们使用浏览器打开谷歌邮箱官网（<a href="http://gmail.google.com/">http://gmail.google.com/</a> ），进入谷歌邮箱的登录主页，我们点击左下方的创建账号按钮，选择个人用途（为我自己）</li></ol><p><img src="/img/Google/Google1.png" srcset="/img/loading.gif" lazyload alt="账号注册"></p><ol start="3"><li>在进入的界面我们不要着急填写资料，我们先修改语言，点击左下方的简体中文。这个时候，会弹出国家语言列表，我们选择“English（United States）”。</li></ol><p><img src="/img/Google/Google2.png" srcset="/img/loading.gif" lazyload alt="语言"></p><ol start="4"><li>这个时候，界面会变成英语。输入姓氏和名字，点击 Next</li></ol><p><img src="/img/Google/Google3.png" srcset="/img/loading.gif" lazyload alt="在这里插入图片描述"></p><ol start="4"><li>选择月份、日、年、性别，点击Next</li></ol><p><img src="/img/Google/Google4.png" srcset="/img/loading.gif" lazyload alt="日期"></p><ol start="5"><li>选择Gmail邮箱地址，前两个是随机出的邮箱地址，可以勾选第三个自定义邮箱地址，输入邮箱地址后，点击 Next</li></ol><p><img src="/img/Google/Google5.png" srcset="/img/loading.gif" lazyload alt="在这里插入图片描述"></p><ol start="6"><li><p>输入密码，确认密码后，点击 Next</p><p><img src="/img/Google/Google6.png" srcset="/img/loading.gif" lazyload alt="在这里插入图片描述"></p></li><li><p>添加恢复电子邮件，账号异常或锁定时，Google 可以通过恢复电子邮件联系您。直接点击 Skip 跳过</p></li></ol><p><img src="/img/Google/Google7.png" srcset="/img/loading.gif" lazyload alt="在这里插入图片描述"></p><ol start="8"><li>选择中国，填写自己的手机号，点击Next</li></ol><p>关于手机号无法用于验证的问题，可以看这一位大佬的帖子：<a href="https://blog.csdn.net/qaqwqaqwq/article/details/130442226#/">https://blog.csdn.net/qaqwqaqwq/article/details/130442226#/</a></p><p>这个问题与我一开始写的第一步相呼应，开头切换英文主要就是为了解决这边</p><p><img src="/img/Google/Google8.png" srcset="/img/loading.gif" lazyload alt="在这里插入图片描述"></p><ol start="9"><li>确认账户信息页面，没问题的话，点击 Next</li></ol><p><img src="/img/Google/Google9.png" srcset="/img/loading.gif" lazyload alt="在这里插入图片描述"></p><ol start="10"><li>隐私条款确认，拉取到底部，点击 I agree 我同意</li></ol><p><img src="/img/Google/Google10.png" srcset="/img/loading.gif" lazyload alt="image-20231223005705473"></p><ol start="11"><li>如图，出现此界面，说明 Google 邮箱创建成果</li></ol><p><img src="/img/Google/Google11.png" srcset="/img/loading.gif" lazyload alt="在这里插入图片描述"></p><p>注：创建失败时</p><ul><li>手机号码已经注册过</li><li>在注册时，将语言设置为英语，成功率高</li><li>切换节点</li><li>过会再试试</li></ul>]]></content>
    
    
    <categories>
      
      <category>手把手教程</category>
      
      <category>Google</category>
      
    </categories>
    
    
    <tags>
      
      <tag>手把手教程系列</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手把手教你使用ChatGPT3.5</title>
    <link href="/2023/12/21/ChatGPT3.5/"/>
    <url>/2023/12/21/ChatGPT3.5/</url>
    
    <content type="html"><![CDATA[<blockquote><p>爆肝一晚上写完教程，且看且珍惜</p><p>本教程未经允许禁止转载，来源：<a href="http://www.w1ndys.top/">www.w1ndys.top</a></p><p>本教程所涉及所有操作均已通过本机测试，出现其他情况均属于个人机器问题</p><p>本教程编写耗时 <font color='red'> 160 分钟 </font> 且浏览完全免费，且看且珍惜</p></blockquote><p>前排提醒：使用 ChatGPT 涉及 3.8-38.8 不等的付费内容，介意请立即退出</p><blockquote><p>截止 2023 年 12 月 23 日 16: 29: 07，已有成功案例，证明全过程是无问题的，最容易出现问题的是手机号的部分，注意设置好语言就可以</p></blockquote><p>前排提醒，已有成功案例，跟着来就行，教程没任何问题</p><p><img src="/img/ChatGPT/PixPin_2023-12-24_15-58-46.png" srcset="/img/loading.gif" lazyload></p><p><img src="/img/ChatGPT/PixPin_2023-12-24_15-59-24.png" srcset="/img/loading.gif" lazyload></p><h1 id="工具准备"><a href="#工具准备" class="headerlink" title="工具准备"></a>工具准备</h1><ol><li><p>一台能上网的 <span style="color:#FF0000; border:1px solid #FF3333;"> 电脑 </span>，注意非常推荐使用电脑，否则会遇到很多未知问题</p></li><li><p>Google Chrome（推荐）</p><p>没有 Google 的可以用 Windows 自带的 Edge 浏览器</p></li><li><p>一个魔法工具（梯子）</p><p><font color="#3333FF"> 需要特别注意的是，使用本工具 <span style="border:1px solid #808080;"> 有一定的流量计费 </span>，3.8-38.8 不等，根据自己需要选择 </font>，此费用也不是我本人收取，而是流量的提供方收取，特别注意这点 <font color="#FF0000" size=5> 如果你 <span style="border:1px solid #000000;"> 介意此费用 </span>，你可以 <span style="border:1px solid #990099;"> 关闭此页面 </span> 退出阅读了。</font> 具体注意事项下面会提到</p></li><li><p>一双灵敏的眼睛（不是</p></li><li><p>一个耐心看教程的好习惯（不是</p></li><li><p>一颗真诚的心和 <font color='red'> 良好的态度 </font>，有问题 <a href="https://qm.qq.com/q/9n506oZ8Ri&personal_qrcode_source=4">联系博主</a></p></li></ol><h1 id="开始操作"><a href="#开始操作" class="headerlink" title="开始操作"></a>开始操作</h1><h2 id="爬墙工具的介绍和安装使用"><a href="#爬墙工具的介绍和安装使用" class="headerlink" title="爬墙工具的介绍和安装使用"></a>爬墙工具的介绍和安装使用</h2><h3 id="工具介绍"><a href="#工具介绍" class="headerlink" title="工具介绍"></a>工具介绍</h3><p><font color="#FF3333"> 这些你都不需要记，看看就行 </font></p><ul><li><p>虚拟专用网络(Virtual Private Network，VPN)是专用网络的延伸，它包含了类似 Internet 的共享或公共网络链接。通过 VPN 可以以模拟点对点专用链接的方式通过共享或公共网络在两台计算机之间发送数据。</p></li><li><p>如果说得再通俗一点，VPN 实际上是 “线路中的线路”，类型于城市大道上的 “公交专用线”，所不同的是，由 VPN 组成的 “线路” 并不是物理存在的，而是通过技术手段模拟出来，即是 “虚拟” 的。不过，这种虚拟的专用网络技术却可以在一条公用线路中为两台计算机建立一个逻辑上的专用 “通道”，它具有良好的保密和不受干扰性，使双方能进行自由而安全的点对点连接，因此被网络管理员们非常广泛地关注着。</p></li><li><p>通过虚拟专用网，我们在家就可以轻松安全的登录到公司的内部网络上，这样可以实现我们在家办公的梦想了。</p></li></ul><h3 id="账号注册"><a href="#账号注册" class="headerlink" title="账号注册"></a>账号注册</h3><p>有了这个工具，你不只是能进 ai，还可以高速浏览 GitHub 等网站，以及…………</p><p>微信搜索公众号关注：  <code> W1ndys_Official</code> 或扫描下方二维码</p><p>发送：GPT 工具，即可获得链接</p><p><img src="/img/VPN/wx.png" srcset="/img/loading.gif" lazyload alt="注册"></p><p>输入邮箱密码注册账号，注册完成后登陆</p><p><img src="/img/VPN/%E6%B3%A8%E5%86%8C%E8%B4%A6%E5%8F%B7.png" srcset="/img/loading.gif" lazyload alt="注册"></p><p>然后点击左侧购买订阅</p><p><img src="/img/VPN/%E8%AE%A2%E9%98%85.png" srcset="/img/loading.gif" lazyload alt="订阅"></p><p>根据需求选择你合适的方案，如果你只是想尝鲜的话，毫无疑问，选最便宜的，能用就行</p><p><img src="/img/VPN/%E8%B4%AD%E4%B9%B0%E8%AE%A2%E9%98%85.png" srcset="/img/loading.gif" lazyload alt="购买订阅"></p><p>我本人用的是 <font color="#FF0000"> 38.8 巨量不限时，推荐这个 </font>，大约可以用 2 年左右，平均下来大约 0.6&#x2F;天，而且是实打实的买多少用多少，不会出现超时浪费</p><p>买完之后点击左上方仪表盘可以看到你的已订阅</p><p><img src="/img/VPN/%E4%BB%AA%E8%A1%A8%E7%9B%98.png" srcset="/img/loading.gif" lazyload alt="仪表盘"></p><p>然后点击仪表盘下方的使用文档</p><p><img src="/img/VPN/%E5%AE%A2%E6%88%B7%E7%AB%AF.png" srcset="/img/loading.gif" lazyload alt="客户端安装"></p><p>选择你的系统安装客户端</p><p>安装完之后登陆客户端就可以看到这样</p><p><img src="/img/VPN/%E5%AE%89%E8%A3%85%E5%AE%8C%E6%88%90.png" srcset="/img/loading.gif" lazyload alt="安装完成"></p><h3 id="连接节点"><a href="#连接节点" class="headerlink" title="连接节点"></a>连接节点</h3><p>目前为止已经基本结束了，点击连接，点进去选个绿色的节点，点全局，<font color="#FF0000"> 如果后续出现连接失败就换个节点 </font></p><p><img src="/img/VPN/%E8%8A%82%E7%82%B9.png" srcset="/img/loading.gif" lazyload alt="节点"></p><h2 id="Google-账号的注册"><a href="#Google-账号的注册" class="headerlink" title="Google 账号的注册"></a>Google 账号的注册</h2><p><span style="background:#FF8000;"> 注意 </span>：<span style="font-size:1.1em; color:#FF3399;"> 有 ChatGPT 账号的可以跳过此步骤，有 Google 账号的可以跳过此步骤，有 Apple 账号的可以先直接试试第三步，如果不行再回来本步骤 </span></p><p>（本质上来讲 Microsoft 账号也是可以的，但是我试过了，大陆手机号注册的 Microsoft 不可用，所以这里就一笔带过）</p><p>（需要一直开着步骤一的工具）</p><p>关于 Google 账号如何注册可以看下面链接另一篇博客</p><p><a href="https://w1ndys.top/2023/12/23/Google_account/">https://w1ndys.top/2023/12/23/Google_account/</a></p><h2 id="进入-OpenAI-官网"><a href="#进入-OpenAI-官网" class="headerlink" title="进入 OpenAI 官网"></a>进入 OpenAI 官网</h2><p>（需要一直开着步骤一的工具）</p><p>进入这个网站：<a href="https://chat.openai.com/">https://chat.openai.com/</a></p><p>点击 login</p><p><img src="/img/ChatGPT/image-1.png" srcset="/img/loading.gif" lazyload alt="image-20231223010822238"></p><p>点继续使用 Google（另外有 Apple 可选 Apple 但后面需不需要别的认证我不知道，买不起果子没试过）</p><p>（本质上来讲 Microsoft 账号也是可以的，但是我试过了，大陆手机号注册的 Microsoft 不可用，所以这里就一笔带过）</p><p><img src="/img/ChatGPT/image-20231223010933294.png" srcset="/img/loading.gif" lazyload alt="image-20231223010933294"></p><p>然后选择刚注册好的账号登陆之后就可以用了</p><p><img src="/img/ChatGPT/image-20231223010959130.png" srcset="/img/loading.gif" lazyload alt="image-20231223010959130"></p><p>放一张使用截图</p><p><img src="/img/ChatGPT/image-20231223011402732.png" srcset="/img/loading.gif" lazyload alt="image-20231223011402732"></p><hr><h1 id="免责声明"><a href="#免责声明" class="headerlink" title="免责声明"></a>免责声明</h1><p>在使用本教程前，请务必阅读并理解以下内容。使用本教程即代表您同意以下用户协议：</p><ol><li><strong>用户协议</strong>：使用本教程即表示您同意遵守本免责声明和用户协议。若您不同意此协议，请勿使用本教程提供的信息和指南。</li><li><strong>个人责任</strong>：本教程所提供的信息仅供参考，使用者需自行承担因使用产品 A 而产生的任何风险和后果。</li><li><strong>消费责任</strong>：使用本教程涉及的任何消费或购买行为与本人无关，用户需自行对其行为负责并承担相应风险。</li><li><strong>禁止转载</strong>：未经本人允许，严禁对本教程内容进行转载或再分发。任何未经授权的转载行为都将被视为侵权行为。</li><li><strong>结果不保证</strong>：本教程提供的建议和技巧并不能保证用户能够取得特定的结果或效果。实际使用中的成果可能因个人技能、环境差异或其他因素而有所不同。</li></ol><p>在使用本教程提供的信息前，请谨慎考虑个人能力和环境因素，并在必要时寻求专业建议。对于因使用本教程而产生的任何问题或损失，我们概不负责。</p>]]></content>
    
    
    <categories>
      
      <category>手把手教程</category>
      
      <category>ChatGPT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>手把手教程系列</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ChatLearning————学群友说话使用手册</title>
    <link href="/2023/12/13/bot_ChatLearning/"/>
    <url>/2023/12/13/bot_ChatLearning/</url>
    
    <content type="html"><![CDATA[<h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><ul><li><a href="https://github.com/project-mirai/mirai-api-http">mirai-api-http</a> 配置 <code>http adapter</code> ， <code>singleMode</code> 为 <code>false</code> 为了保证稳定性，请尽量使用mirai-api-http v2.3.3版本</li><li>配置 <code>data.json</code></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br> <span class="hljs-attr">&quot;Key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;xxxxx&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 在mirai-api-http中设置的密钥,若使用singleMode也不需要校验,设置为&quot;&quot;即可</span><br> <span class="hljs-attr">&quot;host&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;127.0.0.1&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// mirai-api-http中设置的地址（若设置成0.0.0.0，请填写127.0.0.1）</span><br> <span class="hljs-attr">&quot;port&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;8080&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// mirai-api-http中设置的端口</span><br> <span class="hljs-attr">&quot;qq&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;xxx&quot;</span><span class="hljs-punctuation">,</span>  <span class="hljs-comment">// 在mirai登陆的QQ号</span><br> <span class="hljs-attr">&quot;session&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;xxx&quot;</span> <span class="hljs-comment">// 无需修改</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>Windows双击 <code>ChatLearning.exe</code> 直接运行</li><li>Linux在<code>cd</code>到目录后使用<code>./ChatLearning</code>运行</li><li>Win7或以下的32位系统(包括32位的Linux)则需下载<strong>Source包</strong>并确保Python版本≥3.6使用 <code>pip install -r requirements.txt</code> 安装依赖后运行 <code>Chatmain.py</code></li></ul><blockquote><p>首次使用在控制台使用 <code>setadmin &lt;QQ号,多个请用空格隔开&gt;</code> 设置管理员； <code>blackfreq &lt;次数&gt;</code> 设置黑名单容错次数</p></blockquote><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><p>控制台下可执行指令，发送 <code>help</code> 获取指令表；管理员在聊天环境下私聊bot执行指令时，加上指令前缀 <code>！</code> 或 <code>!</code></p><table><thead><tr><th align="left">基本</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>help</code></td><td align="left">指令表</td></tr><tr><td align="left"><code>check</code></td><td align="left">查看词库的问答个数和属性设置</td></tr><tr><td align="left"><code>admin</code></td><td align="left">进入管理模式</td></tr><tr><td align="left"><code>learning </code></td><td align="left">开启&#x2F;关闭记录</td></tr><tr><td align="left"><code>reply</code></td><td align="left">开启&#x2F;关闭回复</td></tr><tr><td align="left"><code>voicereply</code></td><td align="left">开启&#x2F;关闭文字转语音回复</td></tr><tr><td align="left"><code>setadmin  &lt;QQ&gt;</code></td><td align="left">设置管理员QQ号，有多个用空格隔开</td></tr></tbody></table><hr><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>globe</code></td><td align="left">开启&#x2F;关闭总词库</td></tr><tr><td align="left"><code>cosmatch</code></td><td align="left">开启&#x2F;关闭问题余弦相似度计算</td></tr><tr><td align="left"><code>cosmatch &lt;匹配率&gt;</code></td><td align="left">设定问题余弦相似度计算匹配率阈值</td></tr><tr><td align="left"><code>blackfreq &lt;次数&gt;</code></td><td align="left">设置黑名单容错次数</td></tr><tr><td align="left"><code>merge &lt;单位/秒&gt;</code></td><td align="left">间隔多长时间合成一次总词库</td></tr><tr><td align="left"><code>learning &lt;单位/秒&gt;</code></td><td align="left">词库链间隔时间</td></tr><tr><td align="left"><code>typefreq &lt;消息类型&gt; &lt;次数&gt;</code></td><td align="left">为消息类型设置回复阈值</td></tr><tr><td align="left"><code>voicereply</code></td><td align="left">开启&#x2F;关闭文字转语音回复</td></tr><tr><td align="left"><code>reply &lt;百分比&gt;</code></td><td align="left">回复概率，若没有触发也不会触发文字转语音</td></tr><tr><td align="left"><code>replywait &lt;基准时间&gt; &lt;浮动时间&gt;</code></td><td align="left">设置回复时的等待时间（基准时间±浮动时间）</td></tr><tr><td align="left"><code>replycd &lt;秒&gt;</code></td><td align="left">设置回复的冷却时间</td></tr><tr><td align="left"><code>voicereply  &lt;百分比&gt;</code></td><td align="left">文字转语音概率，若没有触发将会继续发送文字</td></tr></tbody></table><ul><li>回复阈值：Bot获取到答案时，需要这个答案在词库中<strong>重复出现</strong>的次数<strong>大于或者等于这个阈值</strong>时，才会回复</li><li>黑名单容错次数：根据你设置的敏感词，达到次数自动将对象拉入黑名单后，不记录此人所有的发言。</li><li>全局模式：未启用全局模式时，每个群的词库独立且实时生效（分群词库），上一秒从群中收集到一个词，下一秒就可以在本群中回复这个词。开启全局模式后，bot将采用由所有分群词库定时合成的总词库回复</li><li>词库链间隔时间：发消息后多长时间会进入空窗期，比如设置10s，一个人发完一条消息10s内没人继续说话，就会将10s后的第一条消息作为问，再下一条就是答，可能没什么卵用，毕竟群里经常上话不接下话，不在一个频道。</li><li>问题余弦相似度计算：当词库中无该问题时，会启用相似度计算引擎，会将问题与词库中所有的问题进行相似度计算，选取匹配率最高的进行回答（该阈值可设定），较消耗计算机资源，斟酌开启</li></ul><table><thead><tr><th align="left">群部分</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>grouplist</code></td><td align="left">查看开启记录&#x2F;回复的群列表</td></tr><tr><td align="left"><code>add/remove learning &lt;群号&gt;</code></td><td align="left">添加&#x2F;移除开启记录的群，有多个用空格隔开</td></tr><tr><td align="left"><code>add/remove learnings &lt;群号&gt;</code></td><td align="left">同时添加&#x2F;移除开启记录和回复的群，有多个用空格隔开</td></tr><tr><td align="left"><code>add/remove reply &lt;群号&gt;</code></td><td align="left">添加&#x2F;移除开启回复的群，有多个用空格隔开</td></tr><tr><td align="left"><code>add/remove tag &lt;标签&gt; &lt;群号&gt;</code></td><td align="left">添加&#x2F;移除群标签(移除时不需要带上标签参数)</td></tr><tr><td align="left"><code>add/remove subadmin &lt;群号&gt;</code></td><td align="left">添加&#x2F;移除可自行管理本群词库的群，有多个用空格隔开</td></tr><tr><td align="left"><code>add/remove unmerge &lt;群号&gt;</code></td><td align="left">添加&#x2F;移除不录入总词库的群，有多个用空格隔开</td></tr></tbody></table><ul><li>群标签：群往往带有一些<strong>属性</strong>，例如xxx游戏群，xxx交流群，这时候可以为群添加相应的标签，在记录词库时，会<strong>记录在相应标签的词库</strong>内，这样在回复时，只会在<strong>相应标签词库内寻找答案</strong>，一个群可以拥有<strong>多个标签，支持中文</strong></li></ul><table><thead><tr><th align="left">文字转语音</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>setvoicept  &lt;训练集&gt;</code></td><td align="left">选择音源合成时的训练模型</td></tr><tr><td align="left"><code>uploadwav</code></td><td align="left">上传音源文件</td></tr></tbody></table><table><thead><tr><th align="left">快速删除</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>fastdelete</code></td><td align="left">更改快速删除功能的使用权限</td></tr><tr><td align="left"><code>settemp</code> &lt;条数&gt;</td><td align="left">设置单个群中消息缓存最大数目</td></tr></tbody></table><ul><li>&#96;快速删除：在开启回复的群中，向Bot所发送的消息回复<code>!d</code> 、<code>!delete</code> 、<code>！d</code> 、<code>！delete</code> 即可在词库中删除该回复</li></ul><table><thead><tr><th align="left">定时任务</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>add/remove autotask &lt;任务名称&gt;</code></td><td align="left">添加&#x2F;移除定时任务</td></tr><tr><td align="left"><code>autotaskinfo</code></td><td align="left">查看定时任务详情</td></tr><tr><td align="left"><code>autotaskcommand</code></td><td align="left">查看定时任务中的特殊指令</td></tr></tbody></table><h2 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h2><hr><p><strong>ChatLearning</strong>在2.9.5版本中加入了定时任务功能，可以自定义地定时执行<strong>ChatLearning</strong>中的指令</p><p><strong>注：若发现输入正确却无法解析内容，请检查txt文件编码是否为UTF-8</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;这是一个定时任务的模板，程序会自动解析带标记的行&#x27;&#x27;&#x27;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;请创建一个新的txt文件放置AutoTask文件夹下来自定义你的任务，文件名即是任务名&#x27;&#x27;&#x27;</span><br><br><span class="hljs-string">&#x27;&#x27;</span>开头使用<span class="hljs-string">&quot;#&quot;</span>来标记任务的执行日期<span class="hljs-string">&#x27;&#x27;</span><br>如<span class="hljs-string">&quot;每日&quot;</span>：<br><span class="hljs-comment">#everyday</span><br>或是<span class="hljs-string">&quot;周一 周日&quot;</span>：<br><span class="hljs-comment">#w1 w7</span><br>还可以是<span class="hljs-string">&quot;每2天&quot;</span>:<br><span class="hljs-comment">#x2</span><br>亦或是<span class="hljs-string">&quot;具体日期&quot;</span>(不足十位请补<span class="hljs-number">0</span>，如<span class="hljs-number">5</span>→05)：<br><span class="hljs-comment">#2022-08-30</span><br><br><span class="hljs-string">&#x27;&#x27;</span>开头使用<span class="hljs-string">&quot;@&quot;</span>来标记执行结果发送的QQ号<span class="hljs-string">&#x27;&#x27;</span><br>如：<br><span class="hljs-meta">@<span class="hljs-number">123456</span></span><br><br><span class="hljs-string">&#x27;&#x27;</span>开头使用<span class="hljs-string">&quot;*&quot;</span>来标记任务的执行时间<span class="hljs-string">&#x27;&#x27;</span><br>如(请使用英文冒号哦，不足十位请补<span class="hljs-number">0</span>，如<span class="hljs-number">5</span>→05)：<br>*05:05<br><br><span class="hljs-string">&#x27;&#x27;</span>开头使用<span class="hljs-string">&quot;/&quot;</span>来标记任务所需执行的指令<span class="hljs-string">&#x27;&#x27;</span><br>如(一个指令对应一行)：<br>/check<br>/autodelete<br><br>以下是示例（每天的<span class="hljs-number">12</span>点和<span class="hljs-number">23</span>点<span class="hljs-number">59</span>分，按顺序执行check，grouplist指令，并将结果发送给<span class="hljs-number">123456</span>）：<br><span class="hljs-comment">#everyday</span><br><span class="hljs-meta">@<span class="hljs-number">123456</span></span><br>*<span class="hljs-number">12</span>:<span class="hljs-number">00</span> <span class="hljs-number">23</span>:<span class="hljs-number">59</span><br>/check<br>/grouplist<br><br>-------------------<br>在自动任务中有一些特殊指令：<br>自动清理词库<span class="hljs-string">&quot;autodelete&quot;</span><br>发送群消息<span class="hljs-string">&quot;sendgroupmessage &lt;群号&gt; &lt;消息&gt;&quot;</span><br>发送群图片<span class="hljs-string">&quot;sendgroupmessageimage &lt;群号&gt; &lt;图片文件的绝对路径&gt;&quot;</span><br>发送好友消息<span class="hljs-string">&quot;sendfriendmessage &lt;好友QQ&gt; &lt;消息&gt;&quot;</span><br>发送好友图片<span class="hljs-string">&quot;sendfriendmessageimage &lt;好友QQ&gt; &lt;图片文件的绝对路径&gt;&quot;</span><br>在&lt;消息&gt;这个参数中，可以附带一些指定的标记，程序会将这些标记替换成相应的结果：<br>当前年：&#123;year&#125;<br>当前月：&#123;month&#125;<br>当前日：&#123;day&#125;<br>换行：&#123;n&#125;<br>如：<br>/sendgroupmessage <span class="hljs-number">123456</span> 今天是&#123;year&#125;年&#123;month&#125;月&#123;day&#125;日！&#123;n&#125;大家好啊！<br>-------------------<br><br></code></pre></td></tr></table></figure><h2 id="管理模式"><a href="#管理模式" class="headerlink" title="管理模式"></a>管理模式</h2><ul><li>词库管理：模糊 <code>搜索/查看/删除</code> <code>所有群/指定群</code> 的词库</li><li>过滤：自定义无用关键词，也可以通过在删除答案时前加<code>add</code>来直接添加进过滤列表</li><li>黑名单：自定义敏感关键词，不记录且将对象拉入黑名单，用 <code>blackfreq <次数></code> 自定义容错次数。</li><li>自动清理词库：删除词库中仅出现过单次的条目和被过滤的条目</li><li>添加定时任务：使用定时任务定义的语法添加定时任务</li><li>添加自定义回复：为词库添加回复，问答皆可除视频、文件任意形式的消息(只要QQ能发出来)，同时为答案定义<strong>权重(词库中每个答案都有一个权重，意为答案出现过的次数)</strong></li></ul><h2 id="文字转语音"><a href="#文字转语音" class="headerlink" title="文字转语音"></a><strong>文字转语音</strong></h2><p><a href="https://github.com/Nana-Miko/ChatLearning/blob/master/ToVoice/ToVoice.md">ChatLearning—ToVoice</a></p><h2 id="Q-A"><a href="#Q-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><p><strong>Q：ChatLearning</strong>的功能是什么？</p><p><strong>A：ChatLearning</strong>可以自动的从群聊中收集聊天记录，并且将这些聊天记录整理成一个<strong>问&amp;答</strong>的词库，当有人发送的消息与词库中的”<strong>问</strong>“匹配时，会从“<strong>答</strong>”中随机抽取其中一个回复在群聊中</p><hr><p><strong>Q</strong>：打开软件后，我应该如何使用？</p><p><strong>A</strong>：首先应添加需要bot记录的群号，然后开启记录功能（输入<code>help</code>可查看到对应指令）</p><hr><p><strong>Q</strong>：要收集多久bot才会开始回复呢？</p><p><strong>A</strong>：收集的时间完全由自己决定，理论上时间越久，效果会更好且更加有趣</p><hr><p><strong>Q</strong>：我要怎么才能让bot回复？</p><p><strong>A</strong>：首先应添加需要bot回复的群号，然后开启回复功能（输入<code>help</code>可查看到对应指令）</p><hr><p><strong>Q</strong>：目录下的<code>.cl</code>和<code>.clc</code>文件是什么，我可以删除它吗？</p><p><strong>A</strong>：<code>.cl</code>文件是<strong>ChatLearning</strong>所缓存在本地的词库，它的文件名就是所对应的QQ群号，如果你觉得不需要这个词库了，可以在<strong>ChatLearning</strong>退出后将它删除。<code>.clc</code>文件是<strong>ChatLearning</strong>的配置文件，删除后<strong>ChatLearning</strong>会随即崩溃</p><hr><p><strong>Q</strong>：目录下的<code>.cl</code>文件太大太占空间了怎么办？</p><p><strong>A</strong>：一般来说不是每天都隔一会99+的群聊，是不会很占空间的， 目前只能选择进入管理模式手动清理一些不需要的回复，后续会更新根据记录的时间批量删除</p>]]></content>
    
    
    <categories>
      
      <category>QQbot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>QQbot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手把手教你用新版OBS虚拟摄像头</title>
    <link href="/2023/12/10/Windows_obs/"/>
    <url>/2023/12/10/Windows_obs/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本教程基于B站<a href="https://www.bilibili.com/read/cv11603378/%E7%BC%96%E5%86%99">https://www.bilibili.com/read/cv11603378/编写</a></p></blockquote><h1 id="零、前言说明"><a href="#零、前言说明" class="headerlink" title="零、前言说明"></a>零、前言说明</h1><p><strong>本教程仅适用于最新版OBS，主版本号30（版本26基本与此一样）</strong></p><h1 id="一、下载安装"><a href="#一、下载安装" class="headerlink" title="一、下载安装"></a>一、下载安装</h1><ol><li><p>下载方式有两种：</p></li><li><ul><li><p><strong>官网下载：</strong><a href="https://obsproject.com/">https://obsproject.com</a></p><p>服务器在国外，<strong>速度可能较慢</strong>，你可以尝试使用下面的方法下载。</p></li><li><p><strong>国内镜像：</strong><a href="https://mirror.tuna.tsinghua.edu.cn/">https://mirror.tuna.tsinghua.edu.cn</a></p><p>清华大学TUNA镜像站，右侧栏<strong>“获取下载链接”–应用软件–OBS–选择合适的版本下载</strong>即可（注意选择那个<strong>带有“Installer”字样的</strong>，括号里是exe，那个是安装包，zip是便携版）。</p></li></ul></li><li><p>打开安装包，一路下一步安装就行，与普通软件安装没什么两样，安装位置任意选。</p></li></ol><h1 id="二、OBS的简单配置"><a href="#二、OBS的简单配置" class="headerlink" title="二、OBS的简单配置"></a>二、OBS的简单配置</h1><p>打开OBS Studio软件。</p><ul><li><p>可以使用自动配置向导，选择最后一项<strong>“我只使用虚拟摄像机”</strong>即可。</p><p>注：OBS 26版本无此选项，此时你应该选择“取消”</p></li></ul><p><img src="/img/obs/image-20231210203435938.png" srcset="/img/loading.gif" lazyload alt="image-20231210203435938"></p><p>之后选择<strong>“下一步”–“应用设置”</strong></p><ul><li><p>（可选步骤）修改虚拟摄像头的输出大小</p><p>在OBS主程序菜单栏左上角<strong>“文件”</strong>中，找到<strong>“设置”</strong></p><p>你可以在“设置”窗口的“视频”选项卡中找到输出分辨率和帧率的设置</p><p>电脑配置较差的用户可以参考我的设置</p></li></ul><p><img src="/img/obs/image-20231210203512874.png" srcset="/img/loading.gif" lazyload alt="image-20231210203512874"></p><p><strong>不明白各参数什么意思的可以直接照搬我的设置，或者保持默认不动。</strong></p><h1 id="三、准备虚拟视频"><a href="#三、准备虚拟视频" class="headerlink" title="三、准备虚拟视频"></a>三、准备虚拟视频</h1><p>实现录制一个视频，用来虚拟化</p><p>注意此视频将会用作虚拟视频效果</p><h1 id="四、编辑和启动虚拟摄像头"><a href="#四、编辑和启动虚拟摄像头" class="headerlink" title="四、编辑和启动虚拟摄像头"></a>四、编辑和启动虚拟摄像头</h1><ul><li>回到主界面，在下方的<strong>“来源”栏下点击“+”</strong>加号，添加一个<strong>“媒体源”</strong></li></ul><p><img src="/img/obs/image-20231210203640263.png" srcset="/img/loading.gif" lazyload alt="image-20231210203640263"></p><p><img src="/img/obs/image-20231210203654429.png" srcset="/img/loading.gif" lazyload alt="image-20231210203654429"></p><ul><li><strong>点击“浏览”，选择刚才录制好的视频文件</strong></li></ul><p><img src="/img/obs/image-20231210203715094.png" srcset="/img/loading.gif" lazyload alt="image-20231210203715094"></p><p>选择好文件后，<strong>一定记得勾选“循环”！</strong></p><p>此时上方可能不会立刻出现视频的预览，<strong>点击“确定”，视频就出现了</strong>。</p><p>如果没有视频显示在预览的画面里，尝试修改<strong>“在可用时使用硬件编码”</strong>这一选项</p><p>注：如果想再次调出这个界面，双击“来源”栏里的“媒体源”即可。</p><ul><li>理论上的视频应该是铺满画面的，如果没有，那就<strong>右键视频的画面–变换–比例适配屏幕</strong>。</li></ul><p><img src="/img/obs/image-20231210203940096.png" srcset="/img/loading.gif" lazyload alt="image-20231210203940096"></p><ul><li><p>下面来启动虚拟摄像头</p><p>单击主界面<strong>右下角“控件”一栏里的“启动虚拟摄像机”</strong></p></li></ul><p><img src="/img/obs/image-20231210203956900.png" srcset="/img/loading.gif" lazyload alt="image-20231210203956900"></p><h1 id="五、在第三方软件里使用虚拟摄像头"><a href="#五、在第三方软件里使用虚拟摄像头" class="headerlink" title="五、在第三方软件里使用虚拟摄像头"></a>五、在第三方软件里使用虚拟摄像头</h1><p>这里以<strong>QQ</strong>电脑版为例</p><ul><li>在<strong>QQ</strong>里找到<strong>“设置”</strong></li></ul><p><img src="/img/obs/image-20231210204103698.png" srcset="/img/loading.gif" lazyload alt="image-20231210204103698"></p><ul><li>在“视频”选项卡里找到<strong>“摄像头”</strong>，设置为<strong>“OBS Virtual Camera”</strong></li><li>打开预览画面</li></ul><p><img src="/img/obs/image-20231210204210755.png" srcset="/img/loading.gif" lazyload alt="image-20231210204210755"></p><p>此时上面应该能显示出你在OBS中设置好的画面，关闭设置界面即可。</p><p>此时大功告成了，QQ视频里会循环播放你录制好的视频</p><ul><li>如果出现如下画面，请检查是否<strong>在OBS内“启动虚拟摄像机”</strong></li></ul><p><img src="/img/obs/image-20231210204307899.png" srcset="/img/loading.gif" lazyload alt="image-20231210204307899"></p><ul><li><p>如果卡了，没画面，则需要打开obs的设置</p><p><img src="/img/obs/image-20231210204357713.png" srcset="/img/loading.gif" lazyload alt="image-20231210204357713"></p><p><img src="/img/obs/image-20231210204448834.png" srcset="/img/loading.gif" lazyload alt="image-20231210204448834"></p></li></ul><p>改为800*600比例</p><br/><p>其他软件将默认摄像头设备改为“OBS Virtual Camera”即可。</p>]]></content>
    
    
    <categories>
      
      <category>手把手教程</category>
      
      <category>OBS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>手把手教程系列</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CTF文件头文件尾汇总</title>
    <link href="/2023/12/09/CTF_misc_fileheader/"/>
    <url>/2023/12/09/CTF_misc_fileheader/</url>
    
    <content type="html"><![CDATA[<blockquote><p>转自<a href="https://blog.csdn.net/Ahuuua/article/details/109165473#/">https://blog.csdn.net/Ahuuua/article/details/109165473#/</a></p></blockquote><p>文件头文件尾汇总：</p><table><thead><tr><th>文件类型</th><th>文件头</th><th>文件尾</th><th>特征</th></tr></thead><tbody><tr><td>JPEG (jpg)</td><td>FFD8FF</td><td>FF D9</td><td>ÿØÿà</td></tr><tr><td>PNG (png)</td><td>89504E47</td><td>AE 42 60 82</td><td>.PNG…</td></tr><tr><td>GIF (gif)</td><td>47494638</td><td>00 3B</td><td>GIF89a</td></tr><tr><td>ZIP Archive (zip)</td><td>504B0304</td><td>50 4B</td><td>PK..</td></tr><tr><td>TIFF (tif)</td><td>49492A00</td><td></td><td></td></tr><tr><td>Windows Bitmap (bmp)</td><td>424D</td><td></td><td>BM</td></tr><tr><td>RAR Archive (rar)</td><td>52617221</td><td></td><td>Rar!…</td></tr><tr><td>Wave (wav)</td><td>57415645</td><td></td><td></td></tr><tr><td>AVI (avi)</td><td>41564920</td><td></td><td></td></tr><tr><td>MPEG (mpg)包含音频数据和视频数据</td><td>000001BA</td><td></td><td></td></tr><tr><td>MPEG (mpg)只包含视频数据</td><td>000001B3</td><td></td><td></td></tr><tr><td>7Z</td><td>377ABCAF271C</td><td></td><td>7z¼¯’</td></tr><tr><td>CAD (dwg)</td><td>41433130</td><td></td><td></td></tr><tr><td>Adobe Photoshop (psd)</td><td>38425053</td><td></td><td></td></tr><tr><td>Rich Text Format (rtf)</td><td>7B5C727466</td><td></td><td></td></tr><tr><td>XML (xml)</td><td>3C3F786D6C</td><td></td><td></td></tr><tr><td>HTML (html)</td><td>68746D6C3E</td><td></td><td></td></tr><tr><td>Email [thorough only] (eml)</td><td>44656C69766572792D646174653A</td><td></td><td></td></tr><tr><td>Outlook Express (dbx)</td><td>CFAD12FEC5FD746F</td><td></td><td></td></tr><tr><td>Outlook (pst)</td><td>2142444E</td><td></td><td></td></tr><tr><td>MS Word&#x2F;Excel (xls.or.doc)</td><td>D0CF11E0</td><td></td><td></td></tr><tr><td>MS Access (mdb)</td><td>5374616E64617264204A</td><td></td><td></td></tr><tr><td>WordPerfect(wpd)</td><td>FF575043</td><td></td><td></td></tr><tr><td>Adobe Acrobat (pdf)</td><td>255044462D312E</td><td></td><td>%PDF</td></tr><tr><td>Quicken (qdf)</td><td>AC9EBD8F</td><td></td><td></td></tr><tr><td>Windows Password (pwl)</td><td>E3828596</td><td></td><td></td></tr><tr><td>Real Audio (ram)</td><td>2E7261FD</td><td></td><td></td></tr><tr><td>Real Media (rm)</td><td>2E524D46</td><td></td><td></td></tr><tr><td>Quicktime (mov)</td><td>6D6F6F76</td><td></td><td></td></tr><tr><td>Windows Media (asf)</td><td>3026B2758E66CF11</td><td></td><td></td></tr><tr><td>MIDI (mid)</td><td>4D546864</td><td></td><td></td></tr><tr><td>Win PE</td><td>4D5A</td><td></td><td>MZ</td></tr><tr><td>ELF</td><td>7F 45 4C 46</td><td></td><td>.ELF</td></tr><tr><td>VMDK</td><td>4B 44 4D</td><td></td><td>KDM</td></tr><tr><td>Java-class</td><td>CA FE BA BE</td><td></td><td>Êþº¾</td></tr></tbody></table><p>另外附一些小知识：</p><h2 id="PNG-png"><a href="#PNG-png" class="headerlink" title="PNG (png)"></a>PNG (png)</h2><p>摘于：<a href="https://blog.csdn.net/bisword/article/details/2777121">https://blog.csdn.net/bisword/article/details/2777121</a><br>文件头：89504E47　　　　　　　　　　　　　　　　　　　　　　文件尾：AE 42 60 82<br>PNG文件，我们会发现，文件的结尾12个字符看起来总应该是这样的：00 00 00 00 49 45 4E 44 AE 42 60 82<br>不难明白，由于数据块结构的定义，IEND数据块的长度总是0（00 00 00 00，除非人为加入信息），数据标识总是IEND（49 45 4E 44），因此，CRC码也总是AE 42 60 82。</p><p><img src="/img/file-header/20201019175155622.png" srcset="/img/loading.gif" lazyload alt="img"><img src="/img/file-header/20201019175206371.png" srcset="/img/loading.gif" lazyload alt="img"></p><p><img src="/img/file-header/1.png" srcset="/img/loading.gif" lazyload alt="img"></p><p>给大家举个例子：</p><p>PNG图像：321*332分辨率  321-&gt;00 00 01 41  332-&gt;00 00 01 4C (也可以搜索十六进制找到标志位)</p><p>也可以根据位直接找到标志位，就是IHDR的后面4字节00 00 01 41为宽度 再后4字节00 00 01 4C为长度</p><p><img src="/img/file-header/20201019175441812.png" srcset="/img/loading.gif" lazyload alt="img"></p><p> 89 50 4E 47 0D 0A 1A 0A 是PNG头部署名域，表示这是一个PNG图片<br>00 00 00 0D 描述IHDR头部的大小。</p><h2 id="zip文件"><a href="#zip文件" class="headerlink" title="zip文件"></a>zip文件</h2><p>摘于：<a href="https://blog.csdn.net/qq_26187985/article/details/83654197">https://blog.csdn.net/qq_26187985/article/details/83654197</a></p><p>压缩源文件数据区：<br>50 4B 03 04：这是头文件标记<br>压缩源文件目录区：<br>50 4B 01 02：目录中文件文件头标记<br>压缩源文件目录结束标志：<br>50 4B 05 06：目录结束标记</p><p>无加密<br>压缩源文件数据区的全局加密应当为00 00  （504B0304两个bytes之后）4位二进制数&lt;&#x3D;&gt;1位十六进制数 16bit&lt;&#x3D;&gt;4位16进制<br>且压缩源文件目录区的全局方式位标记应当为00 00（504B0304四个bytes之后）<br>一个字节表示两个16进制数</p><p>假加密<br>压缩源文件数据区的全局加密应当为00 00<br>且压缩源文件目录区的全局方式位标记应当为09 00</p><p>真加密<br>压缩源文件数据区的全局加密应当为09 00<br>且压缩源文件目录区的全局方式位标记应当为09 00</p><p><img src="/img/file-header/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FodXV1YQ==,size_16,color_FFFFFF,t_70" srcset="/img/loading.gif" lazyload alt="img"></p><p>全局方式位标记的四个数字中只有第二个数字对其有影响，其它的不管为何值，都不影响它的加密属性！<br>第二个数字为奇数时 –&gt;加密<br>第二个数字为偶数时 –&gt;未加密<br>意思是08 00也是未加密 可以改为00 02 04 06 08<br>改为01 03 05 07 09会被加密</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>MISC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决Windows11“为了对电脑进行保护，已经阻止此应用。”</title>
    <link href="/2023/12/08/Windows_bandownload/"/>
    <url>/2023/12/08/Windows_bandownload/</url>
    
    <content type="html"><![CDATA[<p><img src="/img/Windows/image-20231208221039318.png" srcset="/img/loading.gif" lazyload alt="image-20231208221039318"></p><p>有时候安装客户端的时候会遇到这种情况</p><p>然而网上的方法对于家庭版电脑并不适用</p><p>但是我们可以通过命终端来解决</p><p>首先右键开始菜单</p><p><img src="/img/Windows/image-20231208221525986.png" srcset="/img/loading.gif" lazyload alt="image-20231208221525986"></p><p>点击<font color='red'>Windows终端（管理员）</font></p><p>一定要选择管理员终端</p><p>然后切换到exe所在的目录</p><p><img src="/img/Windows/image-20231208221942022.png" srcset="/img/loading.gif" lazyload alt="image-20231208221942022"></p><p>然后输入待安装文件名（不要丢掉后缀名）</p><p><img src="/img/Windows/image-20231208222008686.png" srcset="/img/loading.gif" lazyload alt="image-20231208222008686"></p><p>结束！祝你学得开心！</p>]]></content>
    
    
    <categories>
      
      <category>Windows</category>
      
      <category>报错</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows技术分享</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MuteGames使用手册</title>
    <link href="/2023/12/06/bot_MuteGames/"/>
    <url>/2023/12/06/bot_MuteGames/</url>
    
    <content type="html"><![CDATA[<h1 id="MuteGames"><a href="#MuteGames" class="headerlink" title="MuteGames"></a>MuteGames</h1><p>一个以 <a href="https://github.com/mamoe/mirai">Mirai-Console</a> 为基础开发并为了满足群友PVP需求和抖M需求开发的禁言游戏集合</p><h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><p>插件需要以 <a href="https://github.com/mamoe/mirai">Mirai-Console</a></p><p>为基础，你可以下载 <a href="https://github.com/iTXTech/mirai-console-loader/releases">MCL</a> 作为你的Mirai插件载入器</p><p>与此同时，本插件需要 Mirai 官方插件 </p><p>使用之前请先用参考<a href="#%E6%9D%83%E9%99%90%E8%8A%82%E7%82%B9">权限节点</a>来开启插件权限</p><p><strong>请注意：当用户权限大于等于机器人所在权限时（如机器人是管理员用户为群主），机器人不会对游戏请求做任何回复</strong></p><h2 id="权限节点"><a href="#权限节点" class="headerlink" title="权限节点"></a>权限节点</h2><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">|<span class="hljs-string">- com.evolvedghost.mutegames:*                      The base permission</span><br><span class="hljs-string"></span>|<span class="hljs-string">  </span>|<span class="hljs-string">- com.evolvedghost.mutegames:command.banme       自裁指令</span><br><span class="hljs-string"></span>|<span class="hljs-string">  </span>|<span class="hljs-string">- com.evolvedghost.mutegames:command.blackjack   21点（Blackjack）指令</span><br><span class="hljs-string"></span>|<span class="hljs-string">  </span>|<span class="hljs-string">- com.evolvedghost.mutegames:command.duel        决斗指令</span><br><span class="hljs-string"></span>|<span class="hljs-string">  </span>|<span class="hljs-string">- com.evolvedghost.mutegames:command.mg          MuteGams管理指令</span><br><span class="hljs-string"></span>|<span class="hljs-string">  </span>|<span class="hljs-string">- com.evolvedghost.mutegames:command.roulette    俄罗斯轮盘指令</span><br></code></pre></td></tr></table></figure><p>插件调用的是Mirai自带的权限管理系统，你可以在控制台输入<code>?</code>来获取帮助，通常权限的添加方式为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#permission add <span class="hljs-string">&lt;被许可人 ID&gt;</span> <span class="hljs-string">&lt;权限 ID&gt;</span>    # 授权一个权限</span><br></code></pre></td></tr></table></figure><p>&lt;被许可人 ID&gt; 可以为QQ号或者通配符<code>*</code>来代表所有用户</p><p>&lt;权限 ID&gt; 即上述权限名称，可按照需求添加</p><p>一个例子为：<code>#permission add * com.evolvedghost.mutegames:*</code>，即为所有用户添加本插件所有权限</p><h2 id="插件命令"><a href="#插件命令" class="headerlink" title="插件命令"></a>插件命令</h2><p>插件分为两种命令，一种为普通命令一种为管理员命令</p><p>默认别名为插件预设置的alias，普通命令的别名你可以在Config中更改</p><h3 id="普通命令"><a href="#普通命令" class="headerlink" title="普通命令"></a>普通命令</h3><table><thead><tr><th>指令</th><th>默认别名</th><th>功能</th></tr></thead><tbody><tr><td><code>(#)banMe</code></td><td><code>自裁</code></td><td>自裁（直接获得一个禁言）</td></tr><tr><td><code>(#)banMe [seconds]&lt;Int&gt;</code></td><td><code>自裁 [seconds]&lt;Int&gt;</code></td><td>自定义秒数禁言</td></tr><tr><td><code>(#)duel</code></td><td><code>决斗</code></td><td>决斗指令（两位群友以决斗的方式赢取禁言）</td></tr><tr><td><code>(#)roulette</code></td><td><code>轮盘,俄罗斯轮盘</code></td><td>俄罗斯轮盘赌（以轮盘赌的方式赢取禁言）</td></tr><tr><td><code>(#)blackjack</code></td><td><code>21点</code></td><td>发起#加入一轮21点</td></tr><tr><td><code>(#)blackjack start</code></td><td><code>21点 开始</code></td><td>开启一轮21点</td></tr><tr><td><code>(#)blackjack add</code></td><td><code>21点 拿牌</code></td><td>在21点中拿牌</td></tr><tr><td><code>(#)blackjack stop</code></td><td><code>21点 停牌</code></td><td>在21点中停牌</td></tr><tr><td><code>(#)blackjack giveup</code></td><td><code>21点 投降</code></td><td>在21点中投降</td></tr><tr><td><code>(#)blackjack check</code></td><td><code>21点 看牌</code></td><td>在21点中看牌</td></tr><tr><td><code>(#)blackjack help</code></td><td><code>21点 帮助</code></td><td>获取21点帮助</td></tr></tbody></table><h3 id="管理命令"><a href="#管理命令" class="headerlink" title="管理命令"></a>管理命令</h3><table><thead><tr><th>指令</th><th>默认别名（不可更改）</th><th>功能</th></tr></thead><tbody><tr><td><code>#mg dualStop</code></td><td><code>#mg 停止决斗</code></td><td>停止本群的决斗</td></tr><tr><td><code>#mg reload</code></td><td><code>#mg 重载</code></td><td>重载本插件的配置项</td></tr><tr><td><code>#mg rouletteStop</code></td><td><code>#mg 停止轮盘</code></td><td>停止本群的俄罗斯轮盘</td></tr><tr><td><code>#mg bjStop</code></td><td><code>#mg 停止21点</code></td><td>停止本群的停止21点</td></tr></tbody></table><h2 id="插件配置"><a href="#插件配置" class="headerlink" title="插件配置"></a>插件配置</h2><p>插件的配置项储存在<code>config\com.evolvedghost.mutegames</code>目录下，有以下文件</p><table><thead><tr><th>文件名</th><th>作用</th></tr></thead><tbody><tr><td><code>admin.yml</code></td><td>配置管理员命令和插件基础设置</td></tr><tr><td><code>banMe.yml</code></td><td>配置自裁设置</td></tr><tr><td><code>duel.yml</code></td><td>配置决斗设置</td></tr><tr><td><code>roulette.yml</code></td><td>配置轮盘赌设置</td></tr><tr><td><code>blackjack.yml</code></td><td>配置21点设置</td></tr></tbody></table><p>相应的设置在文件中应有详细注明</p><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>如果您需要自行编译，使用在文件目录使用以下命令即可</p><p>Windows：<code>.#gradlew.bat buildPlugin</code></p><p>Linux：<code>.#gradlew buildPlugin</code></p><p>Mirai版本在2.12以下的用户需要向下兼容包，本项目Release并不会提供此类包，请自行编译，编译指令为：<code>.#gradlew buildPluginLegacy</code></p><p>编译好的jar文件可以在<code>#build#mirai</code>下找到</p><h2 id="特别感谢"><a href="#特别感谢" class="headerlink" title="特别感谢"></a>特别感谢</h2><p><a href="https://github.com/mamoe/mirai">Mirai</a> 提供QQ机器人</p>]]></content>
    
    
    <categories>
      
      <category>QQbot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>QQbot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python实现九宫格切割图片</title>
    <link href="/2023/12/04/python_1_to_9/"/>
    <url>/2023/12/04/python_1_to_9/</url>
    
    <content type="html"><![CDATA[<h4 id="克隆本项目"><a href="#克隆本项目" class="headerlink" title="克隆本项目"></a>克隆本项目</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/W1ndys/</span><span class="hljs-number">1</span>to9-image.git<br></code></pre></td></tr></table></figure><p>然后可以看到项目文件夹</p><p><img src="/img/Python/1-to-9/image-20231204220532722.png" srcset="/img/loading.gif" lazyload alt="image-20231204220532722"></p><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><ol><li>把需要分割的图片复制进文件夹并且命名为 <code>input_image.jpg</code></li><li>在当前目录进命令行执行 <code>python 1.py</code></li><li>看到输出回显之后找 <code>output</code>文件夹就行</li></ol><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>本项目适用于长宽一致的正方形图片，分割最佳效果</p><p>其余比例不适合使用本项目</p><p>非常适合朋友圈九宫格切图</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python小工具</tag>
      
      <tag>Python脚本</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>技能兴鲁2023职业技能大赛网络安全赛项比赛心得</title>
    <link href="/2023/11/30/CTF_think_jnxl2023/"/>
    <url>/2023/11/30/CTF_think_jnxl2023/</url>
    
    <content type="html"><![CDATA[<p>30个队伍排名第18还行，有一个队伍弃权没来，两个队伍作弊被ban了，顺延2名，最终第16，广外和南理的师傅太强了，山警的大哥被ban了不然也是前三<br>11月24就已经打完了，一直没来得及写心得</p><p><img src="/img/jnxl2023/1701356901716.jpg" srcset="/img/loading.gif" lazyload alt="1701356901716"><br>可能是因为团队赛吧<br>感觉比科来打的好点<br>有好几个题都是差一点<br>我交了两个简单题，逆了一个misc的pyc，也是没拖后腿<br>misc这个题是很有意思的，压缩包有密码，可以暴力破解出来，然后三个附件，其中一个是一首诗，很有意思，但是不知道这首诗是有什么用，这题就差一点了，没做出来。<br>发现了自己还有很多东西没学没掌握好，re的花指令，动态调试，老东西直接秒了的题，我不会</p><p>见到了西邮的师傅</p><p>另外说一下对组委会的印象<br>评价是一坨稀烂<br>连个纪念品都没有，也没手提包，整场下来就给个参赛证，然后报告厅像个教室，甚至还不如我们的教室大（<br>进赛场之后桌子上一人一份伙食（一包奶一个面包一根火腿肠，我的天我们还以为这是早饭，没想到这是午饭）<br>中途上了一遍零食（好丽友＋一根火腿肠）爆笑如雷了，在济南都是组委包吃住，酒店随便吃的<br>还有更抽象的<br>上午10:30开赛，到时间准时开赛准时断电，布置赛场也偷工减料了吧，供电不足直接断电了，抢修了一个小时导致比赛延后了<br>然后中途上了一次电，信号屏蔽仪直接嘎嘣冒烟，当场炸了，还有好几位师傅的电源适配器给烧了（<del>byd这才是应急响应是吧</del></p><p>这也是裁判长最忙的一次，山警大哥应该是比赛过程中询问wp，说的很含糊然后就ban了，还有带手机被听见了，但是没被逮住，辗优就在我隔壁，很强的一个热点信号</p><p>三等奖，也算是没白来，威海那个去了大概能拿个一等，他们组委举办的也还行，就是路费太高了，没奖金没报销<br>总的来说还是得练，师傅们觉得一把梭的题我要搞半天</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>比赛心得</category>
      
      <category>省赛</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>技能兴鲁</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实验七 最小生成树和最短路径的实现</title>
    <link href="/2023/11/30/DS_test7/"/>
    <url>/2023/11/30/DS_test7/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cyberdownload.anrunlu.net/Fv5QkbY1G5LDg_28R1J8Oief5nmC" srcset="/img/loading.gif" lazyload alt="Fv5QkbY1G5LDg_28R1J8Oief5nmC"></p><h1 id="Prim算法"><a href="#Prim算法" class="headerlink" title="Prim算法"></a>Prim算法</h1><blockquote><p>没听课（）教材代码，复制过来了</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/******************************* </span><br><span class="hljs-comment">   对应教材6.4.1节，Prim算法 </span><br><span class="hljs-comment">********************************/</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MaxSize = <span class="hljs-number">10</span>;                   <span class="hljs-comment">//图中最多顶点个数</span><br><span class="hljs-type">int</span> visited[MaxSize] = &#123;<span class="hljs-number">0</span>&#125;;              <span class="hljs-comment">//全局数组变量visited初始化</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">DataType</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MGraph</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>   <span class="hljs-built_in">MGraph</span>(DataType a[ ], <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> e);     <span class="hljs-comment">//构造函数，建立具有n个顶点e条边的图</span><br>   ~<span class="hljs-built_in">MGraph</span>( )&#123; &#125;;                        <span class="hljs-comment">//析构函数</span><br> <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Prim</span><span class="hljs-params">(<span class="hljs-type">int</span> v)</span></span>;<br><span class="hljs-keyword">private</span>:<br>    DataType vertex[MaxSize];           <span class="hljs-comment">//存放图中顶点的数组</span><br>    <span class="hljs-type">int</span> edge[MaxSize][MaxSize];           <span class="hljs-comment">//存放图中边的数组</span><br>    <span class="hljs-type">int</span> vertexNum, edgeNum;              <span class="hljs-comment">//图的顶点数和边数</span><br><br> <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">MinEdge</span><span class="hljs-params">(<span class="hljs-type">int</span> r[ ], <span class="hljs-type">int</span> n)</span></span>;<br>&#125;;<br>  <br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">DataType</span>&gt;<br>MGraph&lt;DataType&gt; :: <span class="hljs-built_in">MGraph</span>(DataType a[ ], <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> e) <br>&#123;<br>   <span class="hljs-type">int</span> i, j, k, w;<br>   vertexNum = n; edgeNum = e;<br>   <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; vertexNum; i++)          <span class="hljs-comment">//存储顶点</span><br>   vertex[i] = a[i];<br>   <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; vertexNum; i++)          <span class="hljs-comment">//初始化邻接矩阵</span><br> <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; vertexNum; j++)<br>   <span class="hljs-keyword">if</span> (i == j)<br>   edge[i][j] = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">else</span><br>   edge[i][j] = <span class="hljs-number">100</span>;               <span class="hljs-comment">//假设边上权的最大值是100             </span><br>   <span class="hljs-keyword">for</span> (k = <span class="hljs-number">0</span>; k &lt; edgeNum; k++)           <span class="hljs-comment">//依次输入每一条边</span><br>   &#123;<br>   cout &lt;&lt; <span class="hljs-string">&quot;请输入边依附的两个顶点的编号，以及边上的权值：&quot;</span>;<br>cin &gt;&gt; i &gt;&gt; j &gt;&gt; w;                       <span class="hljs-comment">//输入边依附的两个顶点的编号</span><br>edge[i][j] = w; edge[j][i] = w;           <span class="hljs-comment">//置有边标志</span><br>   &#125;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">DataType</span>&gt;<br><span class="hljs-type">void</span> MGraph&lt;DataType&gt; :: <span class="hljs-built_in">Prim</span>(<span class="hljs-type">int</span> v)                           <span class="hljs-comment">//从顶点v出发</span><br>&#123;   <br><span class="hljs-type">int</span> i, j, k;<br><span class="hljs-type">int</span> adjvex[MaxSize], lowcost[MaxSize];<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; vertexNum; i++)             <span class="hljs-comment">//初始化辅助数组</span><br>&#123;<br>lowcost[i] = edge[v][i]; adjvex[i] = v;<br>&#125;<br>lowcost[v] = <span class="hljs-number">0</span>;                         <span class="hljs-comment">//将顶点v加入集合U</span><br><span class="hljs-keyword">for</span> (k = <span class="hljs-number">1</span>; k &lt; vertexNum; k++)            <span class="hljs-comment">//迭代n-1次</span><br>&#123;<br>j = <span class="hljs-built_in">MinEdge</span>(lowcost, vertexNum);       <span class="hljs-comment">//寻找最短边的邻接点j</span><br>      cout &lt;&lt; <span class="hljs-string">&quot;(&quot;</span> &lt;&lt; vertex[j] &lt;&lt; <span class="hljs-string">&quot;,&quot;</span> &lt;&lt; vertex[adjvex[j]] &lt;&lt; <span class="hljs-string">&quot;)&quot;</span> &lt;&lt; lowcost[j] &lt;&lt; endl; <br>lowcost[j] = <span class="hljs-number">0</span>;                       <span class="hljs-comment">//顶点j加入集合U</span><br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; vertexNum; i++)          <span class="hljs-comment">//调整辅助数组</span><br>        <span class="hljs-keyword">if</span> (edge[i][j] &lt; lowcost[i]) &#123;<br>lowcost[i] = edge[i][j]; <br>adjvex[i] = j;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">DataType</span>&gt;<br><span class="hljs-type">int</span> MGraph&lt;DataType&gt; :: <span class="hljs-built_in">MinEdge</span>(<span class="hljs-type">int</span> r[ ], <span class="hljs-type">int</span> n)<br>&#123;<br><span class="hljs-type">int</span> index = <span class="hljs-number">0</span>, min = <span class="hljs-number">100</span>;           <span class="hljs-comment">//此处如果仅记载最小值下标会有bug </span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++)<br><span class="hljs-keyword">if</span> (r[i] != <span class="hljs-number">0</span> &amp;&amp; r[i] &lt; min)<br>&#123;<br>min = r[i]; index = i;<br>&#125;<br><span class="hljs-keyword">return</span> index;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">( )</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">/*测试数据使用教材 图6-16 所示带权无向图， 输入边依次为 </span><br><span class="hljs-comment">(0 1 34)(0 2 46)(0 5 19)(1 4 12)(2 3 17)(2 5 25)(3 4 38)(3 5 25)(4 5 26) */</span> <br><span class="hljs-type">char</span> ch[ ]=&#123;<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;C&#x27;</span>,<span class="hljs-string">&#x27;D&#x27;</span>,<span class="hljs-string">&#x27;E&#x27;</span>,<span class="hljs-string">&#x27;F&#x27;</span>&#125;;       <br>MGraph&lt;<span class="hljs-type">char</span>&gt; MG&#123;ch, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>&#125;;             <br>MG.<span class="hljs-built_in">Prim</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>数据结构作业</category>
      
      <category>实验</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构作业</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实验六 图的构建与遍历</title>
    <link href="/2023/11/30/DS_test6/"/>
    <url>/2023/11/30/DS_test6/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cyberdownload.anrunlu.net/FqL91OBssRscbirgk2-0714eojo6" srcset="/img/loading.gif" lazyload alt="img"></p><h1 id="邻接矩阵"><a href="#邻接矩阵" class="headerlink" title="邻接矩阵"></a>邻接矩阵</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MaxSize = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> visited[MaxSize] = &#123; <span class="hljs-number">0</span> &#125;;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">DataType</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MGraph</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">MGraph</span>(DataType a[], <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> e);<br>    ~<span class="hljs-built_in">MGraph</span>() &#123;&#125;;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DFTraverse</span><span class="hljs-params">(<span class="hljs-type">int</span> v)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">BFTraverse</span><span class="hljs-params">(<span class="hljs-type">int</span> v)</span></span>;<br><span class="hljs-keyword">private</span>:<br>    DataType vertex[MaxSize];<br>    <span class="hljs-type">int</span> edge[MaxSize][MaxSize];<br>    <span class="hljs-type">int</span> vertexNum, edgeNum;<br>&#125;;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">DataType</span>&gt;<br>MGraph&lt;DataType&gt;::<span class="hljs-built_in">MGraph</span>(DataType a[], <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> e) &#123;<br>    <span class="hljs-type">int</span> i, j, k;<br>    vertexNum = n; edgeNum = e;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; vertexNum; i++)<br>        vertex[i] = a[i];<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; vertexNum; i++)<br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; vertexNum; j++)<br>            edge[i][j] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (k = <span class="hljs-number">0</span>; k &lt; edgeNum; k++) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;请输入边依附的两个顶点的编号：&quot;</span>;<br>        cin &gt;&gt; i &gt;&gt; j;<br>        edge[i][j] = <span class="hljs-number">1</span>; edge[j][i] = <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">DataType</span>&gt;<br><span class="hljs-type">void</span> MGraph&lt;DataType&gt;::<span class="hljs-built_in">DFTraverse</span>(<span class="hljs-type">int</span> v) &#123;<br>    cout &lt;&lt; vertex[v]; visited[v] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; vertexNum; j++)<br>        <span class="hljs-keyword">if</span> (edge[v][j] == <span class="hljs-number">1</span> &amp;&amp; visited[j] == <span class="hljs-number">0</span>) <span class="hljs-built_in">DFTraverse</span>(j);<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">DataType</span>&gt;<br><span class="hljs-type">void</span> MGraph&lt;DataType&gt;::<span class="hljs-built_in">BFTraverse</span>(<span class="hljs-type">int</span> v) &#123;<br>    <span class="hljs-type">int</span> w, j, Q[MaxSize];<br>    <span class="hljs-type">int</span> front = <span class="hljs-number">-1</span>, rear = <span class="hljs-number">-1</span>;<br>    cout &lt;&lt; vertex[v]; visited[v] = <span class="hljs-number">1</span>; Q[++rear] = v;<br>    <span class="hljs-keyword">while</span> (front != rear) &#123;<br>        w = Q[++front];<br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; vertexNum; j++)<br>            <span class="hljs-keyword">if</span> (edge[w][j] == <span class="hljs-number">1</span> &amp;&amp; visited[j] == <span class="hljs-number">0</span>) &#123;<br>                cout &lt;&lt; vertex[j]; visited[j] = <span class="hljs-number">1</span>; Q[++rear] = j;<br>            &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> i;<br>    string ch[] = &#123; <span class="hljs-string">&quot;V1&quot;</span>,<span class="hljs-string">&quot;V2&quot;</span>,<span class="hljs-string">&quot;V3&quot;</span>,<span class="hljs-string">&quot;V4&quot;</span>,<span class="hljs-string">&quot;V5&quot;</span> &#125;;<br>    MGraph&lt;string&gt; MG&#123; ch, <span class="hljs-number">5</span>, <span class="hljs-number">6</span> &#125;;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; MaxSize; i++)<br>        visited[i] = <span class="hljs-number">0</span>;<br>    cout &lt;&lt; <span class="hljs-string">&quot;\n深度优先遍历序列是：&quot;</span> &lt;&lt; endl;<br>    MG.<span class="hljs-built_in">DFTraverse</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; MaxSize; i++)<br>        visited[i] = <span class="hljs-number">0</span>;<br>    cout &lt;&lt; <span class="hljs-string">&quot;\n广度优先遍历序列是：&quot;</span> &lt;&lt; endl;<br>    MG.<span class="hljs-built_in">BFTraverse</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="邻接表"><a href="#邻接表" class="headerlink" title="邻接表"></a>邻接表</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">EdgeNode</span><span class="hljs-comment">//定义边表结点</span><br>&#123;<br><span class="hljs-type">int</span> adjvex;<span class="hljs-comment">//邻接点域</span><br>EdgeNode* next;<br>&#125;;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">DataType</span>&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">VertexNode</span><span class="hljs-comment">//定义顶点表结点</span><br>&#123;<br>DataType vertex;<br>EdgeNode* firstEdge;<br>&#125;;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MaxSize = <span class="hljs-number">10</span>;<span class="hljs-comment">//图的最多顶点数</span><br><span class="hljs-type">int</span> visited[MaxSize] = &#123; <span class="hljs-number">0</span> &#125;;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">DataType</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ALGraph</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">ALGraph</span>(DataType a[], <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> e);<span class="hljs-comment">//构造函数</span><br>~<span class="hljs-built_in">ALGraph</span>();<span class="hljs-comment">//析构函数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DFTraverse</span><span class="hljs-params">(<span class="hljs-type">int</span> v)</span></span>;<span class="hljs-comment">//深度</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">BEFraverse</span><span class="hljs-params">(<span class="hljs-type">int</span> v)</span></span>;<span class="hljs-comment">//广度</span><br><span class="hljs-keyword">private</span>:<br>VertexNode&lt;DataType&gt; adjlist[MaxSize];<span class="hljs-comment">//存放顶点表</span><br><span class="hljs-type">int</span> vertexNum, edgeNum;<span class="hljs-comment">//图的顶点数和边数</span><br>&#125;;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">DataType</span>&gt;<br>ALGraph&lt;DataType&gt;::<span class="hljs-built_in">ALGraph</span>(DataType a[], <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> e)<br>&#123;<br><span class="hljs-type">int</span> i, j, k;<br>EdgeNode* s = <span class="hljs-literal">nullptr</span>;<br>vertexNum = m;<br>edgeNum = e;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; vertexNum; i++)<br>&#123;<br>adjlist[i].vertex = a[i];<br>adjlist[i].firstEdge = <span class="hljs-literal">NULL</span>;<br>&#125;<br><span class="hljs-keyword">for</span> (k = <span class="hljs-number">0</span>; k &lt; edgeNum; k++)<span class="hljs-comment">//依次输入每一条边</span><br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;输入边所依付的两个顶点的编号：&quot;</span>;<br>cin &gt;&gt; i &gt;&gt; j;<br>s = <span class="hljs-keyword">new</span> EdgeNode;<br>s-&gt;adjvex = j;<br>s-&gt;next = adjlist[i].firstEdge;<br>adjlist[i].firstEdge = s;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">DataType</span>&gt;<br>ALGraph&lt;DataType&gt;::~<span class="hljs-built_in">ALGraph</span>()<br>&#123;<br>EdgeNode* p = <span class="hljs-literal">NULL</span>, * q = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; vertexNum; i++)<br>&#123;<br>p = q = adjlist[i].firstEdge;<br><span class="hljs-keyword">while</span> (p != <span class="hljs-literal">NULL</span>)<br>&#123;<br>p = p-&gt;next;<br><span class="hljs-keyword">delete</span> q;<br>q = p;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">DataType</span>&gt;<br><span class="hljs-type">void</span> ALGraph&lt;DataType&gt;::<span class="hljs-built_in">DFTraverse</span>(<span class="hljs-type">int</span> v)<br>&#123;<br><span class="hljs-type">int</span> j;<br>EdgeNode* p = null;<br>cout &lt;&lt; adjlist[v].vertex;<br>visited[v] = <span class="hljs-number">1</span>;<br>p = adjlist[v].firstEdge;<br><span class="hljs-keyword">while</span> (p != <span class="hljs-literal">NULL</span>)<br>&#123;<br>j = p-&gt;adjvex;<br><span class="hljs-keyword">if</span> (visited[j]==<span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-built_in">DFTraverse</span>(j);<br>&#125;<br>p = p-&gt;next;<br>&#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//测试数据是图6-20(a)，边是(0 1)(0 3)(0 4)(1 2)(2 4)(3 2)(3 4)</span><br>string ch[] = &#123; <span class="hljs-string">&#x27;V1&#x27;</span>,<span class="hljs-string">&#x27;V2&#x27;</span>,<span class="hljs-string">&#x27;V3&#x27;</span>,<span class="hljs-string">&#x27;V4&#x27;</span>,<span class="hljs-string">&#x27;V5&#x27;</span> &#125;;<br><span class="hljs-type">int</span> i;<br><span class="hljs-function">ALGraph&lt;<span class="hljs-type">char</span>&gt; <span class="hljs-title">ALG</span><span class="hljs-params">(ch, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>)</span></span>;               <span class="hljs-comment">//建立具有5个顶点6条边的有向图</span><br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; MaxSize; i++)<br>visited[i] = <span class="hljs-number">0</span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;深度优先遍历序列是：&quot;</span>;<br>ALG.<span class="hljs-built_in">DFTraverse</span>(<span class="hljs-number">0</span>);                       <span class="hljs-comment">//从顶点0出发进行深度优先遍历</span><br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; MaxSize; i++)<br>visited[i] = <span class="hljs-number">0</span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;广度优先遍历序列是：&quot;</span>;<br>ALG.<span class="hljs-built_in">BFTraverse</span>(<span class="hljs-number">0</span>);                      <span class="hljs-comment">//从顶点0出发进行广度优先遍历</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>数据结构作业</category>
      
      <category>实验</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构作业</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网络服务扫描实验</title>
    <link href="/2023/11/28/Network_Service_Scanning_Experiments/"/>
    <url>/2023/11/28/Network_Service_Scanning_Experiments/</url>
    
    <content type="html"><![CDATA[<blockquote><p>老师发了个ppt复现一下，顺便发在博客上了</p></blockquote><h1 id="网络服务扫描实验"><a href="#网络服务扫描实验" class="headerlink" title="网络服务扫描实验"></a>网络服务扫描实验</h1><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p>Metasploit工具                        1套</p><p>PC机（win10）                        1台</p><h2 id="预习要求"><a href="#预习要求" class="headerlink" title="预习要求"></a>预习要求</h2><p>做好实验预习，复习网络服务有关内容。</p><p>熟悉实验过程和基本操作流程。</p><p>做好预习报告。</p><h2 id="实验任务"><a href="#实验任务" class="headerlink" title="实验任务"></a>实验任务</h2><p>扫描当前机器的网络服务</p><h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><p>一台安装了Metasploit的计算机。</p><h2 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h2><p>1.Telnet服务相关知识</p><p>2.SSH服务相关知识</p><p>3.数据库相关知识</p><h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h2><h3 id="1-Telnet-version模块"><a href="#1-Telnet-version模块" class="headerlink" title="1.Telnet_version模块"></a>1.Telnet_version模块</h3><h4 id="（1）使用use命令使用telnet-version模块。"><a href="#（1）使用use命令使用telnet-version模块。" class="headerlink" title="（1）使用use命令使用telnet_version模块。"></a>（1）使用use命令使用telnet_version模块。</h4><p> msf &gt; use auxiliary&#x2F;scanner&#x2F;telnet&#x2F;telnet_version</p><p><img src="/img/Metasploit-review/ppp-20231128184410056.png" srcset="/img/loading.gif" lazyload alt="ppp-20231128184410056"></p><h4 id="（2）通过show命令查看模块的设置选项。"><a href="#（2）通过show命令查看模块的设置选项。" class="headerlink" title="（2）通过show命令查看模块的设置选项。"></a>（2）通过show命令查看模块的设置选项。</h4><p> msf auxiliary(telnet_version) &gt; show options</p><p><img src="/img/Metasploit-review/ppp-20231128184439505.png" srcset="/img/loading.gif" lazyload alt="ppp-20231128184439505"></p><blockquote><p>其中Name表示的是需要设置的选项的名称，Current表示的是该选项目前默认的设置值，Setting表示是否进行了设置，Required则表示的是该选项是否必须设置，yes表示必须进行设置，而no则表示可以设置也可以不进行设置。Description则表示的是对选项的介绍。最重要的选项是RHOSTS，即目标地址范围或CIDR标识符。也就是要扫描的地址范围设置。</p></blockquote><h4 id="（3）使用set命令设置目标地址范围。"><a href="#（3）使用set命令设置目标地址范围。" class="headerlink" title="（3）使用set命令设置目标地址范围。"></a>（3）使用set命令设置目标地址范围。</h4><p> msf auxiliary(telnet_version) &gt; set rhosts 10.10.10.0&#x2F;24</p><p>设置后的界面显示如下所示：</p><p><img src="/img/Metasploit-review/ppp-20231128184617822.png" srcset="/img/loading.gif" lazyload alt="ppp-20231128184617822"></p><h4 id="（4）使用set命令设置并发线程的数量。"><a href="#（4）使用set命令设置并发线程的数量。" class="headerlink" title="（4）使用set命令设置并发线程的数量。"></a>（4）使用set命令设置并发线程的数量。</h4><p> msf auxiliary(telnet_version) &gt; set threads 100</p><p>设置后的界面显示如下所示：</p><p><img src="/img/Metasploit-review/ppp-20231128184648890.png" srcset="/img/loading.gif" lazyload alt="ppp-20231128184648890"></p><h4 id="（5）使用run命令来执行扫描。"><a href="#（5）使用run命令来执行扫描。" class="headerlink" title="（5）使用run命令来执行扫描。"></a>（5）使用run命令来执行扫描。</h4><p> msf auxiliary(telnet_version) &gt; run</p><p><img src="/img/Metasploit-review/ppp-20231128184714570.png" srcset="/img/loading.gif" lazyload alt="ppp-20231128184714570"></p><p><img src="/img/Metasploit-review/ppp-20231128184737533.png" srcset="/img/loading.gif" lazyload alt="ppp-20231128184737533"></p><h3 id="2-SSH-version模块"><a href="#2-SSH-version模块" class="headerlink" title="2.SSH_version模块"></a>2.SSH_version模块</h3><h4 id="（1）使用use命令使用ssh-version模块。"><a href="#（1）使用use命令使用ssh-version模块。" class="headerlink" title="（1）使用use命令使用ssh_version模块。"></a>（1）使用use命令使用ssh_version模块。</h4><p> msf &gt; use auxiliary&#x2F;scanner&#x2F;ssh&#x2F;ssh_version</p><p><img src="/img/Metasploit-review/ppp-20231128185532984.png" srcset="/img/loading.gif" lazyload alt="ppp-20231128185532984"></p><h4 id="（2）通过show命令查看模块的设置选项。-1"><a href="#（2）通过show命令查看模块的设置选项。-1" class="headerlink" title="（2）通过show命令查看模块的设置选项。"></a>（2）通过show命令查看模块的设置选项。</h4><p><img src="/img/Metasploit-review/ppp-20231128185622700.png" srcset="/img/loading.gif" lazyload alt="ppp-20231128185622700"></p><blockquote><p>同telnet_version模块相同，ssh_version扫描模块的设置选项也包括Name、Current、Setting、Required和Description五部分，所表示的含义也相同。</p></blockquote><h4 id="（3）使用set命令设置目标地址范围。-1"><a href="#（3）使用set命令设置目标地址范围。-1" class="headerlink" title="（3）使用set命令设置目标地址范围。"></a>（3）使用set命令设置目标地址范围。</h4><p> msf auxiliary(ssh_version) &gt; set rhosts 10.10.10.0&#x2F;24</p><p><img src="/img/Metasploit-review/ppp-20231128190444297.png" srcset="/img/loading.gif" lazyload alt="ppp-20231128190444297"></p><h4 id="（4）使用set命令设置并发线程的数量。-1"><a href="#（4）使用set命令设置并发线程的数量。-1" class="headerlink" title="（4）使用set命令设置并发线程的数量。"></a>（4）使用set命令设置并发线程的数量。</h4><p> msf auxiliary(ssh_version) &gt; set threads 100</p><p><img src="/img/Metasploit-review/ppp-20231128190503895.png" srcset="/img/loading.gif" lazyload alt="ppp-20231128190503895"></p><h4 id="（5）使用run命令来执行扫描。-1"><a href="#（5）使用run命令来执行扫描。-1" class="headerlink" title="（5）使用run命令来执行扫描。"></a>（5）使用run命令来执行扫描。</h4><p> msf auxiliary(ssh_version) &gt; run</p><p><img src="/img/Metasploit-review/ppp-20231128190518744.png" srcset="/img/loading.gif" lazyload alt="ppp-20231128190518744"></p><h3 id="3-SSH-login模块"><a href="#3-SSH-login模块" class="headerlink" title="3.SSH_login模块"></a>3.SSH_login模块</h3><h4 id="（1）使用use命令使用ssh-login模块。"><a href="#（1）使用use命令使用ssh-login模块。" class="headerlink" title="（1）使用use命令使用ssh_login模块。"></a>（1）使用use命令使用ssh_login模块。</h4><p> msf &gt; use auxiliary&#x2F;scanner&#x2F;ssh&#x2F;ssh_login</p><p><img src="/img/Metasploit-review/ppp-20231128191323632.png" srcset="/img/loading.gif" lazyload alt="ppp-20231128191323632"></p><h4 id="（2）通过show命令查看模块的设置选项。-2"><a href="#（2）通过show命令查看模块的设置选项。-2" class="headerlink" title="（2）通过show命令查看模块的设置选项。"></a>（2）通过show命令查看模块的设置选项。</h4><p> msf auxiliary(ssh_login) &gt; show options</p><p><img src="/img/Metasploit-review/ppp-20231128191341256.png" srcset="/img/loading.gif" lazyload alt="ppp-20231128191341256"></p><blockquote><p>与前面相比，ssh_login模块用到的设置项多了很多。下面进行简单的介绍：</p><p>BLANK_PASSWORDS，也就是空白密码的意思，即前面讲到的会先默认对空白密码进行验证。</p><p>BRUTEFORCE_SPEED，暴力破解的速度，从0到5可选。</p><p>PASSWORD，即准备暴力破解使用的密码，虽然不是必须的，但是没有进行暴力破解的密码，模块在验证完空密码后就停止了，因此这个其实是必须设置的。</p><p>PASS_FILE，即准备暴力破解使用的密码文件，PASSWORD是指定单个的密码，而PASS_FILE则是将密码字典放到一个文件里，并且每行只能放置一个密码。</p><p>STOP_ON_SUCCESS，即如果得到主机正在工作的消息，则停止试探密码，一般是设为false的。</p><p>USERNAME，同PASSWORD一样，虽然要求不是必须，但是在实际使用中是需要指定的。</p><p>USERPASS_FILE，是同时存储了密码和用户名的口令字典文件。每行包括一个用户名和对应的一个密码，中间用一个空格分隔开。</p><p>USER_AS_PASS，将所用用户名作为它的密码进行猜测。这在实际使用中很有用，因为经常有些安全意识薄弱的管理员这样设置密码。</p><p>USER_FILE，存储试探用户名的文件，同样每行一个用户名。</p><p>VERBOSE，是否在窗口输出所有的尝试情况，默认是输出的。</p></blockquote><p>在口令猜测时明显需要设置的项或者说可以设置的项变的多了很多，这就需要根据实际情况来进行设置。下面，写一个简单的例子：</p><p>根据上次实验的结果，选取10.10.10.254</p><h4 id="（3）使用set命令设置目标地址范围。-2"><a href="#（3）使用set命令设置目标地址范围。-2" class="headerlink" title="（3）使用set命令设置目标地址范围。"></a>（3）使用set命令设置目标地址范围。</h4><p> msf auxiliary(ssh_login) &gt; set rhosts 10.10.10.254</p><p><img src="/img/Metasploit-review/ppp-20231128191448663.png" srcset="/img/loading.gif" lazyload alt="ppp-20231128191448663"></p><h4 id="（4）使用set命令设置参数username的值。"><a href="#（4）使用set命令设置参数username的值。" class="headerlink" title="（4）使用set命令设置参数username的值。"></a>（4）使用set命令设置参数username的值。</h4><p>在这里仅尝试用户名为root的情况，因此代码如下：</p><p> msf auxiliary(ssh_login) &gt; set username root</p><p><img src="/img/Metasploit-review/ppp-20231128191528700.png" srcset="/img/loading.gif" lazyload alt="ppp-20231128191528700"></p><h4 id="（5）使用set命令设置参数pass-file的值。"><a href="#（5）使用set命令设置参数pass-file的值。" class="headerlink" title="（5）使用set命令设置参数pass_file的值。"></a>（5）使用set命令设置参数pass_file的值。</h4><p>将名称为words.txt的密码字典放在了桌面，因此代码如下：</p><p> msf auxiliary(ssh_login) &gt; set pass_file &#x2F;root&#x2F;Desktop&#x2F;words.txt</p><p><img src="/img/Metasploit-review/ppp-20231128191551676.png" srcset="/img/loading.gif" lazyload alt="ppp-20231128191551676"></p><h4 id="（6）使用set命令设置并发线程的数量。"><a href="#（6）使用set命令设置并发线程的数量。" class="headerlink" title="（6）使用set命令设置并发线程的数量。"></a>（6）使用set命令设置并发线程的数量。</h4><p> msf auxiliary(ssh_login) &gt; set threads 100</p><p><img src="/img/Metasploit-review/ppp-20231128191604997.png" srcset="/img/loading.gif" lazyload alt="ppp-20231128191604997"></p><h4 id="（7）使用run命令来执行扫描。"><a href="#（7）使用run命令来执行扫描。" class="headerlink" title="（7）使用run命令来执行扫描。"></a>（7）使用run命令来执行扫描。</h4><p> msf auxiliary(ssh_login) &gt; run</p><p><img src="/img/Metasploit-review/ppp-20231128192402211.png" srcset="/img/loading.gif" lazyload alt="ppp-20231128192402211"></p><h3 id="4-Mssql-ping模块"><a href="#4-Mssql-ping模块" class="headerlink" title="4.Mssql_ping模块"></a>4.Mssql_ping模块</h3><h4 id="（1）使用use命令使用mssql-ping模块。"><a href="#（1）使用use命令使用mssql-ping模块。" class="headerlink" title="（1）使用use命令使用mssql_ping模块。"></a>（1）使用use命令使用mssql_ping模块。</h4><p> msf &gt; use auxiliary&#x2F;scanner&#x2F;mssql&#x2F;mssql_ping </p><p><img src="/img/Metasploit-review/ppp-20231128192510859.png" srcset="/img/loading.gif" lazyload alt="ppp-20231128192510859"></p><h4 id="（2）通过show命令查看模块的设置选项。-3"><a href="#（2）通过show命令查看模块的设置选项。-3" class="headerlink" title="（2）通过show命令查看模块的设置选项。"></a>（2）通过show命令查看模块的设置选项。</h4><p> msf auxiliary(mssql_ping) &gt; show options</p><p><img src="/img/Metasploit-review/ppp-20231128192529233.png" srcset="/img/loading.gif" lazyload alt="ppp-20231128192529233"></p><blockquote><p>与前面不同的是在mssql_ping模块用到了USERNAME设置项，这起始与Microsoft SQL Server安装时候的一个默认设置有关。在初次安装服务器的时候，会默认创建sa或系统管理员用户。因此，这里USERNAME设置项的默认设置是sa，在这里也不准备进行更改。</p></blockquote><h4 id="（3）使用set命令设置目标地址范围。-3"><a href="#（3）使用set命令设置目标地址范围。-3" class="headerlink" title="（3）使用set命令设置目标地址范围。"></a>（3）使用set命令设置目标地址范围。</h4><p> msf auxiliary(mssql_ping) &gt; set RHOSTS 202.118.176.0&#x2F;24</p><p><img src="/img/Metasploit-review/ppp-20231128192652684.png" srcset="/img/loading.gif" lazyload alt="ppp-20231128192652684"></p><h4 id="（4）使用set命令设置并发线程的数量。-2"><a href="#（4）使用set命令设置并发线程的数量。-2" class="headerlink" title="（4）使用set命令设置并发线程的数量。"></a>（4）使用set命令设置并发线程的数量。</h4><p> msf auxiliary(mssql_ping) &gt; set THREADS 50</p><p><img src="/img/Metasploit-review/ppp-20231128192713890.png" srcset="/img/loading.gif" lazyload alt="ppp-20231128192713890"></p><h4 id="（5）使用run命令来执行扫描。-2"><a href="#（5）使用run命令来执行扫描。-2" class="headerlink" title="（5）使用run命令来执行扫描。"></a>（5）使用run命令来执行扫描。</h4><p> msf auxiliary(mssql_ping) &gt; run</p><p><img src="/img/Metasploit-review/ppp-20231128192801766.png" srcset="/img/loading.gif" lazyload alt="ppp-20231128192801766"></p><h3 id="5-Tnslsnr-version模块"><a href="#5-Tnslsnr-version模块" class="headerlink" title="5.Tnslsnr_version模块"></a>5.Tnslsnr_version模块</h3><h4 id="（1）使用use命令使用tnslsnr-version模块。"><a href="#（1）使用use命令使用tnslsnr-version模块。" class="headerlink" title="（1）使用use命令使用tnslsnr_version模块。"></a>（1）使用use命令使用tnslsnr_version模块。</h4><p> msf &gt; use auxiliary&#x2F;scanner&#x2F;oracle&#x2F;tnslsnr_version </p><p><img src="/img/Metasploit-review/ppp-20231128192902843.png" srcset="/img/loading.gif" lazyload alt="ppp-20231128192902843"></p><h4 id="（2）通过show命令查看模块的设置选项。-4"><a href="#（2）通过show命令查看模块的设置选项。-4" class="headerlink" title="（2）通过show命令查看模块的设置选项。"></a>（2）通过show命令查看模块的设置选项。</h4><p> msf auxiliary(tnslsnr_version) &gt; show options</p><p><img src="/img/Metasploit-review/ppp-20231128192919281.png" srcset="/img/loading.gif" lazyload alt="ppp-20231128192919281"></p><h4 id="（3）使用set命令设置目标地址范围。-4"><a href="#（3）使用set命令设置目标地址范围。-4" class="headerlink" title="（3）使用set命令设置目标地址范围。"></a>（3）使用set命令设置目标地址范围。</h4><p> msf auxiliary(tnslsnr_version)&gt; set RHOSTS 10.10.10.0&#x2F;24</p><p><img src="/img/Metasploit-review/ppp-20231128192949628.png" srcset="/img/loading.gif" lazyload alt="ppp-20231128192949628"></p><h4 id="（4）使用set命令设置并发线程的数量。-3"><a href="#（4）使用set命令设置并发线程的数量。-3" class="headerlink" title="（4）使用set命令设置并发线程的数量。"></a>（4）使用set命令设置并发线程的数量。</h4><p> msf auxiliary(tnslsnr_version) &gt; set THREADS 50</p><p><img src="/img/Metasploit-review/ppp-20231128193004063.png" srcset="/img/loading.gif" lazyload alt="image-20231128193004063"></p><h4 id="（5）使用run命令来执行扫描。-3"><a href="#（5）使用run命令来执行扫描。-3" class="headerlink" title="（5）使用run命令来执行扫描。"></a>（5）使用run命令来执行扫描。</h4><p> msf auxiliary(tnslsnr_version) &gt; run</p><p><img src="/img/Metasploit-review/ppp-20231128193019150.png" srcset="/img/loading.gif" lazyload alt="ppp-20231128193019150"></p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
      <category>网络服务扫描实验</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络安全</tag>
      
      <tag>网络服务扫描实验</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RSA的一些解密脚本</title>
    <link href="/2023/11/23/CTF_Crypto_RSA/"/>
    <url>/2023/11/23/CTF_Crypto_RSA/</url>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p>1.<a href="#1.%E5%B7%B2%E7%9F%A5(p,q,e),%E6%B1%82d">已知(p,q,e),求d</a></p><p>2.<a href="#2.%E5%B7%B2%E7%9F%A5(p,q,e,c)%EF%BC%8C%E6%B1%82m">已知(p,q,e,c)，求m</a></p><p>3.<a href="#3.%E5%B7%B2%E7%9F%A5(p,q,dp,dq,c)%EF%BC%8C%E6%B1%82m">已知(p,q,dp,dq,c)，求m</a></p><p>4.<a href="#4.%E5%B7%B2%E7%9F%A5(e,dp,n,c)%EF%BC%8C%E6%B1%82m">已知(e,dp,n,c)，求m</a></p><p>5.<a href="#5.%E5%B7%B2%E7%9F%A5(n,e1,e2,c1,c2)%EF%BC%8C%E6%B1%82m">已知(n,e1,e2,c1,c2)，求m</a></p><p>6.<a href="#6.%E5%B7%B2%E7%9F%A5(e,n1,c1,n2,c2)%EF%BC%8C%E6%B1%82m">已知(e,n1,c1,n2,c2)，求m</a></p><p>7.<a href="#7.%E5%B7%B2%E7%9F%A5(p+q,p-q,e,c)%EF%BC%8C%E6%B1%82m">已知(p+q,p-q,e,c)，求m</a></p><p>8.<a href="#8.%E5%B7%B2%E7%9F%A5(e,n,c)%EF%BC%8C%E6%B1%82m">已知(e,n,c)，求m</a></p><p>9.<a href="#9.%E5%B7%B2%E7%9F%A5(e,n,c)%EF%BC%8C%E6%B1%82m%EF%BC%88e%E6%9E%81%E5%B0%8F%EF%BC%8C%E5%A6%823%EF%BC%8C%E4%BD%8E%E5%8A%A0%E5%AF%86%E6%8C%87%E6%95%B0%E6%94%BB%E5%87%BB%EF%BC%89">已知(e,n,c)，求m（e极小，如3，低加密指数攻击）</a></p><p>10.<a href="#10.%E5%B7%B2%E7%9F%A5(e,n,c)%EF%BC%8C%E6%B1%82m%EF%BC%88e%E5%BE%88%E5%A4%A7%EF%BC%8C%E4%BD%8E%E8%A7%A3%E5%AF%86%E6%8C%87%E6%95%B0%E6%94%BB%E5%87%BB%EF%BC%89">已知(e,n,c)，求m（e很大，低解密指数攻击）</a></p><p>11.<a href="#11.%E5%B7%B2%E7%9F%A5%EF%BC%88c,n,p%EF%BC%88q-1%EF%BC%89,q*%EF%BC%88p-1%EF%BC%89%EF%BC%89%EF%BC%8C%E6%B1%82m">已知(c,n,p(q-1),q(p-1))，求m</a></p><p>参考：<a href="http://t.csdnimg.cn/YEnxe">CTF中关于RSA的常见题型_abtgu的博客-CSDN博客_ctf rsa题目</a></p><p><strong>1、RSA算法需要的基础知识：</strong></p><p><img src="/img/Crypto-RSA/e919d28a04e3408dadf817f324a9a3d8.png" srcset="/img/loading.gif" lazyload alt="img"></p><p>（5）判断互质数：</p><p>1）两个质数一定是互质数。</p><p>2）一个质数如果不能整除另一个合数（合数是指在大于1的整数中除了能被1和本身整除外，还能被其他数（0除外）整除的数），这两个数为互质数。例如，3与10、5与 26。</p><p>3）1不是质数也不是合数，它和任何一个自然数在一起都是互质数。</p><p>4）相邻的两个自然数是互质数。如 15与16。</p><p>5）相邻的两个奇数是互质数。如 49与 51。</p><p>6）大数是质数的两个数是互质数。如97与88。</p><p>7）小数是质数，大数不是小数的倍数的两个数是互质数。如 7和16。</p><p>8）两个数都是合数（二数差又较大），小数所有的质因数，都不是大数的约数（因数），这两个数是互质数。如357与715，357&#x3D;3×7×17，而3、7和17都不是715的约数，这两个数为互质数。</p><p>等等。。。</p><p>（6）什么是模运算与模指数运算？</p><p>模运算是整数运算，有一个整数m，以n为模做模运算，即m mod n。让m被n整除，只取所得的余数作为结果，就叫做模运算。例如，10 mod 3&#x3D;1；26 mod 6&#x3D;2；28 mod 2 &#x3D;0等等。</p><p>模指数运算就是先做指数运算，取其结果再做模运算。如(5^3) mod 7 &#x3D; (125 mod 7) &#x3D; 6。</p><p><strong>2、RSA加解密</strong></p><p>（1）RSA加密算法由五个部分组成：</p><p>原文(Message)、密文(Ciphertext)、公钥(Public Key)、私钥(Secret Key)、加密算法(Encryption)、解密算法(Decryption)。</p><p>（2）RSA求公钥私钥步骤如下：</p><p>1）随机选择两个不相同的素数 p,q 。</p><p>2）将p,q相乘，记为 n &#x3D; p × q 。</p><p>3）计算n的欧拉函数φ(n)，当p,q为不相同的素数时，φ(n)&#x3D;(p−1)(q−1)。</p><p>4）随机选择一个整数e，满足两个条件：φ(n)与e互质，且 1 &lt; e &lt;φ(n)。</p><p>5）计算e对于φ(n)的模反元素d，也就是说找到一个d满足ed &#x3D; 1modφ(n)。这个式子等价于ed &#x3D; kφ(n) + 1，实际上就是对于方程ed − kφ(n) &#x3D; 1求(d,k)的整数解。这个方程可以用扩展欧几里得算法求解。</p><p>6）最终把(e,n)封装成公钥，(d,n)封装成私钥。</p><p>（3）RSA加密与解密</p><p><img src="/img/Crypto-RSA/70a02a11bade4ecd8cb39dc976de7669.png" srcset="/img/loading.gif" lazyload alt="img"></p><p><img src="/img/Crypto-RSA/934d5831addc4e1bbdf45d0b7c43d937.png" srcset="/img/loading.gif" lazyload alt="img"></p><p>（4）RSA算法的破解</p><p>1）由于公钥中n已知，只需计算出d，便可通过M&#x3D;Cd mod n计算出明文M。</p><p>2）由于方程ed − kφ(n) &#x3D; 1，公钥中e已知，我们只需要知道φ(n)的值便可求出(d,k)的整数解。</p><p>3）由于φ(n) &#x3D; （p - 1）(q - 1)，我们需要求出p，q的值。</p><p>4）由于n &#x3D; p  q，我们需要对n做因数分解。</p><p>只要n可以被因数分解为p，q，我们便可反推破解私钥，从而破解密文。</p><hr><h4 id="1-已知-p-q-e-求d"><a href="#1-已知-p-q-e-求d" class="headerlink" title="1.已知(p,q,e),求d"></a>1.已知(p,q,e),求d</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus">import gmpy2<br><span class="hljs-selector-tag">p</span> = <br><span class="hljs-selector-tag">q</span> = <br>e = <br>phi = (p-<span class="hljs-number">1</span>)(q-<span class="hljs-number">1</span>)<br>d = gmpy2<span class="hljs-selector-class">.invert</span>(e,phi)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(d)</span></span><br></code></pre></td></tr></table></figure><h4 id="2-已知-p-q-e-c-，求m"><a href="#2-已知-p-q-e-c-，求m" class="headerlink" title="2.已知(p,q,e,c)，求m"></a>2.已知(p,q,e,c)，求m</h4><p>密文c，明文m</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs makefile">import gmpy2 <br>import binascii<br> <br>c = <br>e =  <br>p = <br>q = <br> <br><span class="hljs-comment"># 计算私钥 d</span><br>phi = (p-1)*(q-1)<br>d = gmpy2.invert(e, phi)<br> <br><span class="hljs-comment"># 解密 m</span><br>m = gmpy2.powmod(c,d,p*q)<br><span class="hljs-section">print(binascii.unhexlify(hex(m)[2:]))</span><br></code></pre></td></tr></table></figure><h4 id="3-已知-p-q-dp-dq-c-，求m"><a href="#3-已知-p-q-dp-dq-c-，求m" class="headerlink" title="3.已知(p,q,dp,dq,c)，求m"></a>3.已知(p,q,dp,dq,c)，求m</h4><p><img src="/img/Crypto-RSA/c13f4126471c460e9566e37a4e5f77ac.png" srcset="/img/loading.gif" lazyload alt="img"></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs makefile">import gmpy2<br>import binascii<br>p =<br>q =<br>dp =<br>dq =<br>c =<br> <br>I = gmpy2.invert(p,q)<br>mp = gmpy2.powmod(c,dp,p)<br>mq = gmpy2.powmod(c,dq,q)<br> <br>m = ((I*(mp-mq))%q)*p+mp<br><span class="hljs-section">print(binascii.unhexlify(hex(m)[2:]))</span><br></code></pre></td></tr></table></figure><h4 id="4-已知-e-dp-n-c-，求m"><a href="#4-已知-e-dp-n-c-，求m" class="headerlink" title="4.已知(e,dp,n,c)，求m"></a>4.已知(e,dp,n,c)，求m</h4><p><img src="/img/Crypto-RSA/60178e8906e54a9b99bb29ec355f5ee9.png" srcset="/img/loading.gif" lazyload alt="img"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">import</span> gmpy2<br><span class="hljs-attribute">import</span> binascii<br><span class="hljs-attribute">e</span> = <br><span class="hljs-attribute">n</span> =<br><span class="hljs-attribute">dp</span> =<br><span class="hljs-attribute">c</span> =<br><span class="hljs-attribute">for</span> i in range(<span class="hljs-number">1</span>,e):<br>    <span class="hljs-attribute">if</span> (e*dp-<span class="hljs-number">1</span>)%i == <span class="hljs-number">0</span> and n%((e*dp-<span class="hljs-number">1</span>)//i+<span class="hljs-number">1</span>)==<span class="hljs-number">0</span>:<br>        <span class="hljs-attribute">q</span> = n//((e*dp-<span class="hljs-number">1</span>)//i+<span class="hljs-number">1</span>)<br>        <span class="hljs-attribute">phi</span> = (q-<span class="hljs-number">1</span>)*((e*dp-<span class="hljs-number">1</span>)//i)<br>        <span class="hljs-attribute">d</span> = gmpy2.invert(e,phi)<br>        <span class="hljs-attribute">m</span> = gmpy2.powmod(c,d,n)<br> <br><span class="hljs-attribute">print</span>(binascii.unhexlify(hex(m)[<span class="hljs-number">2</span>:]))<br></code></pre></td></tr></table></figure><h4 id="5-已知-n-e1-e2-c1-c2-，求m"><a href="#5-已知-n-e1-e2-c1-c2-，求m" class="headerlink" title="5.已知(n,e1,e2,c1,c2)，求m"></a>5.已知(n,e1,e2,c1,c2)，求m</h4><p><img src="/img/Crypto-RSA/358a70c21c954c42bb1f180851d998aa.png" srcset="/img/loading.gif" lazyload alt="img"></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs makefile">import gmpy2<br>import binascii<br> <br>n =<br>c1 = <br>c2 = <br>e1 = <br>e2 = <br> <br>s = gmpy2.gcdext(e1,e2)<br>a = s[1]<br>b = s[2]<br> <br>if a&lt;0:<br>    a = -a<br>    c1 = gmpy2.invert(c1,n)<br><span class="hljs-section">else:</span><br>    b = -b<br>    c2 = gmpy2.invert(c2,n)<br> <br>m = (gmpy2.powmod(c1,a,n)*gmpy2.powmod(c2,b,n))%n<br> <br><span class="hljs-section">print(binascii.unhexlify(hex(m)[2:]))</span><br></code></pre></td></tr></table></figure><h4 id="6-已知-e-n1-c1-n2-c2-，求m"><a href="#6-已知-e-n1-c1-n2-c2-，求m" class="headerlink" title="6.已知(e,n1,c1,n2,c2)，求m"></a>6.已知(e,n1,c1,n2,c2)，求m</h4><p><strong>解题思路：</strong> 两组数中e相同，n，c不同，求出n1与n2的最大公因数即为p，之后就可以得到q和d，从而求解m。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs makefile">import gmpy2<br>import binascii<br> <br>e = <br>n1 = <br>c1 = <br>n2 = <br>c2 = <br> <br>p1 = gmpy2.gcd(n1,n2)<br>q1 = n1 // p1<br>phi1 = (p1-1)*(q1-1)<br> <br>d1 = gmpy2.invert(e,phi1)<br>m1 = gmpy2.powmod(c1,d1,n1)<br> <br><span class="hljs-section">print(binascii.unhexlify(hex(m1)[2:]))</span><br> <br>p2 = gmpy2.gcd(n2,n1)<br>q2 = n2 // p2<br>phi2 = (p2-1)*(q2-1)<br> <br>d2 = gmpy2.invert(e,phi2)<br>m2 = gmpy2.powmod(c2,d2,n2)<br> <br><span class="hljs-section">print(binascii.unhexlify(hex(m2)[2:]))</span><br></code></pre></td></tr></table></figure><h4 id="7-已知-p-q-p-q-e-c-，求m"><a href="#7-已知-p-q-p-q-e-c-，求m" class="headerlink" title="7.已知(p+q,p-q,e,c)，求m"></a>7.已知(p+q,p-q,e,c)，求m</h4><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs makefile">import gmpy2<br>import binascii<br>e=<br>a=<br>b=<br>c=<br> <br>p = (a+b)//2<br>q = (a-b)//2<br> <br>phi = (p-1)*(q-1)<br>d = gmpy2.invert(e,phi)<br> <br>m = gmpy2.powmod(c,d,p*q)<br><span class="hljs-section">print(binascii.unhexlify(hex(m)[2:]))</span><br> <br></code></pre></td></tr></table></figure><h4 id="8-已知-e-n-c-，求m"><a href="#8-已知-e-n-c-，求m" class="headerlink" title="8.已知(e,n,c)，求m"></a>8.已知(e,n,c)，求m</h4><p>解题思路：<br>可以分解n得到p,q</p><p>在线分解大整数网址:</p><p><a href="http://www.factordb.com/index.php">http://www.factordb.com/index.php</a></p><p>分解质因数工具 - 整数分解最多为70位</p><p>注意：在factordb中因为数过大而显示不全时，可以点击show查看完整数据，但是在复制数据时注意它的每一行都有空格，粘贴后要去掉</p><p><img src="/img/Crypto-RSA/9d7aa499bad5423189ad31ed01ab5267.png" srcset="/img/loading.gif" lazyload alt="img"></p><p><img src="/img/Crypto-RSA/b8f526c4255340a69671d2c54e87fd69.png" srcset="/img/loading.gif" lazyload alt="img"></p><p>若以上都不好用，则用yafu计算</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs makefile">import gmpy2<br>import binascii<br> <br>e = <br>n = <br>c = <br>p = <br>q = <br> <br>phi = (p-1)*(q-1)<br>d = gmpy2.invert(e,phi)<br>m = gmpy2.powmod(c,d,n)<br> <br><span class="hljs-section">print(binascii.unhexlify(hex(m)[2:]))</span><br></code></pre></td></tr></table></figure><h4 id="9-已知-e-n-c-，求m（e极小，如3，低加密指数攻击）"><a href="#9-已知-e-n-c-，求m（e极小，如3，低加密指数攻击）" class="headerlink" title="9.已知(e,n,c)，求m（e极小，如3，低加密指数攻击）"></a>9.已知(e,n,c)，求m（e极小，如3，低加密指数攻击）</h4><p><img src="/img/Crypto-RSA/a1c0f87f74c947a2a051aaad34821155.png" srcset="/img/loading.gif" lazyload alt="img"></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs stylus">import gmpy2<br>import binascii<br> <br>e =<br>n =<br>c =<br> <br><span class="hljs-selector-tag">i</span> = <span class="hljs-number">0</span><br>while True:<br>    <span class="hljs-keyword">if</span> gmpy2<span class="hljs-selector-class">.iroot</span>((c+i*n),<span class="hljs-number">3</span>)<span class="hljs-selector-attr">[1]</span> == True:<br>        m = gmpy2<span class="hljs-selector-class">.iroot</span>((c+i*n),<span class="hljs-number">3</span>)<span class="hljs-selector-attr">[0]</span><br>        break<br>    <span class="hljs-selector-tag">i</span> += <span class="hljs-number">1</span><br> <br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(binascii.unhexlify(hex(m)</span></span><span class="hljs-selector-attr">[2:]</span>))<br></code></pre></td></tr></table></figure><h4 id="10-已知-e-n-c-，求m（e很大，低解密指数攻击）"><a href="#10-已知-e-n-c-，求m（e很大，低解密指数攻击）" class="headerlink" title="10.已知(e,n,c)，求m（e很大，低解密指数攻击）"></a>10.已知(e,n,c)，求m（e很大，低解密指数攻击）</h4><p><strong>解题思路：</strong> 题中e很大，故可知是<strong>低解密指数攻击</strong>。</p><p>可以使用破解脚本：求出d的值，文件下载地址<a href="https://gitcode.com/mirrors/pablocelayes/rsa-wiener-attack/overview?utm_source=csdn_github_accelerator">GitHub - pablocelayes&#x2F;rsa-wiener-attack: A Python implementation of the Wiener attack on RSA public-key encryption scheme.</a></p><p>（注意，这里要将破解脚本和rsa-wiener-attack的py文件放在同一个目录下）</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">import</span> binascii<br><span class="hljs-keyword">import</span> RSAwienerHacker<br> <br><span class="hljs-title">e</span> =<br><span class="hljs-title">n</span> =<br><span class="hljs-title">c</span> =<br> <br><span class="hljs-title">d</span> = <span class="hljs-type">RSAwienerHacker</span>.hack_RSA(e,n)<br><span class="hljs-title">m</span> = gmpy2.powmod(c,d,n)<br> <br><span class="hljs-title">print</span>(binascii.unhexlify(hex(m)[<span class="hljs-number">2</span>:]))<br> <br></code></pre></td></tr></table></figure><h4 id="11-已知（c-n-p（q-1）-q-（p-1）），求m"><a href="#11-已知（c-n-p（q-1）-q-（p-1）），求m" class="headerlink" title="11.已知（c,n,p（q-1）,q*（p-1）），求m"></a>11.已知（c,n,p（q-1）,q*（p-1）），求m</h4><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs makefile">import gmpy2<br>from Crypto.Util.number import *<br><span class="hljs-comment">#pq = p*(q-1)</span><br><span class="hljs-comment">#qp = q*(p-1)</span><br>c= <br>n= <br>pq= <br>qp= <br> <br>e = 65537<br>p = n - pq<br>q = n - qp<br>phi = (p - 1)*(q - 1)<br> <br>d = gmpy2.invert(e,phi)<br>m = gmpy2.powmod(c,d,n)<br>print(long_to_bytes(m))<br> <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>密码学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mirai Administrator 机器人管理插件，好友/群管理，黑名单，宵禁</title>
    <link href="/2023/11/20/bot_Mirai_Administrator/"/>
    <url>/2023/11/20/bot_Mirai_Administrator/</url>
    
    <content type="html"><![CDATA[<h1 id="Mirai-Administrator"><a href="#Mirai-Administrator" class="headerlink" title="Mirai Administrator"></a>Mirai Administrator</h1><blockquote><p>基于 Mirai Console 的 管理员 Bot 及其标准</p></blockquote><p><a href="https://github.com/cssxsh/mirai-administrator/releases"><img src="https://img.shields.io/github/v/release/cssxsh/mirai-administrator" srcset="/img/loading.gif" lazyload alt="Release"></a><br><a href="https://repo1.maven.org/maven2/xyz/cssxsh/mirai/mirai-administrator/"><img src="https://img.shields.io/github/downloads/cssxsh/mirai-administrator/total" srcset="/img/loading.gif" lazyload alt="Downloads"></a><br><a href="https://search.maven.org/artifact/xyz.cssxsh.mirai/mirai-administrator"><img src="https://img.shields.io/maven-central/v/xyz.cssxsh.mirai/mirai-administrator" srcset="/img/loading.gif" lazyload alt="maven-central"></a><br><a href="https://www.codacy.com/gh/cssxsh/mirai-administrator/dashboard?utm_source=github.com&utm_medium=referral&utm_content=cssxsh/mirai-administrator&utm_campaign=Badge_Grade"><img src="https://app.codacy.com/project/badge/Grade/8be173fe96c74059bfedd6268b8e6f0c" srcset="/img/loading.gif" lazyload alt="Codacy Badge"></a></p><p><strong>使用前应该查阅的相关文档或项目</strong></p><ul><li><a href="https://github.com/mamoe/mirai/blob/dev/docs/UserManual.md">User Manual</a></li><li><a href="https://github.com/mamoe/mirai/blob/dev/mirai-console/docs/BuiltInCommands.md#permissioncommand">Permission Command</a></li><li><a href="https://github.com/project-mirai/chat-command">Chat Command</a></li></ul><p>本插件实现的功能有:</p><ul><li>联系人相关 自动审批，指令查看，用户留言</li><li>消息相关 发送消息，撤回消息</li><li>群管理相关 群消息审核，自动宵禁，自动清理不发言，禁言自动退群</li></ul><p>本插件提供<a href="https://mirai.mamoe.net/topic/972/mirai-administrator-%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%AE%A1%E7%90%86%E6%8F%92%E4%BB%B6-%E5%A5%BD%E5%8F%8B-%E7%BE%A4%E7%AE%A1%E7%90%86-%E9%BB%91%E5%90%8D%E5%8D%95-%E5%AE%B5%E7%A6%81/2?page=1#%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3">服务接口</a>以供其他插件拓展功能<br>例如使用 <a href="https://github.com/gnuf0rce/mirai-content-censor">Mirai Content Censor</a> 依靠百度API审查群消息<br>例如使用 <a href="https://github.com/cssxsh/mirai-authenticator">Mirai Authenticator</a> 验证加群请求</p><h2 id="MCL-指令安装"><a href="#MCL-指令安装" class="headerlink" title="MCL 指令安装"></a>MCL 指令安装</h2><p><strong>请确认 mcl.jar 的版本是 2.1.0+</strong><br><code>./mcl --update-package xyz.cssxsh.mirai:mirai-administrator --channel maven-stable --type plugin</code></p><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><p>注意: 使用前请确保可以 <a href="https://github.com/project-mirai/chat-command">在聊天环境执行指令</a><br><code>&lt;...&gt;</code>中的是指令名<br><code>[...]</code>表示参数，当<code>[...]</code>后面带<code>?</code>时表示参数可选</p><p>本插件指令权限ID 格式为 <code>xyz.cssxsh.mirai.plugin.mirai-administrator:command.*</code>, <code>*</code> 是指令的第一指令名<br>例如 <code>/send to 12345</code> 的权限ID为 <code>xyz.cssxsh.mirai.plugin.mirai-administrator:command.send</code><br>对 机器人发送的<strong>联系人请求</strong>通知消息 回复 <code>同意</code> 或 <code>不同意</code> 或 <code>拉黑</code> 即可处理<br>插件提供黑名单功能，使用指令 <code>/contact black u12345</code>, 即可拉黑用户，Bot将不响应用户动作（包括其他插件的功能）</p><h3 id="ADMINCONTACTCOMMAND"><a href="#ADMINCONTACTCOMMAND" class="headerlink" title="ADMINCONTACTCOMMAND"></a>ADMINCONTACTCOMMAND</h3><table><thead><tr><th align="left">Command</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left"><code>/&lt;contact&gt; &lt;delete&gt; [contact]</code></td><td align="left">删除联系人</td></tr><tr><td align="left"><code>/&lt;contact&gt; &lt;handle&gt; [id] [accept]? [black]?</code></td><td align="left">处理联系人申请</td></tr><tr><td align="left"><code>/&lt;contact&gt; &lt;request&gt;</code></td><td align="left">查看申请列表</td></tr><tr><td align="left"><code>/&lt;contact&gt; &lt;black&gt; &#123;permitteeIds&#125;</code></td><td align="left">拉黑</td></tr><tr><td align="left"><code>/&lt;contact&gt; &lt;white&gt; &#123;permitteeIds&#125;</code></td><td align="left">取消拉黑</td></tr><tr><td align="left"><code>/&lt;contact&gt; &lt;backup&gt;</code></td><td align="left">触发备份功能</td></tr></tbody></table><ol><li><code>id</code> 是 事件id 或 好友id 或 群id</li><li><code>accept</code> 和 <code>black</code> 参数为 <code>true</code>, <code>yes</code>, <code>enabled</code>, <code>on</code>, <code>1</code> 时表示 <code>true</code> (不区分大小写)</li><li>对 机器人发送的新联系人通知消息 回复 <code>同意</code> 或 <code>不同意</code> 或 <code>拉黑</code> 即可处理，详见 <a href="https://mirai.mamoe.net/topic/972/mirai-administrator-%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%AE%A1%E7%90%86%E6%8F%92%E4%BB%B6-%E5%A5%BD%E5%8F%8B-%E7%BE%A4%E7%AE%A1%E7%90%86-%E9%BB%91%E5%90%8D%E5%8D%95-%E5%AE%B5%E7%A6%81/2?page=1#%E8%81%94%E7%B3%BB%E4%BA%BA%E5%AE%A1%E6%89%B9%E9%85%8D%E7%BD%AE">联系人审批配置</a></li><li><code>permitteeIds</code> 是 权限系统的用户标识符，例如 <code>m12345.6789</code>, 可以提供多个 <a href="https://github.com/mamoe/mirai/blob/dev/mirai-console/docs/Permissions.md#%E8%A2%AB%E8%AE%B8%E5%8F%AF%E4%BA%BA-id">PermitteeId</a> 一次性拉黑&#x2F;取消拉黑</li><li>黑名单通过 <code>@EventHandler(priority = EventPriority.HIGH, concurrency = ConcurrencyKind.LOCKED)</code> 拦截消息</li></ol><h3 id="ADMINFRIENDCOMMAND"><a href="#ADMINFRIENDCOMMAND" class="headerlink" title="ADMINFRIENDCOMMAND"></a>ADMINFRIENDCOMMAND</h3><table><thead><tr><th align="left">Command</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left"><code>/&lt;friend&gt; &lt;list&gt;</code></td><td align="left">好友列表</td></tr><tr><td align="left"><code>/&lt;friend&gt; &lt;delete&gt; [friend]</code></td><td align="left">删除好友</td></tr></tbody></table><h3 id="ADMINGROUPCOMMAND"><a href="#ADMINGROUPCOMMAND" class="headerlink" title="ADMINGROUPCOMMAND"></a>ADMINGROUPCOMMAND</h3><table><thead><tr><th align="left">Command</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left"><code>/&lt;group&gt; &lt;list&gt;</code></td><td align="left">群列表</td></tr><tr><td align="left"><code>/&lt;group&gt; &lt;member&gt; [group]</code></td><td align="left">群成员</td></tr><tr><td align="left"><code>/&lt;group&gt; &lt;quit&gt; [group]</code></td><td align="left">退出群聊</td></tr><tr><td align="left"><code>/&lt;group&gt; &lt;kick&gt; [member] [reason]? [black]?</code></td><td align="left">踢出群员</td></tr><tr><td align="left"><code>/&lt;group&gt; &lt;nick&gt; [member] [nick]</code></td><td align="left">群昵称</td></tr><tr><td align="left"><code>/&lt;group&gt; &lt;title&gt; [member] [title]</code></td><td align="left">群头衔</td></tr><tr><td align="left"><code>/&lt;group&gt; &lt;mute&gt; [member] [second]</code></td><td align="left">禁言</td></tr><tr><td align="left"><code>/&lt;group&gt; &lt;quiet&gt; [group] [open]?</code></td><td align="left">全体禁言</td></tr><tr><td align="left"><code>/&lt;group&gt; &lt;admin&gt; [member] [operation]?</code></td><td align="left">设置管理员</td></tr><tr><td align="left"><code>/&lt;group&gt; &lt;announce&gt; [group]</code></td><td align="left">设置公告</td></tr><tr><td align="left"><code>/&lt;group&gt; &lt;rank&gt; [group] &#123;levels&#125;</code></td><td align="left">设置等级头衔</td></tr></tbody></table><h3 id="ADMINRECALLCOMMAND"><a href="#ADMINRECALLCOMMAND" class="headerlink" title="ADMINRECALLCOMMAND"></a>ADMINRECALLCOMMAND</h3><table><thead><tr><th align="left">Command</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left"><code>/&lt;recall&gt; [contact]?</code></td><td align="left">撤回消息</td></tr></tbody></table><ol><li>不指定<code>contact</code>时，可以通过<strong>回复消息</strong>指定要撤销的消息，如果没有指定，将尝试撤销最后一条不是由指令发送者发送的消息</li><li><code>contact</code>是群员时，将尝试撤销这个群员的最后一条消息</li><li><code>contact</code>是群或好友时，将尝试撤销bot的最后一条消息</li></ol><h3 id="ADMINREGISTEREDCOMMAND"><a href="#ADMINREGISTEREDCOMMAND" class="headerlink" title="ADMINREGISTEREDCOMMAND"></a>ADMINREGISTEREDCOMMAND</h3><table><thead><tr><th align="left">Command</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left"><code>/&lt;registered&gt;</code></td><td align="left">查看已注册指令</td></tr><tr><td align="left"><code>/&lt;reg&gt;</code></td><td align="left">查看已注册指令</td></tr></tbody></table><h3 id="ADMINSENDCOMMAND"><a href="#ADMINSENDCOMMAND" class="headerlink" title="ADMINSENDCOMMAND"></a>ADMINSENDCOMMAND</h3><table><thead><tr><th align="left">Command</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left"><code>/&lt;send&gt; &lt;groups&gt; [bot]? [at]? [second]?</code></td><td align="left">发送给所有群</td></tr><tr><td align="left"><code>/&lt;send&gt; &lt;friends&gt; [bot]? [second]?</code></td><td align="left">发送给所有好友</td></tr><tr><td align="left"><code>/&lt;send&gt; &lt;to&gt; [contact] [at]?</code></td><td align="left">发送给指定联系人</td></tr><tr><td align="left"><code>/&lt;send&gt; &lt;nudge&gt; [user]</code></td><td align="left">戳一戳指定联系人</td></tr><tr><td align="left"><code>/&lt;send&gt; &lt;log&gt; &#123;addresses&#125;</code></td><td align="left">备份日志到邮箱</td></tr></tbody></table><ol><li><code>bot</code> 参数在命令行模式下需要指定</li><li><code>at</code> 参数为 <code>true</code>, <code>yes</code>, <code>enabled</code>, <code>on</code>, <code>1</code> 时表示 <code>true</code>, 将附加一个At</li><li><code>second</code> 参数为 延迟的秒数 例如 <code>/send groups 123456 false 10</code></li><li><code>addresses</code> 参数为 邮箱地址</li></ol><h3 id="ADMINTIMERCOMMAND"><a href="#ADMINTIMERCOMMAND" class="headerlink" title="ADMINTIMERCOMMAND"></a>ADMINTIMERCOMMAND</h3><table><thead><tr><th align="left">Command</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left"><code>/&lt;timer&gt; &lt;config&gt;</code></td><td align="left">显示当前设置</td></tr><tr><td align="left"><code>/&lt;timer&gt; &lt;mute&gt; [moment] [cron] [group]?</code></td><td align="left">宵禁</td></tr><tr><td align="left"><code>/&lt;timer&gt; &lt;cleaner&gt; [day] [cron] [group]?</code></td><td align="left">清理不发言</td></tr><tr><td align="left"><code>/&lt;timer&gt; &lt;status&gt; [cron] [bot]?</code></td><td align="left">定时发送机器人状态</td></tr><tr><td align="left"><code>/&lt;timer&gt; &lt;message&gt; [cron] [target] [at]</code></td><td align="left">定时发送消息</td></tr></tbody></table><ol><li><code>group</code> 为 要操作的群，在群聊中可以不指定</li><li><code>cron</code>, 为 CRON 表达式, 由 <code>秒 分钟 小时 日 月 周</code> 组成<br>例如 <code>0 0 1 * * ?</code> 表示每天 01:00 执行一次，<code>0 30 2 ? * 2-6</code> 表示星期一至星期五 每天 02:30 执行一次<br>可以使用在线编辑器生成 <a href="https://www.bejson.com/othertools/cron/">https://www.bejson.com/othertools/cron/</a><br>为防止被 空格 分成多个参数，请使用 <code>&quot;</code> 包裹参数</li><li><code>moment</code> 为 DURATION 表达式, 由 <code>PnDTnHnMn.nS</code> 组成<br>例如 <code>P1DT2H3M4.5S</code> 表示 一天二小时三分钟四点五秒，<code>PT5H</code> 表示 五小时</li><li>mute 指令，moment 小于 <code>0</code> 宵禁就会关闭<br>例如 <code>/timer mute PT5H &quot;0 0 1 ? * 2-6&quot;</code>, 将会在 星期一到星期五的凌晨01:00 禁言 5 小时<br>例如 <code>/timer mute PT0S &quot;0 0 0 1 * ?&quot;</code>, 将会 取消 禁言定时器</li><li>day 单位为天数的发言期限, 小于 <code>0</code> 宵禁就会关闭<br>例如 <code>/timer cleaner 365 &quot;0 0 12 ? * 0&quot;</code>, 将会 取消 禁言定时器</li></ol><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="联系人审批配置"><a href="#联系人审批配置" class="headerlink" title="联系人审批配置"></a>联系人审批配置</h3><ol><li><code>AdminAutoApproverConfig.yml</code></li></ol><h3 id="禁言自动退群配置"><a href="#禁言自动退群配置" class="headerlink" title="禁言自动退群配置"></a>禁言自动退群配置</h3><ol><li><code>AdminAutoQuitConfig.yml</code></li><li><code>mute_limit</code> 大于这个设置秒数的禁言会触发自动退群</li></ol><h3 id="留言配置"><a href="#留言配置" class="headerlink" title="留言配置"></a>留言配置</h3><ol><li><code>AdminCommentConfig.yml</code></li><li><code>xyz.cssxsh.mirai.plugin.mirai-administrator:comment.include</code> 作用: 拥有此权限的用户，可以给机器人留言</li></ol><h3 id="机器人上线消息配置"><a href="#机器人上线消息配置" class="headerlink" title="机器人上线消息配置"></a>机器人上线消息配置</h3><ol><li><code>AdminOnlineMessageConfig.yml</code></li><li><code>xyz.cssxsh.mirai.plugin.mirai-administrator:online.include</code> 作用: 拥有此权限的群，会发送上线通知</li></ol><h3 id="消息审查及机器人所有者"><a href="#消息审查及机器人所有者" class="headerlink" title="消息审查及机器人所有者"></a>消息审查及机器人所有者</h3><ol><li><code>AdminSetting.yml</code></li><li><code>censor_types</code> 可选值 <code>IMAGE, FLASH, SERVICE, APP, AUDIO, FORWARD, VIP, MARKET, MUSIC, POKE</code></li><li>正则词库, 须手动添加，将会加载 censor 文件夹中的 txt 文件，每一行对应一个正则匹配，会监听文件改动，无需重启</li></ol><h3 id="邮件配置"><a href="#邮件配置" class="headerlink" title="邮件配置"></a>邮件配置</h3><ol><li><code>AdminMailConfig.yml</code> 配置一些默认的发送对象</li><li><code>admin.mail.properties</code> 配置邮箱账号等</li></ol><p>格式参考</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">mail.host</span>=<span class="hljs-string">smtp.mail.qq.com</span><br><span class="hljs-attr">mail.auth</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">mail.user</span>=<span class="hljs-string">xxx</span><br><span class="hljs-attr">mail.password</span>=<span class="hljs-string">***</span><br><span class="hljs-attr">mail.from</span>=<span class="hljs-string">cssxsh@qq.com</span><br><span class="hljs-attr">mail.store.protocol</span>=<span class="hljs-string">smtp</span><br><span class="hljs-attr">mail.transport.protocol</span>=<span class="hljs-string">smtp</span><br><span class="hljs-comment"># smtp</span><br><span class="hljs-attr">mail.smtp.starttls.enable</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">mail.smtp.auth</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">mail.smtp.timeout</span>=<span class="hljs-string">15000</span><br></code></pre></td></tr></table></figure><p>QQ邮箱帮助： <a href="https://service.mail.qq.com/cgi-bin/help?subtype=1&&id=28&&no=1001256">https://service.mail.qq.com/cgi-bin/help?subtype=1&amp;&amp;id=28&amp;&amp;no=1001256</a></p>]]></content>
    
    
    <categories>
      
      <category>QQbot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>QQbot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DS作业-7-Ch5-22网安物联网-20231113</title>
    <link href="/2023/11/18/DS_homework_7_Ch5_22wanganwulian_20231113/"/>
    <url>/2023/11/18/DS_homework_7_Ch5_22wanganwulian_20231113/</url>
    
    <content type="html"><![CDATA[<p>图片加载不出来请点开看</p><p><img src="https://cyberdownload.anrunlu.net/FgJCJvVyhScTveE9fHtuBktOu4oB" srcset="/img/loading.gif" lazyload alt="img"></p><h1 id="11题"><a href="#11题" class="headerlink" title="11题"></a>11题</h1><blockquote><p>假设用于通讯的电文由 8 个字母组成，ABCDEFGH ，字母在电文中 的出现频率分别为 0.07,0.19,0.02,0.06,0.32,0.03,0.21,0.10,试设计 Huffman 编码。</p></blockquote><blockquote><p>bing写的……</p></blockquote><p>以下是一个使用C++实现Huffman编码的代码，这个代码创建了一个Huffman树，并为每个字符生成了一个二进制编码。这个代码更加简洁，适合初学者理解：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ElemType</span> &#123;<br>    <span class="hljs-type">int</span> weight;<br>    <span class="hljs-type">int</span> parent, lchild, rchild;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HuffmanTree</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">HuffmanTree</span>(<span class="hljs-type">int</span> w[], <span class="hljs-type">int</span> n);<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Print</span><span class="hljs-params">()</span></span>;<br><span class="hljs-keyword">private</span>:<br>    ElemType *huffTree;<br>    <span class="hljs-type">int</span> num;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Select</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> &amp;i1, <span class="hljs-type">int</span> &amp;i2)</span></span>;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">HuffmanTree::Select</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> &amp;i1, <span class="hljs-type">int</span> &amp;i2)</span> </span>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, temp;<br>    <span class="hljs-keyword">for</span> (; i &lt; n; i++)<br>        <span class="hljs-keyword">if</span> (huffTree[i].parent == <span class="hljs-number">-1</span>) &#123;i1 = i; <span class="hljs-keyword">break</span>;&#125;<br>    <span class="hljs-keyword">for</span> (i = i + <span class="hljs-number">1</span>; i &lt; n; i++)<br>        <span class="hljs-keyword">if</span> (huffTree[i].parent == <span class="hljs-number">-1</span>) &#123;i2 = i;<span class="hljs-keyword">break</span>;&#125;    <br>    <span class="hljs-keyword">if</span> (huffTree[i1].weight &gt; huffTree[i2].weight) &#123;<br>        temp = i1; i1 = i2;i2 = temp;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (i = i + <span class="hljs-number">1</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-keyword">if</span> (huffTree[i].parent == <span class="hljs-number">-1</span>) &#123;<br>            <span class="hljs-keyword">if</span> (huffTree[i].weight &lt; huffTree[i1].weight) &#123;<br>                i2 = i1; i1 = i;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (huffTree[i].weight &lt; huffTree[i2].weight) &#123;<br>                i2 = i;<br>            &#125;<br>        &#125;<br>    &#125;    <br>&#125;<br><br>HuffmanTree::<span class="hljs-built_in">HuffmanTree</span>(<span class="hljs-type">int</span> w[], <span class="hljs-type">int</span> n) &#123;<br>    <span class="hljs-type">int</span> i, k, i1, i2;<br>    huffTree = <span class="hljs-keyword">new</span> ElemType [<span class="hljs-number">2</span>*n<span class="hljs-number">-1</span>];<br>    num = n;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>*num<span class="hljs-number">-1</span>; i++) &#123;<br>        huffTree[i].parent = <span class="hljs-number">-1</span>;<br>        huffTree[i].lchild = huffTree[i].rchild = <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; num; i++) &#123;<br>        huffTree[i].weight = w[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span> (k = num; k &lt; <span class="hljs-number">2</span>*num<span class="hljs-number">-1</span>; k++) &#123;<br>        <span class="hljs-built_in">Select</span>(k, i1, i2);<br>        huffTree[k].weight = huffTree[i1].weight + huffTree[i2].weight;<br>        huffTree[i1].parent = k; huffTree[i2].parent = k; <br>        huffTree[k].lchild = i1; huffTree[k].rchild = i2;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">HuffmanTree::Print</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> i, k;<br>    cout &lt;&lt; <span class="hljs-string">&quot;每个叶子到根结点的路径是:&quot;</span> &lt;&lt; endl; <br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; num; i++) &#123;<br>        cout &lt;&lt; huffTree[i].weight;<br>        k = huffTree[i].parent;<br>        <span class="hljs-keyword">while</span> (k != <span class="hljs-number">-1</span>) &#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;--&gt;&quot;</span> &lt;&lt; huffTree[k].weight;<br>            k = huffTree[k].parent;<br>        &#125;<br>        cout &lt;&lt; endl;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> w[] = &#123;<span class="hljs-number">7</span>, <span class="hljs-number">19</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">32</span>, <span class="hljs-number">3</span>, <span class="hljs-number">21</span>, <span class="hljs-number">10</span>&#125;;<br>    <span class="hljs-function">HuffmanTree <span class="hljs-title">T</span><span class="hljs-params">(w, <span class="hljs-number">8</span>)</span></span>;<br>    T.<span class="hljs-built_in">Print</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这段代码首先计算每个字符的频率，然后使用优先队列（最小堆）来创建Huffman树。然后，它遍历Huffman树以生成Huffman编码。最后，它打印出每个字符及其对应的Huffman编码。</p><p>请注意，这只是一个基本的实现，可能需要根据您的具体需求进行修改和优化。例如，您可能需要将字符频率作为输入参数，而不是在代码中硬编码。此外，这个代码没有进行错误处理，也没有释放动态分配的内存。在实际使用中，您需要确保代码的健壮性和效率。</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>数据结构作业</category>
      
      <category>课后作业</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构作业</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>“卷卷”W1ndys-bot使用手册</title>
    <link href="/2023/11/18/bot_W1ndys_bot/"/>
    <url>/2023/11/18/bot_W1ndys_bot/</url>
    
    <content type="html"><![CDATA[<h1 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h1><p>卷卷目前的功能主要有：<br><a href="#%E5%85%B3%E9%94%AE%E8%AF%8D%E5%9B%9E%E5%A4%8D">关键词回复</a>      <a href="#%E5%BF%AB%E6%8D%B7%E7%BE%A4%E7%AE%A1%E7%90%86">快捷群管理</a>     <a href="#%E8%BF%9D%E7%A6%81%E8%AF%8D%E7%9B%91%E6%8E%A7">违禁词监控</a>    <a href="#%E5%AE%9A%E6%97%B6%E5%99%A8">定时器</a>     <a href="#%E5%A5%87%E6%80%AA%E5%9B%BE%E7%89%87%E7%94%9F%E6%88%90">奇怪图片生成</a>     <a href="#%E7%82%B9%E6%AD%8C">点歌</a>   <a href="#%E7%8C%9C%E7%BE%A4%E5%8F%8B">猜群友小游戏</a></p><p><a href="https://w1ndys.top/2023/12/13/bot-ChatLearning/#/">ChatLearning————学群友说话使用手册</a></p><p><a href="https://w1ndys.top/2023/11/20/bot-Mirai-Administrator/">Mirai Administrator使用手册</a></p><p><a href="https://w1ndys.top/2023/11/17/bot-HuYanSession2/">HuYanSession2——壶言会话2使用手册</a></p><p><a href="https://w1ndys.top/2023/12/06/bot-MuteGames/">MuteGames使用手册</a></p><h1 id="关键词回复"><a href="#关键词回复" class="headerlink" title="关键词回复"></a>关键词回复</h1><p>相关指令<a href="https://w1ndys.top/2023/11/17/bot-HuYanSession2#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9B%9E%E5%A4%8D">请看这里</a></p><h1 id="快捷群管理"><a href="#快捷群管理" class="headerlink" title="快捷群管理"></a>快捷群管理</h1><p>相关指令<a href="https://w1ndys.top/2023/11/17/bot-HuYanSession2/#%E7%BE%A4%E7%AE%A1%E7%90%86">请看这里</a></p><h1 id="违禁词监控"><a href="#违禁词监控" class="headerlink" title="违禁词监控"></a>违禁词监控</h1><p>相关指令<a href="https://w1ndys.top/2023/11/17/bot-HuYanSession2/#%E8%BF%9D%E7%A6%81%E8%AF%8D">请看这里</a></p><h1 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h1><p>相关指令<a href="https://w1ndys.top/2023/11/17/bot-HuYanSession2/#%E5%AE%9A%E6%97%B6%E5%99%A8">请看这里</a></p><h1 id="奇怪图片生成"><a href="#奇怪图片生成" class="headerlink" title="奇怪图片生成"></a>奇怪图片生成</h1><p>发送<code>pet</code>可以查看具体指令</p><p>根据提示操作即可</p><h1 id="点歌"><a href="#点歌" class="headerlink" title="点歌"></a>点歌</h1><h2 id="“-音乐-关键词”"><a href="#“-音乐-关键词”" class="headerlink" title="“#音乐 关键词”"></a>“#音乐 关键词”</h2><p>自动搜索所有源以找出来找最佳音频来源</p><h2 id="“-语音-关键词”"><a href="#“-语音-关键词”" class="headerlink" title="“#语音 关键词”"></a>“#语音 关键词”</h2><p>自动搜索所有源，以语音信息的形式发出</p><h2 id="“-外链-关键词”"><a href="#“-外链-关键词”" class="headerlink" title="“#外链 关键词”"></a>“#外链 关键词”</h2><p>自动搜索所有源，以外链信息的形式发出</p><h2 id="“-QQ-关键词”"><a href="#“-QQ-关键词”" class="headerlink" title="“#QQ 关键词”"></a>“#QQ 关键词”</h2><p>搜索QQ音乐</p><h2 id="“-网易-关键词”"><a href="#“-网易-关键词”" class="headerlink" title="“#网易 关键词”"></a>“#网易 关键词”</h2><p>搜索网易云音乐</p><h2 id="“-网易电台-关键词”"><a href="#“-网易电台-关键词”" class="headerlink" title="“#网易电台 关键词”"></a>“#网易电台 关键词”</h2><p>搜索网易云电台，一般来说是直接选择找到的第一个节目，但是关键词可以以 “电台名称|节目名称”的格式指定电台节目</p><h2 id="“-酷狗-关键词”"><a href="#“-酷狗-关键词”" class="headerlink" title="“#酷狗 关键词”"></a>“#酷狗 关键词”</h2><p>搜索酷狗音乐</p><h2 id="“-千千-关键词”"><a href="#“-千千-关键词”" class="headerlink" title="“#千千 关键词”"></a>“#千千 关键词”</h2><p>搜索千千音乐（百度音乐）</p><h1 id="猜群友"><a href="#猜群友" class="headerlink" title="猜群友"></a>猜群友</h1><p>命令：</p><p><code>#猜群友 开始</code>或者<code>#猜群友 paly</code>（因为开发者打错字了所以不是play）</p><p><code>#猜群友 guess@</code>或者<code>#猜群友 猜@</code></p><h1 id="MuteGames"><a href="#MuteGames" class="headerlink" title="MuteGames"></a>MuteGames</h1><p>一个以 <a href="https://github.com/mamoe/mirai">Mirai-Console</a> 为基础开发并为了满足群友PVP需求和抖M需求开发的禁言游戏集合</p><h1 id="群词云生成器"><a href="#群词云生成器" class="headerlink" title="群词云生成器"></a><a href="https://mirai.mamoe.net/topic/959/wordcloudplugin-%E7%BE%A4%E8%AF%8D%E4%BA%91%E7%94%9F%E6%88%90%E5%99%A8">群词云生成器</a></h1><p>使用方法:在群内发送 <code>本日词云</code>&#x2F;<code>昨日词云</code>&#x2F;<code>获取词云 </code>来使用<br>也可以发送 <code>用户本日词云</code>&#x2F;<code>用户昨日词云</code>&#x2F;<code>获取用户词云</code> +<code>&lt;用户名称&gt;</code> 来获取指定用户的词云<br>在config下timer文件可以配置定时任务<br>更多功能可查看配置文件</p>]]></content>
    
    
    <categories>
      
      <category>QQbot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>QQbot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HuYanSession2——壶言会话2使用手册</title>
    <link href="/2023/11/17/bot_HuYanSession2/"/>
    <url>/2023/11/17/bot_HuYanSession2/</url>
    
    <content type="html"><![CDATA[<p><a href="https://mirai.mamoe.net/topic/1377/%E5%A3%B6%E8%A8%802-huyansession2-%E5%A3%B6%E8%A8%80%E4%BC%9A%E8%AF%9D2">壶言手册发布页</a></p><h2 id="自定义回复"><a href="#自定义回复" class="headerlink" title="自定义回复"></a><strong>自定义回复</strong></h2><p><code>权限id：session</code></p><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>所有自定义回复都会携带作用域和匹配方式参数！<br>支持更简洁的输入且都是可选！默认为<code>精准</code>和<code>全局</code>！</p><p><code>[]</code>和<code>()</code>指数学中的域，在本插件表示<code>可填写</code>和<code>必填写</code>；<br><code>|</code>为或，表示两边都可以用；</p><p><strong>以下所有指令均适用于此表示方法!</strong></p><ul><li><code>[精准|1]</code> 精准匹配</li><li><code>[模糊|2]</code> 模糊匹配</li><li><code>[头部|3]</code> 头部匹配</li><li><code>[结尾|4]</code> 结尾匹配</li><li><code>[全局|0]</code> 全局匹配</li><li><code>[当前|-1]</code> 当前群匹配</li><li><code>[群组(id)|gr(id)]</code> 指定群组匹配</li></ul><p>具体参数含义可以去壶言1查看</p><hr><h3 id="一对一回复-会话"><a href="#一对一回复-会话" class="headerlink" title="一对一回复(会话)"></a>一对一回复(会话)</h3><p><code>权限id：sessionx</code></p><p>直接上指令</p><table><thead><tr><th align="left">指令</th><th align="left">含义</th><th align="left">案例</th><th align="left">中文格式</th></tr></thead><tbody><tr><td align="left"><code>xx (触发内容) (回复内容) [参数]</code></td><td align="left">快速添加关键字回复 参数可多填，以空格隔开</td><td align="left"><code>xx 怎么办 凉拌 2 0</code></td><td align="left"><code>学习 怎么办 凉拌 模糊 全局</code></td></tr><tr><td align="left"><code>xx：[触发内容]</code></td><td align="left">查询所有已保存的关键词回复,冒号中英都支持，后续的触发内容填上就是查询对应的那条</td><td align="left"><code>xx:</code></td><td align="left"><code>查询 怎么办</code></td></tr><tr><td align="left"><code>-xx：(触发内容)</code></td><td align="left">删除对应的关键词</td><td align="left"><code>-xx:怎么办</code></td><td align="left"><code>删除 怎么办</code></td></tr><tr><td align="left"><code>%xx</code></td><td align="left">通过多次消息发送的形式添加对话,便于手机使用</td><td align="left"><code>%xx</code></td><td align="left"><code>学习对话</code></td></tr><tr><td align="left"><code>-%xx</code></td><td align="left">由于多次消息形式添加的对话的触发词可能含有空格，因此要用对应的方式删除</td><td align="left"><code>-%xx</code></td><td align="left"><code>删除对话</code></td></tr></tbody></table><p>学习对话参数：</p><ul><li><code>0 | 全局</code> 修改触发作用域为这个机器人的所有群</li><li><code>1 | 精准</code> 只有发的消息跟触发词相同，才能触发回复，<code>不填写参数默认</code></li><li><code>2 | 模糊</code> 发送消息包含触发词即可触发。</li><li><code>3 | 头部</code> 发送消息的开头为触发词即可触发</li><li><code>4 | 结尾</code> 发送消息的结尾为触发词即可触发</li><li><code>5 | 正则</code> 以正则匹配触发消息，仅限<code>%xx</code>学习功能</li><li><code>-1 | 当前</code> 修改触发作用域为当期这个群，<code>不填写参数默认</code></li><li><code>gr(id) | 群组(id)</code> 修改作用域为对应的群组id，()不是指令，只是说明这个<code>id</code>必须填写，群组的使用方式在下方</li></ul><p>所有参数都在聊天指令的结尾以<code>(空格)(参数)</code>添加，无序。</p><p>对话和多词条支持的动态消息：</p><p>欢迎词支持的动态消息:</p><table><thead><tr><th align="left">动态消息类型</th><th align="left">动态消息参数</th><th align="left">含义</th><th align="left">案例</th><th align="left">匹配结果</th></tr></thead><tbody><tr><td align="left"><code>at</code></td><td align="left"><code>this</code></td><td align="left">@(at)触发这条消息的人</td><td align="left"><code>$at(this)</code></td><td align="left">@放空</td></tr><tr><td align="left"></td><td align="left"><code>qq</code></td><td align="left">@群里的这个人，会固定@这个人</td><td align="left"><code>$at(572490972)</code></td><td align="left">@放空</td></tr><tr><td align="left"><code>message</code></td><td align="left"><code>this</code></td><td align="left">这个人触发这条消息的内容</td><td align="left"><code>$message(this)</code></td><td align="left">不会写插件怎么办？</td></tr><tr><td align="left"><code>user</code></td><td align="left"><code>name</code></td><td align="left">获取这个人的名称</td><td align="left"><code>$user(name)</code></td><td align="left">放空</td></tr><tr><td align="left"></td><td align="left"><code>id</code></td><td align="left">获取这个人的qq</td><td align="left"><code>$user(id)</code></td><td align="left">572490972</td></tr><tr><td align="left"></td><td align="left"><code>avatar</code></td><td align="left">获取这个人的头像</td><td align="left"><code>$user(avatar)</code></td><td align="left">[图片]</td></tr><tr><td align="left"></td><td align="left"><code>title</code></td><td align="left">获取这个人的头衔，优先获取特殊头衔</td><td align="left"><code>$user(title)</code></td><td align="left">才不是放空了~</td></tr><tr><td align="left"></td><td align="left"><code>info</code></td><td align="left">详细信息??</td><td align="left"><code>$user(info)</code></td><td align="left"></td></tr><tr><td align="left"><code>time</code></td><td align="left"><code>now</code></td><td align="left">获取当前时间，默认格式<code>yyyy-MM-dd HH:mm:ss</code></td><td align="left"><code>$time(now)</code></td><td align="left">2022-8-28 02:15:15</td></tr><tr><td align="left"></td><td align="left"><code>(时间格式)</code></td><td align="left">按照指定的时间格式进行现在的时间输出</td><td align="left"><code>$time(HH:mm:ss)</code></td><td align="left">02:16:20</td></tr></tbody></table><hr><h3 id="正则消息回流-仅限一对一回复"><a href="#正则消息回流-仅限一对一回复" class="headerlink" title="正则消息回流(仅限一对一回复)"></a>正则消息回流(仅限一对一回复)</h3><p>请以<code>%xx</code>学习，学习内容为<code>(你的正则1)</code>，与之对应的回复内容为<code>$mate(1)</code>，<br>参数为5，也就是正则匹配，1对应第一个括号匹配的内容。</p><p>案例：</p><p>与之类似的，你只需要更改括号中正则，就可以达到你想要的东西。</p><hr><h3 id="一对多回复-多词条"><a href="#一对多回复-多词条" class="headerlink" title="一对多回复(多词条)"></a>一对多回复(多词条)</h3><p><code>权限id：sessiondct</code><br>指令:</p><table><thead><tr><th align="left">指令</th><th align="left">含义</th><th align="left">案例</th><th align="left">中文格式</th></tr></thead><tbody><tr><td align="left"><code>%dct</code></td><td align="left">添加多词条</td><td align="left"><code>%dct</code></td><td align="left"><code>添加多词条</code></td></tr><tr><td align="left"><code>dct:</code></td><td align="left">查询所有多词条</td><td align="left"><code>%dct</code></td><td align="left"><code>查询多词条</code></td></tr><tr><td align="left"><code>-dct:(id) [id]</code></td><td align="left">删除多词条，id通过查询得到，第一个id是对应的多次条id，第二个id是对应回复语句id，如果填写，就是删除这个多次回复语句下的这条回复，支持空格隔开一次删除多条</td><td align="left"><code>-dct：5</code></td><td align="left"><code>删除：2 34 44 23</code></td></tr></tbody></table><p>在添加多词条消息的途中，<br>发送</p><ul><li><code>!!! | ！！！</code> 结束添加，不进行保存，直接结束这次操作</li><li><code>!! | ！！</code> 在循环添加回复内容时，停止添加，退出进行多词条消息的保存</li><li><code>! | ！</code> 删除上一条添加的内容</li></ul><p>添加多词条参数：</p><ul><li><code>1 | 精准</code> 只有发的消息跟触发词相同，才能触发回复，<code>不填写参数默认</code></li><li><code>2 | 模糊</code> 发送消息包含触发词即可触发。</li><li><code>3 | 头部</code> 发送消息的开头为触发词即可触发</li><li><code>4 | 结尾</code> 发送消息的结尾为触发词即可触发</li><li><code>lx | 轮询</code> 多个词条回复的顺序为轮询，就是一条一条发送去,<code>不填写参数默认</code></li><li><code>sj | 随机</code> 修改回复顺序为随机,就是触发后随机从多词条中取一条拿来回复</li><li><code>0 | 全局</code> 修改触发作用域为这个机器人的所有群</li><li><code>gr(id) | 群组(id)</code> 修改作用域为对应的群组id，()不是指令，只是说明这个<code>id</code>必须填写</li></ul><p>单个多词条回复语句也支持动态消息，具体支持看上面的对话动态消息支持</p><hr><h2 id="群组"><a href="#群组" class="headerlink" title="群组"></a>群组</h2><p><code>权限id：list</code><br>用于设定特定几个群的群组系统，用于一些东西只在这几个群中触发，其他插件有个相反的功能叫群黑名单，我这个是正向的，只在那些群触发。</p><p>指令：</p><table><thead><tr><th align="left">指令</th><th align="left">含义</th><th align="left">案例</th><th align="left">中文格式</th></tr></thead><tbody><tr><td align="left"><code>+gr:(id) (群号)</code></td><td align="left">添加多个群为一个群组，群号支持多个</td><td align="left"><code>+gr：1 780594692</code></td><td align="left"><code>添加群组：1 780594692 390444068</code></td></tr><tr><td align="left"><code>gr:[id]</code></td><td align="left">查询所有群组信息，id填写后只查询对应的id所属群组信息</td><td align="left"><code>gr：</code></td><td align="left"><code>查询群组：1</code></td></tr><tr><td align="left"><code>-gr:(id) [群号]</code></td><td align="left">删除这个群组里面的某个群号，支持多个群号</td><td align="left"><code>-gr:1</code></td><td align="left"><code>删除群组：1 390444068 780594692</code></td></tr></tbody></table><p>与之类似，你只需要更换你的正则匹配就可以</p><hr><h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h2><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">权限<span class="hljs-built_in">id</span>：ds<br></code></pre></td></tr></table></figure><p>定时任务是指，按照指定的时间频率发送对应的消息，时间频率是<a href="http://cron.ciding.cc/#/">cron表达式</a>，不懂的人可以花5分钟了解一下，基本能满足任何时间频率<br>cron输入格式<code>$cron(* * * * * ?)</code></p><h3 id="定时管理"><a href="#定时管理" class="headerlink" title="定时管理"></a>定时管理</h3><p>指令:</p><table><thead><tr><th align="left">指令</th><th align="left">含义</th><th align="left">案例</th><th align="left">中文格式</th></tr></thead><tbody><tr><td align="left"><code>%ds</code></td><td align="left">添加定时任务，具体根据提示进行添加</td><td align="left"><code>%ds</code></td><td align="left">&#96;添加定时器</td></tr><tr><td align="left"><code>-ds(id)</code></td><td align="left">删除定时任务，id查询获得</td><td align="left"><code>-ds：1</code></td><td align="left">&#96;删除定时器：1</td></tr></tbody></table><p>在添加回复消息的途中，<br>发送</p><ul><li><code>!!! | ！！！</code> 结束添加，不进行保存，直接结束这次操作</li><li><code>!! | ！！</code> 在循环添加回复内容时，停止添加，退出进行定时任务的保存</li><li><code>! | ！</code> 删除上一条添加的内容</li></ul><p>定时任务的参数：</p><ul><li><code>hf | 回复</code> 定时器触发后只回复一条消息，<code>不填参数默认</code></li><li><code>lx | 轮询</code> 定时器的回复内容将成为多词条的样式，并且回复词条顺序为轮询，与随机冲突！</li><li><code>sj | 随机</code> 定时器的回复内容将成为多词条的样式，并且回复词条顺序为随机，与轮询冲突！</li><li><code>-1 | 当前</code> 作用域-当前这个群 <code>默认</code></li><li><code>0 | 全局</code> 作用域-全部群</li><li><code>gr(id) | 群组(id)</code> 作用域-指定群组</li></ul><h3 id="定时器操作"><a href="#定时器操作" class="headerlink" title="定时器操作"></a>定时器操作</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">权限<span class="hljs-built_in">id</span>：dscz<br></code></pre></td></tr></table></figure><table><thead><tr><th align="left">指令</th><th align="left">含义</th><th align="left">案例</th><th align="left">中文格式</th></tr></thead><tbody><tr><td align="left"><code>ds:</code></td><td align="left">查询定时任务</td><td align="left"><code>ds：</code></td><td align="left">&#96;查询定时器</td></tr><tr><td align="left"><code>%ds:(id)</code></td><td align="left">切换定时任务的状态，如果已经开启，则切换为关闭，id查询获取</td><td align="left"><code>%ds:1</code></td><td align="left">&#96;切换定时器:1</td></tr></tbody></table><hr><h2 id="群管理"><a href="#群管理" class="headerlink" title="群管理"></a>群管理</h2><p><code>权限id：group</code> <strong>此权限不是指令权限</strong></p><p>对于几个检测群的功能，需要先将对于群添加为检测群</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">/hy agroup (群号) <span class="hljs-comment">#添加</span><br>/hy dgroup (群号) <span class="hljs-comment">#删除</span><br></code></pre></td></tr></table></figure><p>依然支持在config文件手动添加</p><hr><h3 id="特殊头衔"><a href="#特殊头衔" class="headerlink" title="特殊头衔"></a>特殊头衔</h3><p>当你的机器人是群主时才可以使用,拥有<code>admin</code>、<code>group</code>权限的用户也可以用于使用。</p><p>指令：</p><table><thead><tr><th align="left">指令</th><th align="left">含义</th><th align="left">案例</th><th align="left">中文格式</th></tr></thead><tbody><tr><td align="left"><code>%@(user) (内容)</code></td><td align="left">给这个人修改特殊头衔</td><td align="left"><code>%@放空 才不是放空了~</code></td><td align="left"><code>设置头衔@放空 才不是放空了~</code></td></tr></tbody></table><p>是群主才行哦~</p><hr><h3 id="群欢迎词"><a href="#群欢迎词" class="headerlink" title="群欢迎词"></a>群欢迎词</h3><p><code>权限id：grouphyc</code><br>当有人申请的时候，拥有管理员权限的机器人并且加入了检测的群<br>机器人会给出提示<br>在配置文件中有是否启用开关</p><p>指令：</p><table><thead><tr><th align="left">指令</th><th align="left">含义</th><th align="left">案例</th><th align="left">中文格式</th></tr></thead><tbody><tr><td align="left">&#96;开门 id</td><td align="left">all&#96;</td><td align="left">同意这个人的进群申请</td><td align="left"><code>开门 1</code></td></tr><tr><td align="left">&#96;同意 id</td><td align="left">all&#96;</td><td align="left">同意这个人的进群申请</td><td align="left"><code>同意 1</code></td></tr><tr><td align="left">&#96;关门 id</td><td align="left">all&#96;</td><td align="left">关门这个人的进群申请</td><td align="left"><code>关门 1</code></td></tr><tr><td align="left">&#96;拒绝 id</td><td align="left">all&#96;</td><td align="left">拒绝这个人的进群申请</td><td align="left"><code>拒绝 1</code></td></tr></tbody></table><p>id是进群时所提示的门牌号</p><p>欢迎词功能不需要检测群支持！<br>欢迎词指令：</p><table><thead><tr><th align="left">指令</th><th align="left">含义</th><th align="left">案例</th><th align="left">中文格式</th></tr></thead><tbody><tr><td align="left"><code>%hyc</code></td><td align="left">添加欢迎词</td><td align="left"><code>%hyc</code></td><td align="left"><code>添加欢迎词</code></td></tr><tr><td align="left"><code>hyc：</code></td><td align="left">查询欢迎词词</td><td align="left"><code>hyc:</code></td><td align="left"><code>查询欢迎词</code></td></tr><tr><td align="left"><code>-hyc:(id) [id]</code></td><td align="left">删除欢迎，id查询获得，第二个id是对应的欢迎词集合中的某条欢迎词，不支持多条删除</td><td align="left"><code>-hyc：2</code></td><td align="left"><code>删除欢迎词：1 15</code></td></tr></tbody></table><p>参数:</p><ul><li><code>lx | 轮询</code> 欢迎词将以轮询的方式逐条发送，<code>默认</code></li><li><code>sj | 随机</code> 欢迎词将随机发送</li><li><code>0 | 全局</code> 作用域：全局</li><li><code>gr(id) | 群组(id)</code> 作用域：群组</li></ul><p>欢迎词支持的动态消息:</p><table><thead><tr><th align="left">动态消息类型</th><th align="left">动态消息参数</th><th align="left">含义</th><th align="left">案例</th><th align="left">匹配结果</th></tr></thead><tbody><tr><td align="left"><code>at</code></td><td align="left"><code>this</code></td><td align="left">@(at)这个进群的人</td><td align="left"><code>$at(this)</code></td><td align="left">@放空</td></tr><tr><td align="left"></td><td align="left"><code>that</code></td><td align="left">这个要请他的人，如果没有邀请的人则会at同意他进来的那个人</td><td align="left"><code>$at(that)</code></td><td align="left">@放空</td></tr><tr><td align="left"></td><td align="left"><code>qq</code></td><td align="left">@群里的这个人，会固定@这个人</td><td align="left"><code>$at(572490972)</code></td><td align="left">@放空</td></tr><tr><td align="left"><code>message</code></td><td align="left"><code>apply</code></td><td align="left">获取这个人进群申请的消息</td><td align="left"><code>$message(apply)</code></td><td align="left">这个人什么都没说…</td></tr><tr><td align="left"><code>user</code></td><td align="left"><code>name</code></td><td align="left">获取这个人进群时的名称</td><td align="left"><code>$user(name)</code></td><td align="left">放空</td></tr><tr><td align="left"></td><td align="left"><code>id</code></td><td align="left">获取这个人的qq</td><td align="left"><code>$user(id)</code></td><td align="left">572490972</td></tr><tr><td align="left"></td><td align="left"><code>avatar</code></td><td align="left">获取这个人的头像</td><td align="left"><code>$user(avatar)</code></td><td align="left">[图片]</td></tr><tr><td align="left"><code>time</code></td><td align="left">所有支持动态消息的都支持时间，具体用法在文档前面的对话</td><td align="left"></td><td align="left"></td><td align="left"></td></tr></tbody></table><hr><h3 id="禁言"><a href="#禁言" class="headerlink" title="禁言"></a>禁言</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">权限<span class="hljs-built_in">id</span>：groupjy<br></code></pre></td></tr></table></figure><p>此指令只有在你的机器人是管理员或群主才能触发</p><p>指令：</p><table><thead><tr><th align="left">指令</th><th align="left">含义</th><th align="left">案例</th><th align="left">中文格式</th></tr></thead><tbody><tr><td align="left"><code>@某人(禁言时间)</code></td><td align="left">在机器人有权限的情况下，对你@的这个人进行指定时间的禁言</td><td align="left"><code>@放空 3m</code></td><td align="left">&#96;&#96;</td></tr><tr><td align="left"><code>@某人 0s</code></td><td align="left">解除禁言</td><td align="left"><code>@放空</code></td><td align="left">&#96;&#96;</td></tr></tbody></table><p>时间频率：</p><ul><li><code>s</code> 秒</li><li><code>m</code> 分钟</li><li><code>h</code> 小时</li><li><code>d</code> 天</li></ul><hr><h3 id="违禁词"><a href="#违禁词" class="headerlink" title="违禁词"></a>违禁词</h3><p>不需要检测群支持。<br>此指令只有在你的机器人是管理员或群主才能起作用。</p><p>指令：</p><table><thead><tr><th align="left">指令</th><th align="left">含义</th><th align="left">案例</th><th align="left">中文格式</th></tr></thead><tbody><tr><td align="left"><code>+wjc:(内容) [param]</code></td><td align="left">添加违禁词，内容是触发内容，param是参数，具体可以查看下方</td><td align="left"><code>+wjc:色图 ch 2m</code></td><td align="left"><code>添加违禁词：色图 % jy</code></td></tr><tr><td align="left"><code>-wjc:(id)</code></td><td align="left">删除违禁词，id查询获得</td><td align="left"><code>-wjc：2</code></td><td align="left"><code>删除违禁词：2</code></td></tr><tr><td align="left"><code>wjc：</code></td><td align="left">查询所有违禁词</td><td align="left"><code>wjc：</code></td><td align="left"><code>查询违禁词</code></td></tr></tbody></table><h4 id="参数的意义"><a href="#参数的意义" class="headerlink" title="参数的意义"></a>参数的意义</h4><ul><li><code>ch</code> 违禁词默认撤回，当输入ch后，wjc将不撤回消息</li><li><code>jy</code> 违禁词默认禁言，当输入jy后，wjc将不禁言</li><li><code>3s</code> 修改禁言时间,具体时间格式<a href="#%E7%A6%81%E8%A8%80">查看禁言</a></li><li><code>%</code> 重写回复语句,支持动态消息，具体支持动态消息查看下方</li><li><code>[gr1 | 0 ]</code> 群组或全局，默认当前群</li><li><code>1,2,3,4</code> 匹配方式，跟关键词回复的匹配同理</li><li><code>hmd3</code> 开启触发3次后就会踢出群聊，数字可自选</li></ul><p>hmd参数输入后，将会开启小黑屋功能，不会提示！当某个人触发这个wjc到达次数，直接踢出本群，可以和下面的自动添加黑名单配合！</p><p>违禁词回复消息支持动态消息：</p><table><thead><tr><th align="left">动态消息类型</th><th align="left">动态消息参数</th><th align="left">含义</th><th align="left">案例</th><th align="left">匹配结果</th></tr></thead><tbody><tr><td align="left"><code>at</code></td><td align="left"><code>this</code></td><td align="left">@(at)触发这条消息的人</td><td align="left"><code>$at(this)</code></td><td align="left">@放空</td></tr><tr><td align="left"></td><td align="left"><code>qq</code></td><td align="left">@群里的这个人，会固定@这个人</td><td align="left"><code>$at(572490972)</code></td><td align="left">@放空</td></tr><tr><td align="left"><code>message</code></td><td align="left"><code>this</code></td><td align="left">这个人触发这条消息的内容</td><td align="left"><code>$message(this)</code></td><td align="left">不会写插件怎么办？</td></tr><tr><td align="left"></td><td align="left"><code>jyString</code></td><td align="left">这条违禁词的禁言时间中文</td><td align="left"><code>$message(jyString)</code></td><td align="left">禁言2分钟</td></tr><tr><td align="left"></td><td align="left"><code>prohibitString</code></td><td align="left">同上</td><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"><code>null</code></td><td align="left">不发送消息</td><td align="left"><code>$message(null)</code></td><td align="left"></td></tr><tr><td align="left"><code>user</code></td><td align="left"><code>name</code></td><td align="left">获取这个人的名称</td><td align="left"><code>$user(name)</code></td><td align="left">放空</td></tr><tr><td align="left"></td><td align="left"><code>id</code></td><td align="left">获取这个人的qq</td><td align="left"><code>$user(id)</code></td><td align="left">572490972</td></tr><tr><td align="left"></td><td align="left"><code>avatar</code></td><td align="left">获取这个人的头像</td><td align="left"><code>$user(avatar)</code></td><td align="left">[图片]</td></tr><tr><td align="left"></td><td align="left"><code>title</code></td><td align="left">获取这个人的头衔，优先获取特殊头衔</td><td align="left"><code>$user(title)</code></td><td align="left">才不是放空了~</td></tr><tr><td align="left"></td><td align="left"><code>info</code></td><td align="left">详细信息??</td><td align="left"><code>$user(info)</code></td><td align="left"></td></tr><tr><td align="left"><code>time</code></td><td align="left"><code>now</code></td><td align="left">获取当前时间，默认格式<code>yyyy-MM-dd HH:mm:ss</code></td><td align="left"><code>$time(now)</code></td><td align="left">2022-8-28 02:15:15</td></tr><tr><td align="left"></td><td align="left"><code>(时间格式)</code></td><td align="left">按照指定的时间格式进行现在的时间输出</td><td align="left"><code>$time(HH:mm:ss)</code></td><td align="left">02:16:20</td></tr></tbody></table><hr><h3 id="黑名单"><a href="#黑名单" class="headerlink" title="黑名单"></a>黑名单</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">权限<span class="hljs-built_in">id</span>：grouphmd<br></code></pre></td></tr></table></figure><p>不需要检测群支持。<br>此指令只有在你的机器人是管理员或群主才能触发。<br>支持作用域！！设置为全局时，该用户将被你的bot封禁！</p><table><thead><tr><th align="left">指令</th><th align="left">含义</th><th align="left">案例</th><th align="left">中文格式</th></tr></thead><tbody><tr><td align="left"><code>+hmd:@(user) [param]</code></td><td align="left">添加黑名单，参数看下方</td><td align="left"><code>+hmd:@放空 jy</code></td><td align="left"><code>添加黑名单:@放空 %</code></td></tr><tr><td align="left"><code>hmd:</code></td><td align="left">查询黑名单</td><td align="left"><code>hmd:</code></td><td align="left"><code>查询黑名单</code></td></tr><tr><td align="left"><code>-hmd:(id)</code></td><td align="left">删除黑名单,id查询获得</td><td align="left"><code>-hmd:3</code></td><td align="left"><code>删除黑名单:2</code></td></tr></tbody></table><p>参数：</p><ul><li><code>t</code> 默认检测到就踢出，携带参数不踢出</li><li><code>jy</code> 默认禁言(优先踢出),携带参数不禁言</li><li><code>ch</code> 默认撤回该用户的消息，携带不提出</li><li><code>0 | gr(id)</code> 作用域不携带参数<code>默认当前群</code></li><li><code>%</code> 重写封禁理由</li></ul><p>此功能需要检测群支持！<br>在配置文件blacklist有退群自动添加黑名单开关！<br>里面还有重写封禁理由！</p><hr><h3 id="撤回消息"><a href="#撤回消息" class="headerlink" title="撤回消息"></a>撤回消息</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">权限<span class="hljs-built_in">id</span>：groupch<br></code></pre></td></tr></table></figure><p>用于撤回上面的群消息，机器人是管理员和群主才能使用</p><p>指令：</p><table><thead><tr><th align="left">指令</th><th align="left">含义</th><th align="left">案例</th><th align="left">中文格式</th></tr></thead><tbody><tr><td align="left"><code>!recall</code></td><td align="left">撤回上面这条消息</td><td align="left"><code>!recall</code></td><td align="left"><code>撤回</code></td></tr><tr><td align="left"><code>！recall (number)</code></td><td align="left">撤回前面几条消息，不包含这条消息</td><td align="left"><code>！recall 5</code></td><td align="left"><code>撤回 5</code></td></tr><tr><td align="left"><code>!recall 1-5</code></td><td align="left">撤回上面1到5条，从第0条算起，包含这条消息</td><td align="left"><code>!recall 1-5</code></td><td align="left"><code>撤回 25-55</code></td></tr></tbody></table><p>具体用法试一试就明白，撤回多条消息时，权限可能会有冲突。</p><hr><h3 id="踢人"><a href="#踢人" class="headerlink" title="踢人"></a>踢人</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">权限<span class="hljs-built_in">id</span>：grouptr<br></code></pre></td></tr></table></figure><p>此指令只有在你的机器人是管理员或群主才能触发</p><table><thead><tr><th align="left">指令</th><th align="left">含义</th><th align="left">案例</th><th align="left">中文格式</th></tr></thead><tbody><tr><td align="left"><code>tr@(user) [hmd]</code></td><td align="left">踢人</td><td align="left"><code>tr@放空</code></td><td align="left"><code>踢人@放空</code></td></tr></tbody></table><p>参数：</p><ul><li><code>hmd</code> qq的踢人有个禁止此用户再次加群，输入后将禁止此用户再次加群</li></ul><hr><h2 id="权限系统"><a href="#权限系统" class="headerlink" title="权限系统"></a>权限系统</h2><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">权限<span class="hljs-built_in">id</span>：admin<br></code></pre></td></tr></table></figure><p>指令：</p><table><thead><tr><th align="left">指令</th><th align="left">含义</th><th align="left">案例</th><th align="left">中文格式</th></tr></thead><tbody><tr><td align="left"><code>+@(user) (权限id)</code></td><td align="left">赋予这个群的这个人的某个权限,权限id可在文档查看</td><td align="left"><code>+@放空 admin</code></td><td align="left"><code>添加@放空 all</code></td></tr><tr><td align="left"><code>-@(user)</code></td><td align="left">移除这个权限</td><td align="left"><code>-@放空 all</code></td><td align="left"><code>删除@放空 group</code></td></tr><tr><td align="left"><code>！power [param]</code></td><td align="left">查询权限列表，参数如下</td><td align="left"><code>!power all</code></td><td align="left"><code>权限列表 all</code></td></tr></tbody></table><p>参数：</p><ul><li>&#96;&#96;不填默认当前群</li><li><code>@某人</code> 查看指定人在本群的权限</li><li><code>all</code> 查询所有权限或添加所有权限或删除所有权限</li></ul><p>查询可以输入对应的群号 或者 qq号 来查询指定区域的权限信息<br>也可以直接 all 查询全部<br>然后通过 <code>上一页</code> 和 <code>下一页</code> 来进行翻译阅读</p><hr><h2 id="多机器人互冲"><a href="#多机器人互冲" class="headerlink" title="多机器人互冲"></a>多机器人互冲</h2><p>对于同时加载多个bot的使用者<br>容易存在一条指令两个bot触发，因此，加了一个‘暂停功能’</p><p>指令：</p><table><thead><tr><th align="left">指令</th><th align="left">含义</th><th align="left">案例</th><th align="left">中文格式</th></tr></thead><tbody><tr><td align="left"><code>！pause @(bot)</code></td><td align="left">你发的下一条消息，这个机器人将会忽略(包括触发)</td><td align="left"><code>！pause@乌拉</code></td><td align="left"></td></tr><tr><td align="left"><code>!pause @(bot) 5</code></td><td align="left">忽略下5条消息，消息数量自定</td><td align="left"><code>！pause @乌拉 5</code></td><td align="left"></td></tr></tbody></table><p>不带参数，默认忽略你的下一条消息<br>也可以自定义忽略下几条消息，这个记录是写在内存的，如果不小心输入多了（9999999999），重启就行。</p><hr><h2 id="插件指令"><a href="#插件指令" class="headerlink" title="插件指令"></a>插件指令</h2><table><thead><tr><th align="left">指令</th><th align="left">含义</th><th align="left">案例</th></tr></thead><tbody><tr><td align="left"><code>/hy aGroup</code></td><td align="left">添加一个监测群</td><td align="left"><code>/hy aGroup 390444068</code></td></tr><tr><td align="left"><code>/hy dGroup</code></td><td align="left">删除一个监测群</td><td align="left"><code>/hy dGroup 390444068</code></td></tr><tr><td align="left"><code>/hy v</code></td><td align="left">查询当前插件版本</td><td align="left"><code>/hy v</code></td></tr><tr><td align="left"><code>/hy transfer</code></td><td align="left">转移一个所属bot的数据到另一个bot</td><td align="left"><code>/hy transfer 2061954151 3630254205</code></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>QQbot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>QQbot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023山东省“技能兴鲁”职业技能大赛-网络安全赛项-学生组初赛CTF实操题wp（部分）</title>
    <link href="/2023/11/14/CTF_writeup_jnxl2023/"/>
    <url>/2023/11/14/CTF_writeup_jnxl2023/</url>
    
    <content type="html"><![CDATA[<h1 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h1><p>BabyRe和TEA两道题不多说了，扔进IDA直接出flag</p><h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><h2 id="日志里的FLAG"><a href="#日志里的FLAG" class="headerlink" title="日志里的FLAG"></a>日志里的FLAG</h2><blockquote><p>膜拜nakai!佬</p></blockquote><p>双写绕过</p><p><img src="/img/jnxl2023/1.png" srcset="/img/loading.gif" lazyload></p><h2 id="购买FLAG"><a href="#购买FLAG" class="headerlink" title="购买FLAG"></a>购买FLAG</h2><p>更改api中的value值，之后金钱足够直接购买即可。</p><p><img src="/img/jnxl2023/2.png" srcset="/img/loading.gif" lazyload></p><h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><h2 id="时间不多了"><a href="#时间不多了" class="headerlink" title="时间不多了"></a>时间不多了</h2><p>第一步，解压文件之后发现有一张日历和很多二维码</p><p>批量解码一下</p><p>得到这些有用信息</p><p>其他的二维码都是无用的</p><p>base64解密一下得到数字</p><p>这题的关键点在于根据数字对应日历表画画</p><table><thead><tr><th>qrcode_10.png</th><th>MiAzIDQgOSAxNSAxNyAxOCAyMyAzMA&#x3D;&#x3D;</th><th>QRCode</th><th>2 3 4 9 15 17 18 23 30</th><th>F</th></tr></thead><tbody><tr><td>qrcode_12.png</td><td>NiAxMyAyMCAyNyAyOA&#x3D;&#x3D;</td><td>QRCode</td><td>6 13 20 27 28</td><td>L</td></tr><tr><td>qrcode_14.png</td><td>MiAxNSAyMiAxNyAyNCAxNg&#x3D;&#x3D;</td><td>QRCode</td><td>2 15 22 17 24 16</td><td>A</td></tr><tr><td>qrcode_15.png</td><td>NiA1IDQgMTEgMTggMjUgMjYgMjcgMjggMjAgMjE&#x3D;</td><td>QRCode</td><td>6 5 4 11 18 25 26 27 28 20 21</td><td>G</td></tr><tr><td>qrcode_16.png</td><td>MiAzIDkgMTUgMjMgMzAgMzE&#x3D;</td><td>QRCode</td><td>2 3 9 15 23 30 31</td><td>{</td></tr><tr><td>qrcode_25.png</td><td>NSAxMyAyMCAyNyAxNCAyMQ&#x3D;&#x3D;</td><td>QRCode</td><td>5 13 20 27 14 21</td><td>D</td></tr><tr><td>qrcode_26.png</td><td>NiAxOSAyNiAyMSAyOCAyMA&#x3D;&#x3D;</td><td>QRCode</td><td>6 19 26 21 28 20</td><td>A</td></tr><tr><td>qrcode_27.png</td><td>OSAxMCAxMSAxNyAyNCAzMQ&#x3D;&#x3D;</td><td>QRCode</td><td>9 10 11 17 24 31</td><td>T</td></tr><tr><td>qrcode_35.png</td><td>MSAyIDMgOCAxNSAxNiAxNyAyMiAyOSAzMA&#x3D;&#x3D;</td><td>QRCode</td><td>1 2 3 8 15 16 17 22 29 30</td><td>E</td></tr><tr><td>qrcode_36.png</td><td>MiAzIDkgMTYgMTcgMjQgMzAgMzE&#x3D;</td><td>QRCode</td><td>2 3 9 16 17 24 30 31</td><td>S</td></tr><tr><td>qrcode_37.png</td><td>MiA4IDE1IDIzIDI0IDE4IDExIDM&#x3D;</td><td>QRCode</td><td>2 8 15 23 24 18 11 3</td><td>O</td></tr><tr><td>qrcode_38.png</td><td>MSAyIDkgMTcgMjMgMzAgMjk&#x3D;</td><td>QRCode</td><td>1 2 9 17 23 30 29</td><td>}</td></tr></tbody></table><p>前两个字母没画出来，枚举得到flag</p><p><img src="/img/jnxl2023/%E6%97%B6%E9%97%B4%E4%B8%8D%E5%A4%9A%E4%BA%86wp.jpg" srcset="/img/loading.gif" lazyload></p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">flag</span><span class="hljs-template-variable">&#123;DATESO&#125;</span><br></code></pre></td></tr></table></figure><h2 id="Datas-secret"><a href="#Datas-secret" class="headerlink" title="Datas_secret"></a>Datas_secret</h2><p>扔进winhex直接搜就行</p><p><img src="/img/jnxl2023/3.png" srcset="/img/loading.gif" lazyload></p><h1 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h1><h2 id="BabyRSA"><a href="#BabyRSA" class="headerlink" title="BabyRSA"></a>BabyRSA</h2><p>共模攻击</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment">#coding:utf-8</span><br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">import</span> libnum<br>c1= <span class="hljs-number">295658788074157816670393593671184451782123605135184996662528766686642109492132533952160456440919197939935742027629210419312032730004032666912404179229952394343569590488768472800784830058534578639706805456277578757250365834591813481786084959844340418320620440636997732915872346619679993987903742079972676425404864295283955565746004124045155664762158516005326368384488346997494926539295740248007606864906884407198601326915643000764477435205579583836917598642053869541648731754384026407310786288997756775232852732033054591953078116290088267188296560877481534143707414153749140670404213262630122369941889862912426176115220410931992046973925991075473656781794097329513119548617920256625579072719981729556158392454956362838720993254919638177786730004086883044525967823454986241038123671907279715773848673713008902432841449556980494600938989397567019338970200872333713986608537678650318511128703055185979834233315117153115613952940778789222515375743186066883492596068186378372611075958909412662251913621375996518671118244409393829141365207153662416265238312206577474940661548038715230313608405518108581922154335405303862701783678336161505643508831482409054761542959278392940037561736468155509922530420964726953308604138731805543997557197893</span><br>c2= <span class="hljs-number">219454357017359138238563345020257296433275019950745269658921329153689267055871241202626317639487122341365759606018366576305678949982408366815977617307888894995289951707241009621444691307275542686770303994110416384086739599181934011812163156338859395115724413628620575935425221522079154607411877822646179457455118804970038865452163833416447505142114976758532806787419762250921421272492466133659234602794242531776209324085944417173098820895755851386042954303555790085402616519592065446023510096773546730662074307900123349548340507067971393642039476326402523930789953483843698593104578179169624886357604650615249286150367204109726460230037005175927865466199600272190112483494387929732049738312695796015009178606906549093365261114132002222704510637261038978031857378729856467918978246977163353146981239215886053379980533235786905270211605457443266127512667882149285155542735532327780898540341696557860555884277608448996773250847560675650046440569736010800155992053362696097992699863059686881689842065077997427372972290872427656847223849769329713841670853267584161386494525686204330028142217737052411422895042170169703550774908415280261731967511925122636118468176645781785352430657090024109246103061415446942211482659025722233229083093876</span><br>n= <span class="hljs-number">549785700554963543393222974982211136067042846536450239199968863551137077564447156832697813202963334596948298760762991663065504535035143397250208506445202607659676332816610122258862787906629525548439909792727593939957178783466989816894454522630301104349317697612174888605090061231211194974337772507249418567229560145454791075929946332668360553910328900103264562348881791004831033587660163923517440406942993348972589262051083908075790422096042338651001937740085414301019827335549437397656318095919875053213333008551761167437683250592542156348138055482054331330609375930693247365749085041596578748797801601289693449629548744535914348450016287545136436964138806081283470239420969311905998245715160353982174880912315601876305613349276824998688275587308133069178764001924866079232824850209407236694426779262951463035278887804883917516580169051530590466082511045503107508117656821592538792566264160105940730326929474477787053681516844548383814388361089499629312831727731267796167205124844987064389097138747938870221504684958713047985374714612321540288239995935347905120710583169131356970267386562665138437631517802641426575996558648777831102462652517305151412695166331935115971277205305816897886952646432233312318756155702046584205507027737</span><br>e1 = <span class="hljs-number">3247473589</span><br>e2 = <span class="hljs-number">3698409173</span><br><br><span class="hljs-comment">#共模攻击</span><br><span class="hljs-comment">#共模攻击函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rsa_gong_N_def</span>(<span class="hljs-params">e1,e2,c1,c2,n</span>):<br>    e1, e2, c1, c2, n=<span class="hljs-built_in">int</span>(e1),<span class="hljs-built_in">int</span>(e2),<span class="hljs-built_in">int</span>(c1),<span class="hljs-built_in">int</span>(c2),<span class="hljs-built_in">int</span>(n)<br>    s = gmpy2.gcdext(e1, e2)<br>    s1 = s[<span class="hljs-number">1</span>]<br>    s2 = s[<span class="hljs-number">2</span>]<br>    <span class="hljs-keyword">if</span> s1 &lt; <span class="hljs-number">0</span>:<br>        s1 = - s1<br>        c1 = gmpy2.invert(c1, n)<br>    <span class="hljs-keyword">elif</span> s2 &lt; <span class="hljs-number">0</span>:<br>        s2 = - s2<br>        c2 = gmpy2.invert(c2, n)<br>    m = (<span class="hljs-built_in">pow</span>(c1,s1,n) * <span class="hljs-built_in">pow</span>(c2 ,s2 ,n)) % n<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(m)<br>m = rsa_gong_N_def(e1,e2,c1,c2,n)<br><span class="hljs-built_in">print</span>(m)<br><span class="hljs-built_in">print</span>(libnum.n2s(<span class="hljs-built_in">int</span>(m)))<br></code></pre></td></tr></table></figure><h2 id="简单的Python"><a href="#简单的Python" class="headerlink" title="简单的Python"></a>简单的Python</h2><p>看这位佬的博客吧，这题被出题人坑了，明白加密原理，但是死活解不出来，看了佬的wp才知道是base100有空格</p><p><a href="https://blog.csdn.net/weixin_64422989/article/details/134405587?csdn_share_tail=%7B%22type%22:%22blog%22,%22rType%22:%22article%22,%22rId%22:%22134405587%22,%22source%22:%22weixin_64422989%22%7D&fromshare=blogdetail#/">“技能兴鲁”职业技能大赛-网络安全赛项-学生组初赛 WP</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> tqdm<br><span class="hljs-keyword">from</span> qsnctf <span class="hljs-keyword">import</span> *<br><br>flag = <span class="hljs-string">&quot;👍👤🐧👮👛🐩👈👰👌👏👣👍👎🐾👯👎👍🐧👛🐫👍🐨👐👮👑🐻👉👎👄👍👣🐪👎👢👉👊👍🐧🐨👎👙🐻👅👏👘🐨👁👋👍👡🐸👯👍🐩👁🐼👋👣👟👟👄👌👧👌👍👤👧🐹👜🐽👐👰👊👢👍👌👙🐾👟👦👋👍👍👮👍👍👑👫👚🐼👁👣👉👣👣🐬👌🐩👫👎👍👎👁🐿👘🐾🐰👌👍👣👑🐪👍👣👑👘👚👍🐽👫👉👣👉👅👙🐼👧👁👍👤🐨🐧👘🐨👛🐿👊👢👛👡👉👋👣👘👍👡👅👊👉🐨👧👍👎👤🐽👢👉🐧🐬🐾👌🐩🐨🐫👌🐩👁🐿👛👱🐽👎👍🐼👦👮👍👡🐽👘👎🐽👅👩👘🐾👟👊👜👤👯👎👍👤👧👆👋🐧🐧👯👚🐽👑👏👙👌👑👩👌👡🐸🐨👉🐨👧🐽👎👣👅👌👙🐽👧👍👍👤👫👮👍🐩👁👌👉👏👛👎👘👢👑👏👑🐼👑👆👚🐨👛👪👘🐾👣👊👄👤👟👑👍🐨👛🐫👙🐩👀👰👍👥👅👍👙🐽👑👋👐👣👍👘👚👍👑👫👛🐾🐽👅👉👣👑🐧👑👌👑👆👍👎👁👍👚🐼👛👑👄🐽👑🐪👍👡👁👂👍👍👁👐👑🐽👧👎👉👍👧👰👍👋🐹👘👋🐩👅👪👚🐼👟👡👉👣👁👋👍👣👟🐺👎👣👐👯👎👣👅👊👄👣🐽🐬👌👤👫👢👘👣👁👫👌👣👣👑👙🐽👑👟👐🐩👯👎👚🐨👍👩👑🐽👛👠👉👥🐹👑👎👣👍👘👋🐨👑👏👊👣👑👏👍🐼👧👎👐👢👑👂👊🐽👑👨👊👢👑👣👍👣👑👑👎👢👑👮👙🐾🐼👱👈👢👣👏👎🐿🐹🐿👍🐻👁👊👍🐨👑👬👌👤👟👊👘👱👍👱👎👎👯👦👙🐨👛🐾👎👥👉👅👊🐾👉👪👌👡🐹👪👅🐽👌👰👛🐾👫👏👉🐧👧👀👍👎👯👪👎👤👁🐾👎👤👟👑👄👍👧👟👑🐼👛👊👊🐽👁👩👅👍👅👠👉👤🐰🐪👍🐩👯👎👐👍👈👯👎👣👟👋👙🐽👧👐👍👢👍👮👍🐨👣👩👎👢👫👋👉👣👧👯👌👤🐨🐾👌🐩👁👍👙🐻👑👏👘🐨👧👩👐👌👛🐽👜🐾👅🐿👆👍👛👟👘🐧👧👦👍👢👉👂👋🐩👉🐾👊👥👁👟👉🐩👟👋👐👏👧👎👜👣👛👏👜🐾🐰👠👄👎👉🐿👍🐩🐬👊👋👣👛🐿👌👣👑👌👍👣👧🐿👋👋🐽👊👍👤🐽🐿👆👎👟👠👉👏🐹🐭👎👋🐹👘👚🐨👛👫👊👢👛👏👙👎👟👘👋👎🐬👦👎🐽👢👯👎👢👛👎👍👢👧👱👍🐾👪🐨👍🐧🐨👍👙👱🐽👎👙👏🐹👃👋👢👑👉👜🐽👛👪👘🐽👉👠👉👥🐹👯👍👎👯👢👌🐨👣👎👌👣👑👏👙👌👑👆👋👍👑👮👜🐽👌👰👛🐻🐹👎👄👍👧👰👐🐧👑👮👎🐾🐼👯👚🐿👁👑👍👎👉🐾👑👌👛👆👉🐩👁🐾👘🐾👟👅👍👥🐹👭👍👤👫👊👊🐨👉👫👍👢👛👡👉👎👯👍👐👣👛👦👍🐽👉👏👅👎🐰👎👍👤👉👏👍👎👪🐬👌👢🐨👏👌👥👧👎👄👎👟👭👍🐧👛👂👎👍👍👩👆👍👑👟👘🐨👧👀👍🐾👯👘👐👍👛🐽👅👍👑👇👍🐩👟👧👌👣👟🐹👛🐨👑👪👑🐻👉👡👄👎👉🐧👌🐩👫👢👎🐾👁👏👘🐾🐽👌👍👱👍👭👍🐧👑👩👜🐽👛👩👛🐾👫👊👘🐪🐹🐭👍👣👛🐫👋🐩🐽👎👊👏👧👑👄🐩👟👏👐👋🐽👮👘🐽👑👌👉👣👑👣👉👤👉🐨👌🐩👪🐨👎🐽👁👐👈👥👟👎👍🐪👟👩👋👢👛🐾👉🐨👑👐👑🐾👟👊👍👋👍👌👍👎🐨🐫👛🐩👍🐾👍👏👣👢👉🐪👉👦👐👣👍👮👍🐨👑👫👚🐾🐽👏👙🐽👧👏👐🐧👛👦👎👣👑👏👌👢👛👘👍👎👉👇👌🐧👌🐬👍🐨👧🐿👘🐾👟👅👊🐼👁🐩👍👤🐨🐧👌🐨👄👯👌👏👣👍👘🐩👉👌👐👤👫👮👙🐨👍👨👊👤🐰👎👉👤👯👑👐🐧👑👢👙🐾👁🐿👌👣👣👘👍👎👄🐨👐👍👌👯👎🐽👍👩👘🐽👛👅👘👣👑👌👍👢👛🐫👋🐨👅🐿👉👢👛👉👙🐽👧👧👍👢👍👍👛🐨👑👫👚🐼👛👍👄👍👧🐧👌👤👫👦👌🐽👑👫👘🐽👉👌👍👎👟🐻👋👣👑👘👊🐾👍🐿👉👤👧👅👍🐨👀👮👍👋👁🐧👘🐨👛🐿👊👣👟👟👉🐧👑👍👍👥👧👎👛👣👐👮👎👥👁👣👉👤👉👰👎👢👑👢👍🐩🐼👱👈👡👑👎👘🐩👉🐭👋👍👑👢👉🐨👅👪👎👤👧👊👍🐪👟👐👎👎👯👦👈🐨👉🐾👌👥👁👏👙🐼👧👪👌👤🐨👊👜👣👣👍👎👣👅👟👉👋🐽👱👌🐩🐬👦👍🐨👑🐭👉👋🐹👘👉🐼👑👩👌👡👁👂👊👍👉👫👘🐽👅👟👜👣👑👈👍👢👑👘👐👎👈👰👍👢👛👎👎🐾👯👩👌👢👍👂👎🐽👉👎👎👥👛👣👍👤👫🐪👍🐩🐬👢👎🐽👀👮👍👡👉👑👄🐽👁👇👍🐩🐨🐽👜👍👍👩👑🐾🐽👎👄🐩👟👀👎👋👀👯👊🐨👀👯👚🐼👟👠👉👤👟👋👍👣👟🐺👊🐨👑👫👄👋🐹👍👄👌🐨🐫👍👣👟👦👎🐽👛🐿👘🐽👣👑👙👏👟👟👍👡🐽👪👚🐨👧🐿👆👍👛👊👙👏👟👘👎👋🐹👘👘🐩👁🐿👊👢👟👍👙🐾👯👟👍👣👛👅👄👍👣👎👍👏👟👏👉👣👑👰👐👌👑👢👋👤🐽👪👎👣👍👎👘🐩👈🐧👍🐻🐽👆👊🐽👁👩👑🐽👁👠👉👥🐹👮👍👤👫👎👍👤👈👯👎👥👉👡👉👎👉👎👋👍👑👮👄🐽👍👫👛🐾🐰👍👉👣👧🐧👐👌👑👊👍👍👑👏👘🐼👉👌👙🐽👧👟👌🐧👛👎👊🐽👁👫👚🐼🐬👎👄👌👣🐪👍👣👉👂👄🐾🐼👯👑🐼👟👋👙🐾👟👦👌👡🐹👘👍👣👑👬👚🐽👛👢👙🐽👣🐪👍🐩🐬👂👙🐽👁👫👌👥👣👏👘🐨👧👩👍👡👁🐽👜👣🐽👨👎👣👛👟👄👣👀🐩👍🐽👑👘👎👤👈👮👄👍👛👏👙👎👯👪👐👋🐽👮👎👍👛👏👜🐾🐰👉👄👍👁🐿👍👎🐬👂👎🐾👁🐽👚🐿👅👍👙👋🐽👋👑👎👯👪👍👣👛👪👋👤👟👎👘🐪🐸👯👍👍👛🐫👛🐨👐👰👊👣👣👍👙🐾👟👟👌👢👍👘👐👍👧👍👑🐼👫👋👍👢🐬👱👐👌👛👦👋👢🐨👍👚🐽👛👎👙🐾👅🐫👋👢👛👉👜👍👑👩👑🐽👛👠👙🐼👧👇👍👤👯👢👌🐨👐👯👌👣👟👢👊🐾👉👏👋👍👛🐫👜👍👑👏👄👌👛👏👉👢👣🐪👍👤👧👊👎👢🐨🐿👘🐼👯👎👄👥👟👟👍🐧👑👎👚👣👧🐿👉👣👛👎👄👌👧👉👍👣👉🐺👍👢🐬👎👎👏👟👡👉👎👟👦👌👡👁👦👋🐨👌👮👍👢👫👅👙🐽👧🐧👋👍👉🐺👍👢🐨👍👄👋👉👎👍👤👟👱👍👤🐨🐽👜👍👍👪👍👣👧👠👎🐽👀👱👎👎👧🐾👍🐩👅👎👋👥👉👇👍👤👉👋👐👣👟👦👐👍👛👌👈👤🐽👟👄👢👧👀👌🐩👫👦👍👤👁🐿👜🐾👟👎👙🐾👉👆👋👍👑👪👍🐨👑👐👘🐽👟👊👙🐽👧🐬👎👍👍👘👘🐨👉👫👉👥👅👏👙🐽👑👏👐👋👁👉👄🐽👣👌👉👢🐰👊👄👍👧🐨👍🐾👯👦👘👍👁👪👚🐽👣👏👍🐪👉👭👌👋🐽👆👍🐨👛👩👑🐽👑👟👄👣👁👏👍🐽👑👘👛🐧🐨🐾👍👥👉👢👉👱👣👎👌👤👯👪👅👍👣👍👘🐼👅👎👙👌👧👀👐👌👍👊👍👎👁👐👘🐿👁👎👙🐽👧🐿👑🐼👑👂👛🐾👅🐽👅👍👛👅👍👎👮👱👍👤👯👊👊🐧🐨🐿👉👏👟👘👉👎👟👌👐👢👛👦👙🐨👍👨👈👤🐽👎👙🐽👧🐨👐🐧👑👢👘🐩👁🐾👙🐻👅👎👄👡👍👇👍🐻👁👂👉👤👅👀👚🐽👟👟👄👣👀👱👎👍👑👘👋🐨👁👪👋👥👁👠👉👤👉👆👐👤👯👂👜👍👛👐👚🐼👛👎👙👍👑👏👍🐾🐬👎👍🐾👁🐾👊👥🐹👎👙🐽👧🐪👍🐨👑👘👉🐨👣🐭👉👤👣👅👍🐨👁👀👍🐩👫👘👘🐨👛🐿👊👢👑👡👊🐼🐬👎👐👣👉🐾👍🐽👧👏👜🐿👅👎👙🐾👉👱👍🐾🐨👦👍🐩🐼👱👈👏👟👎👍👤👈🐧👑🐻🐽👑👜👍👅👪👙🐽👑👠👉🐩👟👦👍👎👫👎👐👍👣👎👚🐽👑👘👉👏👉👌👍👤👪🐨👜👣👣👍👑🐾🐰👌👘👱🐽👎👐🐧👑👘👍🐩👁🐿👋👡👉👌👘🐩👉👊👑👍👑👘👚👣👧🐾👑🐾👣👊👄👌👧🐩👍👣👚🐨👛🐩👄👰👊👏👟👍👙🐾👉👐👐👤🐨👊👚🐨👣👩👎👥👅👆👍👤👫🐪👍👤🐨🐧👍🐧🐨🐼👉👢👑👍👙👏🐹🐿👍🐩👯👘👎🐽👍👬👎👣👛👅👙👤👟👦👍👡🐹👘👍🐩👅👪👚🐼👟👊👙🐾👉👏👋👍👍👮👌👣👑👪👑🐿👛👋👄👌👣🐫👌🐨👟👪👌🐩🐼👰👘🐿🐹👍👙👏👄👯👐🐧👑👪👍👍🐽👬👑🐼🐬👠👉👥🐸👮👍🐽👑👊👈🐨👑👩👄👍👑👅👍🐽👁👏👍👤🐨👦👜👣👑👫👄👌👑👣👍👣👑👱👍🐩👯👮👘👍👛🐾👊👏👧👏👍👣👑👟👍👡👁👊👊🐽👑👩👎👤👫👊👄🐧👁👌👎👎👫👦👈🐧🐬🐾👎👣👍👋👎🐾👉👇👍👡🐹👮👊👍👌👰👛🐾🐰👎👙👌👧👀👑👌👛👦👍🐩👁🐿👌👢🐰👌👍👣👧👱👍👡🐽👘👎👎🐽🐾👘🐽👅👠👉👥🐸🐩👍🐨👑👎👐👎🐼👯👌👥👅👏👎🐾👯👦👌👢👍👮👎🐽👉👎👎👥👛👟👉👣👐🐩👌👤👫👮👙🐽👁👪👊👡🐽👎👙👏👟👃👐👍👑👂👚🐩👅🐾👙🐽👛👊👙🐼👧👀👍👏👧🐹👄👎👄👯👑🐿👁👘👉👣👧👦👋👎👯👂👎🐽👑🐾👎👤🐽👢👄🐻🐽🐿👍👤🐬👊👘🐨👁🐭👙🐽👛👍👙👏👟👱👋👣👑👪👍👤🐽🐽👋👣👛👠👍👏🐹👁👎👍👍👎👋🐨👣👎👊👢👑👏👙👎👟👘👑👎👫👘👄🐨👍👪👎👣👛👢👉🐧🐬🐾👋👣👑👢👋👣👑👏👛🐪👧👎👙👏👟👋👌👱🐸👯👊🐽👁👐👘🐾🐽👊👍🐩👟👍👎👎👫👢👙🐩👀👯👍👥🐽👉👙👌👑👏👐👢👑👮👄🐽👧👍👘🐾👫👌👘👱🐽👑👌👎👯👪👐👍👑👏👘🐼👯👑👘🐨👧👘👑👌👑👢👚👤👁🐿👉👣👅👎👄👌👐👱👍👤👯👊👊🐨👁👫👍👥👅👊👙🐾👯👟👌👤🐨👦👚🐽👍👫👜🐿👛👠👄👎👉👏👍👎👫🐧👌🐧🐨👎👙🐻👉👏👘🐩👟👏👍👢👛👂👎🐾👍👀👋👣👧👎👉👍👦👱👍👡🐽👘👘🐨👛🐿👍👢👟👇👍👢👧👆👍👣👉🐽👄🐽👑👪👑🐻👉👟👄👎👯👏👌🐩👯👢👘👣👅🐽👅👍👛👑👙🐽👁🐿👍👢👑👑👜👎👍🐿👛🐾👧👠👉👥🐹👎👍👎🐨🐫👘🐨👉👪👎👥👍👉👘👣👧👐👍👢👍👂👘🐽👑👨👉👤👫👊👄👎👉🐨👍🐾👯👊👘🐼🐨👫👘🐾🐰👎👍🐪👉👏👎👍👑👪👍🐩👅🐾👎👤🐽👊👎🐽👁👍👍👤🐨👱👄👎👍👪👙🐽👑👘👉👱👣👍👐👏👧🐾👍🐨👢👮👎👤🐽👎👄👢👧👀👍🐾👧👊👍👎🐼👰👌👣👅👘👍👣👧👟👐🐩👯👮👉🐨👧🐾👘🐽👅👅👄👤👞🐨👍👤👯👢👛🐨🐼👯👙🐽👟👌👘🐩👉👏👐👤👯👂👚🐨👌👮👑🐽👅👡👄👎👯👰👍🐩👯👢👋🐨👑👬👈👣👛👑👍👎👈👮👍🐧👑👁👛🐩👅🐽👘🐽👧👅👉👥🐹🐩👍👡👁👱👜🐽👅🐿👉👢👑👣👉👤👉👦👐👋🐽👮👙🐨👑👏👄👋👉👟👄👢🐬🐧👍👤👫👢👐👍👁👌👍👣👟👑👙👏👉👃👌🐩👯👑👜🐽👍👩👚🐾👯👊👘👱🐼🐧👍👋🐽👦👙🐩🐽👪👊👣👟👟👊🐼👁👎👐👣👉🐾👛👣👑👩👎👤🐽👡👄👢👑🐾👍🐾👯👊👋👣👑👬👈👏👛👎👉👣👧👋👌👋🐽👘👚👢🐨👎👎👢🐬👎👉👢👧👐👎👎👫👢👙🐩👉👪👎👏👛👏👙👏👉👌👌👡🐹👘👊👍👣👍👎👤🐽👌👙🐼👧🐨👌👎🐧🐬👍🐩👁👌👉👋🐹👑👜👢👧👇👐👱🐽👮👊👍👅👫👛🐽👅👅👄🐼👧👍👍🐨👛🐧👙🐨🐼👮👅👌👛👏👙🐽👑👌👍🐧👛👊👌🐽👑👨👈👥👛👋👍👣👍🐬👑🐼👚🐬👍🐩👁👍👚🐼👣👘👍👎👉👭👍👡👁👂👊🐽👍👩👆👍👍👎👙🐿🐹🐭👍👤👧🐾👐👍👛👏👉👢👛👟👉👢🐬👧👌👤🐬🐹👄👣👐👯👎👣👛👑👍🐧👍🐫👍👎🐬👆👎🐽👛🐿👜🐾🐰👍👘🐨👑🐪👍🐧👑👊👍🐨👛👬👑🐾👟👊👙🐽👢👰👍👎🐨🐧👛🐩👁🐾👊👥👅👋👘👢👑👏👌👥👧🐾👊🐽👑👌👊👢👫👊👄👢🐬🐿👐👢👑👦👍🐧🐧👯👊👡👁👎👍👣👁🐺👋👍👛👅👜🐽👧👀👊👤👟👊👄🐨👁👌👍🐽👍👘👛🐨👛👎👑🐽👟👣👉🐧👑👘👍👤🐨👊👎🐽👐👰👜🐾🐰👟👄👌👦🐩👐👢👚🐬👍👍👑👪👎👥👧👌👙🐽👧👱👍👤🐨🐾👉👣👉👪👑🐾👣👎👎🐼👁👂👍🐨👑👎👍🐨👈👯👙🐽👛👋👘🐨👧👐👐👣👛👦👐👍👧👏👛🐾🐽👅👄👍👑👱👍🐩👯👢👘🐨👀👮👅👌👛👌👙🐽👧👩👍🐾👯👘👎🐾👈👱👚🐽👛👠👎🐾👟👌👍👏👧🐹👜🐽👅🐾👋👣👣👠👉👢🐬👦👋👎👯👂👍👣👛👏👄👏👧👅👍👣👧👏👐👢👟👂👐👍👁🐭👙🐽👟👑👘🐨👧🐪👑👎👯👑👜👌🐬👏👛🐽👍👟👜👢👑👐👎👋🐹👦👚🐨👐👮👄👏🐽👊👘🐩👟👘👍👡👅👦👘🐽👢👰👄👌🐰👊👍👢👑🐧👌👤👯👆👍🐧🐨👍👎👏👧👎👙👏👟👋👌👱🐽👂👛🐽👑👬👋👣👅👠👉🐪👟👦👍👎🐧👯👙🐩👅🐾👍👥👉👣👊🐾👉👧👋👍👛👊👎🐽👑👏👛🐻🐹👍👄🐻🐽👏👐👢👉👊👍🐨👁🐭👍👣👟👎👙🐾👉👃👍🐧👛🐾👉👢🐰👎👍👣👛👣👘🐨👦👰👍👤👧🐾👐👎🐼👯👎👏👟👎👙👢👧👟👌👡👅👊👋🐨👣👌👉👥👛👋👍👣👧👯👌🐩👧👊👍🐧🐨👎👍👡👍👍👄👥👉👩👐👎👯👆👉👢🐬👎👑🐽👧👠👉👢👧👀👍👤👫👘👌🐨👐👯👑🐿👅👏👙👏👟👏👋👌👉👉👜👍👑👏👄👋👉👠👄👍👍🐬👌👣👟👮👌👤👁👍👎👣👟👎👙👋🐽👊👋👌👑👪👅👣👁👫👛🐽👅👅👍🐨👀👯👍👣👛🐫👐👍👐👯👊👣👑👡👉👱👣👏👍👡👅👊👎🐽👛👎👎👥👅👎👄👢🐬🐿👍🐩👯👦👘👍👛🐾👊👥👣👎👙👋🐼👮👑🐻👁👎👚🐨👛👬👌👢🐬👏👉👋👍👐👍🐽👑👎👚🐧🐬👪👙🐽👑👍👙👌👑👏👋👌👉🐾👎👍👑👎👘🐾👫👏👉👣👧🐧👍👎👯👆👐👍👑👪👚🐾👟👑👄👥👟🐪👌👡🐽👮👉🐩🐽🐾👋👢🐬👅👙👎👚👯👍👤🐨🐫👘🐩👈👯👌👏👟👎👎🐾👯👌👍🐧👛👦👚🐽👌👮👍👋🐽👏👉👤👯🐧👋👍👑👆👎🐽👁👪👊👣👟👎👄👡👍👩👍🐾👯👂👛🐾👉🐼👋👣👟👟👄👍👧👰👍👡🐹👘👊👤👈👰👋👢👑👟👉👥🐹👆👌👤🐬🐺👄👣👑👨👊👥👧👣👉👢🐬👀👌👤👫👘👙🐽👁👫👌👤🐰👑👍🐼👑🐪👐👡🐽👘👎🐼🐨👌👌👤👟👅👘👱👌👮👍👤🐨🐧👘🐨👣👎👊👏👣👟👉👱👣👍👍👢👍👂👋🐽👑👏👜🐾🐽👡👄👍👑👰👎👢👛👦👋👣👑👌👉👋🐹👎👍🐼👑👭👐👡👁🐾👚🐨👅👪👘🐽👑👠👍🐩👟👏👎👎👯👦👋👤👍🐾👎👏👛👏👙🐿🐹👩👋👍👑👮👜👍👧🐽👍👋🐽👟👍👢👧🐨👌👍👟👢👍🐨👁👪👚🐽👉👍👍🐼👑👟👐🐩👪👯👍🐨👛👩👅👍👛👊👘🐪🐹👑👍👤🐧👮👜🐾👀👰👍👥👅👏👙👣👁👆👍👣👑👮👚🐨👑👫👜🐾🐽👣👙🐽👧🐧👑👌👟👢👘🐽👑👫👌👢👟👍👄👎👟🐪👍🐧👑👑👜👣🐽👩👘🐽👛👟👘🐪🐹👈👍👤👧🐾👌🐩👉👎👍👥👅👉👙🐾👉👧👍👤👫👮👍👣👐👯👑🐻👉👠👄👢👣🐫👐👢👑👢👐👍👁👪👎👣👅👑👙🐽👑👟👐👡🐽👊👎🐾👉👀👑🐽👉👎👙🐽👐🐨👎👢👍👡👅👍👐👰👊👣👑👡👉👎👯👟👍👣👛👊👛👣👑👨👊👢👫👋👉👣👑👰👋🐨👑👎👍🐩👁👀👈👡👑👎👙👏🐹🐿👎👍👑👢👎🐽👁👩👑🐾👟👊👘👱👍👮👍👎🐧🐨👈👢🐨👎👎👏👟👏👙🐾👉👘👍👡🐹👎👅🐽👑👏👅👍👅👍👄👢👧👰👋👣👑👪👎👤🐼👯👚🐾👟👎👄🐽👧👱👍👣👑👆👚🐨👅👩👅👍👅👠👉👤👫🐬👍👣👚👯👄🐼🐨🐿👉👥👁👅👍👤👯👊👐👋👅🐺👎🐽👣👪👘🐾🐰👎👉👤👯👏👍🐩👫🐧👘👢🐨👩👅👌👟👑👘🐨👧👭👍👡🐸👮👜🐽👅👫👆👍👟👟👄👌👧🐻👍🐽👑👢👋👤👍🐾👚🐼👣👋👙👎👟👋👋👋👁👦👍👍👑🐾👍👤🐽👢👄👢👑🐿👍🐩🐬👊👋👣👅🐿👘🐽👛👌👍👣👑👱👋👢👑👘👎🐼🐬👍👆👍👟👊👄🐿🐹👏👍👡👁🐫👘🐨👑👫👊👣👣👟👉🐼🐬👍👍👣👑👮👘🐽👐👮👍👋🐽👎👙🐽👁👱👎👢👌🐨👘🐼🐧👮👊👢👫👎👄👍👧👏👍👡🐽👍👜🐽👛👪👘🐽👉👠👉🐪👟👭👍👎👧👂👙🐨👛🐾👙🐿👁👏👙👤👉👎👌👤👯👮👜👣👐👰👛🐻🐹👟👘👱🐽👏👐🐧👟👪👍👎👁🐾👚🐿👁👑👍👤👉🐾👑🐻🐽👢👎👎👅🐾👑🐾👣👏👉🐩👟🐫👍🐩👫👊👈👤👍🐾👎👏👟👍👙🐾👯👦👌👤👯👮👎👍👍👨👊👤🐰👏👙🐾👉👐👋👍👟👮👋👣👑👪👚🐽👟👑👘🐩👟👃👎👍👑👂👅👤👁🐾👘🐽👧👟👄👏🐸👱👎👣👛🐫👎👤👍👍👅👍👟👢👉👣👑👦👑👎👫👘👎👍👛👌👈👤🐰👡👄👍👣🐪👋👍👟🐾👌🐩🐼👰👘🐾🐽👎👘👢🐬👭👐👌👑👩👜👌🐨👍👆👍👅👎👘🐪🐹🐭👎👍👍👢👙🐨👉👪👑🐼👑👋👙🐼👧👏👐👣👟👊👚👣👉👩👎👥👅👏👉👣👁🐨👍👎👯👎👘🐼🐨👎👚🐽👣👏👍🐪👉👩👍👋🐽👘👉🐨👍👪👍👣👉👠👍🐾👯👮👍🐽👑👘👛🐩👍👎👎👣👟👢👉🐼👁👎👋👌👉🐾👎🐽👣👩👌👣👅👎👄👌👦🐩👍👤👯👦👍🐩👁👌👉👢👯👍👙👏👟👇👐👱👁🐾👉🐨👛👫👙🐽👅👟👄🐧👁👘👍👤🐨👮👉🐨👣👎👙🐽👛👋👎🐾👟👧👌👢👑👮👍🐽👣👪👑🐻👉👌👄👍👧👯👌👤👫🐧👍🐽👑👫👌👣👣👘👉👎👄🐨👍👋🐸👯👍🐩👅🐽👙🐽👑👠👉🐩👟🐩👎👍👛🐫👋🐨👁👩👅👍👛👘👉👥🐹👧👌👤👫👮👊👍👑👫👛🐾🐽👏👙👍👑👐👍👤👫👦👘🐨👀👱👈👥🐹👍👙👋👍🐻👍👡🐽👘👎🐼🐨👌👌👤👣👅👍👣👐🐨👍👎👯👦👛🐨👍👫👊👣👑👏👙🐾👟👏👐👣👉🐾👌🐨👉👍👎👥👛👊👍👢👧👱👐🐧👛🐫👍🐩🐽🐭👍👡👑👏👍🐪👉👟👎👍👛🐾👍🐨👅👐👙🐾👟👊👜👤👯👐👍👤👧👆👌🐨👛🐾👑🐽👛👘👉👋👣👨👋👍👑👮👄👍👍👫👜🐽👅👟👉👋🐹🐫👌🐩👯👘👍🐩👁👌👉👋🐹👍👜👢🐽🐫👌👡👁👂👉🐨👛👪👘🐾👟👣👙👏👟🐩👍👣👛👮👉🐨👣👏👍👥👅👏👎🐾👯👨👌👡🐹👘👎🐽👉👍👌👢👛👏👍👣👧👏👐👌👛🐧👎🐽👁👪👚🐻🐹👎👍🐪👟👇👎👍👑👘👚🐩👅🐿👘🐽👧👅👙👤👞👱👍👎👧🐾👛🐨👀👰👉👢👛👌👘👱👍👆👐👣👛👡👜🐽👑👫👄👋👉👟👄🐻🐽🐿👍🐨👟👦👍👍👛🐿👘🐾👟👍👙🐾👉👋👍👡🐽👪👚👣👧🐾👋👣👟👎👙👏👞👮👍🐽👑👘👋🐩🐽👩👄👍👛👡👉🐼👁👟👍👣👛👦👌🐽👑🐼👉👤🐽👢👍👢👑👱👎👢👑👮👍🐨👐👯👉👡👅👎👘👢👁👟👌🐩🐨👉👜👍👉👩👎👤👟👊👙👢👁👇👍👎🐧🐨👈🐧🐨👪👎👥🐽👋👙👥🐹👪👌👤👪🐨👊🐽👑👫👅👍👛👏👉🐧👧👀👍👎👪🐬👎👤👁👌👉👥👑👑👘👢👑👟👐🐨👑🐾👛🐽👁👪👑🐼🐬👟👜👣👐🐩👍🐨👉🐺👍🐩👀👯👍👏👣👋👘🐩👟👎👐👢👛👦👍👣👑👫👜🐾🐽👅👄👍👧👐👑👌👛🐾👘👢🐨👐👈👢👧👏👘🐨👧👋👍🐾👯👘👎🐾👉🐭👈👣👛👎👉👍👧🐩👎👏👧🐾👍👤👍👎👊👣👣👠👉🐩👟👌👌👣👍👮👎🐽👛👏👜🐾🐰👌👙👍👑🐿👐👋👅👢👎🐾👁👩👅👍👟👎👙👏👉👟👋👍👑👢👚👣👑👌👉👤👟👎👘🐪🐸👯👍👍👑👦👘🐨👐👯👊👥👅👡👉👣👁👎👍👢👍👘👘🐽👢👰👚🐪👟👎👄👎👉👰👋👣👑👢👌🐩🐼👱👈👣👧👎👙👋🐹🐪👑👌👛👁👜👍👑👬👋👣👟👠👙🐼👧👇👍👤👯👘👛🐩👄👯👎👥👉👣👉🐧👑👪👐👢👑👪👅👍👧👍👘🐾👫👟👉👣👧🐧👍👎👫👦👍👢🐨👏👘🐻👅👎👄🐽👧👟👐👱🐽👢👛🐾🐽🐾👑🐾👟👟👄🐧👁👍👍👣👉🐺👐👍👣👏👋👥👅👘👊🐽👁👩👌👤👪🐨👋🐨👉👍👍👥👛👎👙🐽👣🐫👎👢👉🐺👘👌🐨👍👍👡👅👌👙🐽👑👩👍🐧👛👂👉🐨👛👪👍👣👛👅👉🐨👁👌👍👣👍👘👐👎👅👎👉👥👍👘👉👣👁👏👐👢👑👑👄👍👛👩👍👤👧👆👍👣👣🐬👌🐩👯👘👘👣👁👏👜🐾👟👎👙🐾👉👋👑🐾👯👘👚👍👅👩👛🐽👉👊👙🐽👧🐬👍🐻🐽👘👍🐨👐👰👊👢👣👉👘👣👧👏👐👣👟🐺👊🐽👛👎👎👤👫👏👉👢👧👰👐👌👛👮👌🐧🐨👬👘🐽👣👎👘👢👁👏👌👱🐽👆👉🐨👛👬👌👤👯👊👄🐨👁👈👍👎👧🐺👍🐧🐬🐾👎👣👟👆👍👋👣👐👌👤🐨👊👊👍👧👍👐👱👍👎👙👌👍🐫👍🐩👧👆👍🐧🐨🐾👚🐽👉👎👘👢👑👩👑🐽👑👮👊🐾🐽🐾👋👤👣👊👙👏👈🐨👍👤👯👡👜🐼🐨🐿👌👏👣👋👘🐩👉👌👐👤👪🐨👍👍👣👏👛🐾🐽👏👉👤👯👱👐👌👚🐬👍👍👁👫👜🐽👟👎👄👥👈👮👐👎👪👯👚👢🐬👍👘🐽👧👟👄👏🐹🐩👍👤👧🐹👛🐩👍🐾👋👥🐽👋👙🐾👉👏👐👢👍👮👊👍👛👎👌👢👛👏👙👍👑🐿👐🐧👍👪👍🐾👁👏👘🐽👉👌👍🐼👑👃👍👣👑👘👉🐨👑👫👉👤👫👅👘🐨👧👀👍👡👀🐨👌🐨👉👪👋👢👟👟👉👤👉👍👍👤👯👍👜🐽👐👮👎👣👧👣👍🐨👑👀👋🐨👛👦👋👣👑👏👆🐿👣👏👍🐪👉👨👋👣👑👘👍🐨👛👬👋👣👟👟👘👱👍👎👍👤👯👘👛🐩👍👪👎👥👉👣👉🐪👉👨👋👍👑👂👜👣👛👩👎👤👫👟👍👢🐬🐾👌🐩🐨🐾👍🐧🐨👎👚🐽👟👎👘👢👑👎👑👌👑👢👛👍👅👩👅👍👛👠👍👢👧🐫👍👣👉🐺👍🐩👈👯👑🐼👛👠👊🐼👧👐👐👤🐨👊👍👍👍👫👅👌👅👊👄👍👣🐬👑🐼👉🐺👘🐼🐨👍👙🐻👅👌👙🐽👑👩👍👣👛👂👉🐩👅👀👊👣👛👊👄🐩👟👦👍👡🐹👢👌👤👍👫👋👢👛👘👉🐩👯👐👌👡👁👦👍👣👑👪👘🐿👛👉👙👍👑🐿👍🐾👫👢👍🐾👁🐿👜🐾🐰👍👘👢👁👟👍👢👑👘👚👍👅👫👆👍👛👠👉🐨👁👑👎👢👍👢👄🐾🐽👍👄👏👁👠👉🐽👁👏👐👣👉👎👍🐽👑🐿👜🐾🐽👆👙👌👧👀👌👤👯👢👘👍👛🐿👑🐪👧👏👙🐽👧👟👎👍👛👊👉👢🐨👎👎👤🐽👊👙🐽👧👭👎👣👛🐧👐👍👛👎👑🐽👍👉👙👋👣👨👋👍👑👪👄🐨👉👎👘🐼👛👍👄👢👍🐬👐👌👛🐾👍🐩🐽👩👅👏👑👑👍👍👧👰👑👍👌👯👍👢🐰👎👋👣👛👟👄👎🐰🐪👍👣👚👯👅🐽👈👯👎👏👛👅👍👣👧👐👍🐧👟🐺👎🐽👣👪👘🐾🐰👎👉👣👐🐩👌👤👫🐧👘🐨👁👪👚🐻🐽👎👉🐪👟👇👐👍👑👁👜👤🐽🐿👆👍👛👎👜👢👀🐧👎👎👧👂👋🐨👀👯👎👥👍👍👙👏👟👌👌👡🐽👂👛🐨👑🐾👎👤👫👍👄👎👉🐿👍🐩👯👦👘🐨👁🐽👊👣👛👌👍👍👁🐿👍🐨👑👘👎🐾👉🐿👆👍👛👟👜👢👐👯👎👍👍👦👛🐨👛🐾👎👥👅👡👉👏👉👟👍👡👅👦👊🐽👣🐭👉👣👛👡👄👏🐹👀👐👌👛👦👙🐾👁🐾👙🐻👍👎👙👋🐽🐪👌👡🐽👪👎🐽👁👐👘🐾🐽👊👍🐩👟👐👎👍👉👂👙🐨👍👎👎👥👉👢👊🐾👉👍👋👍👑👮👄🐽👧🐽👘🐾👫👎👉👣👧👱👐🐧👟👮👎🐽👛👀👈👢👟👎👘🐨👍🐫👍🐧👑👎👚👤👁🐾👎👢🐬👠👙🐼👧👭👍🐨👑👢👅🐽👈👯👊👥👁👆👍👤👉👟👌👤🐬🐺👚🐽👍👫👛🐿👛👋👍👣👧🐧👑🐼👛🐾👘🐧🐨👏👌👢👣👎👙👏👉👱👍👣👛👂👊🐽👍👬👈👣👑👟👘🐨👧👄👍🐾🐨🐫👐👎👅👪👘🐪👧👟👉🐩👯👆👍👤👯👑👄🐽👑👨👊👡🐹👑👍👤👉👀👌👤🐬👆👘👣👁👫👘🐽👟👑👍🐼👑👟👑👍👑👮👍👣👛👬👋👣👛👎👘🐪🐹🐭👎👋🐹👢👅🐽👌👰👊👣👛👋👙👌👑👐👍👢👍👂👘🐽👛👎👑🐼👛👎👄👎👉👑👐👢👛👦👌🐩👁👏👘🐽👧👏👍🐪👉👩👍👎🐨👉👜🐽👧🐾👑🐽👟👠👘👱👍👐👍🐽👛👱👄👍👅🐾👎👏👣👣👉👱👣👦👍👤👫👪👅🐽👌👰👅👎🐰👎👄👌👧🐧👍👍👟👢👎🐽👑👪👚🐼👫👘👍👍👧👏👍🐨👛🐾👉🐩🐽🐿👙🐽👟👊👘🐪🐸👱👍👤👯👢👛🐨🐼👰👌👏👟👘👊🐼🐬👧👌👤👯👮👍🐨👣👪👍👤🐽👏👉👣👁👎👍👎👫👢👎🐽👑👪👚🐽👟👑👍👎👈👮👍🐧👑👂👚🐩👅🐼👈👣👛👎👄🐩👟👈👍🐨👑👘👐👎👄👰👋👢👟👟👉👥🐹👆👐👤🐨👥👜👣👑👏👚🐼👛👢👄👌🐬👀👌🐩👫👦👘👍👁👩👅👍👣👍👙🐽👑🐪👍👋🐽👘👛🐼🐨👀👑🐾👯👊👍🐽👑👁👍👎👯👦👙🐨👐👯👑🐼👟👟👉👤👯👘👐👣👟👅👜🐽👑👨👉👥👅👡👙🐿🐹👀👋🐨👛👮👘👍👁👪👎👏👧👎👄👥👉👟👍🐻🐽👑👜🐽👅👬👋👣👉👠👉🐩👟👐👍🐽👛👮👍🐨👍🐾👎👢👍👊👙👌👑👩👍👤👫👘👜👣👛👩👎👥👛👎👄👍👣🐫👌👤👧👆👍🐩🐽👩👊👤👟👍👄👡🐽👊👑👍👑👊👚👣👛👫👘🐽👅👠👘🐧👧👈👍👣👚👮👄👍🐼👮👄👏👅👏👙👢👑👌👐👤🐬🐺👚🐨👍👫👚👱🐽👋👍👣👑🐧👑🐼👛🐾👘👍👁👩👚🐻🐹👎👍🐪👄🐨👍🐩🐨👂👍👍👁👬👎👣👧👟👘🐨👧👦👎👋🐽👘👉🐩👉🐾👊👥👅👘👉👋👍👦👑👎👯👑👄👣👐👯👌👢👅👎👄👢👣🐫👍👣👟👪👍🐾🐼👰👘🐽👛👑👘🐩👉👭👍👤👯👘👛🐾👍🐿👉👢🐬👅👍👥🐹👑👎👣👍👢👉🐩🐽👩👄👍👛👏👙👤👯👐👐👋👁👊👛👣👑🐿👜🐾🐽👎👍👢👧👍👌👎👯👢👍🐨👁👎👚🐻👁👏👍🐪🐹👃👌👡👁👅👜🐽👉👬👋👤👟👊👙🐿🐹👮👍👤👧👂👙🐨👛🐾👑🐽👟👣👉👱👣👍👐👣👑👘👊🐽👐👯👘🐾👫👏👉🐧👧👁👌👎🐬👂👍👍👑👪👚🐻👅👘👍👣👧🐪👌👤👯👘👍👍👁👫👘🐽👛👟👄🐧🐽🐫👍👣👑👘👙🐩🐼👯👑🐼👟👋👘🐩👉👐👐👤👫👘👍👣👣👩👑🐽👅👊👄👏🐹🐽👌👍👟👦👍🐧🐨👏👌👥👣👌👙🐽👧👩👍👋👁🐽👜👣🐽👪👚🐽👛👠👍🐼👀👱👎👣👍👢👊👤👍👎👍👥👍👌👙🐾👟👐👌👡🐽👂👎👣👛👏👜🐾🐰👍👄👍👧👏👍👤🐬🐾👌👤👁👍👎👣👍👑👘🐨👧👟👋👌👑👮👍👣👧🐽👑🐾👟👊👙🐿🐹🐬👎👎👫👊👌🐨👑👫👊👢👟👟👊🐼👧👏👐👎👫👮👋🐽👑👪👎👢👫👎👍👢👑👱👐🐧👛🐫👘🐼🐧👮👊👣🐽👎👄👥👟👏👎👍👛🐽👜👍👍👪👑🐽👛👠👘👱👍👎👎👎👯👢👅🐽👑🐾👌👣👛👎👙👤👉👏👐👢👑👪👅🐽👛👩👌👢👅👎👄🐻🐽👱👌👤👧👊👎🐾🐼👰👘🐽🐹👎👄🐾👉🐾👑👍👛🐾👊👍👉👪👎👤👟👟👜👣👑🐽👍👤👯👎👐👍👣👏👌👢👟👎👘🐩👯👍👐👏👧👪👍🐽👣👩👑🐻👅👅👍👣👧👀👑👌👑👘👋🐨👐👮👎👢👣👍👄👥👉👟👐👎👯👂👛🐾👍🐿👉👣👛👠👉👥🐸👱👎👢👛🐫👐👎👅👎👋👥👁👘👉🐪🐹👦👑👎👯👘👎👍👑👩👐🐪👟👊👄👍👍🐫👌🐩👯👢👘👣👁🐾👚🐽👟👑👙🐾👟🐻👌🐧👑👢👍🐨👛👫👛🐽👟👊👘🐪🐹🐬👍🐩👫👢👙🐨👌👰👉👡👑👎👙👤👉👏👍👥👧🐹👜🐽👍👏👚🐪👟👡👄👎👉👑👐👌👑👦👘👍👀👯👊👤👟👎👙👏🐹🐻👍👡🐸🐨👉🐨👛👪👘🐼🐰👎👍🐾👯👑👍👎🐧👯👌🐨👅👎👚🐽👑👑👜👣👑👏👐👣👍👎👅🐽👐👰👚🐼🐰👎👄🐻🐽🐿👐🐧👑👊👍🐩🐽👩👎👥👁👘👉👣👧🐪👌🐧👛🐾👉🐨👉👫👙🐽👅👠👎🐽🐼👯👍👤🐨🐫👘👤👍🐽👄👌👑👅👍👎👟👋👐👤👫👮👋🐨👑👫👄👍👅👎👍👤👯👐👑🐼👛🐾👎🐽👁👪👚🐿👟👎👉👱🐸🐨👍👤👯👂👛🐾👍🐾👘🐽👛👅👙👣👀👱👎👎👫👘👊🐩👅👩👅👍👍👊👙🐾👟👦👋👍👟🐺👜👍👛👎👎👤🐽👟👄👌👣🐫👍🐾🐬👆👘👍👁👫👌👥🐹👎👘🐨👑👂👋👌👑👘👚🐨👢👱👘🐽👛👅👍👎👮🐧👎👋🐹👎👚🐨👐👰👊👢👑👆👎🐼👁👎👐👢👛👦👉🐽👧🐼👉👤🐽👢👉🐨👑👀👌👤🐨🐧👋👤👁🐽👚🐻👑👎👘👢👦👮👐👋🐽👪👍🐨👉👩👙🐽👁👟👜👤👯👐👎👍👛🐧👐👎🐽🐾👚🐽👟👣👉👥🐹👪👌👡🐹👘👊👣👑🐿👜🐽👛👌👙🐽👧🐨👌👎👧👎👍🐨👀👱👘🐿🐽👌👙🐽👧👟👍👡🐽👢👛👍👉👪👘🐾👟👟👜👣👑👏👍👤🐨🐫👐👎👈👰👉👢👛👏👎🐾👉👏👍👢👍👘👎🐽👣👩👎👢👫👣👙🐾👉👰👍👣👉🐾👘🐽👁👌👈👡👅👍👄👥👈👮👍👡🐸👯👍🐩👅🐾👘🐽👛👟👘🐨👧👏👎👣👍👘👘🐩👄👰👉👢👛👍👙👎👟👆👐👢👍👮👅🐽👑👪👑🐿👛👋👄👢👣🐫👍🐨👟👦👍👤👁🐾👚🐾👟👍👙👏👄👯👍🐨👑👎👛🐾👍🐾👑🐼🐬👅👍👤👮🐨👎👢👍👊👈🐩🐽🐽👄👍👑👠👉🐼🐬👍👐👢👑👘👚👣👑👪👑🐼👫👊👄👢🐬👁👌🐩👯👢👌🐧🐧👰👘🐾🐰👎👘👢👁👩👍👎🐨👎👛🐽👉👩👑🐾🐽👊👄👥👟👑👍👎👧👂👙🐨👑👪👎👥👅👟👊🐾👉👊👐👣👑👘👊🐽👑🐿👛🐾👫👎👉🐧👧👀👑👌👚🐬👍👤🐽👩👊👤👟👎👘🐨👧👟👐🐨👑👆👛🐼🐰👎👑🐾👣👊👄👌👧👘👍🐩👫👎👘🐧🐨🐿👉👣👑👅👎🐼👧👧👌👢👑👂👎🐽👣👪👌👣👛👎👉👣👧👀👑👌👛🐾👋🐩👁👍👚🐼👣👍👙👏👟👩👐👍👑👘👉👣👑👐👑🐽👛👠👍🐼👌👮👍👤👧👂👌🐨👁👩👅👍👛👟👉🐪👉👋👐👢👑👮👛👣👛👪👑🐻🐹👑👍👤👉👏👎👢👑👦👘🐨👁👩👅👍👑👌👍👣👧👱👋👋🐽👊👍🐩🐽🐽👑🐽👛👅👘🐨👐🐩👎👍👍👢👉🐨👛👪👎👢👑👏👘👢🐬👏👌👣👑👮👄🐨👍👫👜🐾👫👡👄👏🐹👀👑🐼👑👢👋👣👅🐽👊👢👫👎👙🐾👅🐫👋👢👑👉👜🐽👛👐👑🐼🐬👎👙🐿🐹👑👍👡🐹👦👈🐨👛🐾👙🐿👅👟👉👱👣👏👌👤👯👑👄👣👍👫👛🐻🐹👟👄👌👧👱👐🐧👉🐾👍🐨👀👱👘🐽🐹👑👍👤👉🐾👑👌👛👆👉🐩👅🐾👘🐽👛👅👄👌👧🐬👍👤👯👊👊🐨👈👯👊👏👟👏👙👣👑👋👐👢👌🐨👙🐨👉👎👘🐼👅👣👍👣👧🐿👍🐩🐨🐧👍👢🐨👏👌👢👟👎👄👥👟👭👐👋🐽👂👉👣👅👪👑🐽👍👎👍👢👧👀👍👡🐹👘👚🐩👅👪👍👥👅👌👙🐾👉👆👍👣👚🐫👜👍👑👫👄👋👉👉👄👎👉🐿👍🐩🐬👆👘👣👁👐👌👤👟👎👙👋🐽👋👌🐧👑👎👛🐾👅🐭👍👣👛👅👍👥🐹🐭👍🐩👫👍👄👍👉👫👊👣👟👟👉👋👣👏👐👣👉🐾👄🐨👍👨👉👥👅👏👉👢👧👑👐👌👛🐾👌🐨👐👰👘🐽👣👏👍👣👁👃👐👡🐽👎👍🐨👛👬👌👤👫👋👉🐨👁👎👍🐽👑👘👛🐧🐨🐾👚🐼👑👟👉🐪👉👏👌👤👯👮👜👣👢👮👘🐿👛👏👉👤👉👁👌👎👫👦👍🐩🐼👯👍👡👉👎👄🐽👧👏👐🐩🐨👂👉🐨👛👩👅👎👣👠👉👏🐹🐩👍👡🐽👘👘🐧🐬🐾👌👏👟👋👙👢👧👇👍👤🐨👊👙🐨👍👫👅👌👅👡👉👣👑👯👌🐩🐧🐬👍🐨👑👪👚🐼👟👎👍🐪👉👩👐👋🐸👯👍🐩👁🐼👌👣👟👟👄👤👟👌👎👍👉🐾👊👤👍👪👉👥👍👉👙🐽👧👦👐👋🐽👮👋👍👑🐿👄👋👉👑👍🐧🐬👱👐🐧👍👎👍👤👁👏👜🐼🐰👎👙👏👟👘👋👍👑👘👎🐾👍🐿👆👎👧👅👘🐨👐🐨👍👤🐧🐨👊🐨👛🐿👊👢👟👣👉👤👟👘👐👢👛👦👛👣👣👍👎👥👅👎👙🐾👉🐨👎👢👑👆👍🐩🐼👱👈👏👛👏👘🐨👑👟👍🐻🐽👊👚🐨👛👐👘🐽👉👟👙🐼👧👐👎👍👛🐧👛👢🐨🐾👍👡👑👊👙👏👉👋👋👍👌🐨👎👣👣👩👑🐾🐰👍👄👢👧👐👐👌👑👪👎🐽👐👱👘🐿👑👎👍🐼👑👩👌👡🐽👮👉🐨👧🐿👉👣👅👎👉🐪👟🐫👍👢👑👘👐👎👈👮👄👍👛👎👙👣👁👪👌👣👉👪👙🐨👑👫👛🐿👅👆👉👣👍🐬👋👣👚🐬👍🐧🐨👍👚🐻🐹👎👍👤👟👩👍🐧👑👘👚🐩👅🐽👛🐾🐽👎👍👥🐹👐👍👡🐽👢👉🐨👀👰👉👢👟👠👉👤👟👋👐👋👅🐹👜👍👑👫👜🐾👫👢👄👌👣🐫👐👢👑👦👍🐩👁👩👅👍👣👎👄🐾👈🐧👐👱🐽👎👚🐨👧🐾👋👣👟👊👙🐼👧👑👎👢👍👘👘🐨👈👯👊👥👉👢👉🐼🐬👐👐👋👁👅👄👍👐👮👎👢👫👡👄👢🐬🐽👌👎👯👢👍🐧🐧👰👘🐽🐽👎👄👍👧👟👎👍👛👅👜👍👉👩👘🐾👟👊👙👢👁👇👎👎🐧👯👙👤👍👪👎👣👟👡👉👎👉👩👋👍👍👪👅👍👍👫👛🐾👫👎👍🐧👐🐩👍👤👪🐬👎👤👁🐿👌👥🐽👘👍👍👧👟👑🐼👌👯👍👍👍👫👘🐼🐬👠👉👍👢👮👍👣👛🐫👙🐩👀👰👉👣👛👋👙👣👁👦👌👤👯👮👐👍👑👩👍👥👛👎👉👣👣🐪👍🐩🐬👆👘🐨👀👯👎👢👛👘👉👎👉🐪👍🐾👯👘👚🐨👛👐👚🐽👛👅👙👣👁👦👍👢👉👂👉🐩👅👩👄👍👛👟👉🐪👟👌👌👡👅👦👎👍👑🐾👐👱🐽👠👄👢🐬👱👍🐩👫👎👌🐩👁👍👎👥👁👎👙👏👉👟👑👎👯👢👚👣👛👬👑🐽👛👅👍👤👮🐧👍👎🐨👮👋🐨👐👰👉👥👁👋👙👎👟👎👋👎👧🐾👌🐨👧👎👎👣👅👡👙🐾👉🐧👐👌👑👆👘👎🐼👮👚🐽🐽👎👙🐾👅🐪👋👍👑🐽👛🐧🐨👐👋👣👟👠👘🐨👧👍👎👎🐧🐨👈🐩👄👯👍👥👉👡👜👢👑👌👍👤👯👘👄🐽👧🐽👑🐼👛👟👍👢👧👰👐🐧👉🐺👍🐨👑🐭👈👋🐽👎👄👥👟👟👌👤👪🐨👍👣👍👪👎👢🐬👎👙👢👁🐬👍👤🐨🐫👐👍👈👰👋👣👛👎👙👣👁👦👌👣👉👎👙🐨👧👏👜🐽👛👅👄👍👧🐧👋👌👟👦👋👣👀👮👍👡👉👑👘🐨👧👩👍👢👑👢👊🐾👍🐿👆👍👑👠👙👢👁🐭👍👤🐨🐫👐👎👅👪👎👥👁👢👉👣👑👋👐👢👟🐺👎👣👛👪👍👤👫👊👄👢👑👰👋👍👑👪👌👤🐼👱👈👣👣👑👍🐼👑🐪👍👌👑👘👊🐾👍🐿👉👤👫👊👄👌👢👰👍👎🐨🐫👘🐩🐽🐽👄👍👣👉👘👢👧👐👍🐧👟🐺👊🐽👑👫👄👍👛👎👄👌🐬👱👐👢👛👪👌🐧🐨👫👘🐽👑👎👍🐪👟👏👑🐻🐽👢👉🐨👧🐾👘🐾👯👊👜👤👯👎👎👎👯👘👐👍👅🐾👙🐽👍👌👙👏👉👐👌👡🐹👮👊🐽👢👮👘🐼👫👎👍👣👧👱👐🐧👉👆👐👍👑👪👚🐻👅👍👙👏👟👟👍👣👑👂👛🐾🐽🐾👑🐾👟👅👄🐼👐🐧👍👤👯👘👘🐩👈👯👍👏👟👏👎🐾👟👐👐👋🐽👮👚👍👍👩👍👋🐽👎👄👍👧👰👍👤🐨🐾👘🐽👁👫👛🐻👍👑👜👢🐬👭👍👡🐸👯👎🐽👍👨👈👣👧👟👄👏🐹👈👍👣👉👂👉👤👍👪👉👥👅👡👉👤👉👧👌👡🐸🐧👜👣👛👪👍👤👫👋👙👍👑👏👍🐩🐬👎👍👎👁🐿👘🐿🐹👑👎🐿🐹👏👍🐩👯👢👎🐾👍🐿👆👍👑👅👍👥🐹👐👍👤🐧🐨👉🐨👌👰👊👣👑👏👙🐽👑👎👐👣👟👦👜👣👉👪👎👥👛👎👙👌👑👀👑🐼👑👢👋👣👁🐽👎👣👟👏👍🐼👁👟👐👡🐽👢👛🐽👁👬👊👢🐰👎👉👋👍👐👍🐽👍👘👛🐨👣👎👚🐽👟👣👉👎👉👨👐👣👍👘👊🐽👛👩👑🐾🐰👟👉👋🐹🐪👌🐩👯👂👍🐩👁👌👉👡👅👍👘👢👑👘👑👍👑👎👚🐨👧🐾👍👤👣👟👜👣👑👑👍🐨👛🐫👘🐧🐬🐾👎👢👛👍👙🐾👉👏👐👤🐨👊👎🐽👣👩👎👥👅👆👉👤👉👰👍👎👯👆👘🐽👑👌👉👥👣👑👘🐨👁👇👍👣👛👂👉🐩👅👀👊👣👛👅👉🐨👁👄👎👏👧🐾👋🐩👅👩👆👍👛👏👙👎👟👆👍👤🐬🐺👛👣👐👯👑🐿👛👊👄👍👍🐫👍🐨👟👦👐👍👅🐾👎👣👑👑👎🐿🐹👱👍👢👑👪👚👣👧🐼👋👢🐬👎👙🐿🐹👁👎👣👍👘👐👍👈👯👎👏👛👏👘🐩👯👎👋👎🐬👊👘🐽👣👏👜🐼👫👏👉👣👑👱👎👢👑👎👍🐧🐧👮👊👢👣👏👘🐩👈🐧👎👍👛👊👉👢🐨👎👎👤👫👊👙🐼👧👌👎👎👫👘👛🐧🐬👪👎👥👅👘👉🐽👁👘👍👤👯👂👜👣👌👰👅👍👛👍👙👌👧👐👐👌👑👪👎👤🐼👯👚🐻👅👑👄👥👟👟👐🐨👑👂👚👢🐰👎👋👢🐬👎👍🐽👍🐫👍👤👯👡👜🐼🐨🐾👍👏👣👊👘👣👧👏👐👤🐨👊👎🐽👑👬👚🐼👁👣👉👣👑👐👐👱👅👦👍🐧🐨👏👌👣👧👑👍👍👧👭👐👍👑👁👜🐽👅👫👘🐽👛👠👎🐼👁🐼👍👤👧🐹👄👍👀👯👑🐿👅👟👉👋👣👏👐👏👧👎👎🐽👑🐾👑🐻🐹👢👄👣👑👏👍👎🐬👆👎🐾👁👩👅👍👣👑👙🐽👑👏👋👢👑👩👛🐨👧🐿👆👍👛👅👉🐼👑👀👎👋🐹👦👛🐨👐👰👊👢👛👡👉👢👁👘👑👎👫👘👌🐽👢👰👚👱🐽👎👄👍👁🐧👐👢👑👆👘👍👛🐾👉👏👟👎👙👋🐼🐧👐👎🐨👎👉👢🐨👍👎👢🐬👎👍🐩👟👌👎👎🐨🐧👛🐨👈👯👎👥👉👅👍🐽👁👎👋👍👛🐫👍👣👑🐿👛🐼🐰👏👉👢👧🐧👑👌👟👮👎👣👑👏👋👋🐽👎👘👢👑👃👑🐼👛👎👉🐩🐽🐾👑🐼🐬👠👙🐼👐👱👍🐨👑👢👜👤👍🐿👋👥👁👆👍👣👧👦👌👤🐬🐺👙🐨👉👎👘🐼👅👅👙🐽👧🐧👐🐧👍👂👘🐧🐨👪👎👢👟👎👉👱👍🐿👍👢👛👂👊🐽👍👪👘🐽👧👟👄👍👦👱👍👎👫👘👐👍👀👯👑🐿👉👢👉👣👑👧👍👤👯👮👊👍👛👌👈👣👛👡👄👍👧👀👌🐩👯👦👘🐽👁👪👊👣👑👎👘🐨👑🐪👑🐾👯👘👚🐨👛👫👉👣👅👅👍👥🐸👮👍👎🐧👯👄🐽👉👫👉👏👟👡👉👎👯👏👐👎👫👩👜🐽👑👌👉👣👅👡👄👍👁👰👐👌👛👦👌🐩👁👎👊👣👛👎👙👋🐼🐧👎👍👛👎👚🐨👍👬👊👣👟👠👍👍👧👑👍👎👯👊👍🐨👐👯👌👏👟👏👙👋👣👎👋👌👉🐾👊👣👍👏👜🐾🐰👎👄👢👑👰👐👥👧🐺👎👣👑🐽👎👤👟👘👉👍👧👇👐👱👁👂👊🐾🐽🐾👋👣👅👎👉👣👧👐👍👤🐧👯👅🐽👣👏👌👏👣👊👘🐩👉👐👍🐧👛👊👎🐽👑👩👍👤🐽👏👉👤👯👰👍🐩👫🐧👙🐾👁🐿👌👥👣👎👙🐽👁🐿👐👌👑👂👍👍🐽👨👋👣👑👅👙👣🐽🐪👍👤👧🐹👜🐽👐👰👋👢👛👟👉👤👉👦👐👋🐽👮👎🐽👛👪👍👤🐽👟👄👢🐨🐬👌👤👫👢👍👤👁👏👘🐼🐰👑👘🐨👑🐪👋👢👑👘👚🐨👧👀👑🐽👉👅👘🐩👮🐧👍👡🐽👦👙🐨👑👫👊👢👛👡👉🐩👟👎👐👣👟👅👜🐽👐👯👎👣👛👢👉🐨👑🐿👎👢👌🐨👋👣👑👫👛👱🐽👏👘🐨👑👋👌👋👁🐾👉👢🐨👎👎👤👣👊👉👋👍👎👎👎👫👘👐👎👅👪👎👥👅👘👉👏👉👋👋👎👪🐨👊👣👌👰👜🐾👫👍👄🐻🐹🐬👐👌👚🐬👍🐩🐽👩👊👥👁👎👍👱🐽👏👑🐼👑👊👚👣👧🐿👉👣👅👅👙👤👟👘👍👣👛👮👊🐩👀👯👎👥👅👏👙👢🐬👦👌🐧👛👊👌🐨👣👪👎👤🐽👋👉👣👧👀👑🐼👛🐧👍🐨👐👮👚🐼👣👘👍👎👟🐻👍👤🐨👂👎👍👉👐👘🐽👧👟👘🐨👧👌👍👡🐹👢👍🐨👁👫👌👢👛👘👉🐩👯👋👋👍👍👮👐👍👑👩👎👤🐽👠👄👣🐽🐫👍👎🐬👆👎🐾👁👩👅👏🐽👍👙👋🐽👭👎👍👑👪👍👍👅👫👆👍👑👊👙🐿🐹🐫👍👋👁🐧👄🐽👐👰👊👢👟👍👙👥🐹👘👍👣👑👮👄🐨👣👍👍👏👟👏👍👢👑👑👐🐧👑👢👌🐩👁🐾👚🐾🐰👏👘🐨👁🐿👎👍👛👊👉🐨👅👬👊👤👟👊👄🐨👁👌👎👎👫👘👛🐩👉👪👑🐿👅👘👉🐼👁👘👍👤🐨👊👜👣👛👩👘🐼🐰👎👄👢👧👎👍🐩🐧🐬👍👍👑👪👚🐿👧👌👍🐼👑👋👍👡👁🐾👉👣👧🐾👑🐼🐬👟👄🐧👀🐨👍🐨👉🐺👐👎👀👯👎👏👣👊👎🐾👟👐👐👎👪🐨👎🐽👍👪👎👥👛👎👄👏🐹👎👍🐩🐨🐧👘👤👁👀👈👢👣👑👄🐾👉👱👍👢👑👂👍👤👅🐽👚🐽👛👠👍🐼👀🐧👎👣👛👱👜🐽👐👯👑🐽👣👠👉👣👁👦👋👎👯👂👎👍👛👎👑🐻👉👋👄👎👉🐿👍👎👯👢👎🐾👁👫👌👤🐰👍👙👋🐽👋👍🐧👑👑👜👎👅🐭👉👤👣👊👘🐪🐸👯👍👍👛🐧👙🐨👛🐿👉👏👟👡👉👢👁👘👍👤🐨👊👉🐨👧👍👑🐼🐰👊👄👢🐬🐿👐👌👑👢👋👢🐨👍👚🐻👍👎👄👎👉🐪👌👡👁🐽👜🐽👅👐👙🐽👉👟👄👥👟👍👎👎👫👢👙🐩👅🐾👙🐿👅👏👘🐪👉👪👐👢👑👮👄🐽👉👍👘🐾🐰👎👘👱🐽👐👍👎🐬👮👎👣👑🐽👅👏👁👎👘👢👧👃👍🐨👑👎👚🐩🐽🐾👍👣👛👅👄👌👣🐭👍👤👧🐺👐👍👐👰👌👢👟👌👘🐨👧👈👍👤🐨👊👎🐽👣👩👘🐼👅👆👙🐾👉👍👌👎🐧🐬👍🐼🐨👎👙🐻👅👌👍👣👑👭👍👤🐨🐽👜👤🐽🐾👘🐽👍👎👍🐨👁👌👍👡🐹👘👍👤👍🐾👑🐿👅👌👙👏🐹👆👐👏👧👎👊👍👐👰👛🐾🐽👌👄👍👣🐬👌🐩👯👎👘🐾👍👩👚🐽👟👑👙🐽👁🐿👋👋🐽👎👚👍👁👬👋👣👟👊👘🐪🐹👘👎👍👍👢👉🐨👌👯👎👏👣👟👉👤👯👐👍👤👯👂👋🐽👣👨👉👣👛👎👄👎👉🐨👍👎🐨🐧👍🐽👀👯👊👣👛👎👉👣👧👟👑🐻🐸👯👉🐩👅🐽👎👤👟👊👄🐨👁👐👍👎🐨🐫👛🐩👍👪👘🐪👛👟👊🐾👉👐👌👡🐹👎👅🐽👌👰👜🐽👅👎👄🐻🐽🐨👐👌👛👦👐👍👁👏👌👣👟👍👘👢👧🐿👌👡🐽👢👚👢🐬👏👙🐾👣👎👄👤👚👯👍👤👧🐾👐👎🐼👮👅👌👛👍👎🐾👟👌👐👤👫👮👌🐽👑👫👄👍👅👟👉👣👑🐧👋👣👍👆👘👣👁👪👎👡🐹👘👉👎👟👩👍👢👑👘👚🐩👅🐼👈👤🐽👊👍🐨👁👀👍👡🐹👢👊🐨👐👯👑🐿👅👠👉👤👉👧👍🐧👑👂👅👣👑👫👜🐾👫👋👄👎👉👏👌👤🐬👎👌👤👁🐾👚🐾🐰👑👍🐼👑🐪👍🐽👑👘👊🐼🐨👌👌👣👧👎👄🐻👍🐭👎👍👉👆👛🐩🐽🐾👊👏👣👣👉👋👣👏👐👣👟👦👐👍👉👍👎👤🐽👡👍👢🐬👯👌👎👯👮👍🐩👁👎👊👢👧👎👍👱🐸👯👍🐻👁🐾👚🐨👅👬👌👤👟👊👙👎👟👟👍👤👫👎👐👎🐽🐾👚🐽👛👏👙👤👉👏👐👢👛👊👄👍👑🐿👄👏👛👎👄👢👍🐭👌👎👧👘👎🐽👑🐽👊👥👁👌👘🐨👧👎👑👍👑👆👚🐨👧🐾👌👤👣👎👍👥🐹👘👍👤🐨🐧👍🐨👄👰👋👥👅👠👊🐼👑👋👐👢👑👮👚👣👉👍👌👢👛👏👙🐽👧👐👋👍👚🐬👍👢🐨👪👎👡🐹👘👍👍👧👱👍👡👁👂👎👍🐽👪👈👣👛👎👉👍👧👰👍👎👧🐾👛🐨👀👯👚🐼👛👟👉🐩👯👦👑👎👯👘👎👣👑👩👎👤👫👣👘👱🐽👏👍🐾👫👢👎🐽👛🐿👜🐿👅👍👙👥🐹👱👐👡🐽👘👛🐼🐨👎👋👣👉👊👙🐽👐🐨👍🐾👯👦👋🐨👐👮👄👏👁👡👉👣👧👎👐👢👑👂👉🐽👐👮👎👤🐽👡👄👍👧👯👍👎👯👘👘🐾🐼👱👈👣🐽👎👍🐪🐹🐿👐👋👁👅👜👍👁👩👘🐾👟👊👄🐩👟👮👍👡🐹👢👙🐩🐽🐾👎👥👉👣👉🐪🐹👪👌👣👉🐾👊👍👑👎👘🐿👅👎👄👢👧👀👍👎🐧🐬👍👍👑🐽👚🐽👉👎👄👍👧👱👑🐼👌👯👍🐨👉👪👘🐽👅👠👉👏🐹👘👍🐩👫👎👐👎🐼👯👌👏👟👋👙👣👁👩👌👢👌🐨👎👍👣👌👊👢🐬👅👍👣👣🐪👍🐩👫🐧👘👢🐨👩👅👌👧👑👄🐽👧🐪👍🐾👯👁👜👍👦👱👚🐽👛👠👎🐼👁👄👍👎👧👂👋🐩👄👯👚🐼👣👌👙🐽👧👧👌🐧👍👂👌🐽👛👏👄🐿👟👠👙👍👑👱👍🐩👯👦👘👣👁👏👌👥👁👌👍👣👌👯👌🐨👑👍👜👎👉🐿👆👎👟👊👘🐩👮🐩👎👍👍👦👈🐨👑👫👊👣👍👎👘🐨👁👐👍👤👯👮👘🐽👧🐽👑🐼🐰👊👙🐿🐹👀👐👌👛👪👍🐩👁👀👈👢👫👎👙👋🐹🐪👋👍👑👅👜🐽👍👬👋👣👟👠👙🐼👧👏👎👎👫👢👅🐽👛🐾👌👣👑👘👉👢🐬👩👐👢👑👪👅🐽👐👰👅👌🐰👟👄👌👣🐫👍🐩👫👢👐👍👁👏👌👡👅👎👉🐪👟👟👐👱👁👆👉👍👍👪👑🐽👛👠👍👋👈👮👍👣👛👮👉🐩🐼👯👊👏👟👌👙👣👑👎👐👣👟👦👍👍👍👨👋👤🐰👏👍👣👧🐿👎👏👧🐾👍👤👁👎👉👡👉👎👄👡👍🐿👍👎👯👢👊🐾🐽🐾👘🐽👍👎👄🐧🐨🐫👍👋🐹👘👚🐩👅👪👑🐿👅👘👉🐩👟👏👐👋👅🐺👅👣👛👏👛🐽👅👌👄👍👣🐬👌🐩👯👎👌🐨👑🐽👊👣👣👎👙👋🐽👋👍🐻🐽👮👍👣👛👬👑🐽👉👎👙🐼👧🐭👎👍👍👢👚🐨👌👰👊👢👣👉👙🐿🐹👏👐👣👉🐺👅🐽👉👍👑🐽👁👢👄🐻👍👏👎👢👑👦👘👍👁👬👈👣👧👏👍👣👁🐿👑🐻🐽👎👍🐨👛👬👌👤👫👊👎🐽👁👏👍🐽👑👘👐👍👅🐾👎👣👛👟👉🐪👉👎👍👤👯👘👍👣👉👍👌👥👁👈👌👋🐧🐰&quot;</span><br><br><br><span class="hljs-comment"># 逆向Base100解码</span><br>flag = base100_decode(flag)<br><br><span class="hljs-comment"># 逆向20次Base64解码</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tqdm(<span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>)):<br>    flag = base64_decode(flag)<br><br><span class="hljs-comment"># 逆向阿特巴什密码解密</span><br>flag = atbash_cipher(flag)<br><br><span class="hljs-comment"># 逆向21次字符串反转</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tqdm(<span class="hljs-built_in">range</span>(<span class="hljs-number">21</span>)):<br>    flag = string_reverse(flag)<br><br><span class="hljs-comment"># 逆向凯撒密码解密，偏移量为8</span><br>flag = caesar_decrypt(flag, <span class="hljs-number">8</span>)<br><br><span class="hljs-comment"># 打印最终的解码结果</span><br><span class="hljs-built_in">print</span>(flag)<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>WP</category>
      
      <category>技能兴鲁</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>技能兴鲁</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CTF学习日记（每天学点新东西，就是成功）</title>
    <link href="/2023/11/11/CTF_study_diary/"/>
    <url>/2023/11/11/CTF_study_diary/</url>
    
    <content type="html"><![CDATA[<p>（坚持一天一更新……可能吧）</p><h1 id="2023年12月11日"><a href="#2023年12月11日" class="headerlink" title="2023年12月11日"></a>2023年12月11日</h1><p>今天学点不一样的</p><p>bat批处理相关知识</p><p>每次都要输入命令，我干脆直接用bat批处理，点一下就好了</p><p><a href="https://blog.csdn.net/qq_41428418/article/details/132438144#/">https://blog.csdn.net/qq_41428418/article/details/132438144#/</a></p><p><a href="https://blog.csdn.net/s_y_w123/article/details/111353912#/">https://blog.csdn.net/s_y_w123/article/details/111353912#/</a></p><p><a href="https://github.com/Aloxaf/MirageTankGo#/">https://github.com/Aloxaf/MirageTankGo#/</a></p><p>解决了我没解决的问题</p><p>get√</p><h1 id="2023年12月9日"><a href="#2023年12月9日" class="headerlink" title="2023年12月9日"></a>2023年12月9日</h1><p>文件头文件尾的知识点<a href="https://w1ndys.top/2023/12/09/CTF-misc-fileheader/#/">https://w1ndys.top/2023/12/09/CTF-misc-fileheader/#/</a></p><h1 id="2023年11月14日"><a href="#2023年11月14日" class="headerlink" title="2023年11月14日"></a>2023年11月14日</h1><p>今天打技能兴鲁省赛线上初赛，有个很有意思的杂项题，附件解压是一个日历表</p><h1 id="2023年11月13日"><a href="#2023年11月13日" class="headerlink" title="2023年11月13日"></a>2023年11月13日</h1><h2 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h2><ul><li>Python字符串，列表，元组，字典的区别</li></ul><p>特别提一下：</p><p>flag创建为列表的时候用join函数拼接</p><p>flag创建为字符串的时候用+&#x3D;拼接</p><h3 id="Python-字符串"><a href="#Python-字符串" class="headerlink" title="Python 字符串"></a>Python 字符串</h3><p>字符串是 Python 中最常用的数据类型。我们可以使用引号 ( <strong>‘</strong> 或 <strong>“</strong> ) 来创建字符串。</p><p>创建字符串很简单，只要为变量分配一个值即可。例如：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">var1</span> = <span class="hljs-string">&#x27;Hello World!&#x27;</span><br><span class="hljs-attr">var2</span> = <span class="hljs-string">&quot;Python Runoob&quot;</span><br></code></pre></td></tr></table></figure><h3 id="Python-列表-List"><a href="#Python-列表-List" class="headerlink" title="Python 列表(List)"></a>Python 列表(List)</h3><p>序列是Python中最基本的数据结构。序列中的每个元素都分配一个数字 - 它的位置，或索引，第一个索引是0，第二个索引是1，依此类推。</p><p>Python有6个序列的内置类型，但最常见的是列表和元组。</p><p>序列都可以进行的操作包括索引，切片，加，乘，检查成员。</p><p>此外，Python已经内置确定序列的长度以及确定最大和最小的元素的方法。</p><p>列表是最常用的Python数据类型，它可以作为一个方括号内的逗号分隔值出现。</p><p>列表的数据项不需要具有相同的类型</p><p>创建一个列表，只要把逗号分隔的不同的数据项使用方括号括起来即可。如下所示：</p><p>list1 &#x3D; [‘physics’, ‘chemistry’, 1997, 2000] list2 &#x3D; [1, 2, 3, 4, 5 ] list3 &#x3D; [“a”, “b”, “c”, “d”]</p><p>与字符串的索引一样，列表索引从0开始。列表可以进行截取、组合等。</p><h3 id="Python-元组"><a href="#Python-元组" class="headerlink" title="Python 元组"></a>Python 元组</h3><p>Python 的元组与列表类似，不同之处在于元组的元素不能修改。</p><p>元组使用小括号，列表使用方括号。</p><p>元组创建很简单，只需要在括号中添加元素，并使用逗号隔开即可。</p><p>如下实例：</p><h4 id="实例-Python-2-0"><a href="#实例-Python-2-0" class="headerlink" title="实例(Python 2.0+)"></a>实例(Python 2.0+)</h4><p>tup1 &#x3D; (‘physics’, ‘chemistry’, 1997, 2000) tup2 &#x3D; (1, 2, 3, 4, 5 ) tup3 &#x3D; “a”, “b”, “c”, “d”</p><p>创建空元组</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">tup1</span> <span class="hljs-operator">=</span> ()<br></code></pre></td></tr></table></figure><p>元组中只包含一个元素时，需要在元素后面添加逗号</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">tup1</span> = (<span class="hljs-number">50</span>,)<br></code></pre></td></tr></table></figure><p>元组与字符串类似，下标索引从0开始，可以进行截取，组合等。</p><h3 id="Python-字典-Dictionary"><a href="#Python-字典-Dictionary" class="headerlink" title="Python 字典(Dictionary)"></a>Python 字典(Dictionary)</h3><p>字典是另一种可变容器模型，且可存储任意类型对象。</p><p>字典的每个键值 <strong>key:value</strong> 对用冒号 <strong>:</strong> 分割，每个键值对之间用逗号 <strong>,</strong> 分割，整个字典包括在花括号 <strong>{}</strong> 中 ,格式如下所示：</p><p>d &#x3D; {key1 : value1, key2 : value2 }</p><p><strong>注意：****dict</strong> 作为 Python 的关键字和内置函数，变量名不建议命名为 <strong>dict</strong>。</p><p>键一般是唯一的，如果重复最后的一个键值对会替换前面的，值不需要唯一。</p><p>&gt;&gt;&gt; tinydict &#x3D; {‘a’: 1, ‘b’: 2, ‘b’: ‘3’}<br>&gt;&gt;&gt; tinydict[‘b’]<br>‘3’<br>&gt;&gt;&gt; tinydict<br>{‘a’: 1, ‘b’: ‘3’}</p><p>值可以取任何数据类型，但键必须是不可变的，如字符串，数字或元组。</p><p>一个简单的字典实例：</p><p>tinydict &#x3D; {‘Alice’: ‘2341’, ‘Beth’: ‘9102’, ‘Cecil’: ‘3258’}</p><p>也可如此创建字典：</p><p>tinydict1 &#x3D; { ‘abc’: 456 } tinydict2 &#x3D; { ‘abc’: 123, 98.6: 37 }</p><h1 id="2023年11月11日"><a href="#2023年11月11日" class="headerlink" title="2023年11月11日"></a>2023年11月11日</h1><h2 id="re"><a href="#re" class="headerlink" title="re"></a>re</h2><p>Python逆序输出</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(flag[::-<span class="hljs-number">1</span>])</span></span><br></code></pre></td></tr></table></figure><p>实际上这是切片的一些操作</p><p><a href="https://blog.csdn.net/qq_30460949/article/details/118888961">Python切片操作_小魔王降临的博客-CSDN博客</a></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>CTF学习日记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>CTF学习日记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>传统书信里的绝美结束语</title>
    <link href="/2023/11/09/good_words_write/"/>
    <url>/2023/11/09/good_words_write/</url>
    
    <content type="html"><![CDATA[<ol><li><p>楮墨有限，不尽欲言。</p><p>我的文化水平有限，想说的话没能全部表达出来。</p></li><li><p>情长纸短，不尽依依。</p><p>简短的信纸无法写完深长的情意，就不在尽述了。</p></li><li><p>多劳费心，至纫公谊。</p><p>往后辛苦您多费心了，深深感激你的情谊。</p></li><li><p>投笔伤情，临书惘惘。</p><p>暂且搁笔，看着写完的书信，心中十分怅惘。</p></li><li><p>春寒料峭，善自珍重。</p><p>天气虽暖还寒，尚望您自己多加保重。</p></li><li><p>兹际炎暑，希自珍卫。</p><p>现在正值炎夏酷热之际，希望您保重身体。</p></li><li><p>秋风萧萧，至祈摄卫。</p><p>秋天天气变凉，真挚的提醒您要保重身体。</p></li><li><p>渐入寒冬，伏惟珍重。</p><p>渐渐进入寒冷的冬天，希望您多多保重身体。</p></li><li><p>驰函寓意，伫望示复。</p><p>书信带走我的情意，时时盼望你的回信。</p></li><li><p>谨付寸心，希垂尺素。</p><p>我的真心尽在信中，期盼能得到您的回信。</p></li><li><p>拜书以闻，企盼还云。</p><p>我恭敬地写下这封信寄给您，翘首盼望您的回音。</p></li><li><p>谨遣数行，希还一字</p><p>我在信里给您写了这么多，还望您一定回信。</p></li><li><p>言不尽思，再祈珍重。</p><p>在信里写不完我的思念，再次希望您能珍重身体。</p></li><li><p>书未尽情，余候面叙。</p><p>用书信难以充分表达情意，等以后我们见面再说。</p></li><li><p>故特缕陈，诸希鉴宥。</p><p>我特意细细陈述，希望您察鉴原谅。</p></li><li><p>聊布往怀，君其详之。</p><p>这封信饱含我们往日情谊，请您仔细考虑这件事。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习笔记</tag>
      
      <tag>文案</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>硕神！！————一则关于“硕神”的博文/硕神的起源发展</title>
    <link href="/2023/11/07/shuoshen!!!!/"/>
    <url>/2023/11/07/shuoshen!!!!/</url>
    
    <content type="html"><![CDATA[<p>现在朋友圈里发生了一个怪象，那就是凡是认识我的都知道有人称我为硕神，似乎我已经失去我的本名</p><p>我来简单介绍一下这个名字的由来</p><p>起初，没有人意识到这场灾难（</p><h1 id="开端"><a href="#开端" class="headerlink" title="开端"></a>开端</h1><p>最开始是我几个初中同学的群里，从这个群开始传开的，其中一个群友叫我“硕神”，然后慢慢地全群的同学都叫我“硕神‘</p><h1 id="发展"><a href="#发展" class="headerlink" title="发展"></a>发展</h1><h1 id="高潮"><a href="#高潮" class="headerlink" title="高潮"></a>高潮</h1><h1 id="如今"><a href="#如今" class="headerlink" title="如今"></a>如今</h1><hr><p>未完待续………………</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
      <category>硕神</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随笔</tag>
      
      <tag>硕神</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实验五 树和二叉树的实现与应用</title>
    <link href="/2023/11/07/DS_test5/"/>
    <url>/2023/11/07/DS_test5/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cyberdownload.anrunlu.net/FtX0PHEedwNLABhhcw4vq0OnXJhk" srcset="/img/loading.gif" lazyload></p><h1 id="吐槽一下"><a href="#吐槽一下" class="headerlink" title="吐槽一下"></a>吐槽一下</h1><p>唉数据结构，唉二叉树，唉C++类，好多都不会，不懂得class类的用法，不知道怎么写代码</p><p>先是复制课本上的代码，然后经过缝缝补补，发现课本上的代码竟然有字母打错的可能（痛骂编者</p><p>然后用ChatGPT不断缝缝补补（点赞ChatGPT，用来写代码真的很不错</p><p>这下知新作业终于是写完了，逆向已经一个也没动了</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">BiNode</span><br>&#123;<br>DataType data;<br>BiNode&lt;DataType&gt;* lchild, * rchild;<br>&#125;;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BiTree</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">BiTree</span>() &#123; root = <span class="hljs-built_in">Creat</span>(); &#125;   <span class="hljs-comment">//建立一棵二叉树</span><br>~<span class="hljs-built_in">BiTree</span>() &#123; <span class="hljs-built_in">Release</span>(root); &#125;    <span class="hljs-comment">//释放各节点的存储空间</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PreOrder</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-built_in">PreOrder</span>(root); &#125;<span class="hljs-comment">//前序</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InOrder</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-built_in">InOrder</span>(root); &#125;<span class="hljs-comment">//中序</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PostOrder</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-built_in">PostOrder</span>(root); &#125;<span class="hljs-comment">//后序</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">LevelOrder</span><span class="hljs-params">()</span></span>;                  <span class="hljs-comment">//层序</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">NodeTree</span><span class="hljs-params">(BiNode&lt;DataType&gt;* bt)</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">NodeTreeHelper</span>(bt); &#125; <span class="hljs-comment">//计算叶子节点数</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">TreeDepth</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">TreeDepthHelper</span>(root); &#125; <span class="hljs-comment">//计算二叉树深度</span><br>BiNode&lt;DataType&gt;* root;<span class="hljs-comment">//指向根节点的头指针</span><br><span class="hljs-keyword">private</span>:<br><span class="hljs-function">BiNode&lt;DataType&gt;* <span class="hljs-title">Creat</span><span class="hljs-params">()</span></span>;              <span class="hljs-comment">//构造函数调用</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Release</span><span class="hljs-params">(BiNode&lt;DataType&gt;* bt)</span></span>;     <span class="hljs-comment">//析构函数调用</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PreOrder</span><span class="hljs-params">(BiNode&lt;DataType&gt;* bt)</span></span>;    <span class="hljs-comment">//前序</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InOrder</span><span class="hljs-params">(BiNode&lt;DataType&gt;* bt)</span></span>;     <span class="hljs-comment">//中序</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PostOrder</span><span class="hljs-params">(BiNode&lt;DataType&gt;* bt)</span></span>;   <span class="hljs-comment">//后序</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">NodeTreeHelper</span><span class="hljs-params">(BiNode&lt;DataType&gt;* bt)</span></span>; <span class="hljs-comment">//辅助函数用于计算叶子节点数量</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">TreeDepthHelper</span><span class="hljs-params">(BiNode&lt;DataType&gt;* bt)</span></span>; <span class="hljs-comment">//辅助函数用于计算二叉树深度</span><br><br>&#125;;<br><br><span class="hljs-comment">// 二叉链表类BiTree的前序遍历</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-type">void</span> BiTree&lt;DataType&gt; ::<span class="hljs-built_in">PreOrder</span>(BiNode&lt;DataType&gt;* bt)<br>&#123;<br><span class="hljs-keyword">if</span> (bt == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span>;<br><span class="hljs-keyword">else</span> &#123;<br>cout &lt;&lt; bt-&gt;data;<br><span class="hljs-built_in">PreOrder</span>(bt-&gt;lchild);<br><span class="hljs-built_in">PreOrder</span>(bt-&gt;rchild);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 二叉链表类BiTree的中序遍历</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-type">void</span> BiTree&lt;DataType&gt; ::<span class="hljs-built_in">InOrder</span>(BiNode&lt;DataType&gt;* bt)<br>&#123;<br><span class="hljs-keyword">if</span> (bt == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span>;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-built_in">InOrder</span>(bt-&gt;lchild);<br>cout &lt;&lt; bt-&gt;data;<br><span class="hljs-built_in">InOrder</span>(bt-&gt;rchild);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 二叉链表类BiTree的后序遍历</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-type">void</span> BiTree&lt;DataType&gt; ::<span class="hljs-built_in">PostOrder</span>(BiNode&lt;DataType&gt;* bt)<br>&#123;<br><span class="hljs-keyword">if</span> (bt == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span>;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-built_in">PostOrder</span>(bt-&gt;lchild);<br><span class="hljs-built_in">PostOrder</span>(bt-&gt;rchild);<br>cout &lt;&lt; bt-&gt;data;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 二叉链表类BiTree的层序遍历</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-type">void</span> BiTree&lt;DataType&gt; ::<span class="hljs-built_in">LevelOrder</span>()<br>&#123;<br>BiNode&lt;DataType&gt;* Q[<span class="hljs-number">100</span>], * q = <span class="hljs-literal">nullptr</span>;<br><span class="hljs-type">int</span> front = <span class="hljs-number">-1</span>, rear = <span class="hljs-number">-1</span>;<br><span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span>;<br>Q[++rear] = root;<br><span class="hljs-keyword">while</span> (front != rear)<br>&#123;<br>q = Q[++front];<br>cout &lt;&lt; q-&gt;data;<br><span class="hljs-keyword">if</span> (q-&gt;lchild != <span class="hljs-literal">nullptr</span>)  Q[++rear] = q-&gt;lchild;<br><span class="hljs-keyword">if</span> (q-&gt;rchild != <span class="hljs-literal">nullptr</span>)  Q[++rear] = q-&gt;rchild;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br>BiNode&lt;DataType&gt;* BiTree&lt;DataType&gt;::<span class="hljs-built_in">Creat</span>()<br>&#123;<br>BiNode&lt;DataType&gt;* bt;<br><span class="hljs-type">char</span> ch;<br>cin &gt;&gt; ch;<br><span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;#&#x27;</span>)<br>&#123;<br>bt = <span class="hljs-literal">nullptr</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>bt = <span class="hljs-keyword">new</span> BiNode&lt;DataType&gt;;<br>bt-&gt;data = ch;<br>bt-&gt;lchild = <span class="hljs-built_in">Creat</span>();<br>bt-&gt;rchild = <span class="hljs-built_in">Creat</span>();<br>&#125;<br><span class="hljs-keyword">return</span> bt;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-type">void</span> BiTree&lt;DataType&gt;::<span class="hljs-built_in">Release</span>(BiNode&lt;DataType&gt;* bt)<br>&#123;<br><span class="hljs-keyword">if</span> (bt == <span class="hljs-literal">nullptr</span>)<br>&#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">Release</span>(bt-&gt;lchild);<br><span class="hljs-built_in">Release</span>(bt-&gt;rchild);<br><span class="hljs-keyword">delete</span> bt;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-type">int</span> BiTree&lt;DataType&gt;::<span class="hljs-built_in">NodeTreeHelper</span>(BiNode&lt;DataType&gt;* bt)<br>&#123;<br><span class="hljs-keyword">if</span> (bt == <span class="hljs-literal">nullptr</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (bt-&gt;lchild == <span class="hljs-literal">nullptr</span> &amp;&amp; bt-&gt;rchild == <span class="hljs-literal">nullptr</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">NodeTreeHelper</span>(bt-&gt;lchild) + <span class="hljs-built_in">NodeTreeHelper</span>(bt-&gt;rchild);<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-type">int</span> BiTree&lt;DataType&gt;::<span class="hljs-built_in">TreeDepthHelper</span>(BiNode&lt;DataType&gt;* bt)<br>&#123;<br><span class="hljs-keyword">if</span> (bt == <span class="hljs-literal">nullptr</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">int</span> leftDepth = <span class="hljs-built_in">TreeDepthHelper</span>(bt-&gt;lchild);<br><span class="hljs-type">int</span> rightDepth = <span class="hljs-built_in">TreeDepthHelper</span>(bt-&gt;rchild);<br><span class="hljs-keyword">return</span> (leftDepth &gt; rightDepth) ? (leftDepth + <span class="hljs-number">1</span>) : (rightDepth + <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>BiTree&lt;<span class="hljs-type">char</span>&gt; t&#123;&#125;;<br>cout &lt;&lt; <span class="hljs-string">&quot;前序遍历&quot;</span>;<br>t.<span class="hljs-built_in">PreOrder</span>();<br>cout &lt;&lt; <span class="hljs-string">&quot;\n中序遍历&quot;</span>;<br>t.<span class="hljs-built_in">InOrder</span>();<br>cout &lt;&lt; <span class="hljs-string">&quot;\n后序遍历&quot;</span>;<br>t.<span class="hljs-built_in">PostOrder</span>();<br>cout &lt;&lt; <span class="hljs-string">&quot;\n层序遍历&quot;</span>;<br>t.<span class="hljs-built_in">LevelOrder</span>();<br>cout &lt;&lt; <span class="hljs-string">&quot;\n叶子结点数:&quot;</span> &lt;&lt; t.<span class="hljs-built_in">NodeTree</span>(t.root);<br>cout &lt;&lt; <span class="hljs-string">&quot;\n二叉树深度:&quot;</span> &lt;&lt; t.<span class="hljs-built_in">TreeDepth</span>();<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>数据结构作业</category>
      
      <category>实验</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构作业</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>智慧树/知到/刷课脚本安装教程</title>
    <link href="/2023/11/03/zhs_plus/"/>
    <url>/2023/11/03/zhs_plus/</url>
    
    <content type="html"><![CDATA[<blockquote><p>前言：使用本工具请自觉遵守国家法律法规，下载后请24小时之内删除，本教程来自<a href="http://www.w1ndys.top/">www.w1ndys.top</a></p><p><u>使用</u>本教程即代表用户同意本教程<a href="#%E7%94%A8%E6%88%B7%E5%8D%8F%E8%AE%AE">用户协议</a>，使用本教程造成的<font color='red'>一切后果由个人承担</font>，<u>作者</u><font color='red'>概不负责</font></p><p><font color='red'>请注意：本教程所涉及脚本工具开发者并不是博主本人，内涵涉及收费的内容，请酌情考虑</font></p><p>本教程编写于2023年11月3日，距离时间过长可能脚本已失效，请铭记</p><p>本教程旨在节省大家时间，让大家去做更有意义的事情，请勿用于违法用途，请勿倒卖，否则将追究法律责任</p></blockquote><p>本教程编写耗时<font color='red'>180分钟</font>且浏览完全免费，且看且珍惜</p><p>前期步骤基本和超星学习通的教程差不多</p><h1 id="作者建议"><a href="#作者建议" class="headerlink" title="作者建议"></a>作者建议</h1><p>建议在阳间的时间刷课，后台可以看到浏览时间的</p><h1 id="工具准备"><a href="#工具准备" class="headerlink" title="工具准备"></a>工具准备</h1><ol><li><p>一台能上网的电脑</p></li><li><p>Google Chrome（推荐）</p><p>没有Google的可以用Windows自带的Edge浏览器（</p></li><li><p>脚本猫（用篡改猴也行，本教程以脚本猫为例</p><p>详情：<a href="https://docs.scriptcat.org/docs/use/#/">脚本猫使用文档</a></p></li><li><p>一个魔法工具（梯子）</p><p><font color="#3333FF">需要特别注意的是，使用本工具有一定的流量计费，3.8-38.8 不等，根据自己需要选择</font>，此费用也不是我本人收取，而是流量的提供方收取，特别注意这点<font color="#FF0000" size=5>如果你介意此费用，你可以关闭此页面退出阅读了。</font>具体注意事项下面会提到</p></li><li><p>OCS客户端</p></li><li><p>一个懂的百度的大脑（不是</p></li><li><p>一双灵敏的眼睛（不是</p></li><li><p>一个耐心看教程的好习惯（不是</p></li><li><p>一颗真诚的心和<font color='red'>良好的态度</font>，有问题<a href="https://qm.qq.com/q/9n506oZ8Ri&personal_qrcode_source=4">联系博主</a></p><p>（实在懒得弄可以找我低价代刷</p></li></ol><h1 id="开始操作"><a href="#开始操作" class="headerlink" title="开始操作"></a>开始操作</h1><p>有了这个工具，你不只是能进ai，还可以高速浏览GitHub等网站，以及…………</p><h2 id="爬墙工具的介绍和安装使用"><a href="#爬墙工具的介绍和安装使用" class="headerlink" title="爬墙工具的介绍和安装使用"></a>爬墙工具的介绍和安装使用</h2><h3 id="工具介绍"><a href="#工具介绍" class="headerlink" title="工具介绍"></a>工具介绍</h3><p><font color="#FF3333">这些你都不需要记，看看就行</font></p><p>​虚拟专用网络(Virtual Private Network，VPN)是专用网络的延伸，它包含了类似Internet的共享或公共网络链接。通过VPN可以以模拟点对点专用链接的方式通过共享或公共网络在两台计算机之间发送数据。</p><p>　　如果说得再通俗一点，VPN实际上是”线路中的线路”，类型于城市大道上的”公交专用线”，所不同的是，由VPN组成的”线路”并不是物理存在的，而是通过技术手段模拟出来，即是”虚拟”的。不过，这种虚拟的专用网络技术却可以在一条公用线路中为两台计算机建立一个逻辑上的专用”通道”，它具有良好的保密和不受干扰性，使双方能进行自由而安全的点对点连接，因此被网络管理员们非常广泛地关注着。</p><p>　　通过虚拟专用网，我们在家就可以轻松安全的登录到公司的内部网络上，这样可以实现我们在家办公的梦想了。</p><h3 id="账号注册"><a href="#账号注册" class="headerlink" title="账号注册"></a>账号注册</h3><p>微信搜索公众号关注：  <code>W1ndys_Official</code>  点击下方菜单GPT可获取注册地址</p><p><img src="/img/VPN/wx.png" srcset="/img/loading.gif" lazyload alt="注册"></p><p>输入邮箱密码注册账号，注册完成后登陆</p><p><img src="/img/VPN/%E6%B3%A8%E5%86%8C%E8%B4%A6%E5%8F%B7.png" srcset="/img/loading.gif" lazyload alt="注册"></p><p>然后点击左侧购买订阅</p><p><img src="/img/VPN/%E8%AE%A2%E9%98%85.png" srcset="/img/loading.gif" lazyload alt="订阅"></p><p>根据需求选择你合适的方案，如果你只是想尝鲜的话，毫无疑问，选最便宜的，能用就行</p><p><img src="/img/VPN/%E8%B4%AD%E4%B9%B0%E8%AE%A2%E9%98%85.png" srcset="/img/loading.gif" lazyload alt="购买订阅"></p><p>我本人用的是<font color="#FF0000">38.8巨量不限时，推荐这个</font>，大约可以用2年左右，平均下来大约0.6&#x2F;天</p><blockquote><p>因为我不只有这一个需求，另外还有使用<font color="#FF0000">ChatGPT，bingai</font>等的需求，所以这个是最划算的。</p></blockquote><p>另外关于如何使用ChatGPT的教程以后有时间我会写，OpenAI官方的ChatGPT</p><p>买完之后点击左上方仪表盘可以看到你的已订阅</p><p><img src="/img/VPN/%E4%BB%AA%E8%A1%A8%E7%9B%98.png" srcset="/img/loading.gif" lazyload alt="仪表盘"></p><p>然后点击仪表盘下方的使用文档</p><p><img src="/img/VPN/%E5%AE%A2%E6%88%B7%E7%AB%AF.png" srcset="/img/loading.gif" lazyload alt="客户端安装"></p><p>选择你的系统安装客户端</p><p>安装完之后登陆客户端就可以看到这样</p><p><img src="/img/VPN/%E5%AE%89%E8%A3%85%E5%AE%8C%E6%88%90.png" srcset="/img/loading.gif" lazyload alt="安装完成"></p><h3 id="连接节点"><a href="#连接节点" class="headerlink" title="连接节点"></a>连接节点</h3><p>目前为止已经基本结束了，点击连接，点进去选个绿色的节点，点全局，<font color="#FF0000">如果后续出现连接失败就换个节点</font></p><p><img src="/img/VPN/%E8%8A%82%E7%82%B9.png" srcset="/img/loading.gif" lazyload alt="节点"></p><h2 id="脚本安装"><a href="#脚本安装" class="headerlink" title="脚本安装"></a>脚本安装</h2><p>首先安装脚本猫，点击进入<a href="https://docs.scriptcat.org/docs/use/#/">脚本猫使用文档</a></p><p><img src="/img/xxt-ScriptCat/1.jpg" srcset="/img/loading.gif" lazyload alt="安装脚本猫"></p><p>根据自己浏览器选择安装，这里以Google Chrome为例</p><p>（如果长时间进不去则需要<font color='red'>科学上网</font>，由于种种原因这里不过多赘述）</p><p><img src="/img/xxt-ScriptCat/2.jpg" srcset="/img/loading.gif" lazyload alt="安装脚本猫"></p><p>进来之后点击图示右上角安装（由于我已经安装过了所以图示是remove）</p><p><img src="/img/xxt-ScriptCat/3.jpg" srcset="/img/loading.gif" lazyload alt="启用脚本猫"></p><p>然后进入浏览器扩展中心可以看到已经安装好了，启用该扩展</p><p>然后<a href="https://docs.ocsjs.com/docs/app#%E8%BD%AF%E4%BB%B6%E4%B8%8B%E8%BD%BD%E5%88%97%E8%A1%A8">进入OCS使用文档</a>下载OCS客户端</p><p>（进去可能会让你下载视频，那个是操作教程，可看可不看，我会在后面写教程）</p><p><img src="/img/ocs/1.jpg" srcset="/img/loading.gif" lazyload alt="下载OCS客户端"></p><p>下载之后安装，直接双击exe文件就行，没啥别的要动的</p><p>下载完之后在桌面应该可以看到图标，双击图标打开</p><ol><li>进入软件后，一键初始化软件，选择浏览器，脚本管理器和脚本，点击安装。</li><li>新建浏览器， 点击右侧蓝色按钮启动</li><li>等待“OCS导航页”页面加载完成后（可能会卡死，可重启或者直接刷新页面）进入任意网课平台即可，等待期间请勿操作浏览器。</li></ol><p>（更具体的教程和使用须知可以看软件内部自带的教程）</p><p><img src="/img/ocs/2.jpg" srcset="/img/loading.gif" lazyload alt="新建浏览器"></p><p>点击新建浏览器，然后点击创建之后浏览器之后的小三角</p><p>之后等待操作自动完成，可以看到可以刷题的网站</p><p><img src="/img/ocs/3.jpg" srcset="/img/loading.gif" lazyload alt="初始化完成"></p><p>然后点击智慧树知到（如果是刷学习通的话点学习通，这里不过多赘述）</p><p>然后登录上自己的账号（其实不登录也行，主要是要配置题库）</p><p>找到下面这个东西</p><p><img src="/img/ocs/4.jpg" srcset="/img/loading.gif" lazyload alt="ocs配置"></p><p>点击通用，点击全局设置</p><p>根据自己需要进行下面配置</p><p><img src="/img/ocs/5.jpg" srcset="/img/loading.gif" lazyload alt="题库配置"></p><p><a href="https://tk.enncy.cn/">点击进入题库管理平台</a></p><h2 id="ocs题库设置"><a href="#ocs题库设置" class="headerlink" title="ocs题库设置"></a>ocs题库设置</h2><h3 id="第一步：注册题库账号"><a href="#第一步：注册题库账号" class="headerlink" title="第一步：注册题库账号"></a>第一步：注册题库账号</h3><p>右上角注册，具体这个就不说了，只能用邮箱注册，之前用爱发电登录的请使用其他登录 <code>爱发电授权登录</code> 。</p><h3 id="第二步：登录题库，复制题库凭证"><a href="#第二步：登录题库，复制题库凭证" class="headerlink" title="第二步：登录题库，复制题库凭证"></a>第二步：登录题库，复制题库凭证</h3><p>登录后将会自动跳转到个人中心，每个人新注册账号可以获得100次免费搜题次数，找到 <strong>题库配置</strong> , 最后点击复制。</p><p><img src="https://tk.enncy.cn/image/details.png" srcset="/img/loading.gif" lazyload alt="login"></p><h3 id="第三步：配置脚本题库"><a href="#第三步：配置脚本题库" class="headerlink" title="第三步：配置脚本题库"></a>第三步：配置脚本题库</h3><p>在浏览器中打开你的网课， 进入学习，作业，考试页面，然后按照以下步骤配置：</p><p><img src="https://tk.enncy.cn/image/new-tkpz.png" srcset="/img/loading.gif" lazyload alt="login"></p><h3 id="最后一步：刷新页面"><a href="#最后一步：刷新页面" class="headerlink" title="最后一步：刷新页面"></a>最后一步：刷新页面</h3><p>等待运行到自动答题章节后，查看搜题结果，如果搜索到了则为配置成功！</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul><li>如果次数使用完毕，进入个人中心购买次数即可</li><li>收费项目归平台所有，与本人无关，酌情选择</li><li>平台收费价格为1元&#x2F;100次，3元&#x2F;2000次，10元&#x2F;10000次，50元&#x2F;十万次</li></ul><h2 id="刷课配置"><a href="#刷课配置" class="headerlink" title="刷课配置"></a>刷课配置</h2><p>由于智慧树知到有习惯分，脚本提供了习惯刷课功能</p><p><img src="/img/ocs/7.jpg" srcset="/img/loading.gif" lazyload alt="习惯分"></p><p>点击右上角<strong>知到智慧树</strong>，点击<strong>学习脚本</strong></p><p><img src="/img/ocs/8.jpg" srcset="/img/loading.gif" lazyload alt="习惯分"></p><p>根据喜好进行刷课即可，建议每天半小时，有习惯分</p><h1 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h1><p>由于我这学期没有智慧树平台的相关课程，各位自己偷偷刷吧</p><h1 id="用户协议"><a href="#用户协议" class="headerlink" title="用户协议"></a>用户协议</h1><ol><li>使用本教程即代表同意此用户协议</li><li>使用本教程所带来的后果均由用户个人承担</li><li>本教程所涉及的消费均与本人无关</li><li>本教程未经本人允许禁止转载</li><li>不要跟我杠，杠就是你对</li><li>我本人有<strong>抑郁症</strong>病史，玩过小红书，若本人遭受任何形式的网络暴力 (包括但不限于发送淫 &#x2F; 秽血 &#x2F; 腥图片，问候我家人), 并出现极端行为。一切都是<strong>本人的错</strong>和大家无关</li><li>本教程旨在节省大家时间，让大家去做更有意义的事情，请勿用于违法用途，请勿倒卖，否则将追究法律责任</li><li><font color='blue'>博主W1ndys享有最终解释权</font></li></ol>]]></content>
    
    
    <categories>
      
      <category>线上课答案</category>
      
      <category>智慧树知到</category>
      
      <category>刷课脚本</category>
      
    </categories>
    
    
    <tags>
      
      <tag>线上课答案库</tag>
      
      <tag>刷课脚本</tag>
      
      <tag>智慧树知到</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>超星学习通/刷课脚本安装教程</title>
    <link href="/2023/11/03/xxt_plus/"/>
    <url>/2023/11/03/xxt_plus/</url>
    
    <content type="html"><![CDATA[<blockquote><p>前言：使用本工具请自觉遵守国家法律法规，下载后请 24 小时之内删除，本教程来自 <a href="http://www.w1ndys.top/">www.w1ndys.top</a></p><p><u> 使用 </u> 本教程即代表用户同意本教程 <a href="#%E7%94%A8%E6%88%B7%E5%8D%8F%E8%AE%AE">用户协议</a>，使用本教程造成的 <font color='red'> 一切后果由个人承担 </font>，<u> 作者 </u> <font color='red'> 概不负责 </font></p><p><font color='red'> 请注意：本教程所涉及脚本工具开发者并不是博主本人，内涵涉及收费的内容，请酌情考虑 </font></p><p>本教程编写于 2023 年 11 月 3 日，距离时间过长可能脚本已失效，请铭记</p><p>本教程旨在节省大家时间，让大家去做更有意义的事情，请勿用于违法用途，请勿倒卖，否则将追究法律责任</p></blockquote><p>本教程编写耗时 <font color='red'> 160 分钟 </font> 且浏览完全免费，且看且珍惜</p><br/><p><font color='red'> 更新：如果本文章使用次数耗尽而且不想买，又或者也有知到智慧树相关需求，</font> 可以移步 <a href="https://w1ndys.top/2023/11/03/zhs-plus/#">智慧树&#x2F;知到&#x2F;刷课脚本安装教程</a>，可继续获得 100 次免费答题</p><br/><h1 id="作者建议"><a href="#作者建议" class="headerlink" title="作者建议"></a>作者建议</h1><p>建议在阳间的时间刷课，后台可以看到浏览时间的</p><h1 id="工具准备"><a href="#工具准备" class="headerlink" title="工具准备"></a>工具准备</h1><ol><li><p>一台能上网的电脑</p></li><li><p>Google Chrome（推荐）</p><p>没有 Google 的可以用 Windows 自带的 Edge 浏览器（</p></li><li><p>脚本猫（用篡改猴也行，本教程以脚本猫为例</p><p>详情：<a href="https://docs.scriptcat.org/docs/use/#/">脚本猫使用文档</a></p></li><li><p>一个魔法工具（梯子）</p><p><font color="#3333FF">需要特别注意的是，使用本工具有一定的流量计费，3.8-38.8 不等，根据自己需要选择</font>，此费用也不是我本人收取，而是流量的提供方收取，特别注意这点<font color="#FF0000" size=5>如果你介意此费用，你可以关闭此页面退出阅读了。</font>具体注意事项下面会提到</p></li><li><p>一个懂的百度的大脑（不是</p></li><li><p>一双灵敏的眼睛（不是</p></li><li><p>一个耐心看教程的好习惯（不是</p></li><li><p>一颗真诚的心和 <font color='red'> 良好的态度 </font>，有问题 <a href="https://qm.qq.com/q/9n506oZ8Ri&personal_qrcode_source=4">联系博主</a></p><p>（实在懒得弄可以找我低价代刷</p></li></ol><h1 id="开始操作"><a href="#开始操作" class="headerlink" title="开始操作"></a>开始操作</h1><h2 id="爬墙工具的介绍和安装使用"><a href="#爬墙工具的介绍和安装使用" class="headerlink" title="爬墙工具的介绍和安装使用"></a>爬墙工具的介绍和安装使用</h2><p>有了这个工具，你不只是能进ai，还可以高速浏览GitHub等网站，以及…………</p><h3 id="工具介绍"><a href="#工具介绍" class="headerlink" title="工具介绍"></a>工具介绍</h3><p><font color="#FF3333">这些你都不需要记，看看就行</font></p><p>​        虚拟专用网络(Virtual Private Network，VPN)是专用网络的延伸，它包含了类似Internet的共享或公共网络链接。通过VPN可以以模拟点对点专用链接的方式通过共享或公共网络在两台计算机之间发送数据。</p><p>　　如果说得再通俗一点，VPN实际上是”线路中的线路”，类型于城市大道上的”公交专用线”，所不同的是，由VPN组成的”线路”并不是物理存在的，而是通过技术手段模拟出来，即是”虚拟”的。不过，这种虚拟的专用网络技术却可以在一条公用线路中为两台计算机建立一个逻辑上的专用”通道”，它具有良好的保密和不受干扰性，使双方能进行自由而安全的点对点连接，因此被网络管理员们非常广泛地关注着。</p><p>　　通过虚拟专用网，我们在家就可以轻松安全的登录到公司的内部网络上，这样可以实现我们在家办公的梦想了。</p><h3 id="账号注册"><a href="#账号注册" class="headerlink" title="账号注册"></a>账号注册</h3><p>微信搜索公众号关注：  <code>W1ndys_Official</code>  点击下方菜单GPT可获取注册地址</p><p><img src="/img/VPN/wx.png" srcset="/img/loading.gif" lazyload alt="注册"></p><p>输入邮箱密码注册账号，注册完成后登陆</p><p><img src="/img/VPN/%E6%B3%A8%E5%86%8C%E8%B4%A6%E5%8F%B7.png" srcset="/img/loading.gif" lazyload alt="注册"></p><p>然后点击左侧购买订阅</p><p><img src="/img/VPN/%E8%AE%A2%E9%98%85.png" srcset="/img/loading.gif" lazyload alt="订阅"></p><p>根据需求选择你合适的方案，如果你只是想尝鲜的话，毫无疑问，选最便宜的，能用就行</p><p><img src="/img/VPN/%E8%B4%AD%E4%B9%B0%E8%AE%A2%E9%98%85.png" srcset="/img/loading.gif" lazyload alt="购买订阅"></p><p>我本人用的是<font color="#FF0000">38.8巨量不限时，推荐这个</font>，大约可以用2年左右，平均下来大约0.6&#x2F;天</p><blockquote><p>因为我不只有这一个需求，另外还有使用<font color="#FF0000">ChatGPT，bingai</font>等的需求，所以这个是最划算的。</p></blockquote><p>另外关于如何使用ChatGPT的教程以后有时间我会写，OpenAI官方的ChatGPT</p><p>买完之后点击左上方仪表盘可以看到你的已订阅</p><p><img src="/img/VPN/%E4%BB%AA%E8%A1%A8%E7%9B%98.png" srcset="/img/loading.gif" lazyload alt="仪表盘"></p><p>然后点击仪表盘下方的使用文档</p><p><img src="/img/VPN/%E5%AE%A2%E6%88%B7%E7%AB%AF.png" srcset="/img/loading.gif" lazyload alt="客户端安装"></p><p>选择你的系统安装客户端</p><p>安装完之后登陆客户端就可以看到这样</p><p><img src="/img/VPN/%E5%AE%89%E8%A3%85%E5%AE%8C%E6%88%90.png" srcset="/img/loading.gif" lazyload alt="安装完成"></p><h3 id="连接节点"><a href="#连接节点" class="headerlink" title="连接节点"></a>连接节点</h3><p>目前为止已经基本结束了，点击连接，点进去选个绿色的节点，点全局，<font color="#FF0000">如果后续出现连接失败就换个节点</font></p><p><img src="/img/VPN/%E8%8A%82%E7%82%B9.png" srcset="/img/loading.gif" lazyload alt="节点"></p><h2 id="脚本安装"><a href="#脚本安装" class="headerlink" title="脚本安装"></a>脚本安装</h2><p>首先安装脚本猫，点击进入 <a href="https://docs.scriptcat.org/docs/use/#/">脚本猫使用文档</a></p><p><img src="/img/xxt-ScriptCat/1.jpg" srcset="/img/loading.gif" lazyload alt="安装脚本猫"></p><p>根据自己浏览器选择安装，这里以 Google Chrome 为例</p><p>（如果长时间进不去则需要 <font color='red'> 科学上网 </font>，由于种种原因这里不过多赘述）</p><p><img src="/img/xxt-ScriptCat/2.jpg" srcset="/img/loading.gif" lazyload alt="安装脚本猫"></p><p>进来之后点击图示右上角安装（由于我已经安装过了所以图示是 remove）</p><p><img src="/img/xxt-ScriptCat/3.jpg" srcset="/img/loading.gif" lazyload alt="启用脚本猫"></p><p>然后进入浏览器扩展中心可以看到已经安装好了，启用该扩展</p><p>然后点击获取脚本 <a href="https://scriptcat.org/zh-CN/script-show-page/1127">超星学习通脚本猫脚本</a></p><p><img src="/img/xxt-ScriptCat/4.jpg" srcset="/img/loading.gif" lazyload alt="安装脚本"></p><p><img src="/img/xxt-ScriptCat/5.jpg" srcset="/img/loading.gif" lazyload alt="安装脚本"></p><p>由于我已经安装完了，这里显示的是重新安装和更新</p><p>至此脚本已经安装完毕</p><h2 id="脚本配置"><a href="#脚本配置" class="headerlink" title="脚本配置"></a>脚本配置</h2><p>接下来就是开始配置脚本</p><p>点击进入 <a href="https://passport2.chaoxing.com/login?fid=&newversion=true&refer=https://i.chaoxing.com#/">超星学习通官网</a></p><p>登录账号进入个人空间</p><p><img src="/img/xxt-ScriptCat/6.jpg" srcset="/img/loading.gif" lazyload alt="配置脚本"></p><p>点击对应课程</p><p><img src="/img/xxt-ScriptCat/7.jpg" srcset="/img/loading.gif" lazyload alt="配置脚本"></p><p>点击确定跳转到脚本页面</p><p><img src="/img/xxt-ScriptCat/8.jpg" srcset="/img/loading.gif" lazyload alt="配置脚本"></p><ol><li>首先任务设置全选就行</li><li>自动提交也点</li><li>题库 token 需要绑定 QQ<ol><li>注意↓</li><li>一个 QQ 只能绑定一个账号</li><li>绑定成功可以获得答题次数赠送</li><li>如果 QQ 之前绑定过其他 token，绑定会失败，一个 QQ 只能绑定一个账号</li><li>绑定成功可以获得答题次数赠送</li><li>如果 QQ 之前绑定过其他 token，绑定会失败</li></ol></li><li>视频倍速自己酌情考虑</li><li>正确率 0-100</li><li>点击保存</li><li>总开关默认是只看一集，闯关模式是连续刷，适合挂着不管</li><li>点击任意开关即可开刷</li></ol><blockquote><p>在这里提一嘴，有关于脚本收费问题，QQ 号绑定会赠送 100 次答题次数</p><p>答题次数的收费标准是 1 元&#x2F;200 题，5 元&#x2F;2000 题，10&#x2F;元 5000 题</p><p>有个纯白嫖的方法就是换 QQ 号绑定，官方的说法是每个 QQ 只能绑定一个 token，但没说每个 token 只能用一个 QQ 绑定</p><p><font color='red'> 此收费项目与本人无关，酌情消费 </font></p><p><font color='red'> token 不要泄露！！token 不要泄露！！token 不要泄露！！</font> 重要的事情说三遍</p></blockquote><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>至此已经基本结束了</p><h1 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h1><p>放一下我自己的刷课记录</p><p><img src="/img/xxt-ScriptCat/9.jpg" srcset="/img/loading.gif" lazyload alt="记录展示"></p><p><img src="/img/xxt-ScriptCat/10.jpg" srcset="/img/loading.gif" lazyload alt="记录展示"></p><p><img src="/img/xxt-ScriptCat/11.jpg" srcset="/img/loading.gif" lazyload alt="记录展示"></p><h1 id="用户协议"><a href="#用户协议" class="headerlink" title="用户协议"></a>用户协议</h1><ol><li>使用本教程即代表同意此用户协议</li><li>使用本教程所带来的后果均由用户个人承担</li><li>本教程所涉及的消费均与本人无关</li><li>本教程未经本人允许禁止转载</li><li>不要跟我杠，杠就是你对</li><li>我本人有 <strong>抑郁症</strong> 病史，玩过小红书，若本人遭受任何形式的网络暴力 (包括但不限于发送淫 &#x2F; 秽血 &#x2F; 腥图片，问候我家人), 并出现极端行为。一切都是 <strong>本人的错</strong> 和大家无关</li><li>本教程旨在节省大家时间，让大家去做更有意义的事情，请勿用于违法用途，请勿倒卖，否则将追究法律责任</li><li><font color='blue'> 博主 W1ndys 享有最终解释权 </font></li></ol>]]></content>
    
    
    <categories>
      
      <category>线上课答案</category>
      
      <category>超星学习通</category>
      
      <category>刷课脚本</category>
      
    </categories>
    
    
    <tags>
      
      <tag>线上课答案库</tag>
      
      <tag>超星学习通</tag>
      
      <tag>刷课脚本</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构期中考试wp</title>
    <link href="/2023/11/03/DS_test_plus_1.0/"/>
    <url>/2023/11/03/DS_test_plus_1.0/</url>
    
    <content type="html"><![CDATA[<blockquote><p>以下内容全部来自ChatGPT和Microsoft bing ai解答，正确率为85%左右，<font color='red'>仅参考，本人对本页答案概不负责</font></p></blockquote><h1 id="一、选择题"><a href="#一、选择题" class="headerlink" title="一、选择题"></a>一、选择题</h1><ol><li>对于数据结构的描述，下列说法中不正确的是( )。</li></ol><p><font color='red'>相同的逻辑结构对应的存储结构也必相同</font></p><p>数据结构由逻辑结构、存储结构和基本操作三方面组成</p><p>对数据结构基本操作的实现与存储结构有关</p><p>数据的存储结构是数据的逻辑结构的机内实现</p><blockquote><p>选项 <em>A</em> 是不正确的。相同的逻辑结构并不意味着存储结构也必须相同。逻辑结构是数据对象之间的抽象关系，而存储结构是这些关系在计算机内部的具体表示。例如，线性表的逻辑结构可以通过数组（顺序存储结构）或链表（链式存储结构）来实现，这两种存储结构有着不同的特性和操作复杂性。因此，即使逻辑结构相同，存储结构也可以不同。其他选项 <em>B</em>、<em>C</em> 和 <em>D</em> 都是正确的。数据结构确实由逻辑结构、存储结构和基本操作三方面组成（<em>B</em>），对数据结构基本操作的实现确实与存储结构有关（<em>C</em>），数据的存储结构是数据的逻辑结构的机内实现（<em>D</em>）。</p></blockquote><ol start="2"><li>顺序存储结构中数据元素之间的逻辑关系是由（ ）表示的。</li></ol><p>线性结构</p><p>非线性结构</p><p><font color='red'>存储位置</font></p><p>指针</p><blockquote><p>在顺序存储结构中，数据元素之间的逻辑关系是由<strong>存储位置</strong>表示的。所以正确答案是选项 <em>C</em>。在顺序存储结构中，元素之间的逻辑关系（例如线性关系）通过它们在内存中的物理位置来表示。相邻的元素在内存中也是相邻的。这与链式存储结构不同，在链式存储结构中，元素之间的逻辑关系是通过指针表示的。选项 <em>A</em> 和 <em>B</em> 描述的是数据结构的类型，而不是数据元素之间的逻辑关系如何表示。选项 <em>D</em> 是链式存储结构中数据元素之间逻辑关系的表示方式，而不是顺序存储结构。</p></blockquote><ol start="3"><li>链接存储结构中数据元素之间的逻辑关系是由( )表示的。</li></ol><p>线性结构</p><p>非线性结构</p><p>存储位置</p><p><font color='red'>指针</font></p><blockquote><p>在链接存储结构中，数据元素之间的逻辑关系是由指针表示的。指针指向了下一个数据元素的位置，从而建立了数据元素之间的联系。</p><p>因此，选项 D 是正确的。</p></blockquote><ol start="4"><li>算法指的是( )。</li></ol><p><font color='red'>对特定问题求解步骤的一种描述,是指令的有限序列</font></p><p>计算机程序</p><p>解决问题的计算方法</p><p>数据处理</p><blockquote><p>算法指的是对特定问题求解步骤的一种描述，是指令的有限序列。它是解决问题或执行任务的明确指令集合，旨在通过一系列定义明确的步骤来完成特定任务。算法通常是一系列可执行的操作，能够从初始状态转移到所需的最终状态。</p><p>因此，选项 A 是正确的。</p></blockquote><ol start="5"><li>假设时间复杂度为O（n^2）的算法在有200个元素的数组上运行需要3.1 ms，则有400个元素的数组上运行需要(   )ms。</li></ol><p>3.1</p><p>6.2</p><p><font color='red'>12.4</font></p><p>9.61</p><blockquote><p>根据时间复杂度为 O(n^2) 的算法特点，当数组元素的数量增加一倍时，运行时间将增加为原来的平方倍。因此，200 个元素变为 400 个元素，相当于增加了一倍。根据这个关系，我们可以预计运行时间将是原来的 2^2 &#x3D; 4 倍。即 3.1 ms * 4 &#x3D; 12.4 ms。</p><p>因此，有 400 个元素的数组上运行时间将是 12.4 ms。选项 C 中的 12.4 是正确的。</p></blockquote><ol start="6"><li>算法分析的两个主要方面是( )。</li></ol><p><font color='red'>空间性能和时间性能</font></p><p>正确性和简明性</p><p>可读性和文档性</p><p>数据复杂性和程序复杂性</p><blockquote><p>算法分析的两个主要方面是空间性能和时间性能。在算法设计和评估过程中，我们通常关注算法所需的内存空间以及它执行所需的时间。这些指标可以帮助我们评估算法的效率和可行性，从而选择最适合特定问题的算法。</p><p>因此，选项 A 是正确的。</p></blockquote><ol start="7"><li>下面( )不是算法所必须具备的特性。</li></ol><p>有穷性</p><p>确切性</p><p><font color='red'>高效性</font></p><p>可行性</p><blockquote><p>从定义上讲，算法必须具备“有穷性”、“确切性”和“可行性”，因为算法必须是能够在有限步骤内完成的、每个步骤都必须确切且无歧义，并且必须是可行实施的。因此，这些特性是算法的基本要求。</p><p>然而，“高效性”并非是算法必须具备的特性。尽管我们通常希望算法是高效的，但并非所有算法都需要是最高效的。因此，选项 C 中的“高效性”是不是算法所必须具备的特性。</p></blockquote><ol start="8"><li>链表不具有的特点是( )。</li></ol><p><font color='red'>可随机访问任一元素</font></p><p>插入删除不需要移动元素</p><p>不必事先估计存储空间</p><p>所需空间与线性表长度成正比</p><blockquote><p>链表不具备的特点是可随机访问任一元素。链表中的元素并非按照其在内存中的物理位置顺序存储，因此不能像数组那样通过下标直接访问特定位置的元素。如果要访问链表中的某个特定元素，需要从头节点开始遍历链表直到找到该元素。</p><p>因此，选项 A 中的“可随机访问任一元素”是链表不具备的特点。</p></blockquote><ol start="9"><li>线性表采用链接存储时，其地址( )。</li></ol><p>必须是连续的</p><p>部分地址必须是连续的</p><p>一定是不连续的</p><p><font color='red'>连续与否均可以</font></p><blockquote><p>线性表采用链接存储时，其地址可以是不连续的。在链接存储结构中，元素之间并不要求在物理内存中是连续存储的，相邻元素之间通过指针进行连接。这使得链表结构能够动态地分配和释放内存，避免了因为插入或删除操作导致的大量数据移动。</p><p>因此，选项 D 中的“连续与否均可以”是正确的。</p></blockquote><p>10.循环单链表的主要优点是( )。</p><p>不再需要头指针了</p><p>从表中任一结点出发都能扫描到整个链表</p><p>已知某个结点的位置后,能够容易找到它的直接前趋</p><p><font color='red'>在进行插入、删除操作时，能更好地保证链表不断开</font></p><blockquote><p>循环单链表的主要优点是在进行插入、删除操作时，能更好地保证链表不断开。循环单链表的尾节点指向头节点，形成一个闭环，这使得在进行插入和删除操作时更加方便，因为不需要处理头尾节点的特殊情况。</p><p>因此，选项 D 中的“在进行插入、删除操作时，能更好地保证链表不断开”是循环单链表的主要优点。</p></blockquote><p>11.若线性表中最常用的操作是在最后一个结点之后插入一个节点和删除最后一个结点，则采用( )存储方法最节省时间。</p><p>单链表</p><p><font color='red'>循环双链表</font></p><p>单循环链表</p><p>带尾指针的单循环链表</p><blockquote><p>循环单链表的主要优点是<strong>从表中任一结点出发都能扫描到整个链表</strong>。所以，正确答案是选项 <em>B</em>。在循环单链表中，最后一个元素的指针字段指向链表的第一个元素，形成一个闭环。这意味着我们可以从任何一个元素开始，通过顺序访问每个元素的指针字段，遍历整个链表。然而，循环单链表仍然需要头指针来标识链表的起始位置（选项 <em>A</em> 是错误的）。已知某个结点的位置后，找到它的直接前趋在单链表（包括循环单链表）中并不容易，因为我们只能从头开始遍历链表（选项 <em>C</em> 是错误的）。在进行插入、删除操作时，无论是单链表还是循环单链表，我们都需要确保操作后链表不会断开（选项 <em>D</em> 是错误的）。</p></blockquote><p>12.从栈顶指针为top的链栈中删除一个结点 ,用x保存被删除结点的值，则执行( )。</p><p>x&#x3D;top; top&#x3D;top-&gt; next;</p><p>x&#x3D;top-&gt; data;</p><p>top&#x3D;top-&gt; next; x&#x3D; top-&gt; data;</p><p><font color='red'>x&#x3D;top-&gt; data; top&#x3D; top-&gt; next;</font></p><blockquote><p>在从栈顶指针为top的链栈中删除一个节点时，我们首先需要保存被删除节点的值，然后更新栈顶指针。栈顶指针需要指向被删除节点的下一个节点，因为栈是先进后出的数据结构，所以删除的是栈顶元素。</p><p>因此，正确的操作是:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">x = top-&gt;data; // 保存被删除节点的值<br>top = top-&gt;next; // 更新栈顶指针<br></code></pre></td></tr></table></figure><p>所以选项是D。</p></blockquote><p>13.设计一个判别表达式中左右扩号是否配对的算法,采用( )数据结构最佳。</p><p>顺序表</p><p><font color='red'>栈</font></p><p>队列</p><p>链表</p><blockquote><p>对于判别表达式中左右括号是否配对的算法，最适合使用的数据结构是栈。栈是一种后进先出（LIFO）的数据结构，可以用来检查括号是否匹配。具体的算法可以使用栈来存储左括号，并在遇到右括号时弹出相应的左括号进行匹配。</p><p>因此，选项 B 中的栈是最佳的数据结构。</p></blockquote><p>14.将数组称为随机存取结构是因为（ ）。</p><p>数组元素是随机的</p><p><font color='red'>对数组任意元素的存取时间是相等的</font></p><p>随时可以对数组进行访问</p><p>数组的存储结构是不定的</p><blockquote><p>将数组称为随机存取结构是因为对数组任意元素的存取时间是相等的。这是因为数组在内存中是连续存储的，每个元素都可以通过偏移量直接计算出其地址，因此可以在 O(1) 的时间复杂度内访问任意索引处的元素。</p><p>因此，选项 B 中的“对数组任意元素的存取时间是相等的”是描述数组作为随机存取结构的原因。</p></blockquote><p>15.设有两个字符串p和q，求p在q中首次出现的位置的运算称作（ ）。</p><p>连接</p><p><font color='red'>模式匹配</font></p><p>求字串</p><p>求串长</p><blockquote><p>求p在q中首次出现的位置的运算称为模式匹配。模式匹配是计算机科学中的一个重要概念，用于确定一个字符串是否包含另一个字符串作为子字符串，并返回其出现的位置。在这种情况下，给定字符串p和q，我们试图找到q中第一次出现p的位置。</p><p>因此，选项 B 中的“模式匹配”是描述这种运算的术语。</p></blockquote><p>16.设栈S和队列Q的初始状态为空，元素e1，e2，e3，e4，e5，e6依次通过栈S，一个元素出栈后即进入队列Q。若6个元素出队列的顺序是e2，e4，e3，e6，e5，e1，则栈S的容量至少应该是( )。</p><p><font color='red'>6</font></p><p>4</p><p>3</p><p>2</p><blockquote><p>根据题意，元素首先通过栈 S，然后一个一个地出栈并进入队列 Q。最后出队列的元素顺序是 e2，e4，e3，e6，e5，e1。这意味着栈 S 中的元素在被进入队列 Q 之前必须按照逆序排列。</p><p>因此，栈 S 的最小容量应至少是 6，因为栈 S 需要依次容纳 e1，e5，e6，e3，e4，e2 这 6 个元素。</p><p>因此，选项 A 中的 6 是正确的。</p></blockquote><p>17.一个栈的入栈序列是1，2，3，4，5，则栈的不可能的输出序列是( )。</p><p>54321</p><p>45321</p><p><font color='red'>43512</font></p><p>12345</p><blockquote><p>对于给定的入栈序列1，2，3，4，5，栈的不可能的输出序列是 43512。这是因为在一个栈中，要取出一个元素，需要将位于栈顶的元素弹出，然后才能取出下一个元素。因此，输出序列中的第一个数字应该是栈中元素的最底部元素，然后逐渐依次向上取出。所以，顺序 4、3、5、1、2 不可能是给定入栈序列的输出序列。</p><p>其他选项中的序列都是可能的栈输出序列，但 43512 不是。</p></blockquote><ol start="18"><li>栈和队的主要区别在于（ ）。</li></ol><p>它们的逻辑结构不同</p><p>它们的存储结构不同</p><p>所包含的运算不同</p><p><font color='red'>插入、删除运算的限定不一样</font></p><blockquote><p>栈和队列的主要区别在于它们的插入和删除运算的限定不同。栈是一种后进先出（LIFO）的数据结构，只允许在一端进行插入和删除操作，而队列是一种先进先出（FIFO）的数据结构，只允许在一端插入，在另一端删除。</p><p>因此，选项 D 中的“插入、删除运算的限定不一样”是栈和队列的主要区别。</p></blockquote><ol start="19"><li>设模式T&#x3D;“abcabc”，则该模式的next值为( )。</li></ol><p>{-1，0，0，1，2，3}</p><p><font color='red'>{-1，0，0，0，1，2}</font></p><p>{-1，0，0，1，1，2}</p><p>{1，0，0，0，2，3}</p><blockquote><p>自己算算就行了，这题原本错了</p></blockquote><ol start="20"><li>若一个栈的输入序列是1，2，3，… ,n,输出序列的第一个元素是n，则第 i个输出元素是( )。</li></ol><p>不确定</p><p>n-i</p><p>n-i-1</p><p><font color='red'>n-i+1</font></p><blockquote><p>对于一个栈的输入序列是1，2，3，…，n，输出序列的第一个元素是n，则第 i 个输出元素是 n-i+1。这是因为栈是一种后进先出（LIFO）的数据结构，所以最后一个进入栈的元素会最先被弹出，倒数第二个进入栈的元素会第二个被弹出，以此类推。</p><p>因此，选项 D 中的 n-i+1 是第 i 个输出元素的正确表示。</p></blockquote><p>21.设线性表有n个元素，以下操作中,( )在顺序表上实现比在单链表上实现的效率更高。</p><p><font color='red'>输出第i(1≤i≤n)个元素值</font></p><p>交换第1个和第2个元素的值</p><p>顺序输出所有n个元素</p><p>查找与给定值x相等的元素在线性表中的序号</p><blockquote><p>在顺序表和单链表上实现的效率比较如下：</p><ul><li><strong>输出第i(1≤i≤n)个元素值</strong>：在顺序表上实现的效率更高。因为顺序表可以直接通过索引访问任何位置的元素，时间复杂度为O(1)。而在单链表中，我们需要从头开始遍历到第i个元素，时间复杂度为O(n)。</li><li><strong>交换第1个和第2个元素的值</strong>：在单链表上实现的效率更高。因为在单链表中，我们可以直接改变节点的链接，而不需要移动元素本身。而在顺序表中，我们需要移动元素本身，这可能涉及到大量的数据复制。</li><li><strong>顺序输出所有n个元素</strong>：在顺序表和单链表上实现的效率相同。因为无论是顺序表还是单链表，我们都需要遍历所有的元素，时间复杂度都是O(n)。</li><li><strong>查找与给定值x相等的元素在线性表中的序号</strong>：在顺序表和单链表上实现的效率相同。因为无论是顺序表还是单链表，我们都需要遍历所有的元素来查找给定值，时间复杂度都是O(n)。</li></ul><p>所以，在这些操作中，只有<strong>输出第i(1≤i≤n)个元素值</strong>这个操作在顺序表上实现比在单链表上实现的效率更高。</p></blockquote><p>22.对于n个元素组成的线性表,建立一个有序单链表的时间复杂度是( )。</p><blockquote><p>建立一个有序单链表的时间复杂度是<font color='red'>O(n^2)。</font></p><p>在一个有序单链表中插入一个元素需要在链表中找到合适的位置，这可能需要从头开始遍历链表，直到找到合适的位置为止。插入一个元素的平均时间复杂度为O(n)。如果要建立一个有序单链表，需要将n个元素一个个插入，因此总的时间复杂度为O(n) * O(n) &#x3D; O(n^2)。</p></blockquote><p>23.设数组S[n]作为两个栈S1和S2的存储空间，对任何一个栈只有当S[n]全满时才不能进行进栈操作。为这两个栈分配空间的最佳方案是( )。</p><p><font color='red'>S1的栈底位置为0,S2的栈底位置为n-1</font></p><p>S1的栈底位置为0,S2的栈底位置为n&#x2F;2</p><p>S1的栈底位置为0,S2的栈底位置为n</p><p>S1的栈底位置为0,S2的栈底位置为1</p><blockquote><p>为了最大限度地利用存储空间，我们应该将S1的栈底位置设置为0，将S2的栈底位置设置为n-1。这样可以使两个栈的空间分配在整个数组的两端，最大化利用数组的空间。所以最佳方案是：</p><p>S1的栈底位置为0，S2的栈底位置为n-1。</p></blockquote><p>24.一个队列的入队顺序是1、2、3和4,则队列的输出顺序是( )。</p><p>4321</p><p><font color='red'>1234</font></p><p>1432</p><p>3241</p><blockquote><p>一个队列的特点是先进先出(FIFO)，即最先进入队列的元素最先出队列。根据题目给出的入队顺序，元素1首先进入队列，然后是2、3、4。因此，出队顺序应为1234。</p><p>所以，队列的输出顺序是1234。</p></blockquote><p>25.对特殊矩阵采用压缩存储的目的主要是为了( )。</p><p>表达变得简单</p><p>对矩阵元素的存取变得简单</p><p>去掉矩阵中的多余元素</p><p><font color='red'>减少不必要的存储空间</font></p><blockquote><p>对特殊矩阵采用压缩存储的主要目的是为了<strong>减少不必要的存储空间</strong>。通过识别和利用矩阵中的特殊结构或特殊规律，可以使用更少的存储空间来表示矩阵，从而减少存储开销。这样可以节省存储空间，并降低存储和传输成本。</p></blockquote><p>26.在解决计算机主机与打印机之间速度不匹配问题时通常设置一个打印缓冲区，该缓冲区应该是一个( )结构。</p><p>栈</p><p><font color='red'>队列</font></p><p>数组</p><p>线性表</p><blockquote><p>在解决计算机主机与打印机之间速度不匹配问题时，通常设置一个打印缓冲区，该缓冲区应该是一个队列结构。</p><p>使用队列结构可以保证打印作业按照先来先服务的原则进行处理。当打印机的处理速度慢于计算机主机的传输速度时，打印缓冲区可以暂时存储待打印的作业，然后按照顺序逐一传输到打印机进行打印。</p></blockquote><p>27.若某线性表中最常用的操作是取第i个元素和找第i个元素的前驱，则采用（ ）存储方法最节省时间。</p><p><font color='red'>顺序表</font></p><p>单链表</p><p>双链表</p><p>单循环链表</p><blockquote><p>若某线性表中最常用的操作是取第 i 个元素和找第 i 个元素的前驱，采用<strong>顺序表</strong>存储方法最节省时间。顺序表可以通过下标直接访问元素，时间复杂度为 O(1)，而单链表、双链表以及单循环链表在取第 i 个元素的操作中需要遍历至第 i 个节点，时间复杂度为 O(i)。因此，在此情况下，采用顺序表存储方法可以最节省时间。</p></blockquote><ol start="28"><li>在一个单链表中，已知q所指结点是p所指结点的直接前驱，若在q和p之间插入s所指结点，则执行( )操作。</li></ol><p>s-&gt;next&#x3D;p-&gt;next; p-&gt; next&#x3D;s;</p><p><font color='red'>q-&gt;next&#x3D;s; s-&gt;next&#x3D;p;</font></p><p>p-&gt;next&#x3D;s-&gt;next; s-&gt;next&#x3D;p;</p><p>p-&gt;next&#x3D;s; s-&gt;next&#x3D;q;</p><blockquote><p>在一个单链表中，已知 q 所指结点是 p 所指结点的直接前驱，若在 q 和 p 之间插入 s 所指结点，应执行以下操作：</p><p>q-&gt;next&#x3D;s; s-&gt;next&#x3D;p;</p><p>这样可以将 s 插入到 q 和 p 之间，完成链表的插入操作。</p></blockquote><p>29.关于矩阵压缩存储，下面的说法中，不正确的是( )。</p><p>对称矩阵只需存放包括主对角线元素在内的下(或上)三角的元素即可</p><p>对角矩阵只需存放非零元素即可</p><p>稀疏矩阵中值为零的元素较多，因此可以采用三元组表方法存储</p><p><font color='red'>稀疏矩阵中大量值为零的元素分布有规律，因此可以采用三元组表方法存储</font></p><blockquote><p>关于矩阵压缩存储，不正确的说法是：</p><p>稀疏矩阵中大量值为零的元素分布有规律，因此可以采用三元组表方法存储。</p><p>虽然稀疏矩阵中大量值为零的元素可以采用三元组表方法存储，但并不一定有规律。使用三元组表方法存储的目的是为了有效地表示稀疏矩阵，并且避免存储大量无效的零元素，而不是基于元素分布的规律。</p></blockquote><p>30.关于数组，下面的说法中，不正确的是( )。</p><p>数组是一种线性结构</p><p>数组是一种定长的线性结构</p><p>除了插入与删除操作外，数组的基本操作还有存取、修改、检索和排序等</p><p><font color='red'>数组的基本操作有存取、修改、检索和排序等，没有插入与删除操作</font></p><blockquote><p>关于数组，不正确的说法是：</p><p>数组的基本操作有存取、修改、检索和排序等，没有插入与删除操作。</p><p>实际上，数组是一种定长的线性结构，长度在创建时被固定。在插入和删除元素时，需要移动其他元素以保持数组的连续性，这会导致较高的时间复杂度。因此，数组的插入和删除操作相对效率较低。</p></blockquote><h1 id="二、判断题"><a href="#二、判断题" class="headerlink" title="二、判断题"></a>二、判断题</h1><p>31.稀疏矩阵压缩存储后，必会失去随机存取功能。</p><p>正确</p><p><font color='red'>错误</font></p><blockquote><p>稀疏矩阵压缩存储后，并不一定会失去随机存取功能。虽然压缩存储可能会限制某些随机存取功能，但这取决于具体的压缩算法和数据结构。例如，使用三元组表等压缩方式仍然可以支持随机存取功能，只是在稀疏矩阵中的零元素可能不会占据存储空间。因此，这个说法是不正确的。</p></blockquote><p>32.将数组称为随机存取结构是因为随时可以对数组进行存取访问。</p><p><font color='red'>正确</font></p><p>错误</p><blockquote><p>将数组称为随机存取结构是因为可以通过下标直接随机访问数组中的元素，因此说法是正确的。数组允许按照元素的索引进行快速访问，这意味着可以通过指定元素的索引位置来直接访问或修改元素的值。这种随机访问的特性使得数组成为一种支持高效随机访问的数据结构。</p></blockquote><p>33.有n个元素依次进栈，则出栈序列有(n-1)&#x2F;2种。</p><p>正确</p><p><font color='red'>错误</font></p><blockquote><p>这个说法是错误的。出栈序列的数量不一定是 (n-1)&#x2F;2。实际上，对于给定的n个元素，有许多不同的出栈序列可能。出栈序列的数量取决于具体的排列组合情况，而不是简单地等于 (n-1)&#x2F;2。具体的出栈序列数量需要根据出栈顺序的特定限制条件进行计算。</p></blockquote><p>34.栈可以作为实现过程调用的一种数据结构。</p><p><font color='red'>正确</font></p><p>错误</p><blockquote><p>栈可以作为实现过程调用的一种数据结构，因此这个说法是正确的。在程序执行过程中，当一个过程调用另一个过程时，会将返回地址、参数和局部变量等信息存储在栈中。这些信息以堆栈的形式保存，即后调用的函数压栈，先调用的函数出栈。栈的特点使得它非常适合用于实现过程调用和递归等计算机程序中。</p></blockquote><p>35.在栈满的情况下不能做进栈操作，否则将产生“上溢”。</p><p><font color='red'>正确</font></p><p>错误</p><blockquote><p>在栈满的情况下进行进栈操作将导致栈上溢，这会导致数据丢失或程序异常终止。因此，这个说法是正确的。栈有一个容量限制，当栈已满时，无法再进行进栈操作。如果强行进行进栈操作，将导致栈上溢（stack overflow），可能会损坏其他数据或引发程序异常。因此，在实现栈时，通常需要考虑栈上溢的情况并进行相应的处理。</p></blockquote><p>36.在循环队列中，front指向队头元素的前一个位置rear指向队尾元素的位置，则队满的条件是front&#x3D;rear。</p><p>正确</p><p><font color='red'>错误</font></p><blockquote><p>在循环队列中，通常采用取模运算来实现循环。front 指向队头元素的位置，rear 指向队尾元素的下一个位置。因此，队满的条件是 <code>(rear + 1) % n == front</code>，其中 <code>n</code> 是队列的最大容量。</p><p>因此，说法是错误的。队满的条件不是 <code>front = rear</code>，而是 <code>(rear + 1) % n == front</code>。</p></blockquote><p>37.在单链表中，要取得某个元素，只要知道该元素所在结点的地址即可，因此单链表是随机存取结构。</p><p>正确</p><p><font color='red'>错误</font></p><blockquote><p>在单链表中，虽然可以通过知道该元素所在结点的地址来访问该元素，但这种访问方式并不属于随机存取，因为单链表不支持通过下标或索引直接访问元素。单链表只能通过从头结点开始逐个遍历查找的方式来找到指定位置的元素，这导致了访问的时间复杂度是 O(n)。因此，单链表并不属于随机存取结构。</p></blockquote><p>38.每种数据结构都具备三个基本操作：插入、删除和查找。</p><p>正确</p><p><font color='red'>错误</font></p><blockquote><p>这个说法是不准确的。尽管许多数据结构确实具有插入、删除和查找等基本操作，但并不是每种数据结构都具备这三种基本操作。不同类型的数据结构可能有不同的设计目标和特定的操作。有些数据结构可能只支持其中一些操作，而另一些数据结构可能具有不同的基本操作。因此，不能将每种数据结构都简单地归纳为具有这三个基本操作。</p></blockquote><p>39.线性结构的基本特征是：每个元素有且仅有一个直接前驱和一个直接后继。</p><p>正确</p><p><font color='red'>错误</font></p><blockquote><p>线性结构的基本特征是每个元素最多只有一个直接前驱和一个直接后继，而不是有且仅有一个。这意味着某些元素可以没有直接前驱或直接后继（比如第一个元素和最后一个元素）。因此，说法是错误的。</p></blockquote><p>40.算法的时间复杂度都要通过算法中的基本语句的执行次数来确定。</p><p><font color='red'>正确</font></p><p>错误</p><blockquote><p>这个说法是正确的。算法的时间复杂度是通过对算法中的基本语句执行次数的分析来确定的。基本语句通常是指算法中执行最频繁的操作，例如赋值语句、比较语句、算术运算等。通过计算基本语句执行的次数，可以得出算法的时间复杂度，从而评估算法的执行效率。</p></blockquote><h1 id="三、简答题"><a href="#三、简答题" class="headerlink" title="三、简答题"></a>三、简答题</h1><ol><li><h2 id="试解释数据结构、数据类型、抽象数据类型的概念"><a href="#试解释数据结构、数据类型、抽象数据类型的概念" class="headerlink" title="试解释数据结构、数据类型、抽象数据类型的概念"></a>试解释数据结构、数据类型、抽象数据类型的概念</h2></li></ol><ul><li><strong>数据结构</strong>：数据结构是计算机科学中一种特殊的方式，它可以使我们在计算机中更有效地存储和组织数据。例如，我们可以使用数组、链表、栈、队列、图和树等数据结构来存储和管理数据。</li><li><strong>数据类型</strong>：数据类型是编程语言中的一个概念，它定义了一组数据的值的集合和这组数据上可进行的操作。例如，整数类型（int）定义了整数的集合，我们可以对这些整数进行加法、减法、乘法和除法等操作。</li><li><strong>抽象数据类型（ADT）</strong>：抽象数据类型是一种逻辑描述，它定义了一组数据和在这组数据上可进行的操作，但并未指定这些操作的具体实现。例如，栈ADT定义了一组元素和两个基本操作：push（将元素添加到栈顶）和 pop（从栈顶移除元素）。然而，栈ADT并未指定这些操作应如何实现。我们可以使用数组或链表来实现栈ADT。</li></ul><ol start="2"><li><h2 id="以下为单链表在指定位置插入元素的-C-代码，请将划线处代码补充完整。"><a href="#以下为单链表在指定位置插入元素的-C-代码，请将划线处代码补充完整。" class="headerlink" title="以下为单链表在指定位置插入元素的 C++代码，请将划线处代码补充完整。"></a>以下为单链表在指定位置插入元素的 C++代码，请将划线处代码补充完整。</h2><p>以下是将划线处代码补充完整的 C++ 代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-type">void</span> LinkList&lt;DataType&gt;::<span class="hljs-built_in">Insert</span>(<span class="hljs-type">int</span> i, DataType x)<br>&#123;<br>    Node&lt;DataType&gt; *p = first, *s = <span class="hljs-literal">nullptr</span>;<br>    <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">nullptr</span> &amp;&amp; count &lt; i - <span class="hljs-number">1</span>) <span class="hljs-comment">// (1) 划线处</span><br>    &#123;<br>        p = p-&gt;next;<br>        count++;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (p == <span class="hljs-literal">nullptr</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-string">&quot;插入位置错误&quot;</span>;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        s = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Node</span>&lt;DataType&gt;(x);<br>        s-&gt;next = p-&gt;next; <span class="hljs-comment">// (2) 划线处</span><br>        p-&gt;next = s; <span class="hljs-comment">// (3) 划线处</span><br>        <span class="hljs-keyword">if</span> (p == last) <span class="hljs-comment">// (4) 划线处</span><br>            last = s;<br>        length++; <span class="hljs-comment">// (5) 划线处</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在这段代码中：</p><ol><li>划线处 (1) 是 while 循环的条件，用于寻找指定位置的插入点。</li><li>划线处 (2) 将新节点 s 的 next 指针指向 p 后面的节点。</li><li>划线处 (3) 将 p 的 next 指针指向新节点 s。</li><li>划线处 (4) 检查是否是在链表末尾插入，如果是，则更新 last 指针。</li><li>划线处 (5) 增加链表的长度。</li></ol></li><li><h2 id="如下为循环队列的实现代码，给出了类定义、构造函数、入队和出队函数，请-补充完整划线处代码。"><a href="#如下为循环队列的实现代码，给出了类定义、构造函数、入队和出队函数，请-补充完整划线处代码。" class="headerlink" title="如下为循环队列的实现代码，给出了类定义、构造函数、入队和出队函数，请 补充完整划线处代码。"></a>如下为循环队列的实现代码，给出了类定义、构造函数、入队和出队函数，请 补充完整划线处代码。</h2><p>以下是补充完整划线处代码的实现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> QueueSize = <span class="hljs-number">100</span>;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CirQueue</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">CirQueue</span>();<br>    ~<span class="hljs-built_in">CirQueue</span>();<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">EnQueue</span><span class="hljs-params">(DataType x)</span></span>;<br>    <span class="hljs-function">DataType <span class="hljs-title">DeQueue</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function">DataType <span class="hljs-title">GetHead</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Empty</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-keyword">private</span>:<br>    DataType data[QueueSize];<br>    <span class="hljs-type">int</span> front, rear;<br>&#125;;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br>CirQueue&lt;DataType&gt;::<span class="hljs-built_in">CirQueue</span>()<br>&#123;<br>    front = rear = <span class="hljs-number">0</span>; <span class="hljs-comment">// (1) 划线处</span><br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-type">void</span> CirQueue&lt;DataType&gt;::<span class="hljs-built_in">EnQueue</span>(DataType x)<br>&#123;<br>    <span class="hljs-keyword">if</span> ((rear + <span class="hljs-number">1</span>) % QueueSize == front) <span class="hljs-comment">// (2) 划线处</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-string">&quot;队满，上溢出&quot;</span>;<br>    rear = (rear + <span class="hljs-number">1</span>) % QueueSize; <span class="hljs-comment">// (3) 划线处</span><br>    data[rear] = x;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br>DataType CirQueue&lt;DataType&gt;::<span class="hljs-built_in">DeQueue</span>()<br>&#123;<br>    <span class="hljs-keyword">if</span> (front == rear) <span class="hljs-comment">// (4) 划线处</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-string">&quot;下溢&quot;</span>;<br>    front = (front + <span class="hljs-number">1</span>) % QueueSize; <span class="hljs-comment">// (5) 划线处</span><br>    <span class="hljs-keyword">return</span> data[front];<br>&#125;<br></code></pre></td></tr></table></figure><p>在代码中：</p><ol><li>划线处 (1) 完成了循环队列的构造函数，将 front 和 rear 初始化为 0。</li><li>划线处 (2) 是判断队列是否已满的条件。</li><li>划线处 (3) 更新 rear 的位置，使其指向下一个入队元素应该存放的位置。</li><li>划线处 (4) 是判断队列是否为空的条件。</li><li>划线处 (5) 更新 front 的位置，使其指向下一个出队元素的位置。</li></ol></li><li><h2 id="如下代码为顺序表和单链表的-C-类定义，请补充划线处缺失的代码，并对-含义进行注释。"><a href="#如下代码为顺序表和单链表的-C-类定义，请补充划线处缺失的代码，并对-含义进行注释。" class="headerlink" title="如下代码为顺序表和单链表的 C++类定义，请补充划线处缺失的代码，并对 含义进行注释。"></a>如下代码为顺序表和单链表的 C++类定义，请补充划线处缺失的代码，并对 含义进行注释。</h2><p>&lt;1&gt; 顺序表：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> MaxSize = <span class="hljs-number">100</span>;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SeqList</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">SeqList</span>();<br>    <span class="hljs-built_in">SeqList</span>(DataType a[], <span class="hljs-type">int</span> n);<br>    ~<span class="hljs-built_in">SeqList</span>();<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Length</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Empty</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PrintList</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function">DataType <span class="hljs-title">Get</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Locate</span><span class="hljs-params">(DataType x)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Insert</span><span class="hljs-params">(<span class="hljs-type">int</span> i, DataType x)</span></span>;<br>    <span class="hljs-function">DataType <span class="hljs-title">Delete</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span></span>;<br><br><span class="hljs-keyword">private</span>:<br>    DataType data[MaxSize]; <span class="hljs-comment">// (1) 顺序表的数据存储数组</span><br>    <span class="hljs-type">int</span> length; <span class="hljs-comment">// (2) 顺序表的当前长度</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>&lt;2&gt; 单链表：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span><br>&#123;<br>    DataType data; <span class="hljs-comment">// (3) 节点中存储的数据</span><br>    Node&lt;DataType&gt; *next; <span class="hljs-comment">// (4) 指向下一个节点的指针</span><br>&#125;;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkList</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">LinkList</span>();<br>    <span class="hljs-built_in">LinkList</span>(DataType a[], <span class="hljs-type">int</span> n);<br>    ~<span class="hljs-built_in">LinkList</span>();<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PrintList</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Length</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function">DataType <span class="hljs-title">Get</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Locate</span><span class="hljs-params">(DataType x)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Insert</span><span class="hljs-params">(<span class="hljs-type">int</span> i, DataType x)</span></span>;<br>    <span class="hljs-function">DataType <span class="hljs-title">Delete</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span></span>;<br><br><span class="hljs-keyword">private</span>:<br>    Node&lt;DataType&gt; *first; <span class="hljs-comment">// (5) 单链表的头指针</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>在代码中：</p><ol><li>划线处 (1) 是顺序表的数据存储数组。</li><li>划线处 (2) 是顺序表的当前长度。</li><li>划线处 (3) 是单链表节点中存储的数据。</li><li>划线处 (4) 是指向下一个节点的指针。</li><li>划线处 (5) 是单链表的头指针。</li></ol></li><li><h2 id="以下为顺序栈的定义、初始化和压栈操作的实现，请补充完整划线部分代码。"><a href="#以下为顺序栈的定义、初始化和压栈操作的实现，请补充完整划线部分代码。" class="headerlink" title="以下为顺序栈的定义、初始化和压栈操作的实现，请补充完整划线部分代码。"></a>以下为顺序栈的定义、初始化和压栈操作的实现，请补充完整划线部分代码。</h2><p>以下是补充完整划线部分代码的实现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> StackSize = <span class="hljs-number">100</span>;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SeqStack</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">SeqStack</span>();<br>    ~<span class="hljs-built_in">SeqStack</span>();<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Push</span><span class="hljs-params">(DataType x)</span></span>;<br>    <span class="hljs-function">DataType <span class="hljs-title">Pop</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function">DataType <span class="hljs-title">GetTop</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-keyword">private</span>:<br>    DataType data[StackSize]; <span class="hljs-comment">// (1) 划线处</span><br>    <span class="hljs-type">int</span> top; <span class="hljs-comment">// (2) 划线处</span><br>&#125;;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br>SeqStack&lt;DataType&gt;::<span class="hljs-built_in">SeqStack</span>()<br>&#123;<br>    top = <span class="hljs-number">-1</span>; <span class="hljs-comment">// (3) 划线处</span><br>&#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-type">void</span> SeqStack&lt;DataType&gt;::<span class="hljs-built_in">Push</span>(DataType x)<br>&#123;<br>    <span class="hljs-keyword">if</span> (top == StackSize - <span class="hljs-number">1</span>) <span class="hljs-comment">// (4) 划线处</span><br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;栈满&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-string">&quot;上溢&quot;</span>;<br>    &#125;<br>    top++; <span class="hljs-comment">// (5) 划线处</span><br>    data[top] = x;<br>&#125;<br></code></pre></td></tr></table></figure><p>在代码中：</p><ol><li>划线处 (1) 定义了顺序栈的数据存储数组。</li><li>划线处 (2) 定义了顺序栈的栈顶指针。</li><li>划线处 (3) 是顺序栈的构造函数，初始化栈顶指针 top 为 -1。</li><li>划线处 (4) 是判断栈是否已满的条件。</li><li>划线处 (5) 是实现元素压栈操作，将栈顶指针 top 向上移动一个位置，并将元素 x 压入栈顶。</li></ol></li><li><h2 id="设目标主串为-S-“BBCABCDABABCDABD”，模式串为-T-“ABCDABD”"><a href="#设目标主串为-S-“BBCABCDABABCDABD”，模式串为-T-“ABCDABD”" class="headerlink" title="设目标主串为 S&#x3D;“BBCABCDABABCDABD”，模式串为 T&#x3D;“ABCDABD”"></a>设目标主串为 S&#x3D;“BBCABCDABABCDABD”，模式串为 T&#x3D;“ABCDABD”</h2><ol><li><p>简述按 BF 算法对主串 S 进行模式匹配的过程; </p><blockquote><p> BF（Brute-Force）算法是一种简单直接的字符串匹配算法。其匹配过程为： 从主串 S 的第一个字符开始，依次和模式串 T 进行匹配。如果当前字符匹配成功，则继续比较下一个字符，直到模式串 T 完全匹配或者匹配失败。如果匹配失败，则将模式串向右移动一位，再次和主串进行匹配。这个过程会一直持续到找到匹配的子串或者主串遍历完毕。</p></blockquote></li><li><p>手工计算模式串 T 的 next 值; </p><blockquote><p>手工计算模式串 T 的 next 数组的过程如下：</p><p>T &#x3D; “ABCDABD” </p><p>首先，next[0] &#x3D; -1，next[1] &#x3D; 0（规定 next 数组下标从 0 开始）。</p><p>依次计算 next 数组的值： </p><p>对于第 i 个字符，如果 T[next[i]] &#x3D;&#x3D; T[i-1]，则 next[i+1] &#x3D; next[i] + 1； </p><p>否则，将 next[i+1] 更新为 0。</p></blockquote></li><li><p>简述利用求得的 next 数组，按 KMP 算法对主串 S 进行模式匹配的过程。</p><blockquote><p> KMP 算法利用模式串 T 的 next 数组在匹配过程中避免不必要的回溯。匹配过程如下： 从主串 S 的第一个字符开始，同时从模式串 T 的第一个字符开始进行匹配。 如果当前字符匹配成功，则继续比较下一个字符。 如果匹配失败，根据 next 数组进行回溯操作，将模式串 T 向右移动相应的位数，使得模式串能够对齐主串中的下一个字符，继续匹配。 如果模式串完全匹配成功，则返回匹配的起始位置；否则，主串遍历完毕仍未找到匹配子串，则匹配失败。</p></blockquote></li></ol><h1 id="四、附加题"><a href="#四、附加题" class="headerlink" title="四、附加题"></a>四、附加题</h1><p>请认真思考，谈一下你对数据结构课程的建议。（限 100 字以上，共 10 分）</p><blockquote><p>这题没什么好说的</p></blockquote></li></ol>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>数据结构作业</category>
      
      <category>考试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构作业</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>当代大学生国家安全教育___2023章节测试答案超星尔雅</title>
    <link href="/2023/11/03/xxt_answer_gjaqjy/"/>
    <url>/2023/11/03/xxt_answer_gjaqjy/</url>
    
    <content type="html"><![CDATA[<blockquote><p>来源：微信公众平台</p><p><font color='red'>顺序有少许不对，建议使用浏览器自带的搜索功能进行快速定位</font></p><p>为爱发电！</p></blockquote><p><font color='red' size=15>注意！！！！！</font></p><p>博主已经找到刷课脚本，理论上讲本页面答案已经被淘汰，请移步详细阅读<a href="https://w1ndys.top/2023/11/03/xxt-plus/#/">刷课脚本安装使用教程</a>，永远坚持无私奉献！</p><p><font color='red' size=15>注意！！！！！</font></p><p>1【单选题】《七律二首·送瘟神》中“借问瘟君欲何往，纸船明烛照天烧。”这里的“瘟君”指的是（）。</p><p>A、鼠疫</p><p>B、甲肝</p><p>C、肺结核</p><p>D、血吸虫病</p><p>我的答案：D</p><p>2【单选题】《时局图》的配诗“沉沉酣睡我中华，哪知爱国即爱家。国民知醒宜今醒，莫待土分裂似瓜。”该诗作者是中国同盟会会员（）。</p><p>A、刘复基</p><p>B、谢缵泰</p><p>C、陆皓东</p><p>D、彭楚藩</p><p>我的答案：B</p><p>3【多选题】维护国家安全，是坚持和发展中国特色社会主义，实现“两个一百年”奋斗目标和中华民族伟大复兴中国梦的重要保障。国家安全十分重要，国家安全（）。</p><p>A、直接关乎国家主权独立和领土完整</p><p>B、是人民安居乐业、幸福生活的保障</p><p>C、是社会稳定、长治久安的基石</p><p>D、是实现中华民族伟大复兴中国梦的重要前提</p><p>我的答案：ABCD</p><p>1.2</p><p>1【单选题】2013年11月召开的党的十八届三中全会决定，成立（），完善国家安全体制和国家安全战略，确保国家安全。</p><p>A、国家安全部</p><p>B、国家安全领导小组</p><p>C、国家安全统筹平台</p><p>D、中央国家安全委员会</p><p>我的答案：D</p><p>2【单选题】我国是一个发展中的社会主义大国，所处的内外环境、历史发展阶段和未来国家发展战略目标，决定了国家安全必须走（）的道路。答案：</p><p>A、专门工作</p><p>B、群众工作</p><p>C、中国特色</p><p>D、西方特色</p><p>我的答案：C</p><p>2.1</p><p>1【单选题】（）是国家安全的根本。</p><p>A、政治安全</p><p>B、军事安全</p><p>C、文化安全</p><p>D、社会安全</p><p>我的答案：A</p><p>2【判断题】党的十八大以来，党中央高度重视政治安全，强调坚持总体国家安全观要以政治安全为根本，突出了政治安全的特殊地位。</p><p>我的答案：√</p><p>3【判断题】政治安全影响着军事安全、经济安全、社会安全、文化安全等各个领域的安全，国家安全的其他要素最终也要反映到维护政治安全上来。</p><p>我的答案：√</p><p>4【判断题】在2011年公布的《中国的和平发展》白皮书中，我国首次明确界定了六项国家核心利益：国家主权、国家安全、领土完整、国家统一、中国宪法确立的国家政治制度和社会大局稳定、经济社会可持续发展的基本保障。</p><p>我的答案：√</p><p>2.2</p><p>1【单选题】（）是国家政治安全的最高层次，是国家政治安全根本。</p><p>A、主权安全</p><p>B、政权安全</p><p>C、制度安全</p><p>D、意识形态安全</p><p>我的答案：B</p><p>2【单选题】（）说“美国制衡制度结出了政治僵局的恶果。”</p><p>A、福山</p><p>B、林肯</p><p>我的答案：A</p><p>3【单选题】（）是国家独立自主地处理对内对外事务的最高权力，是国家独立的根本标志。</p><p>A、制度安全</p><p>B、政权安全</p><p>C、主权安全</p><p>D、意识形态安全</p><p>我的答案：C</p><p>4【多选题】意识形态是党的一项极端重要的工作，必须旗帜鲜明地批驳意识形态的错误思潮，坚定（）。</p><p>A、道路自信</p><p>B、制度自信</p><p>C、理论自信</p><p>D、文化自信</p><p>我的答案：ABCD</p><p>5【判断题】对我国而言，军事安全最为核心的内容是党执政地位的巩固和国家政治秩序的稳定。</p><p>我的答案：X</p><p>6【判断题】意识形态安全是国家政治安全的有机组成部分，是实现国家政治安全重要的思想武器。</p><p>我的答案：√</p><p>2.3</p><p>1【多选题】当前，政治安全面临的威胁、挑战主要表现在（）方面。ABCD</p><p>A、精神懈息、能力不足、脱离群众，消极腐败的危险</p><p>B、颜色革命”对我国政治安全构成重大现实威胁</p><p>C、我国意识形态领域斗争形势复杂严峻</p><p>D、“一国两制”在香港的实践也遇到了新情况、新问题</p><p>2【判断题】西方敌对势力对我国实施“西化”“分化”“遏制”的图谋与活动将长期存在，政治安全领域风险错综复杂。</p><p>我的答案：√</p><p>2.4</p><p>1【单选题】“小事不出村，大事不出镇，矛盾不上交”出自（）。</p><p>A、镇江经验</p><p>B、嘉兴经验</p><p>C、枫桥经验</p><p>D、盐城经验</p><p>我的答案：C</p><p>2【多选题】维护政治安全是一项长期复杂的系统工程，应主要采取下列哪些举措（）。</p><p>A、全面从严治党，加强党和政府同人民群众的血肉联系</p><p>B、坚决防范“颜色革命”，坚决抵制境外势力渗透，坚定社会主义制度自信，加强民主政治和法治建设，加强国家安全防控体系建设</p><p>C、做好意识形态工作</p><p>D、依法保障“一国两制”实施</p><p>我的答案：ABCD</p><p>3【判断题】《中华人民共和国香港特别行政区维护国家安全法》颁布实施，迈出了建立健全香港特别行政区维护国家安全的法律制度和执行机制的关键一步。</p><p>我的答案：√</p><p>3.1</p><p>1【多选题】国土安全涵盖（）等要素，是指领土完整、国家统一、海洋权益及边疆边境不受侵犯或威胁的状态。</p><p>A、领土</p><p>B、自然资源</p><p>C、基础设施</p><p>D、人口</p><p>我的答案：ABC</p><p>2【判断题】国土安全是立国之基，是传统安全备受关注的首要方面。</p><p>我的答案：√</p><p>3.2</p><p>1【多选题】国土是国家主权赖以存在的物质空间，包括（）三部分，上至高空，下及底土。</p><p>A、领陆</p><p>B、领水（包括内水和领海）</p><p>C、领空</p><p>D、外太空</p><p>我的答案：ABC</p><p>2【多选题】我国与（）尚未划定陆地边界，领土安全问题尚未完全解决。</p><p>A、俄罗斯</p><p>B、印度</p><p>C、蒙古</p><p>D、不丹</p><p>我的答案：BD</p><p>3【判断题】1992年2月25日全国人大通过的《领海及毗连区法》规定，中华人民共和国领海的宽度从领海基线量起为10海里。</p><p>我的答案：X</p><p>3.3</p><p>1【多选题】长期以来，我坚持与邻为善、以邻为伴，体现（）理念。</p><p>A、亲</p><p>B、诚</p><p>C、惠</p><p>D、容</p><p>我的答案：ABCD</p><p>2【多选题】我国反分裂斗争形势依然错综复杂，比较突出的问题有（）。</p><p>A、疆独</p><p>B、藏独</p><p>C、台独</p><p>D、港独</p><p>我的答案：ABCD</p><p>3【判断题】我国是海陆兼备的国家，陆地边界与16个国家接壤，海上与8个国家相邻。</p><p>我的答案：X</p><p>3.4</p><p>1【多选题】（）是新时期维护国土安全工作提供了新的法律武器。</p><p>A、《反分裂国家法》</p><p>B、《国家安全法》</p><p>C、《反恐怖主义法》</p><p>D、《国防法》</p><p>我的答案：ABCD</p><p>2【判断题】党的十九大作出“坚持陆海统筹，加快建设海洋强国”的部署以来，陆海统筹在体制机制建设、产业、资源、环境和区域协同发展等领域取得重要进展。</p><p>我的答案：√</p><p>4.1</p><p>1【判断题】在传统国家安全观中，军事安全是整个国家安全体系的核心内容，处于首要位置、支柱地位。</p><p>我的答案：√</p><p>2【判断题】1999年3月24日至6月11日，以美国为首的北约军队，未经联合国安理会授权，对南联盟进行了长达78天的空袭。</p><p>我的答案：√</p><p>4.2</p><p>1【单选题】当今世界战争形态加速向信息化战争演变，（）主导成为制胜关键。</p><p>A、非接触性</p><p>B、精确性</p><p>C、体系</p><p>D、信息</p><p>我的答案：D</p><p>2【判断题】《中国的军事战略》白皮书指出：中国发展仍将处于可以大有作为的重要战略机遇期，外部环境总体有利，但仍然面临多元复杂的安全威胁，遇到的外部阻力和挑战逐步增多。</p><p>我的答案：√</p><p>4.3</p><p>1【多选题】适应武器装备更新换代和作战样式发展变化，要牢牢把握（）的原则。</p><p>A、军委管总</p><p>B、战区主战</p><p>C、军种主建</p><p>D、联合训练</p><p>我的答案：ABC</p><p>2【多选题】我国坚持发展（）的第三方对外军事关系，推动建立公平有效的集体安全机制和军事互信机制。</p><p>A、不联合</p><p>B、不结盟</p><p>C、不对抗</p><p>D、不针对</p><p>我的答案：BCD</p><p>3【判断题】进行军事斗争准备，要把基点放在打赢信息化局部战争上，突出海上军事斗争。</p><p>我的答案：√</p><p>5.1</p><p>1【判断题】经济安全的作用主要体现在保障国防工业、军事装备的生产与供给，重要战略经济资源的供给方面。（）</p><p>我的答案：√</p><p>2【判断题】经济实力影响和制约着国家的国防、科技、教育等实力，所以说，经济安全事关国家的国际地位。（）</p><p>我的答案：√</p><p>5.2</p><p>1【多选题】以（）的基本经济制度，是中国特色社会主义制度的重要支柱，也是社会主义市场经济体制的根基。只有保持公有制经济的主体地位，才能保证社会主义方向。</p><p>A、公有制为主体</p><p>B、多种所有制经济共同发展</p><p>C、私有制为主体</p><p>D、公有制为补充</p><p>我的答案：AB</p><p>2【多选题】我国根据本国的国情，采取以（）的分配制度，实质上反映出劳动、管理、资本、技术、土地等各种生产要素，都按贡献参与了收益分配。</p><p>A、按需分配为主体</p><p>B、按劳分配为补充</p><p>C、按劳分配为主体</p><p>D、多种分配方式并存</p><p>我的答案：CD</p><p>3【多选题】流通是社会再生产过程中（）中的一个独立的经济活动。流通环节在经济发展中占有非常重要的地位，哪一个环节出现了问题，经济都无法健康发展。</p><p>A、生产</p><p>B、分配</p><p>C、交换（流通）</p><p>D、消费</p><p>我的答案：ABCD</p><p>4【多选题】经济主权安全是指国家独立自主处理经济事务的安全，主要包括（）。</p><p>A、独立自主处理经济事务的权力有保障</p><p>B、掌握和使用资源的权力</p><p>C、独立自主参与国际经济活动的安全</p><p>D、独立进行经济建设</p><p>我的答案：ABC</p><p>5【多选题】经济发展安全主要包括（）。</p><p>A、经济发展道路安全</p><p>B、经济发展所需人才和物资的安全</p><p>C、经济外部环境安全</p><p>D、经济文化环境安全</p><p>我的答案：AB</p><p>5.3</p><p>1【多选题】新形势下，（）抬头，经济全球化遭遇波折，多边主义和自由贸易体制受到冲击，不稳定不确定因素依然很多，风险挑战加剧，这对我国的经济安全带来了深层挑战。</p><p>A保护主义</p><p>B单边主义</p><p>C保守主义</p><p>D多边主义</p><p>我的答案：AB</p><p>2【多选题】经济安全面临的国际威胁与挑战有（）。</p><p>A金融安全存在风险</p><p>B财政安全存在风险</p><p>C产业安全存在风险</p><p>D粮食安全风险将逐步上升</p><p>E经济发展存在滑坡风险</p><p>我的答案：ABCDE</p><p>3【判断题】全球化背景下，中国经济在国内和国际两个场域下齐头并进，这使得中国经济发展取得了较好的成绩，但是，我国经济面临的国内、国际环境仍很严峻，发展还面临着较大压力。</p><p>我的答案：√</p><p>5.4</p><p>1【多选题】维护经济安全，主要应从维护（）和统筹国内发展与国际合作竞争的关系方面进行。</p><p>A、基本经济制度安全</p><p>B、构建良好的经济秩序</p><p>C、维护经济主权安全</p><p>D、实现经济安全发展</p><p>我的答案：ABCD</p><p>2【多选题】要坚决依法打击（ ）等违法犯罪行为，震慑犯罪分子，提高犯罪成本和难度，降低经济领域的违法犯罪率，确保经济健康有序发展。</p><p>A、降低发展速度</p><p>B、破坏经济秩序</p><p>C、危害企业发展</p><p>D、损害市场诚信</p><p>我的答案：BCD</p><p>3【多选题】维护经济主权安全，主要要做到（）。</p><p>A、坚持新发展理念，促进高质量发展</p><p>B、强化经济主权意识</p><p>C、增强我国综合国力</p><p>D、创新和完善宏观调控</p><p>我的答案：BC</p><p>6.1</p><p>1【单选题】（）国家安全委员会在其2000年发布的国家利益报告中，把国家利益分为“致命利益、极端重要利益、重要利益、次要利益”四个等级。</p><p>A、中国</p><p>B、美国</p><p>C、日本</p><p>D、英国</p><p>我的答案：B</p><p>2【判断题】全球化时代，文化软实力的作用被人们深刻认识，富国强兵的“兵”从以往的军事武力转化为当今的文化实力。</p><p>我的答案：√</p><p>6.2</p><p>1【单选题】早在20世纪70年代末，美国的卡特政府就提出（）的文化战略，苏联和东欧阵营的解体在很大程度上是西方这一文化战略的结果。</p><p>A、石油外交</p><p>B、军事外交</p><p>C、人权外交</p><p>D、结盟外交</p><p>我的答案：C</p><p>2【判断题】文化主权是国家主权在文化领域里的延伸，是国家主权不可分割的重要组成部分。</p><p>我的答案：√</p><p>6.3</p><p>1【判断题】境外资本、文化企业、文化产品和服务大量进入国内，对我国维护文化安全带来很大压力。</p><p>我的答案：√</p><p>2【判断题】境内外各种势力利用互联网散布有害信息、传播错误思想，一些不法分子在网上传播散播低俗信息，网上思想文化争夺日益加剧。</p><p>我的答案：√</p><p>6.4</p><p>1【判断题】提高国家文化软实力， 关系我国在世界文化格局中的定位，关系我国国际地位和国际影响力，关系“两个一百年”奋斗目标和中华民族伟大复兴中国梦的实现。</p><p>我的答案：√</p><p>2【判断题】中华民族优秀的传统文化包括爱国主义、爱好和平、勤劳勇敢、自强不息等，这是中华民族最有利的文化软实力。</p><p>我的答案：√</p><p>7.1</p><p>1【判断题】维护国家安全，离不开社会的和谐稳定和长治久安。改革开放以来，我们党始终高度重视社会安全，始终把维护社会安定作为一项基础性工作。</p><p>我的答案：√</p><p>2【判断题】十九届四中全会报告的第九部分中，将国家安全与社会治理、社会稳定合并在一起阐述，充分说明了社会安全与国家安全的密切相关性。</p><p>我的答案：√</p><p>7.2</p><p>1【多选题】社会安全，是指社会处于一种和谐有序和健康发展的状态，以及持续维护社会安全的能力。一般而言，社会安全的主要内容包括（BCD）等相关内容。</p><p>A、社会治理</p><p>B、社会治安</p><p>C、社会安全事件</p><p>D、社会舆情</p><p>2【多选题】我国社会治安面临着部分地区（ABCD）等“困境”。因此，必须坚定政治立场、持续深入扫黑除恶斗争。</p><p>A、扫黑除恶</p><p>B、涉众型经济犯罪</p><p>C、网络生态空间风险、诈骗案件防治</p><p>D、食品安全、涉税犯罪</p><p>3【多选题】社会安全事件，主要包括（ABC），以及暴力恐怖主义活动和社会群体性事件等重大安全事件，直接对人民群众生命财产安全造成威胁，严重影响我国社会安全。</p><p>A、重大自然灾害</p><p>B、重大事故</p><p>C、重大公共卫生灾害事件</p><p>D、重大舆情</p><p>7.3</p><p>1【多选题】新形势下我国社会安全面临的威胁和挑战增多，特别是各种威胁和挑战联动效应明显。具体包括（ABCD）。</p><p>A、暴力恐怖活动多发，严重影响社会安全</p><p>B、社会治安问题突出，影响公众安全感</p><p>C、社会矛盾积聚，加大社会安全风险</p><p>D、网络公共安全问题凸显，给社会安全带来挑战</p><p>2【多选题】我国仍处于刑事犯罪的高发期，违法犯罪活动日趋（ABD），严重暴力犯罪，案件突出，高新技术犯罪、网络犯罪增多，对传统公共安全工作提出挑战。</p><p>A、暴力化</p><p>B、组织化</p><p>C、年青化</p><p>D、职业化</p><p>3【判断题】改革开放以来，我国社会加速转型，积聚了诸如生产责任事故高发、劳资冲突不断、社会道德失范、信任危机加深之类的社会风险因素，出现了不同社会发展阶段，风险因素交织叠加的特征。</p><p>我的答案：√</p><p>4【判断题】全力打击暴力恐怖犯罪、坚决依法惩处暴恐分子，为人民群众建立安定有序、繁荣和谐的社会环境，既是民心所昐，也是众望所归。</p><p>我的答案：√</p><p>7.4</p><p>1【多选题】维护社会安全，稳步提升人民群众的安全感和满意度，要切实做到（ABCD）。</p><p>A、切实维护公共安全</p><p>B、深入开展反恐怖斗争</p><p>C、有效预防和妥善处置群体性事件</p><p>D、切实维护网络社会安全</p><p>2【判断题】</p><p>传统违法犯罪加速向网上发展蔓延，电信诈骗、窃取公民个人信息等新型网络犯罪活动不断滋生。</p><p>我的答案：√</p><p>8.1</p><p>1【单选题】（B）是指科技体系完整有效，国家重点领域核心技术安全可控，国家核心利益和安全不受外部科技优势危害，以及保障持续安全状态的能力。</p><p>A、技术安全</p><p>B、科技安全</p><p>C、科学安全</p><p>D、科研安全</p><p>2【单选题】（C）凭借其科技优势，不会侧重于防范国外科技优势的威胁，更多的是如何通过科技手段威胁敌对国家。</p><p>A、发展中国家</p><p>B、落后国家</p><p>C、发达国家</p><p>D、第三世界国家</p><p>8.2</p><p>1【多选题】科技安全的主要内容包括（ABCD）。</p><p>A、科技人才安全</p><p>B、科技设施设备安全</p><p>C、科技活动安全</p><p>D、国防科技安全</p><p>2【判断题】科技人才是智力资源，是科技安全最重要的保障。</p><p>我的答案：√</p><p>8.3</p><p>1【判断题】在新技术不断出现和交叉融合态势下，如果不抓住机遇，加快突破，不仅我国现有产业转型升级目标无法实现，而且未来我国重点产业命脉更难以掌握在自己手里。</p><p>我的答案：√</p><p>2【判断题】</p><p>虽然我国科技安全的面貌有了极大改善，但是科技创新基础还不牢固，自主创新特别是原始创新能力还不强，关键领域核心技术受制于人的局面没有得到根本改善。</p><p>我的答案：√</p><p>8.4</p><p>1【单选题】（B）明确规定：国家加强自主创新能力建设，加快发展自主可控的战略高新技术和重要领域核心关键技术，加强知识产权的运用、保护和科技保密能力，保障重大技术和工程的安全。</p><p>A、《知识产权法》</p><p>B、《国家安全法》</p><p>C、《宪法》</p><p>D、《网络安全法》</p><p>2【判断题】面对科技安全领域的这些风险挑战，关键是要牢牢坚持创新驱动发展战略，努力推动我国科技实力和产业实力实现全面提升。</p><p>我的答案：√</p><p>9.1</p><p>1【单选题】从（C）的角度来说，他们希望对网络信息的访问、读写等操作受到保护和控制。</p><p>A、安全保密部门</p><p>B、用户</p><p>C、网络运行和管理者</p><p>D、公众</p><p>2【单选题】（A）是指一个国家在建设、运营、维护和使用网络，以及在网络安全的监督管理方面所拥有的自主决定权。</p><p>A、网络空间主权</p><p>B、网络监督权</p><p>C、网络自主权</p><p>D、网络管理权</p><p>9.2</p><p>1【判断题】网络安全包括网络基础设施、网络运行与服务、信息安全等方面，是保障和促进信息社会健康发展的基础。</p><p>我的答案：√</p><p>2【判断题】《网络安全审查办法》首次在我国法律层面明确关键信息基础设施的概念，并对关键信息基础设施安全防护提出专门要求。</p><p>我的答案：X</p><p>9.3</p><p>1【单选题】（B）已经成为继陆地、海洋、天空、外太空之外的第五空间。</p><p>A、河流</p><p>B、网络空间</p><p>C、冰川</p><p>D、地壳</p><p>2【判断题】网络上各种思想文化相互激荡、交锋，优秀传统文化和主流价值观面临冲击。</p><p>我的答案：√</p><p>9.4</p><p>1【判断题】关键核心技术是国之重器，对推动我国经济高质量发展、保障国家安全都具有十分重要的意义。</p><p>我的答案：√</p><p>2【判断题】《网络安全法》由国家互联网信息办公室、国家发改委等12个部门联合发布，2020年6月1日起正式生效。</p><p>我的答案：X</p><p>10.1</p><p>1【单选题】生态安全是指一个国家具有支撑国家生存发展的较为完整不受威胁的（B），以及应对内外重大生态问题的能力。</p><p>A、生存环境</p><p>B、生态系统</p><p>C、生态条件</p><p>D、生态指标</p><p>2【单选题】生态系统作为一个整体，既是人类的生存空间又是人类获取生产生活资源的来源。对国家来说，要获得充分的资源不但取决于国内的生态安全，而且取决于（C）。</p><p>A、自身生态安全</p><p>B、人际生态安全</p><p>C、国际和全球生态安全</p><p>D、社会生态安全</p><p>10.2</p><p>1【判断题】水土流失、地下水严重超采、土壤退化、面源污染加重已成为制约农业可持续发展的突出矛盾。</p><p>我的答案：√</p><p>2【判断题】我国土壤污染南方重于北方，长三角珠、珠三角和东北老工业基地等部分区域土壤污染问题较为突出，西南和中南地区土壤重金属超标范围大。</p><p>我的答案：√</p><p>10.3</p><p>1【单选题】严守水资源“三条红线”的“红线”不包括（D）。</p><p>A、开发利用</p><p>B、用水效率</p><p>C、水功能区限制纳污</p><p>D、运用技术处理废水</p><p>2【判断题】生态修复是一项系统工程，短期内难以见效，应坚持绿色发展，改善生态环境。</p><p>我的答案：√</p><p>11.1</p><p>1【单选题】（C）是指一个国家或地区可以保质保量、及时持续、稳定可靠、经济合理地获取所需的自然资源及资源性产品的状态或能力。</p><p>A、原料安全</p><p>B、源头安全</p><p>C、资源安全</p><p>D、材料安全</p><p>2【单选题】资源安全包括（B）、质量、结构、均衡和经济5个基本要素。</p><p>A、可再生</p><p>B、数量</p><p>C、可持续</p><p>D、质地</p><p>11.2</p><p>1【单选题】现代人们认为最具有战略意义的资源，包括（A）、生物资源、水资源、土地资源、海洋资源等。</p><p>A、矿产资源</p><p>B、生物资源</p><p>C、人才资源</p><p>D、住房资源</p><p>2【单选题】我国（B）所称土地，是指中华人民共和国各行政区域管理范围内的所有土地，按其利用类别分为农用地、建设用地和未用地。</p><p>A、《国家安全法》</p><p>B、《土地管理法》</p><p>C、《宪法》</p><p>D、《环境保护法》</p><p>11.3</p><p>1【单选题】当前，深圳、东莞等珠三角城市的土地开发强度都已超过国际公认的（A）警戒线。</p><p>A、0.3</p><p>B、0.4</p><p>C、0.25</p><p>D、0.35</p><p>2【单选题】中国的缺水类型，不包括（D）。</p><p>A、水资源总量缺乏的资源性缺水</p><p>B、由于特殊地理地质环境及缺乏存水设施导致的工程性缺水</p><p>C、由于排放废水等导致淡水资源污染而短缺的水质性缺水</p><p>D、由于气候灾害引起的干旱缺水</p><p>11.4</p><p>1【单选题】（B）是指人类社会生产和生活中废弃可回收利用的物资。</p><p>A、可利用资源</p><p>B、再生资源</p><p>C、可加工资源</p><p>D、环保资源</p><p>2【判断题】资源开发利用总体水平不高，是我国资源安全面临的突出问题。</p><p>我的答案：√</p><p>12.1</p><p>1【单选题】1945年8月6日和9日，（D）在日本广岛和长崎投放代号为“小男孩”和“胖子”两枚原子弹，迫使日本于8月15日宣布投降。</p><p>A、俄国</p><p>B、英国</p><p>C、法国</p><p>D、美国</p><p>2【单选题】1964年10月16日，中国第一颗原子弹在（C）的一声巨响，宣告着中国有力地打破了超级大国的核垄断和核讹诈,提高了中国的国际地位。</p><p>A、西昌</p><p>B、酒泉</p><p>C、罗布泊</p><p>D、太原</p><p>12.2</p><p>1【单选题】（B）又称为原子能反应堆或反应堆，是能维持可控自持链式核裂变反应，以实现核能利用的装置。</p><p>A、堆芯</p><p>B、核反应堆</p><p>C、核材料</p><p>D、原子能</p><p>2【单选题】核电厂除了正常供电系统外，还设置有应急电源，由数台（C）发电机组和相应的供电系统组成。</p><p>A、煤炭</p><p>B、风能</p><p>C、柴油</p><p>D、潮汐</p><p>12.3</p><p>1【单选题】核事故是指大型核设施发生的意外事件，核事故共分为（D）级。</p><p>A、4</p><p>B、5</p><p>C、6</p><p>D、7</p><p>2【单选题】2011年，日本福岛核电站泄漏属于核事故中的（D）级。</p><p>A、4</p><p>B、5</p><p>C、6</p><p>D、7</p><p>12.4</p><p>1【单选题】（A）于2014年12月19日发布了《核安全文化政策声明》，在全行业推进核安全文化建设。</p><p>A、中国</p><p>B、英国</p><p>C、法国</p><p>D、美国</p><p>2【判断题】核事故应急管理是指在事故应急时采取的核事故对策、应急准备、应急措施及事故后恢复行动的管理活动。</p><p>我的答案：√</p><p>13.1</p><p>1【单选题】（C）即指一个主权国家管辖范围之外的境外利益，也就是国家的边界和海关之外的各类利益。</p><p>A、边界利益</p><p>B、海关利益</p><p>C、海外利益</p><p>D、外国利益</p><p>2【判断题】海外利益安全是指国家依法采取必要措施，保护海外中国公民、组织和机构的安全和正当权益，保护国家的海外利益不受威胁和侵害。</p><p>我的答案：√</p><p>13.2</p><p>1【单选题】国际大环境对我国维护海外利益安全总体有利，但部分地区（D）对我国企业和公民在当地发展生存带来严峻挑战。</p><p>A、基础设施落后</p><p>B、住房匮乏</p><p>C、粮食短缺</p><p>D、局势动荡</p><p>2【单选题】（B）是考察东道国政府稳定性和质量的重要依据，是我国海外利益扩展重要的安全因素。</p><p>A、经济风险</p><p>B、政治风险</p><p>C、文化风险</p><p>D、网络风险</p><p>13.3</p><p>1【单选题】“非战争军事行动”原本是一个特定称谓，在1993年（B）陆军《作战纲要》中首次提出。</p><p>A、俄国</p><p>B、美国</p><p>C、英国</p><p>D、法国</p><p>2【判断题】面对日益复杂的国际和地区安全风险，任何国家都难以凭一己之力维护海外利益安全，同舟共济、携手合作是必然选择。</p><p>我的答案：√</p><p>14.1</p><p>1【单选题】中国载人航天工程于（C）正式启动，中国已成为能够独立开展载人航天活动、掌握空间出舱活动技术的世界航天大国。</p><p>A、1990年</p><p>B、1991年</p><p>C、1992年</p><p>D、1993年</p><p>2【判断题】外层空间、国际海底区域和极地等新型领域，可通过国际申请，专属于世界上任何一个国家。</p><p>我的答案：X</p><p>15.1</p><p>1【判断题】公民和组织应当自觉履行《宪法》《国家安全法》规定的维护国家安全的法律义务。</p><p>我的答案：√</p><p>2【判断题】维护国家安全的根基在人民、力量在人民、血脉在人民。只有依靠人民，才能切实有力地维护国家安全。</p><p>我的答案：√</p>]]></content>
    
    
    <categories>
      
      <category>线上课答案</category>
      
      <category>超星学习通</category>
      
      <category>国家安全教育</category>
      
    </categories>
    
    
    <tags>
      
      <tag>线上课答案库</tag>
      
      <tag>超星学习通</tag>
      
      <tag>国家安全教育</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DS 作业-6-Ch5-22 网安物联网-20231024</title>
    <link href="/2023/10/30/DS_homework_6_Ch5_22wanganwulian_20231024/"/>
    <url>/2023/10/30/DS_homework_6_Ch5_22wanganwulian_20231024/</url>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>这次老师直接用PDF发题，我直接搬过来了，加密环境下图片加载不出来直接点开看</p><p><img src="/img/DS-homework/DS-homework-6-Ch5-22wanganwulian-20231024.jpg" srcset="/img/loading.gif" lazyload alt="题目"></p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>题解懒得打字了，直接把图搬过来，除了最后两个题，前面题目不能保证准确率，因为是我自己做的</p><h2 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h2><p><img src="/img/DS-homework/DS-homework-6-Ch5-22wanganwulian-20231024-1.jpg" srcset="/img/loading.gif" lazyload alt="第一题"></p><h2 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h2><p><img src="/img/DS-homework/DS-homework-6-Ch5-22wanganwulian-20231024-2.jpg" srcset="/img/loading.gif" lazyload alt="第二题"></p><h2 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h2><p><img src="/img/DS-homework/DS-homework-6-Ch5-22wanganwulian-20231024-3.jpg" srcset="/img/loading.gif" lazyload alt="第三题"></p><h2 id="第四题"><a href="#第四题" class="headerlink" title="第四题"></a>第四题</h2><p><img src="/img/DS-homework/DS-homework-6-Ch5-22wanganwulian-20231024-4.jpg" srcset="/img/loading.gif" lazyload alt="第四题"></p><h2 id="第五题"><a href="#第五题" class="headerlink" title="第五题"></a>第五题</h2><p><img src="/img/DS-homework/DS-homework-6-Ch5-22wanganwulian-20231024-5.jpg" srcset="/img/loading.gif" lazyload alt="第五题"></p><h2 id="第六题"><a href="#第六题" class="headerlink" title="第六题"></a>第六题</h2><p>这是一个使用递归的方法来计算二叉树中叶子节点的个数的算法。在这个算法中，我们首先检查当前节点是否为空，如果为空则返回0。然后，我们检查当前节点是否是叶子节点，如果是，则返回1。否则，我们递归地对左子树和右子树进行相同的操作，并将结果相加。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BiTree</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">BiNode</span> &#123;<br>        DataType data;<br>        BiNode* left;<br>        BiNode* right;<br>    &#125;;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">BiTreeLeaf</span><span class="hljs-params">(BiNode&lt;DataType&gt;* bt)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (bt == <span class="hljs-literal">nullptr</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (bt-&gt;left == <span class="hljs-literal">nullptr</span> &amp;&amp; bt-&gt;right == <span class="hljs-literal">nullptr</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">BiTreeLeaf</span>(bt-&gt;left) + <span class="hljs-built_in">BiTreeLeaf</span>(bt-&gt;right);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>这个函数<code>BiTreeLeaf</code>接收一个指向<code>BiNode</code>的指针作为参数，并返回一个整数，表示二叉树中叶子节点的个数。请注意，这个函数是<code>BiTree</code>类的成员函数，所以你需要在一个<code>BiTree</code>对象上调用它。例如，如果你有一个<code>BiTree&lt;int&gt;</code>对象<code>tree</code>，你可以这样调用它：<code>tree.BiTreeLeaf(root)</code>，其中<code>root</code>是指向树根的指针。这个函数会递归地遍历整棵树，并计算叶子节点的个数。当它访问到一个叶子节点时，它就会返回1；否则，它就会返回其左右子树中叶子节点的个数之和。这就是递归的魅力！</p><h2 id="第七题"><a href="#第七题" class="headerlink" title="第七题"></a>第七题</h2><p>这是一个使用递归的方法来计算二叉树的深度的算法。在这个算法中，我们首先检查当前节点是否为空，如果为空则返回0。然后，我们递归地对左子树和右子树进行相同的操作，并返回结果中的最大值加1。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BiTree</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">BiNode</span> &#123;<br>        DataType data;<br>        BiNode* left;<br>        BiNode* right;<br>    &#125;;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">BiDepth</span><span class="hljs-params">(BiNode&lt;DataType&gt;* bt)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (bt == <span class="hljs-literal">nullptr</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> leftDepth = <span class="hljs-built_in">BiDepth</span>(bt-&gt;left);<br>        <span class="hljs-type">int</span> rightDepth = <span class="hljs-built_in">BiDepth</span>(bt-&gt;right);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(leftDepth, rightDepth) + <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>这个函数<code>BiDepth</code>接收一个指向<code>BiNode</code>的指针作为参数，并返回一个整数，表示二叉树的深度。请注意，这个函数是<code>BiTree</code>类的成员函数，所以你需要在一个<code>BiTree</code>对象上调用它。例如，如果你有一个<code>BiTree&lt;int&gt;</code>对象<code>tree</code>，你可以这样调用它：<code>tree.BiDepth(root)</code>，其中<code>root</code>是指向树根的指针。这个函数会递归地遍历整棵树，并计算树的深度。当它访问到一个节点时，它就会返回其左右子树中深度较大的一个加上1。这就是递归的魅力！</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>数据结构作业</category>
      
      <category>课后作业</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构作业</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用电脑浏览获得更佳体验</title>
    <link href="/2023/10/29/upupup/"/>
    <url>/2023/10/29/upupup/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>“科来杯”第十届山东省大学生网络安全技能大赛心得体会</title>
    <link href="/2023/10/29/CTF_think_kelai_10/"/>
    <url>/2023/10/29/CTF_think_kelai_10/</url>
    
    <content type="html"><![CDATA[<h1 id="START"><a href="#START" class="headerlink" title="START"></a>START</h1><p>咕咕咕……好吧，比赛在10月22日就打完了，打完比赛就想写来着，但是一直咕到现在才有时间写这个心得体会</p><p>太忙了啊啊啊啊啊~！！！</p><p>收获还是很多的</p><p><font color='red'>嘿嘿嘿被两位师哥带飞，满满的安全感</font></p><p>10月21号下午跟两个师哥坐高铁，从曲阜到章丘，没走过远门的我还以为那是地铁，高铁来的声音很响我，轰隆隆的。</p><p>高铁很快，不到三个小时我们就到章丘站了，下高铁之后有山东警察学院的志愿者带我们进学校，坐他们的志愿者大巴车去学校里面，大巴车嗡嗡的响</p><p>做网络安全的，也有不少女生，但是也就几个，车上都在讨论学术知识，第一次到这种贤士云集的地方。</p><p>到学校门口，我随手拍了几张照片</p><p><img src="/img/%E7%A7%91%E6%9D%A5%E6%9D%AF10/%E5%B1%B1%E4%B8%9C%E8%AD%A6%E5%AF%9F%E5%AD%A6%E9%99%A2.jpg" srcset="/img/loading.gif" lazyload alt="山东警察学院大门"></p><p>非常好看！</p><p>到了里面，学校已经为大赛准备的很好，我们先去报到处报道，领了参赛的东西</p><p><strong>一个参赛服，一个参赛选手证，一个鼠标垫，一个无线鼠标，还有一本参赛手册，两张餐券。</strong></p><p>然后进赛场调试设备，工作人员让我看看IP就行，当时我脑子就乱了，IP？什么IP，怎么看来着？急中生智想到了上周计网实验课刚学的ipconfig，好险，要不然就丢人了，好尴尬，当时工作人员就看着我。</p><p><img src="/img/%E7%A7%91%E6%9D%A5%E6%9D%AF10/ipconfig.jpg" srcset="/img/loading.gif" lazyload alt="ipconfig"></p><p>然后等报道完我们三个坐大巴车去酒店准备吃饭了</p><p>酒店的饭，其实也还行，给餐券随便吃，也不算多豪华也还行倒是，(毕竟组委会包吃住，乐)</p><p>吃完饭我们就去卧室准备睡觉了</p><p>那边酒店在山脚下，信号贼差，发个消息发半天，当晚我们下载了网络安全法，数据安全法，密码法，国家安全法，个人信息保护法，反间谍法等条文，我在车上听到了别的师傅说一个<strong>随波逐流工具</strong>，我下载了发现非常好用，一把嗦。点赞这个工具</p><p>然后就准备睡觉了，第二天要早起</p><p>等第二天起来之后吃完饭就坐车走了，去了先去签到处放下书包，手机不能进场。领取了标签我就进场了</p><p>考试时间从上午九点到下午四点，中途不间断，午饭在现场吃</p><br/><p>再说一下赛题吧，web题全场0解，一开始我看到签到题就蒙圈了，不过幸好，好在做出来了，不至于一个题也不会给队伍拖后腿</p><p>然后过了半天，才做出简单编码，二进制八进制</p><p>还有一个题是变异凯撒，那个题也应该会做的，但是当时只顾着用工具了，脑子没反应过来那是变异凯撒，不然早就知道了其实，这题不该失分，然后我应该去爱你这个题也不该失分，吃了没做过频谱图的题的亏，如果我当时做过频谱图的题就不至于不会做了，这几个题都是大部分人都会做的</p><p>到了比赛后期就没什么新解出的，一直是老题在上升趋势，（不会是py吧（雾</p><hr><p>最后四点比赛结束，三等奖，差点二等奖了唉，唉三等奖，唉CTF，唉科来杯。</p><p>然后遇到了王老师和李老师，两位带队老师，臧老师有事不能带了</p><p><img src="/img/%E7%A7%91%E6%9D%A5%E6%9D%AF10/xiaohan.jpg" srcset="/img/loading.gif" lazyload alt="个人三等"></p><p><img src="/img/%E7%A7%91%E6%9D%A5%E6%9D%AF10/no3.jpg" srcset="/img/loading.gif" lazyload alt="团体三等奖"></p><p>最后颁奖典礼宣布</p><p>第十一届科来杯在<strong>曲阜师范大学主办</strong>，下一届我们就是主力军了，加油！</p><p><img src="/img/%E7%A7%91%E6%9D%A5%E6%9D%AF10/QFNU.jpg" srcset="/img/loading.gif" lazyload alt="交接仪式"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>还是得练！</p><p>认识了日照校区的师傅（爷</p><p>明年真是线下丹砂了</p><p>练练练练，卷起来</p><h1 id="END"><a href="#END" class="headerlink" title="END"></a>END</h1>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>比赛心得</category>
      
      <category>省赛</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>科来杯</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>科来杯第十届山东省大学生网络安全技能大赛wp</title>
    <link href="/2023/10/23/CTF_writeup_kelai_10/"/>
    <url>/2023/10/23/CTF_writeup_kelai_10/</url>
    
    <content type="html"><![CDATA[<blockquote><p>原文始发于微信公众号（山警网络空间安全实验室）：<a href="http://mp.weixin.qq.com/s?__biz=MjM5Njc1OTYyNA==&mid=2450786565&idx=1&sn=ecd301d5f308bc7e4f5901f6187beb8e&chksm=b104f8228673713458801f4e84e0726a382df97bb09be1ae1750073b40483d9c79812ae35a38&scene=126&sessionid=1698029627&key=47ecebb9f9a1a9ab37c23e2ab716e98f757cd43b66b9ad462906ba0d95aa0c311338df2b6a7be5217c18b6f8e0ecc3fe0b3593d1d83e569f93e61662305bc67a41fa74f80d8ba959eb1beacdb48156642618c50bfeecdf568ee4e32fd7bf89f0aeafe201cfc09580e84c5ed97ece0d93b923605a9b90ec6157a83efc7ab9b32a&ascene=15&uin=NTY2NTA4NjQ=&devicetype=Windows+10+x64&version=63060012&lang=zh_CN&session_us=gh_544c8c38eeaf&countrycode=AL&exportkey=n_ChQIAhIQTgqEnpI5i9/UgoicLHi+DBLuAQIE97dBBAEAAAAAAAn6Da/hwEkAAAAOpnltbLcz9gKNyK89dVj0n9PVNOKQBdN8rFDq8A9WHKDE7wDDJw1sWdUYSzYiQ48kYwjfuTQa3OR8YYoUe0NrX35xA+mChNNxZFcZC51KYRhk/SiovCpzuXNc0DbIZCC3PaiSPNEY1FpsLPksd9Q/AAPZATi0k7TjwBb5HTVpyn4qJxyoNe2ehnJ+U/n/kLQVFEklAE8UOxh1EVUNMUECRQItPitOSLpXdVq6fq+l5ucDwa0M9Sfvx2MDNscY6GTwoY+0HK6Lbc5UobrfYhWM0HjKfGP9Eec=&acctmode=0&pass_ticket=tg1T215QyFg8xQQl+CQeEL+QWFNoq2hjb6qpAGBy38ocTI5ZUM9OXfIibItwtoRN&wx_header=0&fontgear=2">科来杯第十届山东省大学生网络安全技能大赛wp</a></p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>赛制还是一如既往的奇葩，由于每人的方向不同，在赛后结合团队赛道和爱好者赛道社团成员的wp，共同完成了本文。</p><p>@挽歌 @sp4c1ous @Charshark @Mu.Chen</p><p>Mu.Chen内心os：</p><p>(理论题真的真的真的真的好重要啊呜呜呜呜</p><ul><li><p>前言</p></li><li><p>Misc</p><ul><li><p>简单编码</p></li><li><p>神秘的base</p></li><li><p>签到</p></li></ul></li><li><p>Stego</p><ul><li>我应该去爱你</li><li>数独</li><li>莫生气</li></ul></li><li><p>取证</p><ul><li>金刚大战哥斯拉</li><li>啊吧啊吧的数据包</li><li>小刘的硬盘</li></ul></li><li><p>Web</p><ul><li>uns</li></ul></li><li><p>Crypto</p><ul><li>小试牛刀</li><li>easyrsa</li></ul></li><li><p>re</p><ul><li>人生模拟</li></ul></li></ul><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="简单编码"><a href="#简单编码" class="headerlink" title="简单编码"></a>简单编码</h3><p>二进制和八进制</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><br>flag=<span class="hljs-string">&#x27;&#x27;</span><br>a = [<span class="hljs-string">&#x27;1010010&#x27;</span>,<span class="hljs-string">&#x27;110001&#x27;</span>,<span class="hljs-string">&#x27;1101011&#x27;</span>,<span class="hljs-string">&#x27;0172&#x27;</span>,<span class="hljs-string">&#x27;1010010&#x27;</span>,<span class="hljs-string">&#x27;1000101&#x27;</span>,<span class="hljs-string">&#x27;061&#x27;</span>,<span class="hljs-string">&#x27;0132&#x27;</span>,<span class="hljs-string">&#x27;0127&#x27;</span>,<span class="hljs-string">&#x27;1101100&#x27;</span>,<span class="hljs-string">&#x27;0144&#x27;</span>,<span class="hljs-string">&#x27;1001000&#x27;</span>,<span class="hljs-string">&#x27;1010010&#x27;</span>,<span class="hljs-string">&#x27;1010100&#x27;</span>,<span class="hljs-string">&#x27;0116&#x27;</span>,<span class="hljs-string">&#x27;0105&#x27;</span>,<span class="hljs-string">&#x27;0124&#x27;</span>,<span class="hljs-string">&#x27;110000&#x27;</span>,<span class="hljs-string">&#x27;110100&#x27;</span>,<span class="hljs-string">&#x27;0172&#x27;</span>,<span class="hljs-string">&#x27;1010001&#x27;</span>,<span class="hljs-string">&#x27;110000&#x27;</span>,<span class="hljs-string">&#x27;0144&#x27;</span>,<span class="hljs-string">&#x27;1001110&#x27;</span>,<span class="hljs-string">&#x27;1001101&#x27;</span>,<span class="hljs-string">&#x27;110001&#x27;</span>,<span class="hljs-string">&#x27;1010010&#x27;</span>,<span class="hljs-string">&#x27;0110&#x27;</span>,<span class="hljs-string">&#x27;1010100&#x27;</span>,<span class="hljs-string">&#x27;0154&#x27;</span>,<span class="hljs-string">&#x27;1110000&#x27;</span>,<span class="hljs-string">&#x27;1011000&#x27;</span>,<span class="hljs-string">&#x27;0122&#x27;</span>,<span class="hljs-string">&#x27;060&#x27;</span>,<span class="hljs-string">&#x27;110001&#x27;</span>,<span class="hljs-string">&#x27;0141&#x27;</span>,<span class="hljs-string">&#x27;1010110&#x27;</span>,<span class="hljs-string">&#x27;0105&#x27;</span>,<span class="hljs-string">&#x27;0144&#x27;</span>,<span class="hljs-string">&#x27;1001110&#x27;</span>,<span class="hljs-string">&#x27;0127&#x27;</span>,<span class="hljs-string">&#x27;1101100&#x27;</span>,<span class="hljs-string">&#x27;1010110&#x27;</span>,<span class="hljs-string">&#x27;1001000&#x27;</span>,<span class="hljs-string">&#x27;1010111&#x27;</span>,<span class="hljs-string">&#x27;0124&#x27;</span>,<span class="hljs-string">&#x27;0112&#x27;</span>,<span class="hljs-string">&#x27;0125&#x27;</span>,<span class="hljs-string">&#x27;1010010&#x27;</span>,<span class="hljs-string">&#x27;110000&#x27;</span>,<span class="hljs-string">&#x27;110101&#x27;</span>,<span class="hljs-string">&#x27;0113&#x27;</span>,<span class="hljs-string">&#x27;1010110&#x27;</span>,<span class="hljs-string">&#x27;1000101&#x27;</span>,<span class="hljs-string">&#x27;0144&#x27;</span>,<span class="hljs-string">&#x27;0116&#x27;</span>,<span class="hljs-string">&#x27;0127&#x27;</span>,<span class="hljs-string">&#x27;0154&#x27;</span>,<span class="hljs-string">&#x27;0122&#x27;</span>,<span class="hljs-string">&#x27;1000010&#x27;</span>,<span class="hljs-string">&#x27;1010100&#x27;</span>,<span class="hljs-string">&#x27;0154&#x27;</span>,<span class="hljs-string">&#x27;1001010&#x27;</span>,<span class="hljs-string">&#x27;1010111&#x27;</span>,<span class="hljs-string">&#x27;0122&#x27;</span>,<span class="hljs-string">&#x27;110000&#x27;</span>,<span class="hljs-string">&#x27;061&#x27;</span>,<span class="hljs-string">&#x27;0141&#x27;</span>,<span class="hljs-string">&#x27;1010110&#x27;</span>,<span class="hljs-string">&#x27;1000101&#x27;</span>,<span class="hljs-string">&#x27;110001&#x27;</span>,<span class="hljs-string">&#x27;0117&#x27;</span>,<span class="hljs-string">&#x27;0125&#x27;</span>,<span class="hljs-string">&#x27;1101100&#x27;</span>,<span class="hljs-string">&#x27;0122&#x27;</span>,<span class="hljs-string">&#x27;0110&#x27;</span>,<span class="hljs-string">&#x27;0123&#x27;</span>,<span class="hljs-string">&#x27;0124&#x27;</span>,<span class="hljs-string">&#x27;0116&#x27;</span>,<span class="hljs-string">&#x27;0105&#x27;</span>,<span class="hljs-string">&#x27;0124&#x27;</span>,<span class="hljs-string">&#x27;0125&#x27;</span>,<span class="hljs-string">&#x27;065&#x27;</span>,<span class="hljs-string">&#x27;1010011&#x27;</span>,<span class="hljs-string">&#x27;0126&#x27;</span>,<span class="hljs-string">&#x27;060&#x27;</span>,<span class="hljs-string">&#x27;0144&#x27;</span>,<span class="hljs-string">&#x27;0132&#x27;</span>,<span class="hljs-string">&#x27;1010111&#x27;</span>,<span class="hljs-string">&#x27;1101011&#x27;</span>,<span class="hljs-string">&#x27;1010010&#x27;</span>,<span class="hljs-string">&#x27;1001000&#x27;</span>,<span class="hljs-string">&#x27;1010100&#x27;</span>,<span class="hljs-string">&#x27;0154&#x27;</span>,<span class="hljs-string">&#x27;0112&#x27;</span>,<span class="hljs-string">&#x27;0125&#x27;</span>,<span class="hljs-string">&#x27;1010011&#x27;</span>,<span class="hljs-string">&#x27;1000101&#x27;</span>,<span class="hljs-string">&#x27;0126&#x27;</span>,<span class="hljs-string">&#x27;0141&#x27;</span>,<span class="hljs-string">&#x27;1010110&#x27;</span>,<span class="hljs-string">&#x27;1000110&#x27;</span>,<span class="hljs-string">&#x27;1000110&#x27;</span>,<span class="hljs-string">&#x27;1001110&#x27;</span>,<span class="hljs-string">&#x27;0127&#x27;</span>,<span class="hljs-string">&#x27;1101100&#x27;</span>,<span class="hljs-string">&#x27;1001110&#x27;</span>,<span class="hljs-string">&#x27;0110&#x27;</span>,<span class="hljs-string">&#x27;0127&#x27;</span>,<span class="hljs-string">&#x27;0124&#x27;</span>,<span class="hljs-string">&#x27;1001110&#x27;</span>,<span class="hljs-string">&#x27;1000101&#x27;</span>,<span class="hljs-string">&#x27;0122&#x27;</span>,<span class="hljs-string">&#x27;110000&#x27;</span>,<span class="hljs-string">&#x27;110101&#x27;</span>,<span class="hljs-string">&#x27;1001011&#x27;</span>,<span class="hljs-string">&#x27;1010110&#x27;</span>,<span class="hljs-string">&#x27;0105&#x27;</span>,<span class="hljs-string">&#x27;0144&#x27;</span>,<span class="hljs-string">&#x27;0102&#x27;</span>,<span class="hljs-string">&#x27;1010111&#x27;</span>,<span class="hljs-string">&#x27;1101100&#x27;</span>,<span class="hljs-string">&#x27;1010010&#x27;</span>,<span class="hljs-string">&#x27;0124&#x27;</span>,<span class="hljs-string">&#x27;1010100&#x27;</span>,<span class="hljs-string">&#x27;0126&#x27;</span>,<span class="hljs-string">&#x27;0160&#x27;</span>,<span class="hljs-string">&#x27;0125&#x27;</span>,<span class="hljs-string">&#x27;0122&#x27;</span>,<span class="hljs-string">&#x27;110000&#x27;</span>,<span class="hljs-string">&#x27;110000&#x27;</span>,<span class="hljs-string">&#x27;060&#x27;</span>,<span class="hljs-string">&#x27;0126&#x27;</span>,<span class="hljs-string">&#x27;1000101&#x27;</span>,<span class="hljs-string">&#x27;061&#x27;</span>,<span class="hljs-string">&#x27;1001110&#x27;</span>,<span class="hljs-string">&#x27;0125&#x27;</span>,<span class="hljs-string">&#x27;0154&#x27;</span>,<span class="hljs-string">&#x27;1010010&#x27;</span>,<span class="hljs-string">&#x27;0110&#x27;</span>,<span class="hljs-string">&#x27;0124&#x27;</span>,<span class="hljs-string">&#x27;0126&#x27;</span>,<span class="hljs-string">&#x27;1110000&#x27;</span>,<span class="hljs-string">&#x27;0125&#x27;</span>,<span class="hljs-string">&#x27;0123&#x27;</span>,<span class="hljs-string">&#x27;060&#x27;</span>,<span class="hljs-string">&#x27;110001&#x27;</span>,<span class="hljs-string">&#x27;1100001&#x27;</span>,<span class="hljs-string">&#x27;1010111&#x27;</span>,<span class="hljs-string">&#x27;1101011&#x27;</span>,<span class="hljs-string">&#x27;0144&#x27;</span>,<span class="hljs-string">&#x27;1001110&#x27;</span>,<span class="hljs-string">&#x27;1010111&#x27;</span>,<span class="hljs-string">&#x27;0154&#x27;</span>,<span class="hljs-string">&#x27;0122&#x27;</span>,<span class="hljs-string">&#x27;0116&#x27;</span>,<span class="hljs-string">&#x27;1010100&#x27;</span>,<span class="hljs-string">&#x27;1010110&#x27;</span>,<span class="hljs-string">&#x27;0112&#x27;</span>,<span class="hljs-string">&#x27;0131&#x27;</span>,<span class="hljs-string">&#x27;1010100&#x27;</span>,<span class="hljs-string">&#x27;0126&#x27;</span>,<span class="hljs-string">&#x27;0105&#x27;</span>,<span class="hljs-string">&#x27;071&#x27;</span>,<span class="hljs-string">&#x27;1010000&#x27;</span>,<span class="hljs-string">&#x27;0124&#x27;</span>,<span class="hljs-string">&#x27;110000&#x27;</span>,<span class="hljs-string">&#x27;111001&#x27;</span>,<span class="hljs-string">&#x27;0120&#x27;</span>,<span class="hljs-string">&#x27;1010100&#x27;</span>,<span class="hljs-string">&#x27;110000&#x27;</span>,<span class="hljs-string">&#x27;075&#x27;</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(a)):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(a[i]))<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(a[i])==<span class="hljs-number">4</span> <span class="hljs-keyword">or</span> <span class="hljs-built_in">len</span>(a[i])==<span class="hljs-number">3</span>:<br>        flag+=<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(a[i], <span class="hljs-number">8</span>))<br>    <span class="hljs-keyword">else</span>:<br>        flag += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(a[i],<span class="hljs-number">2</span>))<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><h3 id="神秘的base"><a href="#神秘的base" class="headerlink" title="神秘的base"></a>神秘的base</h3><p>换表base爆破</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">import</span> itertools<br><br><br>string1 = <span class="hljs-string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span>  <span class="hljs-comment">#标准base64编码表</span><br><br>strings = <span class="hljs-string">&quot;ivOY50&quot;</span><br>all_colors = (itertools.permutations(strings, <span class="hljs-number">6</span>))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> all_colors:<br>    tmp = <span class="hljs-string">&#x27;&#x27;</span>.join(i)<br>    string2 = <span class="hljs-string">f&#x27;xbQTZqjN8ERuwlzVfUIrPkeHd<span class="hljs-subst">&#123;tmp&#125;</span>LK697o2pSsGD+ncgm3CBh/Xy1MF4JAWta&#x27;</span>  <span class="hljs-comment"># 换表后base64编码表</span><br>    encode = <span class="hljs-string">&#x27;EvAzEwo6E9RO4qSAHq42E9KvEv5zHDt34GtdHGJaHD7NHG42bwd=&#x27;</span><br>    decode = base64.b64decode(encode.translate(<span class="hljs-built_in">str</span>.maketrans(string1, string2)))<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;flag&#123;&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>(decode) <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;&#125;&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>(decode):<br>        <span class="hljs-built_in">print</span>(decode)<br></code></pre></td></tr></table></figure><h3 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">let r = <span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+=&quot;</span>;<br>let cars = [<span class="hljs-number">25</span>, <span class="hljs-number">38</span>, <span class="hljs-number">49</span>, <span class="hljs-number">33</span>, <span class="hljs-number">25</span>, <span class="hljs-number">55</span>, <span class="hljs-number">45</span>, <span class="hljs-number">37</span>, <span class="hljs-number">12</span>, <span class="hljs-number">22</span>, <span class="hljs-number">24</span>, <span class="hljs-number">50</span>, <span class="hljs-number">12</span>, <span class="hljs-number">51</span>, <span class="hljs-number">24</span>, <span class="hljs-number">51</span>, <span class="hljs-number">13</span>, <span class="hljs-number">3</span>, <span class="hljs-number">16</span>, <span class="hljs-number">52</span>, <span class="hljs-number">13</span>, <span class="hljs-number">38</span>, <span class="hljs-number">25</span>, <span class="hljs-number">38</span>, <span class="hljs-number">13</span>, <span class="hljs-number">54</span>, <span class="hljs-number">4</span>, <span class="hljs-number">52</span>, <span class="hljs-number">13</span>, <span class="hljs-number">19</span>, <span class="hljs-number">20</span>, <span class="hljs-number">55</span>, <span class="hljs-number">12</span>, <span class="hljs-number">38</span>, <span class="hljs-number">8</span>, <span class="hljs-number">51</span>, <span class="hljs-number">12</span>, <span class="hljs-number">38</span>, <span class="hljs-number">16</span>, <span class="hljs-number">49</span>, <span class="hljs-number">14</span>, <span class="hljs-number">22</span>, <span class="hljs-number">8</span>, <span class="hljs-number">54</span>, <span class="hljs-number">13</span>, <span class="hljs-number">35</span>, <span class="hljs-number">37</span>, <span class="hljs-number">33</span>, <span class="hljs-number">12</span>, <span class="hljs-number">55</span>, <span class="hljs-number">52</span>, <span class="hljs-number">63</span>];<br>let ff = <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">for</span> (var iii = <span class="hljs-number">0</span>; iii &lt; cars.length; iii++) &#123;<br>ff = ff + r[cars[iii]];<br>&#125;<br>/*this <span class="hljs-keyword">is</span> flag*/<br>console.log(ff)<br></code></pre></td></tr></table></figure><p>直接运行 解码base64即可</p><h2 id="Stego"><a href="#Stego" class="headerlink" title="Stego"></a>Stego</h2><h3 id="我应该去爱你"><a href="#我应该去爱你" class="headerlink" title="我应该去爱你"></a>我应该去爱你</h3><p>频谱图</p><p><img src="/img/%E7%A7%91%E6%9D%A5%E6%9D%AF10/%E6%88%91%E5%BA%94%E8%AF%A5%E5%8E%BB%E7%88%B1%E4%BD%A0.png" srcset="/img/loading.gif" lazyload alt="我应该去爱你"></p><h3 id="数独"><a href="#数独" class="headerlink" title="数独"></a>数独</h3><p>先填数独，得到4132234132141423</p><p>因为是隐写题，考虑有密码的隐写，只有LSB</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">C:UsersAdministratorDesktopmisc脚本收集cloacked-pixel-master&gt;python2 lsb<span class="hljs-selector-class">.py</span> extract C:UsersAdministratorDesktopmisc脚本收集cloacked-pixel-mastershudok<span class="hljs-selector-class">.png-stego</span><span class="hljs-selector-class">.png</span> <span class="hljs-number">1</span><span class="hljs-selector-class">.txt</span> <span class="hljs-number">4132234132141423</span><br></code></pre></td></tr></table></figure><p><img src="/img/%E7%A7%91%E6%9D%A5%E6%9D%AF10/%E6%95%B0%E7%8B%AC.png" srcset="/img/loading.gif" lazyload alt="数独"></p><h3 id="莫生气"><a href="#莫生气" class="headerlink" title="莫生气"></a>莫生气</h3><p><img src="/img/%E7%A7%91%E6%9D%A5%E6%9D%AF10/%E8%8E%AB%E7%94%9F%E6%B0%94.png" srcset="/img/loading.gif" lazyload alt="莫生气"></p><p>提取出png，补上文件头，然后双图盲水印</p><p><img src="/img/%E7%A7%91%E6%9D%A5%E6%9D%AF10/%E8%8E%AB%E7%94%9F%E6%B0%942.png" srcset="/img/loading.gif" lazyload alt="莫生气2"></p><h2 id="取证"><a href="#取证" class="headerlink" title="取证"></a>取证</h2><h3 id="金刚大战哥斯拉"><a href="#金刚大战哥斯拉" class="headerlink" title="金刚大战哥斯拉"></a>金刚大战哥斯拉</h3><p><img src="/img/%E7%A7%91%E6%9D%A5%E6%9D%AF10/%E5%93%A5%E6%96%AF%E6%8B%89.png" srcset="/img/loading.gif" lazyload alt="金刚大战哥斯拉"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">encode</span>(<span class="hljs-params"><span class="hljs-variable">$D</span>,<span class="hljs-variable">$K</span></span>)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$D</span>);<span class="hljs-variable">$i</span>++)&#123;<br>        <span class="hljs-variable">$c</span> = <span class="hljs-variable">$K</span>[<span class="hljs-variable">$i</span>+<span class="hljs-number">1</span>&amp;<span class="hljs-number">15</span>];<br>        <span class="hljs-variable">$D</span>[<span class="hljs-variable">$i</span>] = <span class="hljs-variable">$D</span>[<span class="hljs-variable">$i</span>]^<span class="hljs-variable">$c</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$D</span>;<br>&#125;<br><br><span class="hljs-variable">$pass</span>=<span class="hljs-string">&#x27;DASCTF&#x27;</span>;<br><span class="hljs-variable">$payloadName</span>=<span class="hljs-string">&#x27;payload&#x27;</span>;<br><span class="hljs-variable">$key</span>=<span class="hljs-string">&#x27;9c2ffaf6a14493bf&#x27;</span>;<br><span class="hljs-variable">$data</span> = <span class="hljs-string">&#x27;fLluZmFmNmExNJEhWBG1b1XhCY%2BtGO2uCp6t3zK69FxYTKJQssNT1y5Cf45Hu3u%2Fivq08xw%2FbzMVDb2iVURKKXEgFjxjZzQ6kQjmUHpg8t9m09mKOdTLyE5V%2B%2Bzw83kQjtK%2Bl9yBKvzGCdNluDokRoC4jvtek8KVLXnlU3K366szlCn4XS%2BxolAu%2FzspbXO1wRZkj15en%2BXvDcX%2BrfySQnxMFJKl2bgedSVozzyNwPBUFxcUX3V2E%2FGyFHezDWxnihBUXutJRvu%2FuHjZwHGhu%2BpybShnSwTgYLjybXZRZC3M%2BmD04BA6ancVF5lirsWZ3gsqB3h9rvKzDvtwG3FoCM6ObODAYOcpOLtSO8xuGMciws40NV81hhXQV7ViZG9At06ypufihH4bSJ0xy1aL1T6WCPL6fcRbCaVn%2F7BYmCuoy3LzMlI3CHA0OXbds4Itwg7X0dQnKp7eiJKtV0MjJAMqAN50O9LVDaJnbQg%2Bgz2iJLLoMSCnR3v%2BbLMZAid5ESm8JoIgZk5BNpVZ5xOdquNNWFz%2BpLOR9W%2Fe%2BhjwxCiwdtfdaQj0QiC18L6TbTSMhl2qQWqZrd97KZDOI4gJ6ar1QWIgDk3D%2BO5oRFYMWRthsKfGFB38Hcn%2BqMDyOLrLqBFJXaw0Yv1YQaHyn9ycRJ7DEoWfsdCyOuH5HtW4MNp2Y72ptdqCI4RHgZryK142ucH2BCmN0oxVZr4zcMISfKEwXmyzwrX27r%2BZoYUqTwN%2FJ2NCE1%2FWNgPkChD08LLZKbS0dzIlZ3xFL2h7kbP%2FOHn8ceocxTV3q%2F%2BPjOrpsORuwQOj6pMoYB%2FSD5rUGN0KGeerrZQhUaw2u5%2FiZMj9rnlFiF3gyOtb3mTLt%2FN09poaFr9TidOFisTtU%2FnryDLT2GnIfIveQwKcwliQhVGLvWiEgIweDe3OmDeFYT8U68LU09%2BMrxGD2lYdh4tlvx9h2IttzPAc3yZna5tP%2BiZJJruPGgY40GVc9p%2Fw1%2Bixk%2F68RoLtOscCL%2FERCXz22P8xWmk9utDwSA8dyeCgj3hBQsr24nSbWJFu0%2FOSM5dOK00yD%2F8GE4fyxQ7U0IVVZ1rjdccA44j0Tt7ArMzs4d1a6k3SK2GiKM2X3dqqysh9oJ96r2iJA2R0jHvYwbKTSSLyhDT%2BpZc5Hl%2Fp6e6L5wTKuRZnhKxIDqpzpw%2BwQe6pVq0BuI5FoXQ%2F3mPydT2nkEjcLnLaxBDoVQSUd6Ba92MYcesUpZ13yAAgi%2F79ZKgithRVuwhrTCtNXAp5j6p7%2BBJdzJGV%2Bl2s33UnBjVeKqrAUATX9yY7NIql2E4SOWp4loycxh2nwR3Qe9Zi%2BKBaSmBHVy5liSgUFGOlmsWgM%2FstzXc%2F9SNQyUXALbOxa7s17A%2BDOkgUGLIBM7M6Va0Aa8A2xTnyr0SHwyQpUjE5E1x1t24X4MSADqqMIkQSEHPkgttSbALFUOd32Gko8djwakoi7rmXWAEKojSlDZffyPLwMJQjI%2B5%2FiXFfSasJP1zCbr5nl%2FKFBcomDDFy8gnLMG2zwvLRIrfDquVIhlTgF6Giq4JqWmI9ZSJG8ATh2y%2F9uXExyhdQ33b4O%2B4a9OJv%2F1MWz%2BYQqCLu9DhObYTQQThBtUcxAyF3hOD9B1Q0DWQNPu7UDMuLX57ThBw8CulWsahG7QBGOamGf23KVji%2FaQdKeXYGQohkA1oN%2FSOleQWuIJvSk1KrBDtQRU6AWG6WNqnl33Z%2B0cgBYUcg8noLHMByMkRefpLMqm%2BGH2zrdGpNgEcaCzk5ulYd9pHMdiYDfTp3sFjdsR%2FxplFSP4VfnbWpF7WsiT7WGZoPXtv%2F4gWI60ftEnJ1peYtXUlLDuv2tYt2wmpafCClt1Y0tfB51iBFGhUy7Bw%2FdbjtVxZJHB8FvsEzEGj5BWp45LAGFxpOUsKuUVdioTfyjp01%2F%2FIAsu%2FUG%2FxSpHdfR5TlGRLw0WNef7CnYxLURPTbp0ZF9MglFQGkN58Iq7RR4EFt4s4fP32AmuTUgyz7WNgqv0nswP0mPzMHiZwxBSIZTitjQ5QYbd1BlOX1cAM0TZRE2bOiDQnPjhvEC3jEp9L3ktZ1A%2BVcuXnAhInoy4Dq1%2F0%2FO5KITcyi0NR1ftNMsjzMwUZETqEcCyxr1d23lSNBEFTf4A4FJaCIfcvD0tbHoceynhSdHkRJBiUu8DULyBdcTeFFRq9jA3jwpjrbBmvYfvSBoNqYKbbPq2tErzqOA2fiPYHJkMiAPVsamUIDG4%2FzMD4SqKu6Uoj836CsY%2Fz7znvX5zh6LzB7vPoL8QUGmEd5E0SXk4vKieQkHX4vlQM%2FToQKpQRkdaMrOIs0LQFIp0D4vvEhdwJ7eK%2FmClCgCOPEpU%2F3zJhVfIZfUHgDrkUK4HOfT4piF4STR7SZCleaGDwHUkYRiLWNGrEiiNqwNPJhQ63gStGcBVIYFk%2B3F1neK32xH506xzsqjhFJnDHAbMPC47x6hXmMsm%2BTMBQNfgYyzmDyxERG3o9IuLB%2B3vzTJfaLv9bZ4aNTef%2BMwQDLojDSIiEK%2FDvw%2BuOHt5%2Fwk7cNiXWBhKCjULlR8Daukh7MFlCklEs3srvkifaW4VbF85SckpUhIjOTVTYZ4EgK1VYQ%2BK52O7kKt%2BT2kOkLDDE5JiDXApezQtbnw5yPM8WDh5c1DTaRqLsWxUTPWtVlcbzyge5D4VYWXJ0ICPpVfbeEQXutk0tMKBfY0q20%2Bo8CD6oHnm3wy5ELMeLsmXrspAmhwk2wr8d64CHizraARwvNAAX71VCPIUukAvgtEBblKi9EsFr4Or6s%2Fz1RtnxlaufSdlTCCwWTAe%2FeBK%2FKdehF4gIQ91hCWyrI6jJchH%2F5VA0sXxqVe1sBsZulTMJJJo3VZsFutboAetPCdcmEzqqIYUEuSuJf%2F5tXJm5hujq6EJ6rZbBXqnCeLDVWyhhZvy4kL9jKcF2Hp9ItvRBHP6hI%2FAEzBH%2B89XwS07WJsmlYkiQmHDYavnLbbm8sEAbGwbxCbTUJU7qKgTZff%2BWEBuQ%2BTg4mRab4%2B8SpRklCHU3QCeS1nIHPuJrdyOwMMGQ%2B%2BWEG0hDsiReJbkcG9f9mORbZpLegR5HDbiT0oYJG6GcvKxTNS6voIrE94nva0%2FeQvEgokgbBQQQoejcj1h7oStaWk5OdeWhBJaAgnFmtfGW6lyA0OQ%3D%3D&#x27;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-title function_ invoke__">gzdecode</span>(<span class="hljs-title function_ invoke__">encode</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$data</span>)),<span class="hljs-variable">$key</span>)));<br></code></pre></td></tr></table></figure><p><img src="/img/%E7%A7%91%E6%9D%A5%E6%9D%AF10/%E5%93%A5%E6%96%AF%E6%8B%892.png" srcset="/img/loading.gif" lazyload alt="金刚大战哥斯拉2"></p><h3 id="啊吧啊吧的数据包"><a href="#啊吧啊吧的数据包" class="headerlink" title="啊吧啊吧的数据包"></a>啊吧啊吧的数据包</h3><p><img src="/img/%E7%A7%91%E6%9D%A5%E6%9D%AF10/%E9%98%BF%E5%B7%B4%E5%B7%B4.png" srcset="/img/loading.gif" lazyload alt="阿巴巴"></p><p>命令的时间盲注，写脚本有点麻烦</p><p><img src="/img/%E7%A7%91%E6%9D%A5%E6%9D%AF10/%E9%98%BF%E5%B7%B4%E5%B7%B42.png" srcset="/img/loading.gif" lazyload alt="阿巴巴2"></p><p>不如简单处理一下，然后手撕</p><p><img src="/img/%E7%A7%91%E6%9D%A5%E6%9D%AF10/%E9%98%BF%E5%B7%B4%E5%B7%B43.png" srcset="/img/loading.gif" lazyload alt="阿巴巴3"></p><p>flag{3563bdb1a59309e1a4e93b65152bfbba}</p><h3 id="小刘的硬盘"><a href="#小刘的硬盘" class="headerlink" title="小刘的硬盘"></a>小刘的硬盘</h3><p>取证大师提出个压缩包，备注是名字+生日，掩码爆破</p><p><img src="/img/%E7%A7%91%E6%9D%A5%E6%9D%AF10/%E5%B0%8F%E5%88%98.png" srcset="/img/loading.gif" lazyload alt="小刘"></p><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="uns"><a href="#uns" class="headerlink" title="uns"></a>uns</h3><p>payload：</p><p>第一层</p><p>大写S用十六进制进行绕过，利用数组传参，原生类读文件</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">test</span>=O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;Test&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;check&quot;</span>;S:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;73dnisc&quot;</span>;&#125;&amp;class[/flag]=SplFileObject<br></code></pre></td></tr></table></figure><p>第二层</p><p>反序列化逃逸</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">?a=******************************&amp;b=<span class="hljs-string">&quot;;s:5:&quot;</span>bbbb2<span class="hljs-string">&quot;;O:3:&quot;</span><span class="hljs-built_in">Mid</span><span class="hljs-string">&quot;:1:&#123;s:3:&quot;</span><span class="hljs-built_in">mid</span><span class="hljs-string">&quot;;O:4:&quot;</span>High<span class="hljs-string">&quot;:1:&#123;s:4:&quot;</span>high<span class="hljs-string">&quot;;s:8:&quot;</span>flag.php<span class="hljs-string">&quot;;&#125;&#125;&#125;&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="小试牛刀"><a href="#小试牛刀" class="headerlink" title="小试牛刀"></a>小试牛刀</h3><p>变异凯撒</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">enc</span> = <span class="hljs-string">&quot;ipfm\x82Kj]p~l?\x82ogw\x85mt[K\x8br\x97&quot;</span><br><span class="hljs-variable">k</span> = <span class="hljs-number">3</span><br><span class="hljs-variable">flag</span> = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-variable">for</span> <span class="hljs-variable">i</span> <span class="hljs-variable"><span class="hljs-keyword">in</span></span> <span class="hljs-variable">enc</span>:<br>    <span class="hljs-variable">flag</span> += <span class="hljs-function"><span class="hljs-title">chr</span>(<span class="hljs-title"><span class="hljs-built_in">ord</span></span>(<span class="hljs-variable">i</span>) - <span class="hljs-variable">k</span>)</span><br>    <span class="hljs-variable">k</span> += <span class="hljs-number">1</span><br><span class="hljs-function"><span class="hljs-title">print</span>(<span class="hljs-variable">flag</span>)</span><br></code></pre></td></tr></table></figure><h3 id="easyrsa"><a href="#easyrsa" class="headerlink" title="easyrsa"></a>easyrsa</h3><p>中国剩余定理+coppersmith</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> reduce<br><br>c=<span class="hljs-number">16054555662735670936425135698617301522625617352711974775378018085049483927967003651984471094732778961987450487617897728621852600854484345808663403696158512839904349191158022682563472901550087364635161575687912122526167493016086640630984613666435283288866353681947903590213628040144325577647998437848946344633931992937352271399463078785332327186730871953277243410407484552901470691555490488556712819559438892801124838585002715833795502134862884856111394708824371654105577036165303992624642434847390330091288622115829512503199938437184013818346991753782044986977442761410847328002370819763626424000475687615269970113178</span><br>n=<span class="hljs-number">23074300182218382842779838577755109134388231150042184365611196591882774842971145020868462509225850035185591216330538437377664511529214453059884932721754946462163672971091954096063580346591058058915705177143170741930264725419790244574761160599364476900422586525460981150535489695841064696962982002670256800489965431894477338710190086446895596651842542202922745215496409772520899845435760416159521297579623368414347408762466625792978844177386450506030983725234361868749543549687052221290158286459657697717436496769811720945731143244062649181615815707417418929020541958587698982776940334577355474770096580775243142909913</span><br>Divisor=[<span class="hljs-number">205329935991133380974880368934928321273</span>, <span class="hljs-number">274334866497850560640212079966358515253</span>, <span class="hljs-number">264739757264805981824344553014559883169</span>, <span class="hljs-number">314495359937742744429284762852853819407</span>, <span class="hljs-number">197513216256198287285250395397676269263</span>, <span class="hljs-number">194633662721082002304170457215979299327</span>, <span class="hljs-number">320085578355926571635267449373645191637</span>, <span class="hljs-number">310701821184698431287158634968374845899</span>, <span class="hljs-number">198238777199475748910296932106553167589</span>, <span class="hljs-number">292201037703513010563101692415826269513</span>, <span class="hljs-number">332238634715339876614712914152080415649</span>, <span class="hljs-number">334257376383174624240445796871873866383</span>]<br>Result=[<span class="hljs-number">108968951841202413783269876008807200083</span>, <span class="hljs-number">29053101048844108651205043858001307413</span>, <span class="hljs-number">243503157837867321277650314313173163504</span>, <span class="hljs-number">160933173053376016589301282259056101279</span>, <span class="hljs-number">53063624128824890885455759542416407733</span>, <span class="hljs-number">34980025050049118752362228613379556692</span>, <span class="hljs-number">132553045879744579114934351230906284133</span>, <span class="hljs-number">160998336275894702559853722723725889989</span>, <span class="hljs-number">87211131829406574118795685545402094661</span>, <span class="hljs-number">36445723649693757315689763759472880579</span>, <span class="hljs-number">11133325919940126818459098315213891415</span>, <span class="hljs-number">1404668567372986395904813351317555162</span>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">basic_CRT</span>(<span class="hljs-params">ai,mi</span>):<br>    <span class="hljs-keyword">assert</span> reduce(gmpy2.gcd,mi) == <span class="hljs-number">1</span><br>    <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(ai) == <span class="hljs-built_in">len</span>(mi)<br>    N = reduce(<span class="hljs-keyword">lambda</span> x,y:x * y,mi)<br>    ans = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> a,m <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(ai,mi):<br>        t = N // m<br>        ans += a * t * gmpy2.invert(t,m)<br>    <span class="hljs-keyword">return</span> ans % N,N<br>result = basic_CRT(Result,Divisor)<br><span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure><p>先通过CRT求出p_2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">p_high=<span class="hljs-number">157397749849472741302651922559110947585741898399548366071672772026799823577871183957882637829089669634665699886533302712057712796808672023827078956556745522749244570015492585747076324258912525658578733402979835176037760966294532155059241756382643278063578661030876735794467422919824463419065126688059515994112</span><br><br>PR.&lt;x&gt; = PolynomialRing(Zmod(n))<br>f = x + p_high<br>roots = f.small_roots(X=<span class="hljs-number">2</span>^<span class="hljs-number">128</span>, beta=<span class="hljs-number">0.4</span>)<br><span class="hljs-keyword">if</span> roots:<br> p = p_high+<span class="hljs-built_in">int</span>(roots[<span class="hljs-number">0</span>])<br> <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;n=&quot;</span>+<span class="hljs-built_in">str</span>(n))<br> <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;p=&quot;</span>+<span class="hljs-built_in">str</span>(p))<br> <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;q=&quot;</span>+<span class="hljs-built_in">str</span>(n//p))<br></code></pre></td></tr></table></figure><p>然后再梭个coppersmith</p><p>最后正常解RSA就是了</p><p>完整脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> reduce<br><br>c=<span class="hljs-number">16054555662735670936425135698617301522625617352711974775378018085049483927967003651984471094732778961987450487617897728621852600854484345808663403696158512839904349191158022682563472901550087364635161575687912122526167493016086640630984613666435283288866353681947903590213628040144325577647998437848946344633931992937352271399463078785332327186730871953277243410407484552901470691555490488556712819559438892801124838585002715833795502134862884856111394708824371654105577036165303992624642434847390330091288622115829512503199938437184013818346991753782044986977442761410847328002370819763626424000475687615269970113178</span><br>n=<span class="hljs-number">23074300182218382842779838577755109134388231150042184365611196591882774842971145020868462509225850035185591216330538437377664511529214453059884932721754946462163672971091954096063580346591058058915705177143170741930264725419790244574761160599364476900422586525460981150535489695841064696962982002670256800489965431894477338710190086446895596651842542202922745215496409772520899845435760416159521297579623368414347408762466625792978844177386450506030983725234361868749543549687052221290158286459657697717436496769811720945731143244062649181615815707417418929020541958587698982776940334577355474770096580775243142909913</span><br>Divisor=[<span class="hljs-number">205329935991133380974880368934928321273</span>, <span class="hljs-number">274334866497850560640212079966358515253</span>, <span class="hljs-number">264739757264805981824344553014559883169</span>, <span class="hljs-number">314495359937742744429284762852853819407</span>, <span class="hljs-number">197513216256198287285250395397676269263</span>, <span class="hljs-number">194633662721082002304170457215979299327</span>, <span class="hljs-number">320085578355926571635267449373645191637</span>, <span class="hljs-number">310701821184698431287158634968374845899</span>, <span class="hljs-number">198238777199475748910296932106553167589</span>, <span class="hljs-number">292201037703513010563101692415826269513</span>, <span class="hljs-number">332238634715339876614712914152080415649</span>, <span class="hljs-number">334257376383174624240445796871873866383</span>]<br>Result=[<span class="hljs-number">108968951841202413783269876008807200083</span>, <span class="hljs-number">29053101048844108651205043858001307413</span>, <span class="hljs-number">243503157837867321277650314313173163504</span>, <span class="hljs-number">160933173053376016589301282259056101279</span>, <span class="hljs-number">53063624128824890885455759542416407733</span>, <span class="hljs-number">34980025050049118752362228613379556692</span>, <span class="hljs-number">132553045879744579114934351230906284133</span>, <span class="hljs-number">160998336275894702559853722723725889989</span>, <span class="hljs-number">87211131829406574118795685545402094661</span>, <span class="hljs-number">36445723649693757315689763759472880579</span>, <span class="hljs-number">11133325919940126818459098315213891415</span>, <span class="hljs-number">1404668567372986395904813351317555162</span>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">basic_CRT</span>(<span class="hljs-params">ai,mi</span>):<br>    <span class="hljs-keyword">assert</span> reduce(gmpy2.gcd,mi) == <span class="hljs-number">1</span><br>    <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(ai) == <span class="hljs-built_in">len</span>(mi)<br>    N = reduce(<span class="hljs-keyword">lambda</span> x,y:x * y,mi)<br>    ans = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> a,m <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(ai,mi):<br>        t = N // m<br>        ans += a * t * gmpy2.invert(t,m)<br>    <span class="hljs-keyword">return</span> ans % N,N<br>result = basic_CRT(Result,Divisor)<br><span class="hljs-built_in">print</span>(result)<br><br>p_high=<span class="hljs-number">157397749849472741302651922559110947585741898399548366071672772026799823577871183957882637829089669634665699886533302712057712796808672023827078956556745522749244570015492585747076324258912525658578733402979835176037760966294532155059241756382643278063578661030876735794467422919824463419065126688059515994112</span><br><br>PR.&lt;x&gt; = PolynomialRing(Zmod(n))<br>f = x + p_high<br>roots = f.small_roots(X=<span class="hljs-number">2</span>^<span class="hljs-number">128</span>, beta=<span class="hljs-number">0.4</span>)<br><span class="hljs-keyword">if</span> roots:<br> p = p_high+<span class="hljs-built_in">int</span>(roots[<span class="hljs-number">0</span>])<br> <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;n=&quot;</span>+<span class="hljs-built_in">str</span>(n))<br> <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;p=&quot;</span>+<span class="hljs-built_in">str</span>(p))<br> <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;q=&quot;</span>+<span class="hljs-built_in">str</span>(n//p))<br>n=<span class="hljs-number">23074300182218382842779838577755109134388231150042184365611196591882774842971145020868462509225850035185591216330538437377664511529214453059884932721754946462163672971091954096063580346591058058915705177143170741930264725419790244574761160599364476900422586525460981150535489695841064696962982002670256800489965431894477338710190086446895596651842542202922745215496409772520899845435760416159521297579623368414347408762466625792978844177386450506030983725234361868749543549687052221290158286459657697717436496769811720945731143244062649181615815707417418929020541958587698982776940334577355474770096580775243142909913</span><br>p=<span class="hljs-number">157397749849472741302651922559110947585741898399548366071672772026799823577871183957882637829089669634665699886533302712057712796808672023827078956556745522749244570015492585747076324258912525658578733402979835176037760966294532155059241756382643278063578661030876735794708282102407491782299777228899079176117</span><br>q=<span class="hljs-number">146598666145389487374076474702380241089893944436923994466470555513748278755568038863819188404588602962888679358728628069490879689376996830110571995521814075973422513105805715524894550773219606972944401957227665252279176873209924236114228003156706532596699592716796867748104565680326123749660658940264843181589</span><br><br>e=<span class="hljs-number">65537</span><br>phi=(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>d=invert(e,phi)<br>m=powmod(c,d,n)<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br><span class="hljs-comment">#b&#x27;flag&#123;2233747d3bf06f070048e80300dac75f&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="re"><a href="#re" class="headerlink" title="re"></a>re</h2><h3 id="人生模拟"><a href="#人生模拟" class="headerlink" title="人生模拟"></a>人生模拟</h3><p>找到加密逻辑，跟着跑一边就是了</p><p><img src="/img/%E7%A7%91%E6%9D%A5%E6%9D%AF10/%E4%BA%BA%E7%94%9F%E6%A8%A1%E6%8B%9F.png" srcset="/img/loading.gif" lazyload alt="人生模拟"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python">v15=[<span class="hljs-number">0</span>]*<span class="hljs-number">38</span><br>v15[<span class="hljs-number">0</span>] = <span class="hljs-number">432</span>;<br>v15[<span class="hljs-number">1</span>] = <span class="hljs-number">408</span>;<br>v15[<span class="hljs-number">2</span>] = <span class="hljs-number">429</span>;<br>v15[<span class="hljs-number">3</span>] = <span class="hljs-number">438</span>;<br>v15[<span class="hljs-number">4</span>] = <span class="hljs-number">452</span>;<br>v15[<span class="hljs-number">5</span>] = <span class="hljs-number">246</span>;<br>v15[<span class="hljs-number">6</span>] = <span class="hljs-number">243</span>;<br>v15[<span class="hljs-number">7</span>] = <span class="hljs-number">417</span>;<br>v15[<span class="hljs-number">8</span>] = <span class="hljs-number">423</span>;<br>v15[<span class="hljs-number">9</span>] = <span class="hljs-number">444</span>;<br>v15[<span class="hljs-number">10</span>] = <span class="hljs-number">240</span>;<br>v15[<span class="hljs-number">11</span>] = <span class="hljs-number">231</span>;<br>v15[<span class="hljs-number">12</span>] = <span class="hljs-number">203</span>;<br>v15[<span class="hljs-number">13</span>] = <span class="hljs-number">447</span>;<br>v15[<span class="hljs-number">14</span>] = <span class="hljs-number">207</span>;<br>v15[<span class="hljs-number">15</span>] = <span class="hljs-number">435</span>;<br>v15[<span class="hljs-number">16</span>] = <span class="hljs-number">253</span>;<br>v15[<span class="hljs-number">17</span>] = <span class="hljs-number">224</span>;<br>v15[<span class="hljs-number">18</span>] = <span class="hljs-number">204</span>;<br>v15[<span class="hljs-number">19</span>] = <span class="hljs-number">443</span>;<br>v15[<span class="hljs-number">20</span>] = <span class="hljs-number">419</span>;<br>v15[<span class="hljs-number">21</span>] = <span class="hljs-number">248</span>;<br>v15[<span class="hljs-number">22</span>] = <span class="hljs-number">442</span>;<br>v15[<span class="hljs-number">23</span>] = <span class="hljs-number">241</span>;<br>v15[<span class="hljs-number">24</span>] = <span class="hljs-number">203</span>;<br>v15[<span class="hljs-number">25</span>] = <span class="hljs-number">251</span>;<br>v15[<span class="hljs-number">26</span>] = <span class="hljs-number">445</span>;<br>v15[<span class="hljs-number">27</span>] = <span class="hljs-number">239</span>;<br>v15[<span class="hljs-number">28</span>] = <span class="hljs-number">441</span>;<br>v15[<span class="hljs-number">29</span>] = <span class="hljs-number">254</span>;<br>v15[<span class="hljs-number">30</span>] = <span class="hljs-number">417</span>;<br>v15[<span class="hljs-number">31</span>] = <span class="hljs-number">246</span>;<br>v15[<span class="hljs-number">32</span>] = <span class="hljs-number">203</span>;<br>v15[<span class="hljs-number">33</span>] = <span class="hljs-number">245</span>;<br>v15[<span class="hljs-number">34</span>] = <span class="hljs-number">255</span>;<br>v15[<span class="hljs-number">35</span>] = <span class="hljs-number">445</span>;<br>v15[<span class="hljs-number">36</span>] = <span class="hljs-number">248</span>;<br>v15[<span class="hljs-number">37</span>] = <span class="hljs-number">478</span>;<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(v15)):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>((v15[i]&gt;&gt;<span class="hljs-number">2</span>)^<span class="hljs-number">0xa</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><blockquote><p>原文始发于微信公众号（山警网络空间安全实验室）：<a href="http://mp.weixin.qq.com/s?__biz=MjM5Njc1OTYyNA==&mid=2450786565&idx=1&sn=ecd301d5f308bc7e4f5901f6187beb8e&chksm=b104f8228673713458801f4e84e0726a382df97bb09be1ae1750073b40483d9c79812ae35a38&scene=126&sessionid=1698029627&key=47ecebb9f9a1a9ab37c23e2ab716e98f757cd43b66b9ad462906ba0d95aa0c311338df2b6a7be5217c18b6f8e0ecc3fe0b3593d1d83e569f93e61662305bc67a41fa74f80d8ba959eb1beacdb48156642618c50bfeecdf568ee4e32fd7bf89f0aeafe201cfc09580e84c5ed97ece0d93b923605a9b90ec6157a83efc7ab9b32a&ascene=15&uin=NTY2NTA4NjQ=&devicetype=Windows+10+x64&version=63060012&lang=zh_CN&session_us=gh_544c8c38eeaf&countrycode=AL&exportkey=n_ChQIAhIQTgqEnpI5i9/UgoicLHi+DBLuAQIE97dBBAEAAAAAAAn6Da/hwEkAAAAOpnltbLcz9gKNyK89dVj0n9PVNOKQBdN8rFDq8A9WHKDE7wDDJw1sWdUYSzYiQ48kYwjfuTQa3OR8YYoUe0NrX35xA+mChNNxZFcZC51KYRhk/SiovCpzuXNc0DbIZCC3PaiSPNEY1FpsLPksd9Q/AAPZATi0k7TjwBb5HTVpyn4qJxyoNe2ehnJ+U/n/kLQVFEklAE8UOxh1EVUNMUECRQItPitOSLpXdVq6fq+l5ucDwa0M9Sfvx2MDNscY6GTwoY+0HK6Lbc5UobrfYhWM0HjKfGP9Eec=&acctmode=0&pass_ticket=tg1T215QyFg8xQQl+CQeEL+QWFNoq2hjb6qpAGBy38ocTI5ZUM9OXfIibItwtoRN&wx_header=0&fontgear=2">科来杯第十届山东省大学生网络安全技能大赛wp</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>WP</category>
      
      <category>第十届科来杯</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>科来杯</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>全新版大学进阶英语视听说教程1</title>
    <link href="/2023/10/21/English_answer_see_listen_say1/"/>
    <url>/2023/10/21/English_answer_see_listen_say1/</url>
    
    <content type="html"><![CDATA[<p><img src="https://pic1.zhimg.com/70/v2-70dfe84e14e832a21ea6b39277a9d837_1440w.image?source=172ae18b&biz_tag=Post" srcset="/img/loading.gif" lazyload alt="全新版大学进阶英语1［视听说教程答案］"></p><p><strong>全新版大学进阶英语视听说教程第一册</strong></p><blockquote><p>搬运自微信公众号：必修宝答案</p><p>由于公众号频繁跳转，所以我直接搬过来了，方便查阅</p></blockquote><p> 提示：可以用浏览器页面搜索然后快速定位</p><p><strong>Practice Test One</strong></p><p><strong>Section A</strong></p><p>DC AD ABC</p><p><strong>Section B</strong></p><p>DBCA ACCD</p><p><strong>Section C</strong></p><p>BCA ADD CBDA</p><p><strong>Practice Test TWO</strong></p><p><strong>Section A</strong></p><p>BD DC CCA</p><p><strong>Section B</strong></p><p>IXCB ACBA</p><p><strong>Section C</strong></p><p>ACB CDD CBCD</p><p><strong>Unit</strong> <strong>1</strong></p><p><strong>Warm Up</strong></p><p><strong>Answer the questions</strong></p><p>\1. China.</p><p>\2. <em>A</em> Man.</p><p>\3. Answers will vary.</p><p><strong>Lesson A» Listening</strong></p><p><strong>A.</strong> <strong>Listening for gist</strong></p><p>They are talking about the identity of each person in the photos.</p><p>They might be friends or classmates.</p><p><strong>B.</strong> <strong>Listening for details</strong></p><p><strong>Match the countries in the box with the flags on the map.</strong> h. the U.S.</p><p>a. Argentina</p><p>b. Brazil</p><p>g. the U.K.</p><p>d. Iran</p><p>f. Malaysia</p><p>c. China</p><p>e. Japan</p><p><strong>Write the country and the person’s name on each photo.</strong></p><p>\1. (1) the U.S. (2) I Eva (3) Ashley</p><p>\2. (1) Iran (2) Maheen</p><p>\3. (I) the U.K. (2) Michael</p><p>\4. (1) Brazil (2) Sofia</p><p>\5. (I) Japan (2) Hiroshi</p><p><strong>Lesson B» Listening 1</strong></p><p><strong>A・ New words and expressions</strong></p><p>\1. Mandarin</p><p>\2. centimeter</p><p>\3. inch</p><p>\4. foot</p><p>\5. billion</p><p>\6. cell phone</p><p>\7. typical</p><p>\8. similar</p><p>\9. different</p><p>1(). male</p><p><strong>C.</strong> <strong>Listening comprehension 1</strong></p><p><strong>Exercise 1: Listening for gist</strong></p><p>\1. He is talking about the typical person on Earth.</p><p>\2. D</p><p><strong>Exercise 2: Listening for details</strong></p><p><strong>The answer to the first question has been given.</strong></p><p>\2. 195</p><p>\3. 7.000</p><p>\4. 9,000.000</p><p>\5. 900,000,000</p><p><strong>Fill in the blanks with the information you get from the recording about the typical person.</strong></p><p>\1. 28</p><p>\2. 174</p><p>\3. 5</p><p>\4. 8</p><p>\5. city</p><p>\6. cellphone</p><p>\7. Mandarin</p><p><strong>Lesson B» Listening 2</strong></p><p><strong>A.</strong> <strong>Listening for gist</strong></p><p>\1. He is asking a woman some questions.</p><p>\2. She is a student from Korea.</p><p><strong>B.</strong> <strong>Listening for details</strong></p><p><strong>Census Form</strong></p><p>15 42 3</p><p><strong>Give the detailed information about the woman.</strong></p><p>\1. Lisa Kim</p><p>\2. female</p><p>\3. 23</p><p>\4. single</p><p>\5. student</p><p>\6. Korea</p><p><strong>Listening Skills</strong></p><p><strong>Exercise</strong></p><p>92381</p><p>2608</p><p>1540</p><p>75</p><p>156</p><p>900</p><p>84.200</p><p>1735</p><p><strong>Video » Before You Watch</strong></p><p><strong>About the video</strong></p><p><strong>Complete these sentences using the words in blue.</strong></p><p>\1. diverse</p><p>\2. culture</p><p>\3. immigrants</p><p><strong>Answer the questions.</strong></p><p>\1. Queens is in New York, the U.S.</p><p>\2. It is special because it is one of the most diverse places in the world.</p><p><strong>Video » While You Watch</strong></p><p><strong>A.</strong> <strong>Watch the video</strong></p><p>\1. 50</p><p>\2. 100</p><p>\3. 15()</p><p>\4. U.S.</p><p><strong>B.</strong> <strong>Watch the video again</strong></p><p>\1. Indian</p><p>\2. (I) Korean (2) German. Irish, and English</p><p>\3. Puerto Rican</p><p><strong>C.</strong> <strong>Watch again</strong></p><p>TTFFF</p><p><strong>Unit Test*</strong></p><p><strong>Part I Vocabulary and Important Language</strong></p><p><strong>Section A</strong></p><p>\1. married</p><p>\2. culture</p><p>\3. diversity</p><p>\4. identity</p><p>\5. single</p><p>\6. randomly</p><p>\7. majority</p><p>\8. resident</p><p>\9. global</p><p>\10. community</p><p><strong>Section B</strong></p><p>54312</p><p><strong>Part II Listening Comprehension</strong></p><p><strong>Section A</strong></p><p>B A</p><p><strong>Section B</strong></p><p>BCCD</p><p><strong>Section C</strong></p><p>CADA</p><p><strong>CET-Oriented Study*</strong></p><p><strong>Listening practice</strong></p><p>BCAB</p><p><strong>The Big Picture 1</strong></p><p><strong>Think about the photo</strong></p><p>参考:</p><p>heart sunglasses</p><p>cat ears</p><p>fans</p><p>bracelets</p><p>painted faces</p><p>glasses</p><p>watches</p><p><strong>Caption competition</strong></p><p>参考：</p><p>Finally, we’re champions!</p><p>I can’t believe it.</p><p>I’m so happy.</p><p>I should have worn the cat cars instead of this cap.</p><p><strong>Review 1 Exercise A</strong></p><p>\1. billion</p><p>\2. married</p><p>\3. go</p><p>\4. do</p><p>\5. hard</p><p><strong>Exercise C</strong></p><p>\1. Japan</p><p>\2. Argentina</p><p>\3. Russia</p><p><strong>Exercise D</strong></p><p>\1. Brazil</p><p>\2. city</p><p>\3. crowded</p><p>\4. do</p><p>\5. play</p><p><strong>Review 2</strong></p><p><strong>Exercise A</strong></p><p>\1. weekends—weekdays</p><p>\2. go out stay home</p><p>\3. go to bed—get up</p><p>\4. suits you—looks weird</p><p>\5. warm cool</p><p><strong>Exercise B</strong></p><p>\1. stayed awake</p><p>\2. an early bird</p><p>\3. handbag</p><p>\4. boots</p><p>\5. casually</p><p><strong>Unit</strong> <strong>2</strong></p><p><strong>Warm Up</strong></p><p><strong>Answer the questions</strong></p><p>\1. Soccer&#x2F;Football.</p><p>\2. Yes&#x2F;No.</p><p>\3. See Language Note for a list of popular sports</p><p><strong>Lesson A» Listening</strong></p><p><strong>A.</strong> <strong>Listening for gist</strong></p><p>They are talking about the most popular sports in their countries.</p><p><strong>B.</strong> <strong>Listening for details</strong></p><p><strong>Write them in the table.</strong></p><p>\1. basketball, golf, soccer, tennis</p><p>\2. taekwondo, yoga</p><p>\3. bowling, running, skateboarding, skiing, surfing, swimming</p><p><strong>Write them in the table.</strong></p><p>\1. golf</p><p>\2. skiing, skateboarding</p><p>\3. baseball</p><p>\4. taekwondo</p><p>\5. soccer</p><p>\6. swimming, surfing</p><p><strong>Lesson B» Listening 1</strong></p><p><strong>A. New words and expressions</strong></p><p>\1. kilometer</p><p>\2. amazing</p><p>\3. fun</p><p>\4. must</p><p>\5. race</p><p>\6. Celsius</p><p>\7. Vegas Strip</p><p>\8. rock and roll</p><p>\9. marathon</p><p>\10. band</p><p>\11. costume</p><p>\12. Kayak</p><p><strong>C:Listening comprehension 1</strong></p><p>\1. They arc talking about amazing races,</p><p>\2. They think the amazing races have both good points and bad points.</p><p><strong>C:Listening comprehension 2</strong></p><p>\3. November</p><p>\4. Las Vegas</p><p>\5. It’s a race and a party. Bands play music and runners dress in costumes.</p><p>\6. It’s crowded and cold.</p><p>\7. February</p><p>\8. Patagonia</p><p>\9. It has amazing scenery, and is an exciting race</p><p>\10. It*s long and tiring.</p><p><strong>Lesson B» Listening 2</strong></p><p><strong>A.</strong> <strong>Listening for gist</strong></p><p>B</p><p><strong>B.</strong> <strong>Listening for details</strong></p><p>Listen again and choose the correct answers.</p><p>I. badly</p><p>\2. Mark</p><p>\3. fun</p><p>Listen to the recording again and then write down the answers to the following questions.</p><p>\1. No. not really</p><p>\2. No. he thinks it boring</p><p>\3. Channel 5.</p><p><strong>Listening Skills</strong></p><p><strong>Exercise</strong></p><p>yes</p><p>no </p><p>yes </p><p>no  </p><p>yes </p><p>no  </p><p>no  </p><p>no </p><p><strong>Video » Before You Watch</strong></p><p><strong>About the video</strong></p><p>\1. trainers</p><p>\2. prepare</p><p>\3. win</p><p>\4. prize</p><p><strong>Video » While You Watch</strong></p><p><strong>A. Watch the video</strong></p><p>\1. B</p><p><strong>B. Watch the video again</strong></p><p>\1. 20</p><p>\2. 25</p><p>\3. (1). white(2).yellow</p><p>\4. Namjin’ s</p><p>\5. (1) whip(2).fifth</p><p><strong>C.</strong> <strong>Watch again</strong></p><p>\1. It is famous tor its horse race.</p><p>\2. Outside Ulaanbaaiar, the capital of Mongolia.</p><p>\3. A great horse trainer.</p><p>\4. Almost 5() kilometers an hour.</p><p><strong>Unit Test*</strong></p><p><strong>Part I Vocabulary and Important Language</strong></p><p><strong>Section A</strong></p><p>\1. steep</p><p>\2. traditional</p><p>\3. start</p><p>\4. channel</p><p>\5. gymnastics</p><p>\6. famous</p><p>\7. festival</p><p>\8. capital</p><p>\9. prize</p><p>\10. terribly</p><p><strong>Section B</strong></p><p>34125</p><p><strong>Part II Listening Comprehension</strong></p><p><strong>Section A</strong></p><p>C B</p><p><strong>Section B</strong></p><p>DDAB</p><p><strong>Section C</strong></p><p>ADCD</p><p><strong>listening practice</strong></p><p><strong>C B D</strong> <strong>c</strong></p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>英语答案</category>
      
      <category>视听说答案</category>
      
    </categories>
    
    
    <tags>
      
      <tag>英语</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>新标准大学英语（第二版）综合教程 第一册 Unit3-Unit4 U校园</title>
    <link href="/2023/10/20/English_answer_u_school_unit3_unit4/"/>
    <url>/2023/10/20/English_answer_u_school_unit3_unit4/</url>
    
    <content type="html"><![CDATA[<blockquote><p>搬运自微信公众号：必修宝答案</p><p>由于公众号频繁跳转，所以我直接搬过来了，方便查阅</p></blockquote><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/nu5tyQWftroo6HfUshCict32ibUibSKRpqxUNl1fhVIRqaWZaRyn8Wnoz76bhyj4AzOWZ13KDtYSzYbp4krMJP5Hg/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1&tp=wxpic" srcset="/img/loading.gif" lazyload alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/nu5tyQWftroo6HfUshCict32ibUibSKRpqxqcjPcHb8wthXs202y9k6pJ0TdwK6Ofq6VRGUql16rZufR7URQxpvFw/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1&tp=wxpic" srcset="/img/loading.gif" lazyload alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/YGgMmXKsXeibCyrDDU52YZuUJ80nVy8iaYtnB2RwJaTTTQvNF1xOPxQ7Jc2tjSibOuia84O9RtrXzOCFhDlZFTBf4Q/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1&tp=wxpic" srcset="/img/loading.gif" lazyload alt="图片"></p><blockquote><blockquote><p><strong>Unit 3</strong></p></blockquote></blockquote><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/nu5tyQWftroo6HfUshCict32ibUibSKRpqxvraILjPEtqFuuVYyKE4CmiaL3oF4xsJNRy0s95GWg2kJb8ibMu2via1nQ/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1&tp=wxpic" srcset="/img/loading.gif" lazyload alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/nu5tyQWftroo6HfUshCict32ibUibSKRpqx3MDJjSS4tlJT5fRDRPNzLJYCDF3Sbno4xKnibJIPclnszhmczwDsNGw/640?wx_fmt=jpeg&tp=wxpic&wxfrom=5&wx_lazy=1&wx_co=1" srcset="/img/loading.gif" lazyload alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/nu5tyQWftroo6HfUshCict32ibUibSKRpqx7Ga5Ll9q8FBnnGKOCsqITiahGAiardBmA4AeICZ3qmNJyJYYb5616sTQ/640?wx_fmt=jpeg&tp=wxpic&wxfrom=5&wx_lazy=1&wx_co=1" srcset="/img/loading.gif" lazyload alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/nu5tyQWftroo6HfUshCict32ibUibSKRpqxxQJfjtDrdvIwIkQ5Ld5UAaaO0xuk95QPic8wcsERCcj4dJQ65icFa2xw/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1&tp=wxpic" srcset="/img/loading.gif" lazyload alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/nu5tyQWftroo6HfUshCict32ibUibSKRpqxT8ia8lZrBsNKicm6ww9dmw5nWcFD1gDndiauf3J806ptTxoiaFps07IgDg/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1&tp=wxpic" srcset="/img/loading.gif" lazyload alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/nu5tyQWftroo6HfUshCict32ibUibSKRpqxJ5A0hV4EVIdicXHxWia4ZJTjOakedeLtzbZOHtSJ9hXr6ziaza84KQaZg/640?wx_fmt=jpeg&tp=wxpic&wxfrom=5&wx_lazy=1&wx_co=1" srcset="/img/loading.gif" lazyload alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/nu5tyQWftroo6HfUshCict32ibUibSKRpqxC6ZzEQl2DaA1PhicdHvNp1P0u3GSeTjjViaz8l1Dl53sufBH2gzXLVpw/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1&tp=wxpic" srcset="/img/loading.gif" lazyload alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/nu5tyQWftroo6HfUshCict32ibUibSKRpqxd059c7JYic6Fux4y99T5tYxostfFuuNIibPQFLrS2lPIWIVW6n5gw79g/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1&tp=wxpic" srcset="/img/loading.gif" lazyload alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/nu5tyQWftroo6HfUshCict32ibUibSKRpqx9N8wSUOEyiaibibgCaeXAKTuyfC2MLQCecVNRsqpU8iaOatB1WKvP0XHNA/640?wx_fmt=jpeg&tp=wxpic&wxfrom=5&wx_lazy=1&wx_co=1" srcset="/img/loading.gif" lazyload alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/nu5tyQWftroo6HfUshCict32ibUibSKRpqxTwKGLgfiaxam2QZP8sHP9nCQgibIM3hAG5zuyFn8IWfhsETYXwo9aqtg/640?wx_fmt=jpeg&tp=wxpic&wxfrom=5&wx_lazy=1&wx_co=1" srcset="/img/loading.gif" lazyload alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/nu5tyQWftroo6HfUshCict32ibUibSKRpqxev1YcJicu3aV44oicG8VialhVyttWluDzzGZzt9CI8pvFDROLBzdpDqxQ/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1&tp=wxpic" srcset="/img/loading.gif" lazyload alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/nu5tyQWftroo6HfUshCict32ibUibSKRpqxWiclVjJQVYxRh4MXGd29CbUXzthl7icX7wWjJpaicjZqXnnf1ykXJquJQ/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1&tp=wxpic" srcset="/img/loading.gif" lazyload alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/nu5tyQWftroo6HfUshCict32ibUibSKRpqxibl0XWib87zKMJyC3ibsEiahfoF0cpaWPiatHtR51V1RXxs3Pd2nw0zthbA/640?wx_fmt=jpeg&tp=wxpic&wxfrom=5&wx_lazy=1&wx_co=1" srcset="/img/loading.gif" lazyload alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/nu5tyQWftroo6HfUshCict32ibUibSKRpqxOVnhibsoCF0xp9cvkgVEZyfjrHXuDhJkecZ2twJjztc2V8xYh0SQia2Q/640?wx_fmt=jpeg&tp=wxpic&wxfrom=5&wx_lazy=1&wx_co=1" srcset="/img/loading.gif" lazyload alt="图片"></p><blockquote><blockquote><p><strong>unit 4</strong></p></blockquote></blockquote><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/nu5tyQWftroo6HfUshCict32ibUibSKRpqxJAqfYicMwd5VPdic4o5x96TiaLzXHN496FnYw4LNJp12ydrvwftB3RdiaQ/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1&tp=wxpic" srcset="/img/loading.gif" lazyload alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/nu5tyQWftroo6HfUshCict32ibUibSKRpqxtWCOouSbA6XxGyloBApeyXCaicZTadQibibicWFEqZq9fudJC5cYxBxfmQ/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1&tp=wxpic" srcset="/img/loading.gif" lazyload alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/nu5tyQWftroo6HfUshCict32ibUibSKRpqx0peqWyUxzCic4dJtG7b6g52TJ9HApBrA5Mt44BYB6UzfiaxCZmpN55Kg/640?wx_fmt=jpeg&tp=wxpic&wxfrom=5&wx_lazy=1&wx_co=1" srcset="/img/loading.gif" lazyload alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/nu5tyQWftroo6HfUshCict32ibUibSKRpqxbVoHAh7f33gk9c6gKatomLhQ8XxUIxz4ib2BtzwpVGicrUqjzTjvYxuA/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1&tp=wxpic" srcset="/img/loading.gif" lazyload alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/nu5tyQWftroo6HfUshCict32ibUibSKRpqxDhf4ROWfMg3pCAhZNz7mN5CSY0WmpMcWib4nF8DO29fwicIHzag3Yv6w/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1&tp=wxpic" srcset="/img/loading.gif" lazyload alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/nu5tyQWftroo6HfUshCict32ibUibSKRpqxmVckQ6HoZFvic58ewfhEM8coxEn7VicmQI6YtQCia0AdMNibbfXXIR3jLQ/640?wx_fmt=jpeg&tp=wxpic&wxfrom=5&wx_lazy=1&wx_co=1" srcset="/img/loading.gif" lazyload alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/nu5tyQWftroo6HfUshCict32ibUibSKRpqxDNaph1QKVZ7oPFRicoZghoIQcntvAlEj3AlaLemAibV105icApbg9BDlw/640?wx_fmt=jpeg&tp=wxpic&wxfrom=5&wx_lazy=1&wx_co=1" srcset="/img/loading.gif" lazyload alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/nu5tyQWftroo6HfUshCict32ibUibSKRpqxLCBicJwdVSzFttTJhChRDIndeyd6sF0v4msH80gU3rQ9iaAaicZHIkqPg/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1&tp=wxpic" srcset="/img/loading.gif" lazyload alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/nu5tyQWftroo6HfUshCict32ibUibSKRpqxDib4ak5PHFHOfYArZIkYGBpawH1AaUCb1bD7xPYiboTEFN48SpfoSKHA/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1&tp=wxpic" srcset="/img/loading.gif" lazyload alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/nu5tyQWftroo6HfUshCict32ibUibSKRpqxeImTYnKe6ATdkcnwUDWMKCgOBH76rHHdmo9wKYZfGbLuTkzJk6S4hQ/640?wx_fmt=jpeg&tp=wxpic&wxfrom=5&wx_lazy=1&wx_co=1" srcset="/img/loading.gif" lazyload alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/nu5tyQWftroo6HfUshCict32ibUibSKRpqxAyibCmpnmoxRKuyOUsulNaQsHVFSqmsasajQPBOFCr5ldSyOc4qXEWQ/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1&tp=wxpic" srcset="/img/loading.gif" lazyload alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/QFR1hXsarqFvL8eWwicvr82Aon5hkojbaiakQqa921aROBuarXQFwfIFYMnFvNk3T5KkGHg3okYpIu5qVpGtxw3A/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1&tp=wxpic" srcset="/img/loading.gif" lazyload alt="图片"></p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>英语答案</category>
      
      <category>u校园答案</category>
      
    </categories>
    
    
    <tags>
      
      <tag>英语</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>新标准大学英语（第二版）综合教程 第一册 Unit1 U校园</title>
    <link href="/2023/10/20/English_answer_u_school_unit1/"/>
    <url>/2023/10/20/English_answer_u_school_unit1/</url>
    
    <content type="html"><![CDATA[<blockquote><p>搬运自微信公众号：必修宝答案</p><p>由于公众号频繁跳转，所以我直接搬过来了，方便查阅</p></blockquote><p><img src="/img/English/uschool1/1.png" srcset="/img/loading.gif" lazyload alt="1"><br><img src="/img/English/uschool1/2.png" srcset="/img/loading.gif" lazyload alt="2"><br><img src="/img/English/uschool1/3.png" srcset="/img/loading.gif" lazyload alt="3"><br><img src="/img/English/uschool1/4.png" srcset="/img/loading.gif" lazyload alt="4"><br><img src="/img/English/uschool1/5.png" srcset="/img/loading.gif" lazyload alt="5"><br><img src="/img/English/uschool1/6.png" srcset="/img/loading.gif" lazyload alt="6"><br><img src="/img/English/uschool1/7.png" srcset="/img/loading.gif" lazyload alt="7"><br><img src="/img/English/uschool1/8.png" srcset="/img/loading.gif" lazyload alt="8"><br><img src="/img/English/uschool1/9.png" srcset="/img/loading.gif" lazyload alt="9"><br><img src="/img/English/uschool1/10.png" srcset="/img/loading.gif" lazyload alt="10"><br><img src="/img/English/uschool1/11.png" srcset="/img/loading.gif" lazyload alt="11"><br><img src="/img/English/uschool1/12.png" srcset="/img/loading.gif" lazyload alt="12"><br><img src="/img/English/uschool1/13.png" srcset="/img/loading.gif" lazyload alt="13"><br><img src="/img/English/uschool1/14.png" srcset="/img/loading.gif" lazyload alt="14"><br><img src="/img/English/uschool1/15.png" srcset="/img/loading.gif" lazyload alt="15"><br><img src="/img/English/uschool1/16.png" srcset="/img/loading.gif" lazyload alt="16"><br><img src="/img/English/uschool1/17.png" srcset="/img/loading.gif" lazyload alt="17"></p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>英语答案</category>
      
      <category>u校园答案</category>
      
    </categories>
    
    
    <tags>
      
      <tag>英语</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CTF逆向零碎知识点合集</title>
    <link href="/2023/10/19/CTF_reverse/"/>
    <url>/2023/10/19/CTF_reverse/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Python字节码的学习"><a href="#1-Python字节码的学习" class="headerlink" title="1.Python字节码的学习"></a>1.Python字节码的学习</h1><p>题目来源：**2023年SWPU NSS 秋季招新赛 (校外赛道)**——re——字节码</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>逆向工程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实验四：字符串和多维数组的实现与应用</title>
    <link href="/2023/10/19/DS_test4/"/>
    <url>/2023/10/19/DS_test4/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cyberdownload.anrunlu.net/FicVRmge8QVfGJ00XaVJaDVKtKiH" srcset="/img/loading.gif" lazyload></p><h1 id="BF-KMP算法"><a href="#BF-KMP算法" class="headerlink" title="BF+KMP算法"></a>BF+KMP算法</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MaxSize 1000</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MaxLen 1000</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">SeqString</span><br>&#123;<br><span class="hljs-type">char</span> ch[MaxSize];<br><span class="hljs-type">int</span> len;<br>&#125;;<br><br><span class="hljs-comment">// BF算法</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">BF</span><span class="hljs-params">(<span class="hljs-type">char</span> S[], <span class="hljs-type">char</span> T[])</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>, start = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (S[i] != <span class="hljs-string">&#x27;\0&#x27;</span> &amp;&amp; T[j] != <span class="hljs-string">&#x27;\0&#x27;</span>)<br>&#123;<br><span class="hljs-keyword">if</span> (S[i] == T[j])<br>&#123;<br>i++;<br>j++;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>start++;<br>i = start;<br>j = <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (T[j] == <span class="hljs-string">&#x27;\0&#x27;</span>)<br>&#123;<br><span class="hljs-keyword">return</span> start + <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">GetNext</span><span class="hljs-params">(SeqString t, <span class="hljs-type">int</span> next[])</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> j, k;<br>j = <span class="hljs-number">0</span>;<br>k = <span class="hljs-number">-1</span>;<br>next[<span class="hljs-number">0</span>] = <span class="hljs-number">-1</span>;<br><span class="hljs-keyword">while</span> (j &lt; t.len - <span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-keyword">if</span> (k == <span class="hljs-number">-1</span> || t.ch[j] == t.ch[k])<br>&#123;<br>j++;<br>k++;<br>next[j] = k;<br>&#125;<br><span class="hljs-keyword">else</span><br>k = next[k];<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">KMP</span><span class="hljs-params">(SeqString s, SeqString t)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> next[MaxLen], i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">GetNext</span>(t, next); <span class="hljs-comment">// 求next值</span><br><span class="hljs-keyword">while</span> (i &lt; s.len &amp;&amp; j &lt; t.len) <span class="hljs-comment">// 修改这里</span><br>&#123;<br><span class="hljs-keyword">if</span> (j == <span class="hljs-number">-1</span> || s.ch[i] == t.ch[j])<br>&#123;<br>i++;<br>j++;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>j = next[j];<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (j &gt;= t.len)<br>&#123;<br><span class="hljs-keyword">return</span> (i - t.len); <span class="hljs-comment">// 返回下标</span><br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 不匹配</span><br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;*******BF算法实验*******&quot;</span> &lt;&lt; endl;<br><span class="hljs-type">char</span> a[MaxLen], b[MaxLen];<br>cout &lt;&lt; <span class="hljs-string">&quot;请输入主串&quot;</span> &lt;&lt; endl;<br>cin &gt;&gt; a;<br>cout &lt;&lt; <span class="hljs-string">&quot;输入了&quot;</span> &lt;&lt; a &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;请输入子串&quot;</span> &lt;&lt; endl;<br>cin &gt;&gt; b;<br>cout &lt;&lt; <span class="hljs-string">&quot;输入了&quot;</span> &lt;&lt; b &lt;&lt; endl;<br><span class="hljs-type">int</span> bf = <span class="hljs-built_in">BF</span>(a, b);<br><span class="hljs-keyword">if</span> (bf == <span class="hljs-number">0</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;BF算法结果：未找到&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;BF算法结果：位置是：&quot;</span> &lt;&lt; bf &lt;&lt; endl;<br>&#125;<br>cout &lt;&lt; <span class="hljs-string">&quot;*******BF算法实验*******&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; endl;<br>cout &lt;&lt; endl;<br>cout &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;*******KMP算法实验*******&quot;</span> &lt;&lt; endl;<br>SeqString s, t;<br>cout &lt;&lt; <span class="hljs-string">&quot;请输入主串&quot;</span> &lt;&lt; endl;<br>cin &gt;&gt; s.ch;<br>s.len = <span class="hljs-built_in">strlen</span>(s.ch);<br>cout &lt;&lt; <span class="hljs-string">&quot;输入了&quot;</span> &lt;&lt; s.ch &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;长度是：&quot;</span> &lt;&lt; s.len &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;请输入子串&quot;</span> &lt;&lt; endl;<br>cin &gt;&gt; t.ch;<br>t.len = <span class="hljs-built_in">strlen</span>(t.ch);<br>cout &lt;&lt; <span class="hljs-string">&quot;输入了&quot;</span> &lt;&lt; t.ch &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;长度是：&quot;</span> &lt;&lt; t.len &lt;&lt; endl;<br><span class="hljs-type">int</span> kmp = <span class="hljs-built_in">KMP</span>(s, t);<br><span class="hljs-keyword">if</span> (kmp == <span class="hljs-number">0</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;KMP算法结果：未找到&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;KMP算法结果：位置是：&quot;</span> &lt;&lt; kmp + <span class="hljs-number">1</span> &lt;&lt; endl; <span class="hljs-comment">// 返回的下标从1开始计数，所以需要+1</span><br>&#125;<br>cout &lt;&lt; <span class="hljs-string">&quot;*******KMP算法实验*******&quot;</span> &lt;&lt; endl;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 确保main函数有返回值</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="对称矩阵的压缩"><a href="#对称矩阵的压缩" class="headerlink" title="对称矩阵的压缩"></a>对称矩阵的压缩</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MaxSize 1000</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">yuansu</span><br>&#123;<br><span class="hljs-type">int</span> i;<br><span class="hljs-type">int</span> j;<br><span class="hljs-type">int</span> data;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Matrix</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Matrix</span>();<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PrintMatrix</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getMatrix</span><span class="hljs-params">(yuansu s)</span></span>;<br>~<span class="hljs-built_in">Matrix</span>();<br><br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> ma[MaxSize];<br>&#125;;<br><br>Matrix::<span class="hljs-built_in">Matrix</span>()<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; MaxSize; i++)<br>ma[i] = <span class="hljs-number">0</span>;<br>&#125;<br><br>Matrix::~<span class="hljs-built_in">Matrix</span>()<br>&#123;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Matrix::getMatrix</span><span class="hljs-params">(yuansu s)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (s.i &gt;= s.j) &#123;<br><span class="hljs-type">int</span> k = s.i * (s.i - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span> + s.j - <span class="hljs-number">1</span>;<br>ma[k] = s.data;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Matrix::PrintMatrix</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; MaxSize; i++)<br><span class="hljs-keyword">if</span> (ma[i] != <span class="hljs-number">0</span>)<br>cout &lt;&lt; <span class="hljs-string">&quot;ma[&quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot;] = &quot;</span> &lt;&lt; ma[i] &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Matrix ws;<br>yuansu s;<br>cin &gt;&gt; s.i &gt;&gt; s.j &gt;&gt; s.data;<br>ws.<span class="hljs-built_in">getMatrix</span>(s);<br>ws.<span class="hljs-built_in">PrintMatrix</span>();<br>cin &gt;&gt; s.i &gt;&gt; s.j &gt;&gt; s.data;<br>ws.<span class="hljs-built_in">getMatrix</span>(s);<br>ws.<span class="hljs-built_in">PrintMatrix</span>();<br>cin &gt;&gt; s.i &gt;&gt; s.j &gt;&gt; s.data;<br>ws.<span class="hljs-built_in">getMatrix</span>(s);<br>ws.<span class="hljs-built_in">PrintMatrix</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>数据结构作业</category>
      
      <category>实验</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构作业</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DS作业-5-22网安物联网-20231016</title>
    <link href="/2023/10/18/DS_homework_5_22wanganwulian_20231016/"/>
    <url>/2023/10/18/DS_homework_5_22wanganwulian_20231016/</url>
    
    <content type="html"><![CDATA[<p><strong>作业ch4-1：</strong></p><p>（1）</p><p>从主串S的第一个字符’a’开始，与模式串T的第一个字符’b’进行比较，发现不相等。</p><p>从主串S的第二个字符’b’开始，与模式串T进行比较，发现前三个字符’b’, ‘a’, ‘b’相等，但第四个字符’a’与模式串T的第四个字符’b’不相等。</p><p>从主串S的第三个字符’c’开始，与模式串T进行比较，发现第一个字符不相等。</p><p>以此类推，直到从主串S的第12个字符’b’开始，与模式串T进行比较，发现五个字符’b’, ‘a’, ‘b’, ‘a’, ‘b’全部相等，说明找到了一个匹配。</p><p>所以位置是12</p><p>（2）</p><table><thead><tr><th><strong>j</strong></th><th><strong>0</strong></th><th><strong>1</strong></th><th><strong>2</strong></th><th><strong>3</strong></th><th><strong>4</strong></th><th><strong>5</strong></th><th><strong>6</strong></th><th><strong>7</strong></th><th><strong>8</strong></th><th><strong>9</strong></th><th><strong>10</strong></th><th><strong>11</strong></th><th><strong>12</strong></th><th><strong>13</strong></th><th><strong>14</strong></th><th><strong>15</strong></th><th><strong>16</strong></th><th><strong>17</strong></th><th><strong>18</strong></th><th><strong>19</strong></th><th><strong>20</strong></th></tr></thead><tbody><tr><td>T[j]</td><td>a</td><td>b</td><td>c</td><td>a</td><td>a</td><td>b</td><td>b</td><td>c</td><td>a</td><td>a</td><td>a</td><td>b</td><td>a</td><td>b</td><td>a</td><td>b</td><td>a</td><td>a</td><td>b</td><td>c</td><td>a</td></tr><tr><td>next[j]</td><td>-1</td><td>0</td><td>0</td><td>0</td><td>1</td><td>1</td><td>2</td><td>0</td><td>0</td><td>1</td><td>1</td><td>1</td><td>2</td><td>1</td><td>2</td><td>1</td><td>2</td><td>1</td><td>1</td><td>2</td><td>0</td></tr></tbody></table><p>（3）</p><p>S[0]与T[0]不匹配，移动模式串到S[1]。</p><p>S[1]与T[0]不匹配，移动模式串到S[2]。</p><p>以此类推，一直到S[4]和T[0]不匹配</p><p>移动模式串到S[1]</p><p>以此类推，当遇到不匹配时，回退到T[next[j]]的位置</p><p><strong>作业ch4-2：</strong></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">Status <span class="hljs-constructor">AddSMatrix(TSMatrix &amp;C, TSMatrix A, TSMatrix B)</span> &#123;<br>  <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">C</span>.</span></span>mu = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">A</span>.</span></span>mu;<br>  <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">C</span>.</span></span>nu = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">A</span>.</span></span>nu;<br>  <span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>, m = <span class="hljs-number">0</span>, n = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">while</span> (m &lt; <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">A</span>.</span></span>tu<span class="hljs-operator"> &amp;&amp; </span>n &lt; <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">B</span>.</span></span>tu) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">A</span>.</span></span>data<span class="hljs-literal">[<span class="hljs-identifier">m</span>]</span>.row &lt; <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">B</span>.</span></span>data<span class="hljs-literal">[<span class="hljs-identifier">n</span>]</span>.row) &#123;<br>      <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">C</span>.</span></span>data<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span> = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">A</span>.</span></span>data<span class="hljs-literal">[<span class="hljs-identifier">m</span>]</span>;<br>      i++;<br>      m++;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">A</span>.</span></span>data<span class="hljs-literal">[<span class="hljs-identifier">m</span>]</span>.row &gt; <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">B</span>.</span></span>data<span class="hljs-literal">[<span class="hljs-identifier">n</span>]</span>.row) &#123;<br>      <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">C</span>.</span></span>data<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span> = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">B</span>.</span></span>data<span class="hljs-literal">[<span class="hljs-identifier">n</span>]</span>;<br>      i++;<br>      n++;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">A</span>.</span></span>data<span class="hljs-literal">[<span class="hljs-identifier">m</span>]</span>.row<span class="hljs-operator"> == </span><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">B</span>.</span></span>data<span class="hljs-literal">[<span class="hljs-identifier">n</span>]</span>.row) &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">A</span>.</span></span>data<span class="hljs-literal">[<span class="hljs-identifier">m</span>]</span>.col<span class="hljs-operator"> == </span><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">B</span>.</span></span>data<span class="hljs-literal">[<span class="hljs-identifier">n</span>]</span>.col) &#123;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">C</span>.</span></span>data<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>.item = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">A</span>.</span></span>data<span class="hljs-literal">[<span class="hljs-identifier">m</span>]</span>.item + <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">B</span>.</span></span>data<span class="hljs-literal">[<span class="hljs-identifier">n</span>]</span>.item;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">C</span>.</span></span>data<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>.row = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">A</span>.</span></span>data<span class="hljs-literal">[<span class="hljs-identifier">m</span>]</span>.row;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">C</span>.</span></span>data<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>.col = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">A</span>.</span></span>data<span class="hljs-literal">[<span class="hljs-identifier">m</span>]</span>.col;<br>        m++;<br>        n++;<br>        i++;<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">A</span>.</span></span>data<span class="hljs-literal">[<span class="hljs-identifier">m</span>]</span>.col &gt; <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">B</span>.</span></span>data<span class="hljs-literal">[<span class="hljs-identifier">n</span>]</span>.col) &#123;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">C</span>.</span></span>data<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span> = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">B</span>.</span></span>data<span class="hljs-literal">[<span class="hljs-identifier">n</span>]</span>;<br>        i++;<br>        n++;<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">A</span>.</span></span>data<span class="hljs-literal">[<span class="hljs-identifier">m</span>]</span>.col &lt; <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">B</span>.</span></span>data<span class="hljs-literal">[<span class="hljs-identifier">n</span>]</span>.col) &#123;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">C</span>.</span></span>data<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span> = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">A</span>.</span></span>data<span class="hljs-literal">[<span class="hljs-identifier">m</span>]</span>;<br>        i++;<br>        m++;<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">C</span>.</span></span>tu = i + <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>作业ch4-3：</strong></p><p>k&#x3D;(j-1)*(2n-j+2)&#x2F;2+(i-j)</p><p><strong>作业ch4-4：</strong></p><p>(1) A0000的地址为：100 + 2 × (0 × 3 × 5 × 8 + 0 × 5 × 8 + 0 × 8 + 0) &#x3D; 100</p><p>(2) A1111的地址为：100 + 2 × (1 × 3 × 5 × 8 + 1 × 5 × 8 + 1 × 8 + 1) &#x3D; 284</p><p>(3) A3125的地址为：100 + 2 × (3 × 3 × 5 × 8 + 1 × 5 × 8 + 2 × 8 + 5) &#x3D; 892</p><p>(4) A8247的地址为：100 + 2 × (8 × 3 × 5 × 8 + 2 × 5 × 8 + 4 × 8 +7) &#x3D; 2446</p><p><strong>作业ch4-5：</strong></p><p>在广义表中，GetHead操作返回广义表的第一个元素，而GetTail操作返回除第一个元素外的剩余部分。所以，对于给定的广义表，我们有：</p><p>(1) GetHead((p,h,w)) 的结果是 p。</p><p>(2) GetTail((p,h,w)) 的结果是 (h,w)。</p><p>(3) GetHead(((a,b),(c,d))) 的结果是 (a,b)。</p><p>(4) GetTail(((a,b),(c,d))) 的结果是 ((c,d))。</p><p>(5) GetHead(GetTail(((a,b),(c,d)))) 的结果是 (c,d)。</p><p>(6) GetTail(GetHead(GetTail(((a,b),(c,d))))) 的结果是 ()，因为(c,d)没有尾部。</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>数据结构作业</category>
      
      <category>课后作业</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构作业</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>QFNUCTF（日照）-Reverse-writeup</title>
    <link href="/2023/10/13/CTF_writeup_adworld.xctf_Reverse_QFNU_RE/"/>
    <url>/2023/10/13/CTF_writeup_adworld.xctf_Reverse_QFNU_RE/</url>
    
    <content type="html"><![CDATA[<h1 id="base64"><a href="#base64" class="headerlink" title="base64++"></a>base64++</h1><h2 id="查壳"><a href="#查壳" class="headerlink" title="查壳"></a>查壳</h2><p><img src="https://z1.ax1x.com/2023/10/13/piSzYQ0.png" srcset="/img/loading.gif" lazyload alt="查壳"></p><p>无壳</p><h2 id="反编译"><a href="#反编译" class="headerlink" title="反编译"></a>反编译</h2><p><img src="https://z1.ax1x.com/2023/10/13/piSzGzq.png" srcset="/img/loading.gif" lazyload alt="反编译查看字串"></p><p>查看字串，有两个比较特殊的字符串</p><p>联想到题目是换表base64</p><p><img src="https://z1.ax1x.com/2023/10/13/piSz3Js.png" srcset="/img/loading.gif" lazyload alt="换表"></p><h2 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h2><p>滚去<a href="https://ctf.mzy0.com/CyberChef3/">https://ctf.mzy0.com/CyberChef3/</a>    解密一下</p><p><img src="https://z1.ax1x.com/2023/10/13/piSz8Wn.png" srcset="/img/loading.gif" lazyload alt="解密"></p><h2 id="题后工作"><a href="#题后工作" class="headerlink" title="题后工作"></a>题后工作</h2><p>解密出来后面带着LQB，一开始我以为我做错了，后来我把文件拉进kali运行了一下</p><p>发现这个字符串<code>flag&#123;6JOd5qGl5p2v5Yqg5rK5&#125;LQB</code>是无法通过正常验证的</p><p>而去掉LQB之后<code>flag&#123;6JOd5qGl5p2v5Yqg5rK5&#125;</code>是正常验证的</p><p>所以我去掉之后提交，但还是没有通过</p><p></br></br></br></p><p>无奈之下我放弃这个题了</p></br><p>就在前几天我找到了出题人，问了问情况，发现程序里是有一段添加字符串<code>LQB</code>的代码的，所以输出结果带着LQB没错，我的做题思路也没错</p><p>提交失败的原因是，后台正确的flag中的1和正确答案的l混了，我联系出题人修改了bug</p><p>解题结束！</p><h1 id="XOR（修改）"><a href="#XOR（修改）" class="headerlink" title="XOR（修改）"></a>XOR（修改）</h1><h2 id="查壳-1"><a href="#查壳-1" class="headerlink" title="查壳"></a>查壳</h2><p>等会吧，明天再写，累了</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>WP</category>
      
      <category>RE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>全自动解密脚本Ciphey官方安装文档</title>
    <link href="/2023/10/11/CTF_Ciphey_README/"/>
    <url>/2023/10/11/CTF_Ciphey_README/</url>
    
    <content type="html"><![CDATA[<h1 id="Python-3-7-and-above"><a href="#Python-3-7-and-above" class="headerlink" title="Python 3.7 and above"></a><a href="https://github.com/Ciphey/Ciphey/wiki/Installation#python-37-and-above">Python 3.7 and above</a></h1><p>On Linux run this command:</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">python3 -m pip install ciphey <span class="hljs-comment">--upgrade</span><br></code></pre></td></tr></table></figure><p>This will tell your default Python3 version to install Ciphey and upgrade it if it already exists.</p><p><strong>Ciphey only supports Python3.7 and above. Please upgrade Python or use the Docker image if you have a version below 3.7.</strong></p><p><strong>⚠️ Ciphey doesn’t work on Windows with Python 3.9+, use Python 3.7 or Python 3.8. Other platforms are fine with Python 3.9, Python 3.10 doesn’t work.</strong></p><p><strong>⚠️ Windows Python defaults to install 32-bit. Ciphey only supports 64-bit. Make sure you’re using 64-bit Python.</strong></p><h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a><a href="https://github.com/Ciphey/Ciphey/wiki/Installation#docker">Docker</a></h1><p><a href="https://docs.docker.com/engine/install/">See here for how to install Docker</a></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">docker <span class="hljs-built_in">run</span> -<span class="hljs-keyword">it</span> <span class="hljs-comment">--rm remnux/ciphey</span><br></code></pre></td></tr></table></figure><p>Our Docker image is maintained by <a href="https://remnux.org/">REMnux</a>. They have provided a guide on how to use it here. <a href="https://docs.remnux.org/run-tools-in-containers/remnux-containers#ciphey">https://docs.remnux.org/run-tools-in-containers/remnux-containers#ciphey</a></p><h1 id="Detailed-Explanation-for-Python-Installation"><a href="#Detailed-Explanation-for-Python-Installation" class="headerlink" title="Detailed Explanation for Python Installation"></a><a href="https://github.com/Ciphey/Ciphey/wiki/Installation#detailed-explanation-for-python-installation">Detailed Explanation for Python Installation</a></h1><p>To install Ciphey, you need 2 core things:</p><ol><li>Python3.7 or above</li><li>Pip (on Python 3)</li></ol><p>Check to see if Python is already installed. Run both of these commands:</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">python -<span class="hljs-keyword">c</span> <span class="hljs-string">&quot;import sys; print(sys.version)&quot;</span><br></code></pre></td></tr></table></figure><p>And&#x2F;or</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">pytho<span class="hljs-symbol">n3</span> -c <span class="hljs-string">&quot;import sys; print(sys.version)&quot;</span><br></code></pre></td></tr></table></figure><p>If Python is installed, one of these commands will run and will output the version number. Ciphey only supports numbers higher than 3.7. If you see “2” or anything below “3.7”, we’ll need to install a more up to date version.</p><p>Make sure to note what command words. On your computer, if <code>python -c &quot;import sys; print(sys.version)&quot;</code> returns something higher or equal to “3.7”, then whenever you see <code>python3</code> instead write <code>python</code>.</p><p><strong>⚠️ Windows Warning ⚠️</strong> On Windows? Python defaults to install 32-bit. Ciphey only supports 64-bit. When you download Python from the website on Windows it defaults to 32-bit. Make sure to download 64 bit!</p><p>Go to this website <a href="https://www.python.org/">https://www.python.org/</a> and install Python3. Make sure the version is more than 3.7. By default, unless you explicitly choose a lower version, the version you install will &gt; 3.7.</p><p>Next, we need to install <strong>pip</strong>.</p><p>Pip is already installed by default in Python. We just need to upgrade it.</p><p><strong>On Linux or Mac OS</strong> run the command:</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip3 <span class="hljs-keyword">install</span> -U pip<br></code></pre></td></tr></table></figure><p>Making sure to replace <code>pip3</code> with <code>pip</code> if you had to replace <code>python3</code> with <code>python</code>.</p><p><strong>On Windows</strong></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">python -m pip <span class="hljs-keyword">install</span> -U pip<br></code></pre></td></tr></table></figure><p>If these commands didn’t work, explore the official Pip guide for upgrading <a href="https://pip.pypa.io/en/stable/installing/#upgrading-pip">here</a>.</p><p>If you faced any errors with Pip, there’s a nice troubleshooting guide on installing Pip <a href="https://packaging.python.org/tutorials/installing-packages/">here</a>.</p><h2 id="Installing-Ciphey"><a href="#Installing-Ciphey" class="headerlink" title="Installing Ciphey"></a><a href="https://github.com/Ciphey/Ciphey/wiki/Installation#installing-ciphey">Installing Ciphey</a></h2><p>Run this command:</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">python3 -m pip <span class="hljs-keyword">install</span> -U ciphey<br></code></pre></td></tr></table></figure><p>Replace <code>python3</code> with <code>python</code> if you need to. If you’re not sure, read the previous section <code>Detailed Explanation</code>.</p><p>This command does many things:</p><ul><li>Uses Python3 (Ciphey only supports Python3.7 and above)</li><li>The -m flag tells Python to run the module</li><li>We are telling the version of pip inside Python3 to install something. The reason why we use Python3 to call Pip instead of calling Pip is that the version of Pip may differ from Python, or you may have multiple versions of Python installed or you may be in a virtual environment.</li><li>The -U flag says “upgrade”. Sometimes Python gets stuck on an older version of Ciphey, so if it does – it says to upgrade it.</li><li>“ciphey” is the name of the package we want to install.</li></ul><p><strong>Make sure you run this command in Terminal&#x2F;CMD&#x2F;PowerShell or whatever you use. Do not run this in Python’s IDLE.</strong></p><p>使用方法</p><p>ciphey -t “”</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>大二iwrite英语作文</title>
    <link href="/2023/10/11/English_essay/"/>
    <url>/2023/10/11/English_essay/</url>
    
    <content type="html"><![CDATA[<blockquote><p>注意：内容全部为<a href="https://www.bing.com/search?q=bing+ai&aqs=edge.1.69i64i450l8.10337092j0j1&FORM=ANAB01&PC=NMTS&cc=us">bing ai</a>生成，翻译是<a href="https://fanyi.baidu.com/">百度翻译</a>机翻，统计是<a href="https://coding.tools/cn/word-counter">Conding.Tools</a>技术支持</p></blockquote><h1 id="第一篇"><a href="#第一篇" class="headerlink" title="第一篇"></a>第一篇</h1><h2 id="原文"><a href="#原文" class="headerlink" title="原文"></a>原文</h2><p>Title: Unemployment of College Graduates</p><br/><p>  In recent years, it has become increasingly common for college graduates to struggle with finding employment after graduation. This phenomenon is not isolated to any one country or region, but is a global issue that has been exacerbated by various factors.</p><p>  There are multiple reasons why college graduates may find it difficult to secure a job. Firstly, there is often a mismatch between the skills that students acquire in university and the skills that are in demand in the job market. Secondly, the number of graduates each year often exceeds the number of job vacancies, leading to intense competition. Lastly, some graduates may have unrealistic expectations about their first job, which can lead to disappointment and prolonged job searches.</p><p>  To improve the employment situation for college graduates, several measures can be taken. Universities could work more closely with industries to ensure that their curricula are aligned with market needs. Internship opportunities could be expanded to provide students with practical experience and networking opportunities. Governments could also provide support in terms of job matching services and career counseling. Finally, graduates themselves need to be open-minded and flexible in their job search. They should be prepared to seize opportunities that come their way, even if these do not align perfectly with their initial expectations.</p><p>  In conclusion, while the unemployment of college graduates is a serious issue, it is not insurmountable. With concerted efforts from all stakeholders - universities, governments, industries, and the graduates themselves - we can bridge the gap between education and employment.</p><h2 id="翻译"><a href="#翻译" class="headerlink" title="翻译"></a>翻译</h2><p>近年来，大学毕业生毕业后难以找到工作的情况越来越普遍。这一现象并非孤立于任何一个国家或地区，而是一个因各种因素而加剧的全球性问题。<br>大学毕业生很难找到工作的原因有很多。首先，学生在大学里获得的技能与就业市场上需要的技能往往不匹配。其次，每年的毕业生数量往往超过职位空缺数量，导致竞争激烈。最后，一些毕业生可能对自己的第一份工作抱有不切实际的期望，这可能会导致失望和长时间的求职。<br>为了改善高校毕业生的就业状况，可以采取一些措施。大学可以与行业更密切地合作，以确保其课程与市场需求相一致。实习机会可以扩大</p><h2 id="统计"><a href="#统计" class="headerlink" title="统计"></a>统计</h2><table><thead><tr><th align="center">统计</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center">单词数</td><td align="center">251</td></tr><tr><td align="center">句数</td><td align="center">14</td></tr><tr><td align="center">段落数</td><td align="center">4</td></tr><tr><td align="center">行数</td><td align="center">7</td></tr><tr><td align="center">字符数(包含空格)</td><td align="center">1681</td></tr><tr><td align="center">字符数(不包含空格)</td><td align="center">1419</td></tr><tr><td align="center">阅读时长估计</td><td align="center"><strong>0</strong> 分钟 <strong>54</strong> 秒</td></tr><tr><td align="center">演讲时长估计</td><td align="center"><strong>1</strong> 分钟 <strong>26</strong> 秒</td></tr></tbody></table><h1 id="第二篇"><a href="#第二篇" class="headerlink" title="第二篇"></a>第二篇</h1><h2 id="原文-1"><a href="#原文-1" class="headerlink" title="原文"></a>原文</h2><p>Dear Professor Smith,</p><p>I am writing on behalf of the Student Union to cordially invite you to a lecture we are hosting. The lecture is part of our ongoing efforts to foster a vibrant academic atmosphere and promote intellectual exchange among students.</p><p>The purpose of this event is to provide students with an opportunity to learn from experts in their respective fields and engage in meaningful discussions. We believe that your expertise and insights would greatly benefit our students.</p><p>The lecture will be held on November 20th, 2023, at the University Auditorium. It will start at 10:00 AM and last for about two hours, including a Q&amp;A session.</p><p>We sincerely hope that you will be able to accept our invitation. We are looking forward to your positive response at your earliest convenience.</p><p>Best regards,<br>Wushuo</p><h2 id="翻译-1"><a href="#翻译-1" class="headerlink" title="翻译"></a>翻译</h2><p>尊敬的Smith教授：，<br>我谨代表学生会写信，诚挚邀请您参加我们正在举办的讲座。该讲座是我们持续努力的一部分，旨在营造充满活力的学术氛围，促进学生之间的智力交流。<br>此次活动的目的是为学生提供一个向各自领域的专家学习的机会，并进行有意义的讨论。我们相信您的专业知识和见解将使我们的学生受益匪浅。<br>讲座将于2023年11月20日在大学礼堂举行。它将于上午10:00开始，持续约两个小时，包括问答环节。<br>我们真诚地希望你能接受我们的邀请。我们期待您在方便的时候尽早给予积极的答复。<br>顺致敬意，<br>吴硕</p><h2 id="统计-1"><a href="#统计-1" class="headerlink" title="统计"></a>统计</h2><table><thead><tr><th align="center">统计</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center">单词数</td><td align="center">134</td></tr><tr><td align="center">句数</td><td align="center">10</td></tr><tr><td align="center">段落数</td><td align="center">7</td></tr><tr><td align="center">行数</td><td align="center">12</td></tr><tr><td align="center">字符数(包含空格)</td><td align="center">818</td></tr><tr><td align="center">字符数(不包含空格)</td><td align="center">679</td></tr><tr><td align="center">阅读时长估计</td><td align="center"><strong>0</strong> 分钟 <strong>29</strong> 秒</td></tr><tr><td align="center">演讲时长估计</td><td align="center"><strong>0</strong> 分钟 <strong>45</strong> 秒</td></tr></tbody></table><h1 id="第三篇"><a href="#第三篇" class="headerlink" title="第三篇"></a>第三篇</h1><h2 id="原文-2"><a href="#原文-2" class="headerlink" title="原文"></a>原文</h2><p>Dear Mr. Smith,</p><p>I hope this letter finds you well. I am writing to inform you that, due to unforeseen personal circumstances, I will not be able to start work on the initially agreed upon date. I deeply regret any inconvenience this may cause and assure you that this situation was entirely unexpected.</p><p>I am currently dealing with a family emergency that requires my immediate attention and presence. I believe it is crucial to give my full commitment and focus when starting a new job, and under the current circumstances, I am unable to do so.</p><p>I would greatly appreciate it if we could discuss a new start date once my personal situation has been resolved. I am confident that I will be able to give my full dedication and perform to the best of my abilities once these issues have been addressed.</p><p>Once again, I apologize for any inconvenience this may cause and thank you for your understanding and patience in this matter.</p><p>Yours sincerely, Wushuo</p><h2 id="翻译-2"><a href="#翻译-2" class="headerlink" title="翻译"></a>翻译</h2><p>尊敬的史密斯先生：，<br>我希望这封信能让你感觉良好。我写信通知你，由于不可预见的个人情况，我将无法在最初商定的日期开始工作。我对此可能造成的不便深表歉意，并向您保证，这种情况完全出乎意料。<br>我目前正在处理一个需要我立即关注和在场的家庭紧急情况。我认为，在开始一份新工作时，全身心投入和专注是至关重要的，而在目前的情况下，我无法做到这一点。<br>一旦我的个人情况得到解决，如果我们能讨论一个新的开始日期，我将不胜感激。我相信，一旦这些问题得到解决，我将能够全力以赴，尽我所能。<br>我再次对由此给您带来的不便表示歉意，并感谢您对此事的理解和耐心。<br>吴硕，你的真诚</p><h2 id="统计-2"><a href="#统计-2" class="headerlink" title="统计"></a>统计</h2><table><thead><tr><th align="center">统计</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center">单词数</td><td align="center">167</td></tr><tr><td align="center">句数</td><td align="center">10</td></tr><tr><td align="center">段落数</td><td align="center">6</td></tr><tr><td align="center">行数</td><td align="center">11</td></tr><tr><td align="center">字符数(包含空格)</td><td align="center">955</td></tr><tr><td align="center">字符数(不包含空格)</td><td align="center">784</td></tr><tr><td align="center">阅读时长估计</td><td align="center"><strong>0</strong> 分钟 <strong>36</strong> 秒</td></tr><tr><td align="center">演讲时长估计</td><td align="center"><strong>0</strong> 分钟 <strong>57</strong> 秒</td></tr></tbody></table><h1 id="第四篇"><a href="#第四篇" class="headerlink" title="第四篇"></a>第四篇</h1><h2 id="原文-3"><a href="#原文-3" class="headerlink" title="原文"></a>原文</h2><p>How about “The Spotlight on Talent Shows: A Mixed Bag of Pros and Cons”?</p><br/><p>The city of X conducted a survey on citizens’ attitudes towards talent shows. The results revealed that 60% of the respondents believe the benefits outweigh the drawbacks, while 40% think the opposite.</p><p>Those in favor of talent shows might argue that these programs provide a platform for individuals to showcase their abilities and gain recognition. They also serve as a source of entertainment for viewers. On the other hand, critics might point out that these shows can create unrealistic expectations and pressure for participants. They may also argue that the focus on entertainment value can overshadow genuine talent.</p><p>As for my personal view, I believe talent shows have their merits and demerits. They can indeed uncover hidden gems and provide entertainment. However, it’s crucial to ensure a healthy and fair environment for participants. In conclusion, while talent shows can be beneficial, it’s important to address their potential drawbacks to maximize their positive impact.</p><h2 id="翻译-3"><a href="#翻译-3" class="headerlink" title="翻译"></a>翻译</h2><p>X市对市民对选秀节目的态度进行了调查。结果显示，60%的受访者认为利大于弊，而40%的受访者则相反。<br>那些支持选秀节目的人可能会认为，这些节目为个人展示自己的能力和获得认可提供了一个平台。它们也是观众的娱乐来源。另一方面，批评者可能会指出，这些节目会给参与者带来不切实际的期望和压力。他们也可能认为，对娱乐价值的关注可能会掩盖真正的人才。<br>至于我个人的看法，我认为选秀节目有其优点和缺点。他们确实可以发现隐藏的宝石并提供娱乐。然而，确保参与者有一个健康、公平的环境是至关重要的。总之，虽然选秀节目可能是有益的，但重要的是要解决其潜在的缺点，以最大限度地发挥其积极影响。</p><h2 id="统计-3"><a href="#统计-3" class="headerlink" title="统计"></a>统计</h2><table><thead><tr><th align="center">统计</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center">单词数</td><td align="center">153</td></tr><tr><td align="center">句数</td><td align="center">10</td></tr><tr><td align="center">段落数</td><td align="center">3</td></tr><tr><td align="center">行数</td><td align="center">5</td></tr><tr><td align="center">字符数(包含空格)</td><td align="center">989</td></tr><tr><td align="center">字符数(不包含空格)</td><td align="center">835</td></tr><tr><td align="center">阅读时长估计</td><td align="center"><strong>0</strong> 分钟 <strong>33</strong> 秒</td></tr><tr><td align="center">演讲时长估计</td><td align="center"><strong>0</strong> 分钟 <strong>52</strong> 秒</td></tr></tbody></table><h1 id="第五篇"><a href="#第五篇" class="headerlink" title="第五篇"></a>第五篇</h1><h2 id="原文-4"><a href="#原文-4" class="headerlink" title="原文"></a>原文</h2><p>“The Rise of DINK Families: A Personal Choice or a Societal Concern?”</p><br/><p>The phenomenon of DINK (Double Income, No Kids) families is becoming increasingly prevalent in modern society. This trend is driven by a variety of factors. Firstly, the cost of living has risen significantly, making it more financially viable for couples to remain childless. Secondly, many couples are choosing to prioritize their careers and personal freedom over starting a family.</p><p>However, the rise of DINK families is not without controversy. Some argue that it contributes to the aging population problem, while others believe it’s a personal choice that should be respected. As for my opinion, I believe that everyone has the right to choose their own lifestyle. While it’s important to consider societal implications, individual happiness and fulfillment should not be overlooked. Ultimately, the decision to have children or not is a deeply personal one and should be left up to each individual or couple.</p><h2 id="翻译-4"><a href="#翻译-4" class="headerlink" title="翻译"></a>翻译</h2><p>丁克家庭现象在现代社会越来越普遍。这一趋势是由多种因素驱动的。首先，生活成本大幅上涨，使夫妇保持无子女状态在经济上更加可行。其次，许多夫妇选择将事业和个人自由置于组建家庭之上。<br>然而，丁克家庭的兴起并非没有争议。一些人认为这加剧了人口老龄化问题，而另一些人则认为这是个人的选择，应该得到尊重。至于我的观点，我相信每个人都有权选择自己的生活方式。虽然考虑社会影响很重要，但个人的幸福感和成就感不应被忽视。最终，生不生孩子是一个非常私人的决定，应该留给每个人或夫妇。</p><h2 id="统计-4"><a href="#统计-4" class="headerlink" title="统计"></a>统计</h2><table><thead><tr><th align="center">统计</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center">单词数</td><td align="center">146</td></tr><tr><td align="center">句数</td><td align="center">9</td></tr><tr><td align="center">段落数</td><td align="center">2</td></tr><tr><td align="center">行数</td><td align="center">3</td></tr><tr><td align="center">字符数(包含空格)</td><td align="center">916</td></tr><tr><td align="center">字符数(不包含空格)</td><td align="center">772</td></tr><tr><td align="center">阅读时长估计</td><td align="center"><strong>0</strong> 分钟 <strong>31</strong> 秒</td></tr><tr><td align="center">演讲时长估计</td><td align="center"><strong>0</strong> 分钟 <strong>50</strong> 秒</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>英语作业</category>
      
      <category>作文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>英语</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kali_Linux如何修改语言为中文</title>
    <link href="/2023/10/10/kali_Linux_language/"/>
    <url>/2023/10/10/kali_Linux_language/</url>
    
    <content type="html"><![CDATA[<h3 id="友情提示"><a href="#友情提示" class="headerlink" title="友情提示"></a>友情提示</h3><p>修改前快照一下，避免修改操作错误带来的问题！</p><ol><li><p>打开终端</p></li><li><p>打开设置</p><p>输入</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">dpkg-reconfigure locales</span><br></code></pre></td></tr></table></figure></li><li><p>修改设置</p><p><code>en_US.UTF-8 UTF-8</code>改为不勾选</p><ul><li>下面这种有个<code>*</code>属于已经勾选了</li><li>通过上下箭头按键我们把红点（表示当前选中的选项）移动到<code>en_US.UTF-8 UTF-8</code>，按下空格表示不勾选&#x2F;勾选</li><li>使用空格勾选<code>[ ]zh_CN.GBK_GBK</code> 和<code>[ ] zh-CN.UTF-8.UTF-8</code>两个选项，这里有部分虚拟机会找不到<code>[ ]zh_CN.GBK_GBK</code>，这两个选项是紧跟着的，找不到就算了，问题不大。</li><li>按下<code>enter</code> 表示<code>ok</code>，选择语言<code>zh_CN.UTF-8</code></li></ul></li><li><p>重启生效设置</p><p>重启后会有个提示，建议你选择<code>保留旧名称</code>，以后路径敲代码敲英文肯定比敲中文方便很多！</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">reboot</span><br></code></pre></td></tr></table></figure></li></ol><hr><p>原文：<a href="https://blog.csdn.net/u011027547/article/details/123344249">https://blog.csdn.net/u011027547/article/details/123344249</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>kali</category>
      
      <category>语言设置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实验三、栈和队列的应用</title>
    <link href="/2023/10/05/DS_test3/"/>
    <url>/2023/10/05/DS_test3/</url>
    
    <content type="html"><![CDATA[<blockquote><p>已完结</p><p>声明：仅供留档查阅，仅用作起到提示引导性作用，仅用作学习交流，切勿直接照搬</p></blockquote><p><img src="https://cyberdownload.anrunlu.net/FruAGRXClw43THvg6TkSyPl_4S3q" srcset="/img/loading.gif" lazyload></p><h1 id="实验原理"><a href="#实验原理" class="headerlink" title="实验原理"></a>实验原理</h1><ol><li><strong>顺序栈</strong>：顺序栈是一种基于数组实现的栈。它通过一个数组和一个栈顶指针实现。当有新元素入栈时，将新元素放在数组的末尾，并将栈顶指针向后移动一位。当需要出栈时，直接返回栈顶元素，并将栈顶指针向前移动一位。</li><li><strong>链式栈</strong>：链式栈是一种基于链表实现的栈。它通过一个链表和一个头节点实现。当有新元素入栈时，将新元素插入到链表的头部，并更新头节点。当需要出栈时，直接返回头节点所指向的节点，并让头节点指向下一个节点。</li><li><strong>循环队列</strong>：循环队列是一种特殊的队列，它在逻辑上是环形的。循环队列使用一个数组和两个指针（一个头指针和一个尾指针）来实现。当元素入队时，尾指针向前移动并添加新元素；当元素出队时，头指针向前移动。当尾指针到达数组的末尾时，它会从数组的开始继续。</li><li><strong>链式队列</strong>：链式队列是基于单链表实现的队列。它使用一个单链表和两个指针（一个头指针和一个尾指针）来实现。当元素入队时，新元素被添加到链表的尾部，并更新尾指针；当元素出队时，头部的元素被移除，并更新头指针</li></ol><h1 id="实验内容和步骤"><a href="#实验内容和步骤" class="headerlink" title="实验内容和步骤"></a>实验内容和步骤</h1><ol><li><strong>顺序栈</strong>：<ul><li>入栈：将新元素放在数组的末尾，并将栈顶指针向后移动一位。</li><li>出栈：返回栈顶元素，并将栈顶指针向前移动一位。</li></ul></li><li><strong>链式栈</strong>：<ul><li>入栈：将新元素插入到链表的头部，并更新头节点。</li><li>出栈：返回头节点所指向的节点，并让头节点指向下一个节点。</li></ul></li><li><strong>循环队列</strong>：<ul><li>入队：尾指针向前移动并添加新元素。</li><li>出队：头指针向前移动。当尾指针到达数组的末尾时，它会从数组的开始继续。</li></ul></li><li><strong>链式队列</strong>：<ul><li>入队：新元素被添加到链表的尾部，并更新尾指针。</li><li>出队：头部的元素被移除，并更新头指针。</li></ul></li></ol><h1 id="代码主体"><a href="#代码主体" class="headerlink" title="代码主体"></a>代码主体</h1><h2 id="顺序栈SeqStack的实现："><a href="#顺序栈SeqStack的实现：" class="headerlink" title="顺序栈SeqStack的实现："></a>顺序栈SeqStack的实现：</h2><blockquote><p>自己写的</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> StackSize = <span class="hljs-number">100</span>;  <span class="hljs-comment">// 定义最大栈顶具体情况具体分析</span><br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> DataType&gt;   <span class="hljs-comment">//定义模板类SeqStack</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SeqStack</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">SeqStack</span>();   <span class="hljs-comment">//构造函数，初始化空栈</span><br>~<span class="hljs-built_in">SeqStack</span>();<span class="hljs-comment">//析构函数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Push</span><span class="hljs-params">(DataType x)</span></span>;<span class="hljs-comment">//压栈</span><br><span class="hljs-function">DataType <span class="hljs-title">Pop</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">//出栈</span><br><span class="hljs-function">DataType <span class="hljs-title">GetTop</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">//取栈顶</span><br><span class="hljs-function">DataType <span class="hljs-title">TopTop</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">//取栈顶下标</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">empty</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">//判空操作</span><br><span class="hljs-keyword">private</span>:<br>DataType data[StackSize];<span class="hljs-comment">//存放栈元素的数组</span><br><span class="hljs-type">int</span> top;<span class="hljs-comment">//栈顶元素的下标</span><br>&#125;;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> DataType&gt;<br>SeqStack&lt;DataType&gt;::~<span class="hljs-built_in">SeqStack</span>()<br>&#123;<br><br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-type">void</span> SeqStack&lt;DataType&gt;::<span class="hljs-built_in">Push</span>(DataType x)<br>&#123;<br><span class="hljs-keyword">if</span> (top == StackSize <span class="hljs-number">-1</span> )<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;栈满&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>top++;<br>data[top] = x;s<br>&#125;<br><br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> DataType&gt;<br>DataType SeqStack&lt;DataType&gt;::<span class="hljs-built_in">Pop</span>()<br>&#123;<br><span class="hljs-keyword">if</span> (top == <span class="hljs-number">-1</span> )<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;栈空&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>DataType x;<br>x = data[top];<br>top--;<br><span class="hljs-keyword">return</span> x;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> DataType&gt;<br>DataType SeqStack&lt;DataType&gt;::<span class="hljs-built_in">GetTop</span>()<br>&#123;<br><span class="hljs-keyword">if</span> (top == <span class="hljs-number">-1</span> )<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;栈空&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">return</span> data[top];<br>&#125;<br><br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-type">int</span> SeqStack&lt;DataType&gt;::<span class="hljs-built_in">empty</span>()<br>&#123;<br><span class="hljs-keyword">if</span> (top == <span class="hljs-number">-1</span>)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> DataType&gt;<br>DataType SeqStack&lt;DataType&gt;::<span class="hljs-built_in">TopTop</span>()<br>&#123;<br><span class="hljs-keyword">return</span>top;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> DataType&gt;<br>SeqStack&lt;DataType&gt;::<span class="hljs-built_in">SeqStack</span>()<br>&#123;<br>top = <span class="hljs-number">-1</span>;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> ws1 = <span class="hljs-number">0</span>;<br>SeqStack&lt;<span class="hljs-type">int</span>&gt; S&#123;&#125;;<span class="hljs-comment">//定义顺序栈变量</span><br>S.<span class="hljs-built_in">Push</span>(<span class="hljs-number">1</span>);<br>S.<span class="hljs-built_in">Push</span>(<span class="hljs-number">2</span>);<br>S.<span class="hljs-built_in">Push</span>(<span class="hljs-number">3</span>); <br>cout &lt;&lt; <span class="hljs-string">&quot;系统已压栈1,2,3&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;输入一个元素进行压栈&quot;</span> &lt;&lt; endl;<br>cin &gt;&gt; ws1;<br>S.<span class="hljs-built_in">Push</span>(ws1);<br>cout &lt;&lt; <span class="hljs-string">&quot;当前栈顶元素为：&quot;</span> &lt;&lt; S.<span class="hljs-built_in">GetTop</span>() &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;*****************&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;执行一次出栈操作&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;已释放&quot;</span> &lt;&lt; S.<span class="hljs-built_in">Pop</span>() &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;当前栈顶元素为：&quot;</span> &lt;&lt; S.<span class="hljs-built_in">GetTop</span>() &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;*****************&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;执行一次判空操作&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">if</span> (S.<span class="hljs-built_in">empty</span>() == <span class="hljs-number">1</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;栈空&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;栈非空&quot;</span> &lt;&lt; endl;<br>&#125;<br>cout &lt;&lt; <span class="hljs-string">&quot;*****************&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;正在出所有栈&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = S.<span class="hljs-built_in">TopTop</span>(); i &gt; <span class="hljs-number">-1</span> ; i--)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;已释放&quot;</span> &lt;&lt; S.<span class="hljs-built_in">Pop</span>() &lt;&lt; endl;<br>&#125;<br>cout &lt;&lt; <span class="hljs-string">&quot;已释放出所有栈&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;*****************&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;执行一次判空操作&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">if</span> (S.<span class="hljs-built_in">empty</span>() == <span class="hljs-number">1</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;栈空&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;栈非空&quot;</span> &lt;&lt; endl;<br>&#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="链式栈LinkStack的实现："><a href="#链式栈LinkStack的实现：" class="headerlink" title="链式栈LinkStack的实现："></a>链式栈LinkStack的实现：</h2><blockquote><p>自己写的</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span><br>&#123;<br>    DataType data;<br>    Node&lt;DataType&gt;* next;<br>&#125;;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkStack</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">LinkStack</span>();<br>    ~<span class="hljs-built_in">LinkStack</span>();<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Push</span><span class="hljs-params">(DataType x)</span></span>;  <span class="hljs-comment">//入栈</span><br>    <span class="hljs-function">DataType <span class="hljs-title">Pop</span><span class="hljs-params">()</span></span>;     <span class="hljs-comment">//出栈</span><br>    <span class="hljs-function">DataType <span class="hljs-title">GetTop</span><span class="hljs-params">()</span></span>;  <span class="hljs-comment">//取栈顶</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Empty</span><span class="hljs-params">()</span></span>;        <span class="hljs-comment">//判空</span><br><span class="hljs-keyword">private</span>:<br>    Node&lt;DataType&gt;* top;<br>&#125;;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br>LinkStack&lt;DataType&gt;::<span class="hljs-built_in">LinkStack</span>()<br>&#123;<br>    top = <span class="hljs-literal">nullptr</span>;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br>LinkStack&lt;DataType&gt;::~<span class="hljs-built_in">LinkStack</span>()<br>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;程序退出，析构函数被调用!&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">Empty</span>())<br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;出栈元素：&quot;</span> &lt;&lt; <span class="hljs-built_in">Pop</span>() &lt;&lt; endl;<br>    &#125;<br>    cout &lt;&lt; <span class="hljs-string">&quot;程序退出链栈已清空!&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br>DataType LinkStack&lt;DataType&gt; ::<span class="hljs-built_in">GetTop</span>()<br>&#123;<br>    <span class="hljs-keyword">if</span> (top == <span class="hljs-literal">nullptr</span>)<br>        cout &lt;&lt; <span class="hljs-string">&quot;下溢异常&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> top-&gt;data;<br>&#125;<br><br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-type">void</span> LinkStack&lt;DataType&gt; ::<span class="hljs-built_in">Push</span>(DataType x)<br>&#123;<br>    Node&lt;DataType&gt;* s = <span class="hljs-literal">nullptr</span>;<br>    s = <span class="hljs-keyword">new</span> Node&lt;DataType&gt;;<br>    s-&gt;data = x; <span class="hljs-comment">//申请结点s数据域为x</span><br>    s-&gt;next = top;<br>    top = s; <span class="hljs-comment">//将结点s插在栈顶</span><br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br>DataType LinkStack&lt;DataType&gt; ::<span class="hljs-built_in">Pop</span>()<br>&#123;<br>    Node&lt;DataType&gt;* p = <span class="hljs-literal">nullptr</span>;<br>    DataType x;<br>    <span class="hljs-keyword">if</span> (top == <span class="hljs-literal">nullptr</span>)<br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;栈空&quot;</span> &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        x = top-&gt;data; p = top; <span class="hljs-comment">//暂存栈顶元素</span><br>        top = top-&gt;next; <span class="hljs-comment">//将栈顶结点摘链</span><br>        <span class="hljs-keyword">delete</span> p;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-type">int</span> LinkStack&lt;DataType&gt;::<span class="hljs-built_in">Empty</span>()<br>&#123;<br>    <span class="hljs-keyword">if</span> (top == <span class="hljs-literal">nullptr</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> ws1 = <span class="hljs-number">0</span>;<br>    LinkStack&lt;<span class="hljs-type">int</span>&gt; S&#123;&#125;;<span class="hljs-comment">//定义顺序栈变量S</span><br>    S.<span class="hljs-built_in">Push</span>(<span class="hljs-number">1</span>);<br>    S.<span class="hljs-built_in">Push</span>(<span class="hljs-number">2</span>);<br>    S.<span class="hljs-built_in">Push</span>(<span class="hljs-number">3</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;系统已压栈1,2,3&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;输入一个元素进行压栈&quot;</span> &lt;&lt; endl;<br>    cin &gt;&gt; ws1;<br>    S.<span class="hljs-built_in">Push</span>(ws1);<br>    cout &lt;&lt; <span class="hljs-string">&quot;当前栈顶元素为：&quot;</span> &lt;&lt; S.<span class="hljs-built_in">GetTop</span>() &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;*****************&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;执行一次出栈操作&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;已释放&quot;</span> &lt;&lt; S.<span class="hljs-built_in">Pop</span>() &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;当前栈顶元素为：&quot;</span> &lt;&lt; S.<span class="hljs-built_in">GetTop</span>() &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;*****************&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;执行一次判空操作&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">if</span> (S.<span class="hljs-built_in">Empty</span>() == <span class="hljs-number">1</span>)<br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;栈空&quot;</span> &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;栈非空&quot;</span> &lt;&lt; endl;<br>    &#125;<br>    cout &lt;&lt; <span class="hljs-string">&quot;*****************&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;正在出所有栈&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">while</span> (S.<span class="hljs-built_in">Empty</span>() != <span class="hljs-number">1</span>)<br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;已释放&quot;</span> &lt;&lt; S.<span class="hljs-built_in">Pop</span>() &lt;&lt; endl;<br>    &#125;<br>    cout &lt;&lt; <span class="hljs-string">&quot;已释放出所有栈&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;*****************&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;执行一次判空操作&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">if</span> (S.<span class="hljs-built_in">Empty</span>() == <span class="hljs-number">1</span>)<br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;栈空&quot;</span> &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;栈非空&quot;</span> &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="循环队列CirQueue的实现："><a href="#循环队列CirQueue的实现：" class="headerlink" title="循环队列CirQueue的实现："></a>循环队列CirQueue的实现：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> QueueSize = <span class="hljs-number">100</span>; <span class="hljs-comment">//最大长度</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CirQueue</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">CirQueue</span>();<br>~<span class="hljs-built_in">CirQueue</span>();<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">EnQueue</span><span class="hljs-params">(DataType x)</span></span>;<span class="hljs-comment">//入队</span><br><span class="hljs-function">DataType <span class="hljs-title">DeQueue</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">//出队</span><br><span class="hljs-function">DataType <span class="hljs-title">GetQueue</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">//取队头</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Empty</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">//判空操作</span><br><span class="hljs-keyword">private</span>:<br>DataType data[QueueSize];<span class="hljs-comment">//存放需要的数组</span><br><span class="hljs-type">int</span> front, rear;<span class="hljs-comment">//队头和队尾指针</span><br>&#125;;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> DataType&gt;<br>CirQueue&lt;DataType&gt;::<span class="hljs-built_in">CirQueue</span>()<br>&#123;<br>rear = front = QueueSize - <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> DataType&gt;<br>CirQueue&lt;DataType&gt;::~<span class="hljs-built_in">CirQueue</span>()<br>&#123;<br><br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-type">void</span> CirQueue&lt;DataType&gt;::<span class="hljs-built_in">EnQueue</span>(DataType x)<br>&#123;<br><span class="hljs-keyword">if</span> ((rear+<span class="hljs-number">1</span>)%QueueSize==front)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;队满&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>rear = (rear + <span class="hljs-number">1</span>) % QueueSize; <span class="hljs-comment">//队尾指针+1</span><br>data[rear] = x;<span class="hljs-comment">//在队尾插入元素</span><br>&#125;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> DataType&gt;<br>DataType CirQueue&lt;DataType&gt;::<span class="hljs-built_in">DeQueue</span>()<br>&#123;<br><span class="hljs-keyword">if</span> ((rear + <span class="hljs-number">1</span>)%QueueSize==front )<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;队空&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>front = (front + <span class="hljs-number">1</span>) % QueueSize;<br><span class="hljs-keyword">return</span> data[front];<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> DataType&gt;<br>DataType CirQueue&lt;DataType&gt;::<span class="hljs-built_in">GetQueue</span>()<br>&#123;<br><span class="hljs-keyword">if</span> (front == rear)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;队空&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">return</span> data[(front + <span class="hljs-number">1</span>) % QueueSize];<br>&#125;<br><br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-type">int</span> CirQueue&lt;DataType&gt;::<span class="hljs-built_in">Empty</span>()<br>&#123;<br><span class="hljs-keyword">if</span> (front == rear)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>CirQueue&lt;<span class="hljs-type">int</span>&gt; S&#123;&#125;;<br><span class="hljs-type">int</span> x = <span class="hljs-number">0</span>;<br>S.<span class="hljs-built_in">EnQueue</span>(<span class="hljs-number">1</span>);<br>S.<span class="hljs-built_in">EnQueue</span>(<span class="hljs-number">2</span>);<br>S.<span class="hljs-built_in">EnQueue</span>(<span class="hljs-number">3</span>);<br>cout &lt;&lt; <span class="hljs-string">&quot;已入队1,2,3&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;******取一次队头******&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;队头是：&quot;</span> &lt;&lt; S.<span class="hljs-built_in">GetQueue</span>() &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;请输入一个元素进行入队&quot;</span> &lt;&lt; endl;<br>cin &gt;&gt; x;<br>S.<span class="hljs-built_in">EnQueue</span>(x);<br>cout &lt;&lt; <span class="hljs-string">&quot;已入队：&quot;</span> &lt;&lt; x &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;******取一次队头******&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;队头是：&quot;</span> &lt;&lt; S.<span class="hljs-built_in">GetQueue</span>() &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;******执行一次出队******&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;已出队：&quot;</span> &lt;&lt; S.<span class="hljs-built_in">DeQueue</span>() &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;*****进行一次判空*****&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">if</span> (S.<span class="hljs-built_in">Empty</span>() == <span class="hljs-number">1</span>)<br>&#123; <br>cout &lt;&lt; <span class="hljs-string">&quot;队列空&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;队列非空&quot;</span> &lt;&lt; endl;<br>&#125;<br>cout &lt;&lt; <span class="hljs-string">&quot;已出队：&quot;</span> &lt;&lt; S.<span class="hljs-built_in">DeQueue</span>() &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;已出队：&quot;</span> &lt;&lt; S.<span class="hljs-built_in">DeQueue</span>() &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;已出队：&quot;</span> &lt;&lt; S.<span class="hljs-built_in">DeQueue</span>() &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;*****进行一次判空*****&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">if</span> (S.<span class="hljs-built_in">Empty</span>() == <span class="hljs-number">1</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;队列空&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;队列非空&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="链式队列LinkQueue的实现："><a href="#链式队列LinkQueue的实现：" class="headerlink" title="链式队列LinkQueue的实现："></a>链式队列LinkQueue的实现：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br>DataType data;<br>node&lt;DataType&gt;* next;<br>&#125;;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkQueue</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">LinkQueue</span>();<br>~<span class="hljs-built_in">LinkQueue</span>();<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">enQueue</span><span class="hljs-params">(DataType x)</span></span>;<br><span class="hljs-function">DataType <span class="hljs-title">DeQueue</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function">DataType <span class="hljs-title">GetQueue</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Empty</span><span class="hljs-params">()</span></span>;<br><span class="hljs-keyword">private</span>:<br>node&lt;DataType&gt;* front, * rear;<br>&#125;;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> DataType&gt;<br>LinkQueue&lt;DataType&gt;::<span class="hljs-built_in">LinkQueue</span>()<br>&#123;<br>node&lt;DataType&gt;* s = <span class="hljs-literal">nullptr</span>;<br>s = <span class="hljs-keyword">new</span> node&lt;DataType&gt;;<span class="hljs-comment">//开辟空间</span><br>s-&gt;next = <span class="hljs-literal">nullptr</span>;<br>front = rear = s;<br><br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> DataType&gt;<br>LinkQueue&lt;DataType&gt;::~<span class="hljs-built_in">LinkQueue</span>()<br>&#123;<br>node&lt;DataType&gt;* q = <span class="hljs-literal">nullptr</span>;<br><span class="hljs-keyword">while</span> (front != <span class="hljs-literal">nullptr</span>)<br>&#123;<br>q = front;<br>front = front-&gt;next;<br><span class="hljs-keyword">delete</span> q;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-type">void</span> LinkQueue&lt;DataType&gt;::<span class="hljs-built_in">enQueue</span>(DataType x)<br>&#123;<br>node&lt;DataType&gt;* s = <span class="hljs-literal">nullptr</span>;<br>s = <span class="hljs-keyword">new</span> node&lt;DataType&gt;;<br>s-&gt;data = x;<br>s-&gt;next = <span class="hljs-literal">nullptr</span>;<br>rear-&gt;next = s;<span class="hljs-comment">//插入到队尾</span><br>rear = s;<span class="hljs-comment">//移动队尾</span><br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> DataType&gt;<br>DataType LinkQueue&lt;DataType&gt;::<span class="hljs-built_in">DeQueue</span>()<br>&#123;<br>DataType x;<br>node&lt;DataType&gt;* p = <span class="hljs-literal">nullptr</span>;<br><span class="hljs-keyword">if</span> (reat==front )<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;队空&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>p = front-&gt;next;<br>x = p-&gt;data;<br>front-&gt;next = p-&gt;next;<br><span class="hljs-keyword">delete</span> p;<br><span class="hljs-keyword">return</span> x;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> DataType&gt;<br>DataType LinkQueue&lt;DataType&gt;::<span class="hljs-built_in">GetQueue</span>()<br>&#123;<br><span class="hljs-keyword">if</span> (front == rear)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;队空&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">return</span> front-&gt;next-&gt;data;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-type">int</span> LinkQueue&lt;DataType&gt;::<span class="hljs-built_in">Empty</span>()<br>&#123;<br><span class="hljs-keyword">if</span> (front == rear )<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> x;<br>LinkQueue&lt;<span class="hljs-type">int</span>&gt; S = &#123;&#125;;<br>S.<span class="hljs-built_in">enQueue</span>(<span class="hljs-number">1</span>);<br>S.<span class="hljs-built_in">enQueue</span>(<span class="hljs-number">2</span>);<br>S.<span class="hljs-built_in">enQueue</span>(<span class="hljs-number">3</span>);<br>cout &lt;&lt; <span class="hljs-string">&quot;已入队1,2,3&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;******取一次队头******&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;队头是：&quot;</span> &lt;&lt; S.<span class="hljs-built_in">GetQueue</span>() &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;请输入一个元素进行入队&quot;</span> &lt;&lt; endl;<br>cin &gt;&gt; x;<br>S.<span class="hljs-built_in">enQueue</span>(x);<br>cout &lt;&lt; <span class="hljs-string">&quot;已入队：&quot;</span> &lt;&lt; x &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;******取一次队头******&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;队头是：&quot;</span> &lt;&lt; S.<span class="hljs-built_in">GetQueue</span>() &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;******执行一次出队******&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;已出队：&quot;</span> &lt;&lt; S.<span class="hljs-built_in">DeQueue</span>() &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;*****进行一次判空*****&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">if</span> (S.<span class="hljs-built_in">Empty</span>() == <span class="hljs-number">1</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;队列空&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;队列非空&quot;</span> &lt;&lt; endl;<br>&#125;<br>cout &lt;&lt; <span class="hljs-string">&quot;已出队：&quot;</span> &lt;&lt; S.<span class="hljs-built_in">DeQueue</span>() &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;已出队：&quot;</span> &lt;&lt; S.<span class="hljs-built_in">DeQueue</span>() &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;已出队：&quot;</span> &lt;&lt; S.<span class="hljs-built_in">DeQueue</span>() &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;*****进行一次判空*****&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">if</span> (S.<span class="hljs-built_in">Empty</span>() == <span class="hljs-number">1</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;队列空&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;队列非空&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="十进制转换为二至九进制之间的任一进制的算法实现："><a href="#十进制转换为二至九进制之间的任一进制的算法实现：" class="headerlink" title="十进制转换为二至九进制之间的任一进制的算法实现："></a>十进制转换为二至九进制之间的任一进制的算法实现：</h2><blockquote><p>这里有一个细节就是，任何数转化为任何进制，最后整除取整的结果都是0，而最后一次压栈是无法在循环里压栈（在这个算法里），需要在循环外再写一行压栈，把最后一个进制数压进去（也就是输出结果的第一位）</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*十进制转化为其他进制，实际上是做取余然后逆序输出运算，可以用顺序栈实现功能*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> StackSize = <span class="hljs-number">10000</span>;  <span class="hljs-comment">// 定义最大栈顶具体情况具体分析</span><br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> DataType&gt;   <span class="hljs-comment">//定义模板类SeqStack</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SeqStack</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">SeqStack</span>();   <span class="hljs-comment">//构造函数，初始化空栈</span><br>~<span class="hljs-built_in">SeqStack</span>();<span class="hljs-comment">//析构函数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Push</span><span class="hljs-params">(DataType x)</span></span>;<span class="hljs-comment">//压栈</span><br><span class="hljs-function">DataType <span class="hljs-title">Pop</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">//出栈</span><br><span class="hljs-function">DataType <span class="hljs-title">GetTop</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">//取栈顶</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">empty</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">//判空操作</span><br><span class="hljs-keyword">private</span>:<br>DataType data[StackSize];<span class="hljs-comment">//存放栈元素的数组</span><br><span class="hljs-type">int</span> top;<span class="hljs-comment">//栈顶元素的下标</span><br>&#125;;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> DataType&gt;<br>SeqStack&lt;DataType&gt;::~<span class="hljs-built_in">SeqStack</span>()<br>&#123;<br><br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-type">void</span> SeqStack&lt;DataType&gt;::<span class="hljs-built_in">Push</span>(DataType x)<br>&#123;<br><span class="hljs-keyword">if</span> (top == StackSize - <span class="hljs-number">1</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;栈满&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>top++;<br>data[top] = x;<br>&#125;<br><br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> DataType&gt;<br>DataType SeqStack&lt;DataType&gt;::<span class="hljs-built_in">Pop</span>()<br>&#123;<br><span class="hljs-keyword">if</span> (top == <span class="hljs-number">-1</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;栈空&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>DataType x;<br>x = data[top];<br>top--;<br><span class="hljs-keyword">return</span> x;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> DataType&gt;<br>DataType SeqStack&lt;DataType&gt;::<span class="hljs-built_in">GetTop</span>()<br>&#123;<br><span class="hljs-keyword">if</span> (top == <span class="hljs-number">-1</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;栈空&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">return</span> data[top];<br>&#125;<br><br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-type">int</span> SeqStack&lt;DataType&gt;::<span class="hljs-built_in">empty</span>()<br>&#123;<br><span class="hljs-keyword">if</span> (top == <span class="hljs-number">-1</span>)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> DataType&gt;<br>SeqStack&lt;DataType&gt;::<span class="hljs-built_in">SeqStack</span>()<br>&#123;<br>top = <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>SeqStack&lt;<span class="hljs-type">int</span>&gt; s = &#123;&#125;;<br><span class="hljs-type">int</span> x, y, count = <span class="hljs-number">1</span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;请按顺序输入你想转化的十进制数，和目标进制（2-9），以空格隔开&quot;</span> &lt;&lt; endl;<br>cin &gt;&gt; x &gt;&gt; y;<br><span class="hljs-keyword">while</span> ((x/y) != <span class="hljs-number">0</span>)<br>&#123;<br>cout &lt;&lt;<span class="hljs-string">&quot;入栈&quot;</span> &lt;&lt; x % y &lt;&lt; endl;<br>s.<span class="hljs-built_in">Push</span>(x % y);<br>count++;<br>x /= y;<br>&#125;<br>s.<span class="hljs-built_in">Push</span>(x % y);<br>cout &lt;&lt; <span class="hljs-string">&quot;入栈&quot;</span> &lt;&lt; x % y &lt;&lt; endl;<br>cout &lt;&lt;<span class="hljs-string">&quot;************************&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;转换后的结果是&quot;</span>;<br><span class="hljs-keyword">while</span> (count!=<span class="hljs-number">0</span>)<br>&#123;<br>cout&lt;&lt;s.<span class="hljs-built_in">Pop</span>();<br>count--;<br>&#125;<br>cout &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;************************&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>数据结构作业</category>
      
      <category>实验</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构作业</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++常用的代码模板</title>
    <link href="/2023/10/05/C++_template_usually/"/>
    <url>/2023/10/05/C++_template_usually/</url>
    
    <content type="html"><![CDATA[<h1 id="生成随机数"><a href="#生成随机数" class="headerlink" title="生成随机数"></a>生成随机数</h1><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;random&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;chrono&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 使用当前时间作为随机数生成器的种子</span><br>    <span class="hljs-type">unsigned</span> seed = chrono::system_clock::<span class="hljs-built_in">now</span>().<span class="hljs-built_in">time_since_epoch</span>().<span class="hljs-built_in">count</span>();<br>    <br>    <span class="hljs-comment">// 创建一个随机数生成器</span><br>    <span class="hljs-function">default_random_engine <span class="hljs-title">generator</span><span class="hljs-params">(seed)</span></span>;<br>    <br>    <span class="hljs-comment">// 创建一个均匀分布的随机数生成器，范围从1到100</span><br>    <span class="hljs-function">uniform_int_distribution&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">distribution</span><span class="hljs-params">(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>)</span></span>;<br>    <br>    <span class="hljs-comment">// 生成并打印一个随机数</span><br>    cout &lt;&lt; <span class="hljs-string">&quot;Random number: &quot;</span> &lt;&lt; <span class="hljs-built_in">distribution</span>(generator) &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// 使用当前时间作为随机数生成器的种子</span><br><span class="hljs-type">unsigned</span> seed = chrono::system_clock::<span class="hljs-built_in">now</span>().<span class="hljs-built_in">time_since_epoch</span>().<span class="hljs-built_in">count</span>();<br><br><span class="hljs-comment">// 创建一个随机数生成器</span><br><span class="hljs-function">default_random_engine <span class="hljs-title">generator</span><span class="hljs-params">(seed)</span></span>;<br><br><span class="hljs-comment">// 创建一个均匀分布的随机数生成器，范围从1到100</span><br><span class="hljs-function">uniform_int_distribution&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">distribution</span><span class="hljs-params">(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>)</span></span>;<br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">distribution</span><span class="hljs-params">(generator)</span></span><br></code></pre></td></tr></table></figure><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;chrono&gt;</span></span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>常用代码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CTF-crypto&amp;misc常用解密工具</title>
    <link href="/2023/10/04/CTF_tools_crypto/"/>
    <url>/2023/10/04/CTF_tools_crypto/</url>
    
    <content type="html"><![CDATA[<h1 id="编码解码"><a href="#编码解码" class="headerlink" title="编码解码"></a>编码解码</h1><h2 id="Python脚本"><a href="#Python脚本" class="headerlink" title="Python脚本"></a>Python脚本</h2><h3 id="base64换表脚本"><a href="#base64换表脚本" class="headerlink" title="base64换表脚本"></a>base64换表脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><br><span class="hljs-comment">#str1是要解密的代码</span><br>str1 = <span class="hljs-string">&quot;5Mc58bPHLiAx7J8ocJIlaVUxaJvMcoYMaoPMaOfg15c475tscHfM/8==&quot;</span><br><br><span class="hljs-comment">#string1是改过之后的base64表</span><br>string1 = <span class="hljs-string">&quot;qvEJAfHmUYjBac+u8Ph5n9Od17FrICL/X0gVtM4Qk6T2z3wNSsyoebilxWKGZpRD&quot;</span> <br><br>string2 = <span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span><br><br><span class="hljs-built_in">print</span> (base64.b64decode(str1.translate(<span class="hljs-built_in">str</span>.maketrans(string1,string2))))<br><br><br><span class="hljs-comment">#NSSCTF&#123;a8d4347722800e72e34e1aba3fe914ae&#125;</span><br></code></pre></td></tr></table></figure><h3 id="变异凯撒脚本"><a href="#变异凯撒脚本" class="headerlink" title="变异凯撒脚本"></a>变异凯撒脚本</h3><p>凯撒密码作为最古老的密码体制之一,相信大多数人都知道,即简单的移位操作,那么问题来了,变异的凯撒密码又会是什么呢?<br>拿到题先比对acsii码值对比表<br>通过上面的acsii码值对比表可以看到第一个字符向后移了5,第二个向后移了6,第三个向后移了7,以此类推,很容易想到变异凯撒即每个向后移的位数是前一个加1:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">str</span>=<span class="hljs-string">&quot;afZ_r9VYfScOeO_UL^RWUc&quot;</span><br><span class="hljs-comment">#第一位移动的值</span><br><span class="hljs-attribute">k</span>=5<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> str:<br>    <span class="hljs-built_in">print</span>(chr(ord(i)+k),<span class="hljs-attribute">end</span>=<span class="hljs-string">&#x27;&#x27;</span>)<br>    k+=1<br></code></pre></td></tr></table></figure><h3 id="比较两个字符串输出不同的部分"><a href="#比较两个字符串输出不同的部分" class="headerlink" title="比较两个字符串输出不同的部分"></a>比较两个字符串输出不同的部分</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">compare_strings</span>(<span class="hljs-params">str1, str2</span>):<br>    str11 = <span class="hljs-string">&quot;&quot;</span><br>    str12 = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">min</span>(<span class="hljs-built_in">len</span>(str1), <span class="hljs-built_in">len</span>(str2))):<br>        <span class="hljs-keyword">if</span> str1[i] != str2[i]:<br>            str11+=str1[i]<br>            str12+=str2[i]<br>    <span class="hljs-built_in">print</span>(str11)<br>    <span class="hljs-built_in">print</span>(str12)<br><span class="hljs-comment"># 定义两个字符串</span><br>str1 = <span class="hljs-string">&quot;第一个字符串&quot;</span><br>str2 = <span class="hljs-string">&quot;第二个字符串&quot;</span><br><br><span class="hljs-comment"># 调用函数</span><br>compare_strings(str1, str2)<br></code></pre></td></tr></table></figure><h3 id="删除所有回车"><a href="#删除所有回车" class="headerlink" title="删除所有回车"></a>删除所有回车</h3><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs haxe">text = <span class="hljs-string">&quot;你的文本\n包含\n回车&quot;</span><br><span class="hljs-keyword">new</span><span class="hljs-type">_text</span> = text.replace(<span class="hljs-string">&quot;\n&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br>print(<span class="hljs-keyword">new</span><span class="hljs-type">_text</span>)<br></code></pre></td></tr></table></figure><h2 id="在线工具包"><a href="#在线工具包" class="headerlink" title="在线工具包"></a>在线工具包</h2><ul><li><a href="https://ctf.mzy0.com/CyberChef3/#recipe=Magic(3,false,false,'')">Cyberchef的自动解密magic模式</a></li></ul><blockquote><p>自动解密base等编码，很方便</p></blockquote><ul><li><a href="https://ctf.mzy0.com/CyberChef3/">CyberChef (mzy0.com)</a></li></ul><blockquote><p>Cyberchef的主站，功能强大，非常推荐</p></blockquote><ul><li><a href="https://ctf.bugku.com/tools">Bugku在线工具</a></li></ul><blockquote><p>Bugku的在线工具包，也很齐全</p></blockquote><ul><li><a href="http://www.atoolbox.net/">一个工具箱 - 好用的在线工具都在这里！ (atoolbox.net)</a></li></ul><h2 id="Bugku在线工具包分包"><a href="#Bugku在线工具包分包" class="headerlink" title="Bugku在线工具包分包"></a>Bugku在线工具包分包</h2><h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><h4 id="base家族"><a href="#base家族" class="headerlink" title="base家族"></a>base家族</h4><p>Base100编码解码<a href="https://ctf.bugku.com/tool/base100">https://ctf.bugku.com/tool/base100</a></p><p>Base92编码解码<a href="https://ctf.bugku.com/tool/base92">https://ctf.bugku.com/tool/base92</a></p><p>Base91编码解码<a href="https://ctf.bugku.com/tool/base91">https://ctf.bugku.com/tool/base91</a></p><p>Base85编码解码<a href="https://ctf.bugku.com/tool/base85">https://ctf.bugku.com/tool/base85</a></p><p>Base64编码解码<a href="https://ctf.bugku.com/tool/base64">https://ctf.bugku.com/tool/base64</a></p><p>Base62编码解码<a href="https://ctf.bugku.com/tool/base62">https://ctf.bugku.com/tool/base62</a></p><p>Base58编码解码<a href="https://ctf.bugku.com/tool/base58">https://ctf.bugku.com/tool/base58</a></p><p>Base32编码解码<a href="https://ctf.bugku.com/tool/base32">https://ctf.bugku.com/tool/base32</a></p><p>Base16编码解码<a href="https://ctf.bugku.com/tool/base16">https://ctf.bugku.com/tool/base16</a></p><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>核心价值观编码<a href="https://ctf.bugku.com/tool/cvecode">https://ctf.bugku.com/tool/cvecode</a></p><h3 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h3><p>与佛论禅密码<a href="https://ctf.bugku.com/tool/todousharp">https://ctf.bugku.com/tool/todousharp</a></p><h4 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h4><p>Brainfuck&#x2F;OoK<a href="https://ctf.bugku.com/tool/brainfuck">https://ctf.bugku.com/tool/brainfuck</a></p><p>Sojson.v5解密<a href="https://ctf.bugku.com/tool/sojson5">https://ctf.bugku.com/tool/sojson5</a></p><p>Sojson.v4 解密<a href="https://ctf.bugku.com/tool/sojson4">https://ctf.bugku.com/tool/sojson4</a></p><h3 id="古典密码"><a href="#古典密码" class="headerlink" title="古典密码"></a>古典密码</h3><p>UUencode<a href="https://ctf.bugku.com/tool/uuencode">https://ctf.bugku.com/tool/uuencode</a></p><p>XXencode密码<a href="https://ctf.bugku.com/tool/xxencode">https://ctf.bugku.com/tool/xxencode</a></p><p>维基利亚密码<a href="https://ctf.bugku.com/tool/vigenere">https://ctf.bugku.com/tool/vigenere</a></p><p>希尔密码<a href="https://ctf.bugku.com/tool/hill">https://ctf.bugku.com/tool/hill</a></p><p>栅栏密码<a href="https://ctf.bugku.com/tool/railfence">https://ctf.bugku.com/tool/railfence</a></p><p>凯撒密码<a href="https://ctf.bugku.com/tool/caesar">https://ctf.bugku.com/tool/caesar</a></p><p>ADFGX密码<a href="https://ctf.bugku.com/tool/adfgx">https://ctf.bugku.com/tool/adfgx</a></p><h3 id="3DES-CryptoJS-TripleDes"><a href="#3DES-CryptoJS-TripleDes" class="headerlink" title="3DES&#x2F;CryptoJS&#x2F;TripleDes"></a>3DES&#x2F;CryptoJS&#x2F;TripleDes</h3><p>TripleDes(3DES)<a href="https://ctf.bugku.com/tool/tripledes">https://ctf.bugku.com/tool/tripledes</a></p><p>工具很多</p><hr><p>持续更新中……</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CTF密码学常见密码形式</title>
    <link href="/2023/10/04/CTF_crypto/"/>
    <url>/2023/10/04/CTF_crypto/</url>
    
    <content type="html"><![CDATA[<blockquote><p>声明：本文基于<a href="https://cloud.tencent.com/developer/article/1748394">https://cloud.tencent.com/developer/article/1748394</a></p><p>这篇文章进行修改，转载请注明来源，感谢支持</p><p>未写完，持续更新中……</p></blockquote><h1 id="MD5、sha1、HMAC算法、NTLM等相似加密类型"><a href="#MD5、sha1、HMAC算法、NTLM等相似加密类型" class="headerlink" title="MD5、sha1、HMAC算法、NTLM等相似加密类型"></a>MD5、sha1、HMAC算法、NTLM等相似加密类型</h1><h2 id="常用解密网站"><a href="#常用解密网站" class="headerlink" title="常用解密网站"></a>常用解密网站</h2><ul><li><a href="https://www.somd5.com/">https://www.somd5.com/</a></li><li><a href="https://pmd5.com/">https://pmd5.com/</a></li><li><a href="http://www.ttmd5.com/%EF%BC%88%E5%B8%A6%E6%89%B9%E9%87%8F%E8%A7%A3%E5%AF%86%E5%B7%A5%E5%85%B7%EF%BC%89">http://www.ttmd5.com/（带批量解密工具）</a></li></ul><h2 id="1、MD5——示例21232F297A57A5A743894A0E4A801FC3"><a href="#1、MD5——示例21232F297A57A5A743894A0E4A801FC3" class="headerlink" title="1、MD5——示例21232F297A57A5A743894A0E4A801FC3"></a>1、MD5——示例<code>21232F297A57A5A743894A0E4A801FC3</code></h2><p><strong>一般MD5值是32位由数字“0-9”和字母“a-f”所组成的字符串</strong>，如图。如果出现这个范围以外的字符说明这可能是个错误的md5值，就没必要再拿去解密了。16位值是取的是8~24位。</p><p>根据md5加密后的特征（md5加密后是16位或者32位的字符，由字母和数字组成，字母大小写统一）可以尝试md5解密。<br>（TIP：有时候我们获得到的 md5 是 16 位的，其实那 16 位是 32 位 md5 的长度，是从 32 位 md5 值来的。是将 32 位 md5 去掉前八位，去掉后八位得到的）</p><p><strong>md5的三个特征：</strong></p><ol><li><strong>确定性</strong>：一个原始数据的MD5值是唯一的，同一个原始数据不可能会计算出多个不同的MD5值。</li><li><strong>碰撞性</strong>：原始数据与其MD5值并不是一一对应的，有可能多个原始数据计算出来的MD5值是一样的，这就是碰撞。</li><li><strong>不可逆</strong>：也就是说如果告诉你一个MD5值，你是无法通过它还原出它的原始数据的，这不是你的技术不够强，这是由它的算法所决定的。因为根据第2点，一个给定的MD5值是可能对应多个原始数据的，并且理论上讲是可以对应无限多个原始数据，所有无法确定到底是由哪个原始数据产生的。</li></ol><h2 id="2、sha1——示例d033e22ae348aeb5660fc2140aec35850c4da997"><a href="#2、sha1——示例d033e22ae348aeb5660fc2140aec35850c4da997" class="headerlink" title="2、sha1——示例d033e22ae348aeb5660fc2140aec35850c4da997"></a>2、sha1——示例<code>d033e22ae348aeb5660fc2140aec35850c4da997</code></h2><p>这种加密的密文特征跟MD5差不多，只不过位数是40</p><h2 id="3、HMAC算法——示例5b696ae7da9442ead7adc24d03cedb65"><a href="#3、HMAC算法——示例5b696ae7da9442ead7adc24d03cedb65" class="headerlink" title="3、HMAC算法——示例5b696ae7da9442ead7adc24d03cedb65"></a>3、HMAC算法——示例<code>5b696ae7da9442ead7adc24d03cedb65</code></h2><p>HMAC (Hash-based Message Authentication Code) 常用于接口签名验证，这种算法就是在前两种加密的基础上引入了秘钥，而秘钥又只有传输双方才知道，所以基本上是破解不了的</p><h2 id="3、NTLM——示例209c6174da490caeb422f3fa5a7ae634"><a href="#3、NTLM——示例209c6174da490caeb422f3fa5a7ae634" class="headerlink" title="3、NTLM——示例209c6174da490caeb422f3fa5a7ae634"></a>3、NTLM——示例<code>209c6174da490caeb422f3fa5a7ae634</code></h2><p>这种加密是Windows的哈希密码，是 Windows NT 早期版本的标准安全协议。与它相同的还有Domain Cached Credentials（域哈希）。</p><h2 id="相似加密类型"><a href="#相似加密类型" class="headerlink" title="相似加密类型"></a>相似加密类型</h2><table><thead><tr><th align="left">#</th><th align="left">算法</th><th align="left">长度</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">md5</td><td align="left">32&#x2F;16</td></tr><tr><td align="left">2</td><td align="left">sha1</td><td align="left">40</td></tr><tr><td align="left">3</td><td align="left">sha256</td><td align="left">64</td></tr><tr><td align="left">4</td><td align="left">sha512</td><td align="left">128</td></tr><tr><td align="left">5</td><td align="left">adler32</td><td align="left">8</td></tr><tr><td align="left">6</td><td align="left">crc32</td><td align="left">8</td></tr><tr><td align="left">7</td><td align="left">crc32b</td><td align="left">8</td></tr><tr><td align="left">8</td><td align="left">fnv132</td><td align="left">8</td></tr><tr><td align="left">9</td><td align="left">fnv164</td><td align="left">16</td></tr><tr><td align="left">10</td><td align="left">fnv1a32</td><td align="left">8</td></tr><tr><td align="left">11</td><td align="left">fnv1a64</td><td align="left">16</td></tr><tr><td align="left">12</td><td align="left">gost</td><td align="left">64</td></tr><tr><td align="left">13</td><td align="left">gost-crypto</td><td align="left">64</td></tr><tr><td align="left">14</td><td align="left">haval128,3</td><td align="left">32</td></tr><tr><td align="left">15</td><td align="left">haval128,4</td><td align="left">32</td></tr><tr><td align="left">16</td><td align="left">haval128,5</td><td align="left">32</td></tr><tr><td align="left">17</td><td align="left">haval160,3</td><td align="left">40</td></tr><tr><td align="left">18</td><td align="left">haval160,4</td><td align="left">40</td></tr><tr><td align="left">19</td><td align="left">haval160,5</td><td align="left">40</td></tr><tr><td align="left">20</td><td align="left">haval192,3</td><td align="left">48</td></tr><tr><td align="left">21</td><td align="left">haval192,4</td><td align="left">48</td></tr><tr><td align="left">22</td><td align="left">haval192,5</td><td align="left">48</td></tr><tr><td align="left">23</td><td align="left">haval224,3</td><td align="left">56</td></tr><tr><td align="left">24</td><td align="left">haval224,4</td><td align="left">56</td></tr><tr><td align="left">25</td><td align="left">haval224,5</td><td align="left">56</td></tr><tr><td align="left">26</td><td align="left">haval256,3</td><td align="left">64</td></tr><tr><td align="left">27</td><td align="left">haval256,4</td><td align="left">64</td></tr><tr><td align="left">28</td><td align="left">haval256,5</td><td align="left">64</td></tr><tr><td align="left">29</td><td align="left">joaat</td><td align="left">8</td></tr><tr><td align="left">30</td><td align="left">md2</td><td align="left">32</td></tr><tr><td align="left">31</td><td align="left">md4</td><td align="left">32</td></tr><tr><td align="left">32</td><td align="left">ripemd128</td><td align="left">32</td></tr><tr><td align="left">33</td><td align="left">ripemd160</td><td align="left">40</td></tr><tr><td align="left">34</td><td align="left">ripemd256</td><td align="left">64</td></tr><tr><td align="left">35</td><td align="left">ripemd320</td><td align="left">80</td></tr><tr><td align="left">36</td><td align="left">sha224</td><td align="left">56</td></tr><tr><td align="left">37</td><td align="left">sha3-224</td><td align="left">56</td></tr><tr><td align="left">38</td><td align="left">sha3-256</td><td align="left">64</td></tr><tr><td align="left">39</td><td align="left">sha3-384</td><td align="left">96</td></tr><tr><td align="left">40</td><td align="left">sha3-512</td><td align="left">128</td></tr><tr><td align="left">41</td><td align="left">sha384</td><td align="left">96</td></tr><tr><td align="left">42</td><td align="left">sha512&#x2F;224</td><td align="left">56</td></tr><tr><td align="left">43</td><td align="left">sha512&#x2F;256</td><td align="left">64</td></tr><tr><td align="left">44</td><td align="left">snefru</td><td align="left">64</td></tr><tr><td align="left">45</td><td align="left">snefru256</td><td align="left">64</td></tr><tr><td align="left">46</td><td align="left">tiger128,3</td><td align="left">32</td></tr><tr><td align="left">47</td><td align="left">tiger128,4</td><td align="left">32</td></tr><tr><td align="left">48</td><td align="left">tiger160,3</td><td align="left">40</td></tr><tr><td align="left">49</td><td align="left">tiger160,4</td><td align="left">40</td></tr><tr><td align="left">50</td><td align="left">tiger192,3</td><td align="left">48</td></tr><tr><td align="left">51</td><td align="left">tiger192,4</td><td align="left">48</td></tr><tr><td align="left">52</td><td align="left">whirlpool</td><td align="left">128</td></tr><tr><td align="left">53</td><td align="left">mysql</td><td align="left">老MYSQL数据库用的，16位，且第1位和第7位必须为0-8</td></tr><tr><td align="left">54</td><td align="left">mysql5</td><td align="left">40</td></tr><tr><td align="left">55</td><td align="left">NTLM</td><td align="left">32</td></tr><tr><td align="left">56</td><td align="left">Domain Cached Credentials</td><td align="left">32</td></tr></tbody></table><h1 id="Base64、Base58、Base32、Base16、Base85、Base100等相似加密类型"><a href="#Base64、Base58、Base32、Base16、Base85、Base100等相似加密类型" class="headerlink" title="Base64、Base58、Base32、Base16、Base85、Base100等相似加密类型"></a>Base64、Base58、Base32、Base16、Base85、Base100等相似加密类型</h1><h2 id="1、Base64——示例YWRtaW4tcm9vdA"><a href="#1、Base64——示例YWRtaW4tcm9vdA" class="headerlink" title="1、Base64——示例YWRtaW4tcm9vdA=="></a>1、Base64——示例<code>YWRtaW4tcm9vdA==</code></h2><p><strong>一般情况下密文尾部都会有两个等号，明文很少的时候则没有</strong></p><p>Base64编码要求把3个8位字节（3<em>8&#x3D;24）转化为4个6位的字节（4</em>6&#x3D;24），之后在6位的前面补两个0，形成8位一个字节的形式。 如果剩下的字符不足3个字节，则用0填充，输出字符使用‘&#x3D;’，因此编码后输出的文本末尾可能会出现1或2个‘&#x3D;’，如图。</p><p>为了保证所输出的编码位可读字符，Base64制定了一个编码表，以便进行统一转换。编码表的大小为2^6&#x3D;64，这也是Base64名称的由来。</p><p><strong>Base64编码表</strong></p><table><thead><tr><th align="left">码值</th><th align="left">字符</th><th align="left">码值</th><th align="left">字符</th><th align="left">码值</th><th align="left">字符</th><th align="left">码值</th><th align="left">字符</th><th align="left">码值</th><th align="left">字符</th><th align="left">码值</th><th align="left">字符</th><th align="left">码值</th><th align="left">字符</th><th align="left">码值</th><th align="left">字符</th></tr></thead><tbody><tr><td align="left">0</td><td align="left">A</td><td align="left">8</td><td align="left">I</td><td align="left">16</td><td align="left">Q</td><td align="left">24</td><td align="left">Y</td><td align="left">32</td><td align="left">g</td><td align="left">40</td><td align="left">o</td><td align="left">48</td><td align="left">w</td><td align="left">56</td><td align="left">4</td></tr><tr><td align="left">1</td><td align="left">B</td><td align="left">9</td><td align="left">J</td><td align="left">17</td><td align="left">R</td><td align="left">25</td><td align="left">Z</td><td align="left">33</td><td align="left">h</td><td align="left">41</td><td align="left">p</td><td align="left">49</td><td align="left">x</td><td align="left">57</td><td align="left">5</td></tr><tr><td align="left">2</td><td align="left">C</td><td align="left">10</td><td align="left">K</td><td align="left">18</td><td align="left">S</td><td align="left">26</td><td align="left">a</td><td align="left">34</td><td align="left">i</td><td align="left">42</td><td align="left">q</td><td align="left">50</td><td align="left">y</td><td align="left">58</td><td align="left">6</td></tr><tr><td align="left">3</td><td align="left">D</td><td align="left">11</td><td align="left">L</td><td align="left">19</td><td align="left">T</td><td align="left">27</td><td align="left">b</td><td align="left">35</td><td align="left">j</td><td align="left">43</td><td align="left">r</td><td align="left">51</td><td align="left">z</td><td align="left">59</td><td align="left">7</td></tr><tr><td align="left">4</td><td align="left">E</td><td align="left">12</td><td align="left">M</td><td align="left">20</td><td align="left">U</td><td align="left">28</td><td align="left">c</td><td align="left">36</td><td align="left">k</td><td align="left">44</td><td align="left">s</td><td align="left">52</td><td align="left">0</td><td align="left">60</td><td align="left">8</td></tr><tr><td align="left">5</td><td align="left">F</td><td align="left">13</td><td align="left">N</td><td align="left">21</td><td align="left">V</td><td align="left">29</td><td align="left">d</td><td align="left">37</td><td align="left">l</td><td align="left">45</td><td align="left">t</td><td align="left">53</td><td align="left">1</td><td align="left">61</td><td align="left">9</td></tr><tr><td align="left">6</td><td align="left">G</td><td align="left">14</td><td align="left">O</td><td align="left">22</td><td align="left">W</td><td align="left">30</td><td align="left">e</td><td align="left">38</td><td align="left">m</td><td align="left">46</td><td align="left">u</td><td align="left">54</td><td align="left">2</td><td align="left">62</td><td align="left">+</td></tr><tr><td align="left">7</td><td align="left">H</td><td align="left">15</td><td align="left">P</td><td align="left">23</td><td align="left">X</td><td align="left">31</td><td align="left">f</td><td align="left">39</td><td align="left">n</td><td align="left">47</td><td align="left">v</td><td align="left">55</td><td align="left">3</td><td align="left">63</td><td align="left">&#x2F;</td></tr></tbody></table><h2 id="Base64使用注意问题"><a href="#Base64使用注意问题" class="headerlink" title="Base64使用注意问题"></a>Base64使用注意问题</h2><h3 id="一、Base64和URL传参问题"><a href="#一、Base64和URL传参问题" class="headerlink" title="一、Base64和URL传参问题"></a>一、Base64和URL传参问题</h3><p>标准的Base64并不适合直接放在URL里传输，因为URL编码器会把标准Base64中的“&#x2F;”和“+”字符变为形如“%XX”的形式，而这些“%”号在存入数据库时还需要再进行转换，因为ANSI SQL中已将“%”号用作通配符。</p><p>为解决此问题，可采用一种用于URL的改进Base64编码，它在末尾填充’&#x3D;’号，并将标准Base64中的“+”和“&#x2F;”分别改成了“-”和“_”，这样就免去了在URL编解码和数据库存储时所要作的转换，避免了编码信息长度在此过程中的增加，并统一了数据库、表单等处对象标识符的格式。</p><h3 id="二、Base64和URL传参问题改善"><a href="#二、Base64和URL传参问题改善" class="headerlink" title="二、Base64和URL传参问题改善"></a>二、Base64和URL传参问题改善</h3><p>另有一种用于正则表达式的改进Base64变种，它将“+”和“&#x2F;”改成了“!”和“-”，因为“+”,“*”以及前面在IRCu中用到的“[”和“]”在正则表达式中都可能具有特殊含义。</p><p>此外还有一些变种，它们将“+&#x2F;”改为“*-”或“.*”（用作编程语言中的标识符名称）或“.-”（用于XML中的Nmtoken）甚至“_:”（用于XML中的Name）。</p><h3 id="三、Base64转换后比原有的字符串长1-3"><a href="#三、Base64转换后比原有的字符串长1-3" class="headerlink" title="三、Base64转换后比原有的字符串长1&#x2F;3"></a>三、Base64转换后比原有的字符串长1&#x2F;3</h3><p>Base64要求把每三个8Bit的字节转换为四个6Bit的字节（3<em>8 &#x3D; 4</em>6 &#x3D; 24），然后把6Bit再添两位高位0，组成四个8Bit的字节，也就是说，转换后的字符串理论上将要比原来的长1&#x2F;3。</p><h3 id="四、Base64转换总结"><a href="#四、Base64转换总结" class="headerlink" title="四、Base64转换总结"></a>四、Base64转换总结</h3><p>Base64转换，最好是不要用在加密上，尤其是参数加密，很容易出问题。</p><h2 id="2、Base58——示例6tmHCZvhgfNjQu"><a href="#2、Base58——示例6tmHCZvhgfNjQu" class="headerlink" title="2、Base58——示例6tmHCZvhgfNjQu"></a>2、Base58——示例<code>6tmHCZvhgfNjQu</code></h2><p><strong>它最大的特点是没有等号</strong></p><p>Base58是用于比特币（Bitcoin）中使用的一种独特的编码方式，主要用于产生Bitcoin的钱包地址。</p><p>相比Base64，Base58不使用数字”0”，字母大写”O”，字母大写”I”，和字母小写”l”，以及”+“和”&#x2F;“符号。</p><p>比特币的Base58字母表：</p><p>123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz</p><p>简单的说：Base58一种编码方式，跟十进制，十六进制一样，不过更短更省空间。</p><p><strong>Base58的原理是什么？</strong></p><p>二进制：0和1</p><p>十进制：1到10</p><p>十六进制：十进制的基础上加上了A-F 六个字母</p><p>Base58可以理解为一种58进制。</p><p>Base58包含了阿拉伯数字、小写英文字母，大写英文字母。</p><p>但是去掉了一些容易混淆的数字和字母：0（数字0）、O（o的大写字母）、l（ L的小写字母）、I（i的大写字母）</p><h2 id="3、Base32——示例GEZDGNBVGY3TQOJQGE"><a href="#3、Base32——示例GEZDGNBVGY3TQOJQGE" class="headerlink" title="3、Base32——示例GEZDGNBVGY3TQOJQGE======"></a>3、Base32——示例<code>GEZDGNBVGY3TQOJQGE======</code></h2><p><strong>他的特点是明文超过十个后面就会有很多等号</strong></p><p>Base32使用了ASCII编码中可打印的32个字符(大写字母AZ和数字27)对任意字节数据进行编码.Base32将串起来的二进制数据按照5个二进制位分为一组，由于传输数据的单位是字节(即8个二进制位).所以分割之前的二进制位数是40的倍数(40是5和8的最小公倍数).如果不足40位，则在编码后数据补充”&#x3D;”，一个”&#x3D;”相当于一个组(5个二进制位)，编码后的数据是原先的8&#x2F;5倍. <strong>Base32编码表</strong></p><table><thead><tr><th align="left">值</th><th align="left">符号</th><th align="left">值</th><th align="left">符号</th><th align="left">值</th><th align="left">符号</th><th align="left">值</th><th align="left">符号</th></tr></thead><tbody><tr><td align="left">0</td><td align="left">A</td><td align="left">8</td><td align="left">I</td><td align="left">16</td><td align="left">Q</td><td align="left">24</td><td align="left">Y</td></tr><tr><td align="left">1</td><td align="left">B</td><td align="left">9</td><td align="left">J</td><td align="left">17</td><td align="left">R</td><td align="left">25</td><td align="left">Z</td></tr><tr><td align="left">2</td><td align="left">C</td><td align="left">10</td><td align="left">K</td><td align="left">18</td><td align="left">S</td><td align="left">26</td><td align="left">2</td></tr><tr><td align="left">3</td><td align="left">D</td><td align="left">11</td><td align="left">L</td><td align="left">19</td><td align="left">T</td><td align="left">27</td><td align="left">3</td></tr><tr><td align="left">4</td><td align="left">E</td><td align="left">12</td><td align="left">M</td><td align="left">20</td><td align="left">U</td><td align="left">28</td><td align="left">4</td></tr><tr><td align="left">5</td><td align="left">F</td><td align="left">13</td><td align="left">N</td><td align="left">21</td><td align="left">V</td><td align="left">29</td><td align="left">5</td></tr><tr><td align="left">6</td><td align="left">G</td><td align="left">14</td><td align="left">O</td><td align="left">22</td><td align="left">W</td><td align="left">30</td><td align="left">6</td></tr><tr><td align="left">7</td><td align="left">H</td><td align="left">15</td><td align="left">P</td><td align="left">23</td><td align="left">X</td><td align="left">31</td><td align="left">7</td></tr><tr><td align="left">填充</td><td align="left">&#x3D;</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr></tbody></table><p>Base32将任意字符串按照字节进行切分，并将每个字节对应的二进制值（不足8比特高位补0）串联起来，按照5比特一组进行切分，并将每组二进制值转换成十进制来对应32个可打印字符中的一个。</p><p>由于数据的二进制传输是按照8比特一组进行（即一个字节），因此Base32按5比特切分的二进制数据必须是40比特的倍数（5和8的最小公倍数）。例如输入单字节字符“%”，它对应的二进制值是“100101”，前面补两个0变成“00100101”（二进制值不足8比特的都要在高位加0直到8比特），从左侧开始按照5比特切分成两组：“00100”和“101”，后一组不足5比特，则在末尾填充0直到5比特，变成“00100”和“10100”，这两组二进制数分别转换成十进制数，通过上述表格即可找到其对应的可打印字符“E”和“U”，但是这里只用到两组共10比特，还差30比特达到40比特，按照5比特一组还需6组，则在末尾填充6个“&#x3D;”。填充“&#x3D;”符号的作用是方便一些程序的标准化运行，大多数情况下不添加也无关紧要，而且，在URL中使用时必须去掉“&#x3D;”符号。</p><p><strong>与Base64相比，Base32具有许多优点：</strong></p><ul><li>适合不区分大小写的文件系统，更利于人类口语交流或记忆。</li><li>结果可以用作文件名，因为它不包含路径分隔符 “&#x2F;”等符号。</li><li>排除了视觉上容易混淆的字符，因此可以准确的人工录入。（例如，RFC4648符号集忽略了数字“1”、“8”和“0”，因为它们可能与字母“I”，“B”和“O”混淆）。</li><li>排除填充符号“&#x3D;”的结果可以包含在URL中，而不编码任何字符。</li></ul><p>Base32也比Base16有优势：</p><ul><li>Base32比Base16占用的空间更小。（1000比特数据Base32需要200个字符，而Base16则为250个字符）</li></ul><p>Base32的缺点：</p><ul><li>Base32比Base64多占用大约20％的空间。因为Base32使用8个ASCII字符去编码原数据中的5个字节数据，而Base64是使用4个ASCII字符去编码原数据中的3个字节数据。</li></ul><h2 id="4、Base16——示例61646D696E"><a href="#4、Base16——示例61646D696E" class="headerlink" title="4、Base16——示例61646D696E"></a>4、Base16——示例<code>61646D696E</code></h2><p><strong>它的特点是没有等号并且数字要多于字母</strong></p><p>Base16编码的方式：</p><p>1.将数据(根据ASCII编码，UTF-8编码等)转成对应的二进制数，不足8比特位高位补0。然后将所有的二进制全部串起来，4个二进制位为一组，转化成对应十进制数。</p><p>2.根据十进制数值找到Base16编码表里面对应的字符。Base16是4个比特位表示一个字符，所以原始是1个字节(8个比特位)刚好可以分成两组,也就是说原先如果使用ASCII编码后的一个字符，现在转化成两个字符。数据量是原先的2倍。</p><table><thead><tr><th align="left">值</th><th align="left">编码</th><th align="left">值</th><th align="left">编码</th></tr></thead><tbody><tr><td align="left">0</td><td align="left">0</td><td align="left">8</td><td align="left">8</td></tr><tr><td align="left">1</td><td align="left">1</td><td align="left">9</td><td align="left">9</td></tr><tr><td align="left">2</td><td align="left">2</td><td align="left">10</td><td align="left">A</td></tr><tr><td align="left">3</td><td align="left">3</td><td align="left">11</td><td align="left">B</td></tr><tr><td align="left">4</td><td align="left">4</td><td align="left">12</td><td align="left">C</td></tr><tr><td align="left">5</td><td align="left">5</td><td align="left">13</td><td align="left">D</td></tr><tr><td align="left">6</td><td align="left">6</td><td align="left">14</td><td align="left">E</td></tr><tr><td align="left">7</td><td align="left">7</td><td align="left">15</td><td align="left">F</td></tr></tbody></table><p>Base16编码是一个标准的十六进制字符串（注意是字符串而不是数值），更易被人类和计算机使用，因为它并不包含任何控制字符，以及Base64和Base32中的“&#x3D;”符号。</p><h2 id="5、Base85——示例-X4hDWe0rkE-G-OdP4CT-N"><a href="#5、Base85——示例-X4hDWe0rkE-G-OdP4CT-N" class="headerlink" title="5、Base85——示例@:X4hDWe0rkE(G[OdP4CT]N#"></a>5、Base85——示例<code>@:X4hDWe0rkE(G[OdP4CT]N#</code></h2><p><strong>特点是奇怪的字符比较多，但是很难出现等号</strong></p><h2 id="6、Base100——示例👘👛👤👠👥"><a href="#6、Base100——示例👘👛👤👠👥" class="headerlink" title="6、Base100——示例👘👛👤👠👥"></a>6、Base100——示例<code>👘👛👤👠👥</code></h2><p><strong>特点就是一堆Emoji表情</strong></p><p>Base100编码&#x2F;解码工具（又名：Emoji表情符号编码&#x2F;解码），可将文本内容编码为Emoji表情符号；同时也可以将编码后的Emoji表情符号内容解码为文本。</p><h3 id="常用解密网站："><a href="#常用解密网站：" class="headerlink" title="常用解密网站："></a><strong>常用解密网站：</strong></h3><p>Base64：</p><ul><li><a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://tool.oschina.net/encrypt?type=3">tool.oschina.net</a></li><li><a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://www.sojson.com/base64.html">www.sojson.com</a></li><li><a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://base64.us/">base64.us</a></li></ul><p>Base58：<a href="https://cloud.tencent.com/developer/tools/blog-entry?target=http://www.metools.info/code/c74.html">www.metools.info</a> Base32、16：<a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://www.qqxiuzi.cn/bianma/base.php">www.qqxiuzi.cn</a> Base100：<a href="https://cloud.tencent.com/developer/tools/blog-entry?target=http://www.atoolbox.net/Tool.php?Id=936">www.atoolbox.net</a></p><h1 id="AES、DES、RC4、Rabbit、Triple-DES（3DES）"><a href="#AES、DES、RC4、Rabbit、Triple-DES（3DES）" class="headerlink" title="AES、DES、RC4、Rabbit、Triple DES（3DES）"></a>AES、DES、RC4、Rabbit、Triple DES（3DES）</h1><p>这些都是非对称性加密算法，就是引入了密钥，密文特征与Base64类似，放个图，就不多说了</p><h1 id="Unicode、HTML实体编码、16进制Unicode"><a href="#Unicode、HTML实体编码、16进制Unicode" class="headerlink" title="Unicode、HTML实体编码、16进制Unicode"></a>Unicode、HTML实体编码、16进制Unicode</h1><h2 id="1、Unicode——汉字示例这、字母示例t、数字符号示例5"><a href="#1、Unicode——汉字示例这、字母示例t、数字符号示例5" class="headerlink" title="1、Unicode——汉字示例这、字母示例t、数字符号示例5"></a>1、Unicode——汉字示例<code>这</code>、字母示例<code>t</code>、数字符号示例<code>5</code></h2><p><strong>可以说Unicode与HTML实体编码是一个东西</strong></p><p>Unicode（统一码、万国码、单一码）是一种在计算机上使用的字符编码。Unicode 是为了解决传统的字符编码方案的局限而产生的，它为每种语言中的每个字符设定了统一并且唯一的二进制编码，以满足跨语言、跨平台进行文本转换、处理的要求。1990年开始研发，1994年正式公布。</p><h2 id="2、HTML实体编码——示例与Unicode相同"><a href="#2、HTML实体编码——示例与Unicode相同" class="headerlink" title="2、HTML实体编码——示例与Unicode相同"></a>2、HTML实体编码——示例与Unicode相同</h2><p>字符实体是用一个编号写入HTML代码中来代替一个字符，在使用浏览器访问网页时会将这个编号解析还原为字符以供阅读。</p><p>这么做的目的主要有两个： １、解决HTML代码编写中的一些问题。例如需要在网页上显示小于号（&lt;）和大于号（&gt;），由于它们是HTML的预留标签，可能会被误解析。这时就需要将小于号和大于号写成字符实体： 小于号这样写：&lt; 或 &lt; 大于号这样写：&gt; 或 &gt; 前面的写法称为实体名称，后面的写法则是实体编号。<a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://www.qqxiuzi.cn/wz/zixun/1681.htm">ISO-8859-1字符集</a>（西欧语言）中两百多个字符设定了实体名称，而对于其它所有字符都可以用实体编号来代替。 ２、网页编码采用了特定语言的编码，却需要显示来自其它语言的字符。例如，网页编码采用了西欧语言ISO-8859-1，却要在网页中显示中文，这时必须将中文字符以实体形式写入HTML代码中。</p><h2 id="2、16进制Unicode——示例-u8fd9-u662f-u4e00"><a href="#2、16进制Unicode——示例-u8fd9-u662f-u4e00" class="headerlink" title="2、16进制Unicode——示例\u8fd9\u662f\u4e00"></a>2、16进制Unicode——示例<code>\u8fd9\u662f\u4e00</code></h2><h3 id="常用解密网站：-1"><a href="#常用解密网站：-1" class="headerlink" title="常用解密网站："></a><strong>常用解密网站：</strong></h3><ul><li>Unicode：<a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://www.sojson.com/unicode.html">www.sojson.com</a></li><li>16进制Unicode：<a href="https://cloud.tencent.com/developer/tools/blog-entry?target=http://www.msxindl.com/tools/unicode16.asp">www.msxindl.com</a></li><li>HTML字符实体：<a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://www.qqxiuzi.cn/bianma/zifushiti.php">www.qqxiuzi.cn</a></li></ul><h1 id="Escape编码-加密、Unescape解码-解密、-u编码、-u解码"><a href="#Escape编码-加密、Unescape解码-解密、-u编码、-u解码" class="headerlink" title="Escape编码&#x2F;加密、Unescape解码&#x2F;解密、%u编码、%u解码"></a>Escape编码&#x2F;加密、Unescape解码&#x2F;解密、%u编码、%u解码</h1><p><strong>特征：以<code>%u</code>开头</strong></p><p><strong>Escape&#x2F;Unescape加密解码&#x2F;编码解码</strong>,又叫%u编码，从以往经验看编码字符串出现有”u”，它是unicode编码，那么Escape编码采用是那一种unicode实现形式呢。其实是UTF-16BE模式。这样一来问题非常简单了。 <strong>Escape编码&#x2F;加密</strong>,就是字符对应UTF-16 16进制表示方式前面加%u。<strong>Unescape解码&#x2F;解密</strong>，就是去掉”%u”后，将16进制字符还原后，由utf-16转码到自己目标字符。如：字符“中”，UTF-16BE是：“6d93”，因此Escape是“%u6d93”，反之也一样！因为目前%字符，常用作URL编码，所以%u这样编码已经逐渐被废弃了！</p><p>基本类型只对汉字进行编码，复杂类型是所有字符均可</p><h3 id="常用解密网站：-2"><a href="#常用解密网站：-2" class="headerlink" title="常用解密网站："></a><strong>常用解密网站：</strong></h3><p><a href="https://cloud.tencent.com/developer/tools/blog-entry?target=http://web.chacuo.net/charsetescape/">http://web.chacuo.net/charsetescape/</a></p><h1 id="URL、Hex编码"><a href="#URL、Hex编码" class="headerlink" title="URL、Hex编码"></a>URL、Hex编码</h1><p><strong>这两种加密的密文是一样的，不同的是当你用url编码网站时是不会把http进行编码的，而Hex编码则全部转化了</strong></p><p>encodeURIComponent() 函数 与 encodeURI() 函数的区别 请注意 encodeURIComponent() 函数 与 encodeURI() 函数的区别之处，前者假定它的参数是 URI 的一部分（比如协议、主机名、路径或查询字符串）。因此 encodeURIComponent() 函数将转义用于分隔 URI 各个部分的标点符号。</p><h3 id="常用解密网站：-3"><a href="#常用解密网站：-3" class="headerlink" title="常用解密网站："></a><strong>常用解密网站：</strong></h3><p>Hex编码：<a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://www.107000.com/T-Hex">https://www.107000.com/T-Hex</a> URL 编码：<a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://www.sojson.com/encodeurl.html">https://www.sojson.com/encodeurl.html</a></p><h1 id="凯撒密码、维吉尼亚密码、栅栏密码基础型、栅栏密码W型"><a href="#凯撒密码、维吉尼亚密码、栅栏密码基础型、栅栏密码W型" class="headerlink" title="凯撒密码、维吉尼亚密码、栅栏密码基础型、栅栏密码W型"></a>凯撒密码、维吉尼亚密码、栅栏密码基础型、栅栏密码W型</h1><p>这几类密码原理都是移位调换加密，破解难度低</p><p><strong>常用解密网站</strong></p><ul><li>维基利亚密码<a href="https://ctf.bugku.com/tool/vigenere">https://ctf.bugku.com/tool/vigenere</a></li><li>栅栏密码<a href="https://ctf.bugku.com/tool/railfence">https://ctf.bugku.com/tool/railfence</a></li><li>凯撒密码<a href="https://ctf.bugku.com/tool/caesar">https://ctf.bugku.com/tool/caesar</a></li></ul><h2 id="1、凯撒密码——示例iodj-khoor-zrug-123"><a href="#1、凯撒密码——示例iodj-khoor-zrug-123" class="headerlink" title="1、凯撒密码——示例iodj{khoor_zrug_123}"></a>1、凯撒密码——示例<code>iodj&#123;khoor_zrug_123&#125;</code></h2><p><strong>只对字母进行加密，常用于CTF比赛中</strong></p><p>凯撒密码最早由古罗马军事统帅盖乌斯·尤利乌斯·凯撒在军队中用来传递加密信息，故称凯撒密码。此为一种位移加密手段，只对26个（大小写）字母进行位移加密，规则相当简单，容易被破解。下面是明文字母表移回3位的对比： 明文字母表 X Y Z A B C D E F G H I J K L M N O P Q R S T U V W 密文字母表 A B C D E F G H I J K L M N O P Q R S T U V W X Y Z 然后A变成D，B变成E，Z变成C。 字母最多可移动25位（按字母表）。通常为向后移动，如果您想向前移动1位，则相当于向后移动25位，位移选择为25位。</p><h2 id="2、维吉尼亚密码——示例fmcg-iglmq-wptd-123"><a href="#2、维吉尼亚密码——示例fmcg-iglmq-wptd-123" class="headerlink" title="2、维吉尼亚密码——示例fmcg{iglmq_wptd_123}"></a>2、维吉尼亚密码——示例<code>fmcg&#123;iglmq_wptd_123&#125;</code></h2><p><strong>可以说是凯撒密码的加强版，引入了密钥</strong></p><p>维吉尼亚密码，它将凯撒密码的所有26种排列放到一个表中，形成26行26列的加密字母表。此外，维吉尼亚密码必须有一个由字母组成的密钥，至少有一个字母，最多与明文字母有相同数量的字母。 在凯撒密码中，每个字母都会进行一定偏移值转换，例如，当偏移值是3时，则B被转换为E，C转换成F…。在维吉尼亚密码加密中，则是由具有不同偏移的凯撒密码构成的。 要生成密码，需要使用表格方法，此表(如图所示)包含26行字母表，每一行从上一行到左行被一位偏移。加密时使用哪一行字母表是基于密钥的，在加密过程中密钥会不断变化。 例如，假设明文为： BTTACKATDAFG 选择一个关键字并重复它以获得密钥，例如，当关键字是LIMN时，键是： LIMNLIMNLIMN 在明文中的第一个字母B，对应于密钥中的第一个字母L，使用加密字母表中的L行字母进行加密，得到第一个字母的密文M。同样，第二个明文字母是T，它用表中的I行加密，得到第二个密文B。通过类比，我们可以得到： 明文：BTTACKATDAFG 键：LIMNLIMNLIMN 密文：MBFNNSMGOIRT 解密的过程是加密的逆过程。例如，密钥的第一个字母对应的L行字母表，发现密文的第一个字母M位于B列，因此明文的第一个字母是B。密钥的第二个字母对应于I行字母表，而密文的第二个字母B位于该行的T列中，因此明文的第二个字母是T。等等，你可以得到明文。</p><p><img src="http://www.metools.info/res/imgs/weijiniyamima.png" srcset="/img/loading.gif" lazyload alt="维基利亚密码码表"></p><h2 id="3、栅栏密码基础型"><a href="#3、栅栏密码基础型" class="headerlink" title="3、栅栏密码基础型"></a>3、栅栏密码基础型</h2><p><strong>栅栏密码是按一定规则将明文内容互相调换了位置</strong></p><p>栅栏密码(Rail fence Cipher)基础型加密方式，是一种简单的移动字符位置的加密方法，首先把加密的明文分成N个一组，然后把每组的第1、第2、第M个字符连起来，形成无规律的密文字符串。</p><p>例如字符串“123456789abc”，首先将字符串分成3组，如下排列： 1234 5678 9abc 依次取每一组字符，组成加密后密文：“15926a37b48c”。</p><h2 id="4、栅栏密码W型"><a href="#4、栅栏密码W型" class="headerlink" title="4、栅栏密码W型"></a>4、栅栏密码W型</h2><p>栅栏密码W型加密算法： 栅栏密码(Rail fence Cipher)，扩展变种W型，采用先把明文类似”W”形状进行排列，然后再按栏目顺序1-N，取每一栏的所有字符值，组成加密后密文。 比如字符串“123456789”，采用栏目数为3的时，明文将采用如下排列： 1—5—9 -2-4-6-8- –3—-7– 取每一栏所有字符串，组成加密后密文：“159246837”。 W型栅栏密码加密方式，比传统型栅栏密码加密方法，算法略有增强，但目前已只能用于学习算法验证。</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h1 id="文本隐藏加密、零宽隐写"><a href="#文本隐藏加密、零宽隐写" class="headerlink" title="文本隐藏加密、零宽隐写"></a>文本隐藏加密、零宽隐写</h1><h2 id="1、文本隐藏加密"><a href="#1、文本隐藏加密" class="headerlink" title="1、文本隐藏加密"></a>1、文本隐藏加密</h2><p><strong>特征：加密过的密文会比原文的字节数多，当你按删除键的时候会发现某一处要按好多下才能把前面的字删掉</strong></p><p>原理**：它的原理是在密文中加入了不可见字符组成的编码，例如上述看似九个字符的一句话，通过<a href="https://www.qqxiuzi.cn/zh/zishu-zijieshu/">字数查询</a>可知它实际上有87个字符，多出的字符是由<a href="https://www.qqxiuzi.cn/zh/space.html">零宽空格</a>实现的编码，因为零宽空格不占据空间，所以看不出它的存在。</p><p><strong>使用</strong>：在进行文本隐藏加密时，将需要隐藏的文字写在括号中，就像这样“你好（有才华），我好喜欢你（画的画）！”，然后加密即可隐藏括号内的文字。同时可以设定一个密码，这样只有知道密码的人才能解密隐藏的文字。密码可以是数字、字母和下划线，最多九位。</p><h2 id="2、零宽隐写"><a href="#2、零宽隐写" class="headerlink" title="2、零宽隐写"></a>2、零宽隐写</h2><p><strong>特征：解密后明文与密文会分开显示，密文一般隐藏在第一个字后面，不信你试试，保证你十下之内删不完</strong></p><p>与上面文本隐藏加密的原理一样，但过程不一样</p><h3 id="常用解密网站：-4"><a href="#常用解密网站：-4" class="headerlink" title="常用解密网站："></a><strong>常用解密网站：</strong></h3><p>文本隐藏加密：<a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://www.qqxiuzi.cn/bianma/yincangjiami.php">www.qqxiuzi.cn</a> 零宽隐写：<a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://yuanfux.github.io/zero-width-web/">yuanfux.github.io</a></p><h1 id="特殊暗号类加密"><a href="#特殊暗号类加密" class="headerlink" title="特殊暗号类加密"></a>特殊暗号类加密</h1><p>这类加密都是特征性比较强的，易辨别</p><h2 id="1、猪圈密码"><a href="#1、猪圈密码" class="headerlink" title="1、猪圈密码"></a>1、猪圈密码</h2><p><strong>特点：只能对字母加解密并且符号无法复制，粘贴后会直接显示明文</strong></p><p>猪圈密码（亦称朱高密码、共济会暗号、共济会密码或共济会员密码），是一种以格子为基础的简单替代式密码，曾经是美国内战时盟军使用的密码，目前仅在密码教学、各种竞赛中使用。</p><p><a href="https://cloud.tencent.com/developer/tools/blog-entry?target=http://www.metools.info/code/c90.html">http://www.metools.info/code/c90.html</a></p><h2 id="2、与佛论禅"><a href="#2、与佛论禅" class="headerlink" title="2、与佛论禅"></a>2、与佛论禅</h2><p>**特点：就是你看不懂的佛语</p><h3 id="常用解密网站：-5"><a href="#常用解密网站：-5" class="headerlink" title="常用解密网站："></a><strong>常用解密网站：</strong></h3><p><a href="https://cloud.tencent.com/developer/tools/blog-entry?target=http://www.keyfc.net/bbs/tools/tudoucode.aspx">http://www.keyfc.net/bbs/tools/tudoucode.aspx</a></p><h2 id="3、百家姓暗号"><a href="#3、百家姓暗号" class="headerlink" title="3、百家姓暗号"></a>3、百家姓暗号</h2><p>特征：不要多说当你看到一串百家姓的时候多半就是这个暗号了</p><p>当他解密的的时候前面会多一串固定字符</p><h3 id="常用解密网站：-6"><a href="#常用解密网站：-6" class="headerlink" title="常用解密网站："></a><strong>常用解密网站：</strong></h3><ul><li><a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://www.ahz0.com/bjx.html">https://www.ahz0.com/bjx.html</a></li><li><a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://www.w168.net/anhao.html">https://www.w168.net/anhao.html</a></li><li><a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://api.dujin.org/baijiaxing/">https://api.dujin.org/baijiaxing/</a></li><li><a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://www.ddosi.com/ah.html">https://www.ddosi.com/ah.html</a></li></ul><h2 id="4、卡尔达诺栅格码"><a href="#4、卡尔达诺栅格码" class="headerlink" title="4、卡尔达诺栅格码"></a>4、卡尔达诺栅格码</h2><p><strong>特征：把明文伪装成垃圾邮件，看着这么多内容，其实我只是加密了admin</strong></p><h3 id="常用解密网站：-7"><a href="#常用解密网站：-7" class="headerlink" title="常用解密网站："></a><strong>常用解密网站：</strong></h3><p><a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://www.spammimic.com/">https://www.spammimic.com/</a></p><h2 id="5、莫尔斯电码"><a href="#5、莫尔斯电码" class="headerlink" title="5、莫尔斯电码"></a>5、莫尔斯电码</h2><p><strong>特征：密文由不规律的<code>.</code>、<code>/</code>、<code>-</code>组成</strong></p><ul><li>摩尔斯电码（Morse alphabet）（又译为摩斯电码）是一种时通时断的信号代码，这种信号代码通过不同的排列顺序来表达不同的英文字母、数字和标点符号等。</li><li>由美国人摩尔斯（Samuel Finley Breese Morse）于1837年发明，为摩尔斯电报机的发明（1835年）提供了条件。</li><li>摩尔密码加密的字符只有字符，数字，标点，不区分大小写，支持中文汉字</li><li>中文摩斯加密解密：本工具摩尔密码加密是互联网上唯一一个可以对中文进行摩斯编码的工具。</li></ul><h4 id="莫尔斯电码加密列表-Morse-Code-List"><a href="#莫尔斯电码加密列表-Morse-Code-List" class="headerlink" title="莫尔斯电码加密列表 | Morse Code List"></a>莫尔斯电码加密列表 | Morse Code List</h4><h5 id="一、26个字母的莫尔斯电码加密"><a href="#一、26个字母的莫尔斯电码加密" class="headerlink" title="一、26个字母的莫尔斯电码加密"></a>一、26个字母的莫尔斯电码加密</h5><table><thead><tr><th align="left">字符</th><th align="left">电码符号</th><th align="left">字符</th><th align="left">电码符号</th><th align="left">字符</th><th align="left">电码符号</th><th align="left">字符</th><th align="left">电码符号</th></tr></thead><tbody><tr><td align="left">A</td><td align="left">．━</td><td align="left">B</td><td align="left">━ ．．．</td><td align="left">C</td><td align="left">━ ．━ ．</td><td align="left">D</td><td align="left">━ ．．</td></tr><tr><td align="left">E</td><td align="left">．</td><td align="left">F</td><td align="left">．．━ ．</td><td align="left">G</td><td align="left">━ ━ ．</td><td align="left">H</td><td align="left">．．．．</td></tr><tr><td align="left">I</td><td align="left">．．</td><td align="left">J</td><td align="left">．━ ━ ━</td><td align="left">K</td><td align="left">━ ．━</td><td align="left">L</td><td align="left">．━ ．．</td></tr><tr><td align="left">M</td><td align="left">━ ━</td><td align="left">N</td><td align="left">━ ．</td><td align="left">O</td><td align="left">━ ━ ━</td><td align="left">P</td><td align="left">．━ ━ ．</td></tr><tr><td align="left">Q</td><td align="left">━ ━ ．━</td><td align="left">R</td><td align="left">．━ ．</td><td align="left">S</td><td align="left">．．．</td><td align="left">T</td><td align="left">━</td></tr><tr><td align="left">U</td><td align="left">．．━</td><td align="left">V</td><td align="left">．．．━</td><td align="left">W</td><td align="left">．━ ━</td><td align="left">X</td><td align="left">━ ．．━</td></tr><tr><td align="left">Y</td><td align="left">━ ．━ ━</td><td align="left">Z</td><td align="left">━ ━ ．．</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr></tbody></table><h5 id="二、数字的莫尔斯电码加密"><a href="#二、数字的莫尔斯电码加密" class="headerlink" title="二、数字的莫尔斯电码加密"></a>二、数字的莫尔斯电码加密</h5><table><thead><tr><th align="left">字符</th><th align="left">电码符号</th><th align="left">字符</th><th align="left">电码符号</th><th align="left">字符</th><th align="left">电码符号</th><th align="left">字符</th><th align="left">电码符号</th></tr></thead><tbody><tr><td align="left">0</td><td align="left">━ ━ ━ ━ ━</td><td align="left">1</td><td align="left">．━ ━ ━ ━</td><td align="left">2</td><td align="left">．．━ ━ ━</td><td align="left">3</td><td align="left">．．．━ ━</td></tr><tr><td align="left">4</td><td align="left">．．．．━</td><td align="left">5</td><td align="left">．．．．．</td><td align="left">6</td><td align="left">━ ．．．．</td><td align="left">7</td><td align="left">━ ━ ．．．</td></tr><tr><td align="left">8</td><td align="left">━ ━ ━ ．．</td><td align="left">9</td><td align="left">━ ━ ━ ━ ．</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr></tbody></table><h5 id="三、标点符号的莫尔斯电码加密"><a href="#三、标点符号的莫尔斯电码加密" class="headerlink" title="三、标点符号的莫尔斯电码加密"></a>三、标点符号的莫尔斯电码加密</h5><table><thead><tr><th align="left">字符</th><th align="left">电码符号</th><th align="left">字符</th><th align="left">电码符号</th><th align="left">字符</th><th align="left">电码符号</th><th align="left">字符</th><th align="left">电码符号</th></tr></thead><tbody><tr><td align="left">.</td><td align="left">．━ ．━ ．━</td><td align="left">:</td><td align="left">━ ━ ━ ．．．</td><td align="left">,</td><td align="left">━ ━ ．．━ ━</td><td align="left">;</td><td align="left">━ ．━ ．━ ．</td></tr><tr><td align="left">?</td><td align="left">．．━ ━ ．．</td><td align="left">&#x3D;</td><td align="left">━ ．．．━</td><td align="left">’</td><td align="left">．━ ━ ━ ━ ．</td><td align="left">&#x2F;</td><td align="left">━ ．．━ ．</td></tr><tr><td align="left">!</td><td align="left">━ ．━ ．━ ━</td><td align="left">━</td><td align="left">━ ．．．．━</td><td align="left">_</td><td align="left">．．━ ━ ．━</td><td align="left">“</td><td align="left">．━ ．．━ ．</td></tr><tr><td align="left">(</td><td align="left">━ ．━ ━ ．</td><td align="left">)</td><td align="left">━ ．━ ━ ．━</td><td align="left">$</td><td align="left">．．．━ ．．━</td><td align="left">&amp;</td><td align="left">． ．．．</td></tr><tr><td align="left">@</td><td align="left">．━ ━ ．━ ．</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr></tbody></table><h3 id="常用解密网站：-8"><a href="#常用解密网站：-8" class="headerlink" title="常用解密网站："></a><strong>常用解密网站：</strong></h3><p><a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://www.atool99.com/morse.php">https://www.atool99.com/morse.php</a></p><h2 id="6、Quoted-Printable"><a href="#6、Quoted-Printable" class="headerlink" title="6、Quoted-Printable"></a>6、Quoted-Printable</h2><p><strong>这种编码常用与邮件处理，只能对汉字进行编码，特征是&#x3D;加两个大写字母或数字组合</strong></p><h3 id="常用解密网站：-9"><a href="#常用解密网站：-9" class="headerlink" title="常用解密网站："></a><strong>常用解密网站：</strong></h3><ul><li><a href="https://cloud.tencent.com/developer/tools/blog-entry?target=http://www.mxcz.net/tools/QuotedPrintable.aspx">http://www.mxcz.net/tools/QuotedPrintable.aspx</a></li></ul><h2 id="7、ROT13"><a href="#7、ROT13" class="headerlink" title="7、ROT13"></a>7、ROT13</h2><p><strong>特征：它与凯撒密码差不多都是字母替换，你看到一句特别奇怪的语句可能就是它编码的</strong></p><p>ROT13（回转13位，Template:lang，有时中间加了个减号称作ROT-13）是一种简易的置换暗码。它是一种在网路论坛用作隐藏八卦（spoiler）、妙句、谜题解答以及某些脏话的工具，目的是逃过版主或管理员的匆匆一瞥。 ROT13被描述成「杂志字谜上下颠倒解答的Usenet对等体」（Usenet equivalent of a magazine printing the answer to a quiz upside down.）Template:cite web ROT13也是过去在古罗马开发的凯撒加密的一种变体。</p><h3 id="常用解密网站：-10"><a href="#常用解密网站：-10" class="headerlink" title="常用解密网站："></a><strong>常用解密网站：</strong></h3><p><a href="https://cloud.tencent.com/developer/tools/blog-entry?target=http://www.mxcz.net/tools/rot13.aspx">http://www.mxcz.net/tools/rot13.aspx</a></p><h2 id="8、文本加密为汉字"><a href="#8、文本加密为汉字" class="headerlink" title="8、文本加密为汉字"></a>8、文本加密为汉字</h2><p><strong>特征：将明文加密成各种繁体字后面带俩等号</strong></p><p>它不仅可以加密成汉字，还可以加密成以下几种类型</p><p>汉字 数字 字母 音乐符号 国际标 盲文 韩文 日文 文 彝文 头符号 花朵符号 俄文</p><h3 id="常用解密网站：-11"><a href="#常用解密网站：-11" class="headerlink" title="常用解密网站："></a><strong>常用解密网站：</strong></h3><p><a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://www.qqxiuzi.cn/bianma/wenbenjiami.php">https://www.qqxiuzi.cn/bianma/wenbenjiami.php</a></p><h1 id="js专用加密"><a href="#js专用加密" class="headerlink" title="js专用加密"></a>js专用加密</h1><h2 id="1、颜文字js加密"><a href="#1、颜文字js加密" class="headerlink" title="1、颜文字js加密"></a>1、颜文字js加密</h2><p><strong>特征：一堆颜文字构成的js代码，在F12中可直接解密执行</strong></p><h3 id="常用解密网站：-12"><a href="#常用解密网站：-12" class="headerlink" title="常用解密网站："></a><strong>常用解密网站：</strong></h3><p><a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://utf-8.jp/public/aaencode.html">https://utf-8.jp/public/aaencode.html</a></p><h2 id="2、jother编码"><a href="#2、jother编码" class="headerlink" title="2、jother编码"></a>2、jother编码</h2><p><strong>特征：只用<code>! + ( ) [ ] &#123; &#125;</code>这八个字符就能完成对任意字符串的编码。也可在F12中解密执行</strong></p><h3 id="常用解密网站：-13"><a href="#常用解密网站：-13" class="headerlink" title="常用解密网站："></a><strong>常用解密网站：</strong></h3><p><a href="http://tmxk.org/jother/">http://tmxk.org/jother/</a></p><h2 id="3、JSFuck编码"><a href="#3、JSFuck编码" class="headerlink" title="3、JSFuck编码"></a>3、JSFuck编码</h2><p><strong>特征：与jother很像，只是少了<code>&#123; &#125;</code></strong></p><h3 id="常用解密网站：-14"><a href="#常用解密网站：-14" class="headerlink" title="常用解密网站："></a><strong>常用解密网站：</strong></h3><p><a href="https://jsfuck.com/">https://jsfuck.com/</a></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>密码学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DS作业-4-Ch3-22网安物联网-20230927</title>
    <link href="/2023/10/04/DS_homework_4_Ch3_22wanganwulian_20230927/"/>
    <url>/2023/10/04/DS_homework_4_Ch3_22wanganwulian_20230927/</url>
    
    <content type="html"><![CDATA[<blockquote><p>声明：仅供留档查阅，仅用作起到提示引导性作用，仅用作学习交流，切勿直接照搬</p></blockquote><h1 id="Ch3-1"><a href="#Ch3-1" class="headerlink" title="Ch3-1."></a>Ch3-1.</h1><p><strong>总结栈空、栈满、队空、队满的判定条件。</strong></p><p>栈和队列是两种常见的数据结构，它们的空和满的判断条件如下：</p><p><strong>栈</strong>：</p><ul><li><strong>栈空</strong>：当栈顶指针<code>top</code>等于-1时，表示栈为空。</li><li><strong>栈满</strong>：当栈顶指针<code>top</code>等于栈的最大容量减1（假设栈的最大容量为<code>maxSize</code>）时，表示栈已满，即<code>top == maxSize - 1</code>。</li></ul><p><strong>队列</strong>：</p><ul><li><strong>队空</strong>：当队头指针<code>front</code>等于队尾指针<code>rear</code>时，表示队列为空。</li><li><strong>队满</strong>：这个判断条件取决于你如何实现队列。如果你使用数组实现循环队列，那么当<code>(rear + 1) % maxSize == front</code>时，表示队列已满（假设队列的最大容量为<code>maxSize</code>）。这里的 <code>%</code> 是取余运算，用于实现循环。</li></ul><h1 id="Ch3-2"><a href="#Ch3-2" class="headerlink" title="Ch3-2."></a>Ch3-2.</h1><p> <strong>循环队列的优点是什么？设用数组来存放循环队列，你有几种判断队满和队空的方案？</strong></p><p><strong>循环队列</strong>的优点主要有以下几点：</p><ol><li><strong>有效利用空间</strong>：在普通队列中，当队尾指针到达数组的末端时，即使数组的前端还有空闲空间，也无法再添加新的元素。而循环队列通过将队列的首尾相连，形成一个循环，使得在队尾指针到达数组末端时，可以从数组前端继续添加新的元素，从而更有效地利用了空间。</li><li><strong>避免数据迁移</strong>：在普通队列中，每次出队操作后，为了维持队列的连续性，需要将所有元素向前移动一位，这会消耗大量的时间和计算资源。而在循环队列中，通过移动队头和队尾指针来实现入队和出队操作，无需移动元素本身，因此效率更高。</li></ol><p>对于使用数组实现的循环队列，常见的判断队满和队空的方案有以下几种：</p><ol><li><strong>牺牲一个存储空间</strong>：这是最常见的方法。当<code>(rear + 1) % maxSize == front</code>时，判断队列已满；当<code>rear == front</code>时，判断队列为空。这种方法的缺点是会浪费一个数组的存储空间。</li><li><strong>使用一个标志位</strong>：除了使用<code>front</code>和<code>rear</code>两个指针外，还可以额外使用一个标志位来判断队列的状态。当入队操作后<code>rear == front</code>时，将标志位设为满；当出队操作后<code>rear == front</code>时，将标志位设为空。这种方法可以充分利用所有存储空间，但需要额外的标志位。</li><li><strong>记录元素个数</strong>：除了使用<code>front</code>和<code>rear</code>两个指针外，还可以使用一个计数器来记录队列中元素的个数。当计数器为0时，判断队列为空；当计数器等于数组大小时，判断队列已满。这种方法同样可以充分利用所有存储空间，但需要额外的计数器。</li></ol><h1 id="Ch3-3"><a href="#Ch3-3" class="headerlink" title="Ch3-3."></a>Ch3-3.</h1><p>*<em>假设以带头结点的循环单链表表示队列，并且只设一个尾指针Node</em>Rear 指向队尾结点（没有队头指针Node <em>front），试编写入队和出队算法。</em>*</p><blockquote><p>自己写的，<del>目前还在报错，修改中……</del></p><p>已完工</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span>                  <span class="hljs-comment">//引入输入输出流</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span><br>&#123;<br>    DataType data;               <span class="hljs-comment">//数据域</span><br>    Node&lt;DataType&gt;* next;       <span class="hljs-comment">//指针域</span><br>&#125;;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkList_Queue</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">LinkList_Queue</span>();                      <span class="hljs-comment">//无参构造函数，建立只有头结点的空链表</span><br>    ~<span class="hljs-built_in">LinkList_Queue</span>();                     <span class="hljs-comment">//析构函数</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Empety</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function">DataType <span class="hljs-title">Push</span><span class="hljs-params">(DataType x)</span></span>;       <span class="hljs-comment">//插入操作，第i个位置插入值为x的结点</span><br>    <span class="hljs-function">DataType <span class="hljs-title">Pop</span><span class="hljs-params">()</span></span>;            <br><span class="hljs-keyword">private</span>:<br>    Node&lt;DataType&gt;* first, * rear;           <span class="hljs-comment">//单链表的头指针</span><br>&#125;;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br>LinkList_Queue&lt;DataType&gt; ::<span class="hljs-built_in">LinkList_Queue</span>()<br>&#123;<br>    Node&lt;DataType&gt;* s = <span class="hljs-literal">nullptr</span>;<br>    s = <span class="hljs-keyword">new</span> Node&lt;DataType&gt;;    <br>    s-&gt;next = <span class="hljs-literal">nullptr</span>;<br>    first = rear = s;                      <span class="hljs-comment">//头结点的指针域置空</span><br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">DataType</span>&gt;<br>LinkList_Queue&lt;DataType&gt; :: ~<span class="hljs-built_in">LinkList_Queue</span>()<br>&#123;<br><br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-type">int</span> LinkList_Queue&lt;DataType&gt; ::<span class="hljs-built_in">Empety</span>()<br>&#123;<br>    <span class="hljs-keyword">if</span> (first == rear)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br><span class="hljs-comment">//入队算法</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br>DataType LinkList_Queue&lt;DataType&gt; ::<span class="hljs-built_in">Push</span>(DataType x)<br>&#123;<br>    Node&lt;DataType&gt;* s = <span class="hljs-literal">nullptr</span>;           <br>    s = <span class="hljs-keyword">new</span> Node&lt;DataType&gt;; <br>    s-&gt;data = x;<br>    s-&gt;next = <span class="hljs-literal">nullptr</span>;<br>    rear-&gt;next = s;<br>    rear = s;<br>    <span class="hljs-keyword">return</span> x;<br>&#125;<br><br><span class="hljs-comment">//出队算法</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br>DataType LinkList_Queue&lt;DataType&gt; ::<span class="hljs-built_in">Pop</span>()<br>&#123;<br>    <span class="hljs-keyword">if</span> (first == rear )<br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;队空&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        DataType x;<br>        Node&lt;DataType&gt;* p = first-&gt;next;<br>        x = p-&gt;data;<br>        first-&gt;next = p-&gt;next;<br>        <span class="hljs-keyword">if</span> (rear == p)  <span class="hljs-comment">// 如果队列中只有一个元素</span><br>            rear = first;  <span class="hljs-comment">// 则需要更新尾指针</span><br>        <span class="hljs-keyword">delete</span> p;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    LinkList_Queue&lt;<span class="hljs-type">int</span>&gt; s = &#123;&#125;;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">0</span>;<br>    s.<span class="hljs-built_in">Push</span>(<span class="hljs-number">1</span>);<br>    s.<span class="hljs-built_in">Push</span>(<span class="hljs-number">2</span>);<br>    s.<span class="hljs-built_in">Push</span>(<span class="hljs-number">3</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;已入队1,2,3&quot;</span> &lt;&lt; endl;<br>    cin &gt;&gt; a;<br>    cout &lt;&lt; <span class="hljs-string">&quot;已入队：&quot;</span> &lt;&lt; s.<span class="hljs-built_in">Push</span>(a) &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;出队一次&quot;</span>&lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;已出队：&quot;</span> &lt;&lt; s.<span class="hljs-built_in">Pop</span>() &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;已出队：&quot;</span> &lt;&lt; s.<span class="hljs-built_in">Pop</span>() &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;已出队：&quot;</span> &lt;&lt; s.<span class="hljs-built_in">Pop</span>() &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;已出队：&quot;</span> &lt;&lt; s.<span class="hljs-built_in">Pop</span>() &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>AI生成的，不想做了，谨慎查阅</p></blockquote><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs xl">#include &lt;stdio.h&gt;<br>#include &lt;stdlib.h&gt;<br><br><span class="hljs-comment">// 定义结点</span><br>typedef struct Node &#123;<br>    int <span class="hljs-keyword">data</span>;<br>    struct Node* next;<br>&#125; Node;<br><br><span class="hljs-comment">// 定义队列</span><br>typedef struct Queue &#123;<br>    Node* rear;<br>&#125; Queue;<br><br><span class="hljs-comment">// 初始化队列</span><br>Queue* initQueue() &#123;<br>    Node* head = (Node*)malloc(sizeof(Node));  <span class="hljs-comment">// 创建头结点</span><br>    <span class="hljs-function"><span class="hljs-title">head</span>-&gt;</span>next = head;  <span class="hljs-comment">// 循环链表</span><br>    Queue* queue = (Queue*)malloc(sizeof(Queue));<br>    <span class="hljs-function"><span class="hljs-title">queue</span>-&gt;</span>rear = head;  <span class="hljs-comment">// 尾指针指向头结点</span><br>    return queue;<br>&#125;<br><br><span class="hljs-comment">// 入队操作</span><br>void enQueue(Queue* queue, int <span class="hljs-keyword">data</span>) &#123;<br>    Node* newNode = (Node*)malloc(sizeof(Node));<br>    <span class="hljs-function"><span class="hljs-title">newNode</span>-&gt;</span><span class="hljs-keyword">data</span> = <span class="hljs-keyword">data</span>;<br>    <span class="hljs-function"><span class="hljs-title">newNode</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">next</span> = queue-&gt;</span><span class="hljs-function"><span class="hljs-title">rear</span>-&gt;</span>next;  <span class="hljs-comment">// 新结点指向头结点</span><br>    <span class="hljs-function"><span class="hljs-title">queue</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">rear</span>-&gt;</span>next = newNode;  <span class="hljs-comment">// 尾结点指向新结点</span><br>    <span class="hljs-function"><span class="hljs-title">queue</span>-&gt;</span>rear = newNode;  <span class="hljs-comment">// 更新尾指针</span><br>&#125;<br><br><span class="hljs-comment">// 出队操作</span><br>int deQueue(Queue* queue) &#123;<br>    <span class="hljs-function"><span class="hljs-title">if</span> (queue-&gt;</span><span class="hljs-function"><span class="hljs-title">rear</span> == queue-&gt;</span><span class="hljs-function"><span class="hljs-title">rear</span>-&gt;</span>next) &#123;<br>        printf(<span class="hljs-string">&quot;队列为空，无法出队。\n&quot;</span>);<br>        return -<span class="hljs-number">1</span>;<br>    &#125;<br>    N<span class="hljs-function"><span class="hljs-title">ode</span>* head = queue-&gt;</span><span class="hljs-function"><span class="hljs-title">rear</span>-&gt;</span>next;  <span class="hljs-comment">// 头结点</span><br>    N<span class="hljs-function"><span class="hljs-title">ode</span>* firstNode = head-&gt;</span>next;  <span class="hljs-comment">// 第一个结点（即要出队的结点）</span><br>    <span class="hljs-function"><span class="hljs-title">int</span> <span class="hljs-keyword">data</span> = firstNode-&gt;</span><span class="hljs-keyword">data</span>;<br>    <span class="hljs-function"><span class="hljs-title">head</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">next</span> = firstNode-&gt;</span>next;  <span class="hljs-comment">// 头结点指向第二个结点</span><br>    <span class="hljs-function"><span class="hljs-title">if</span> (firstNode == queue-&gt;</span>rear) &#123;  <span class="hljs-comment">// 如果只有一个元素，出队后更新尾指针</span><br>        <span class="hljs-function"><span class="hljs-title">queue</span>-&gt;</span>rear = head;<br>    &#125;<br>    free(firstNode);  <span class="hljs-comment">// 释放出队的结点内存</span><br>    return <span class="hljs-keyword">data</span>;<br>&#125;<br><br>int main() &#123;<br>    Queue* queue = initQueue();<br>    <br><br>    printf(<span class="hljs-string">&quot;入队：\n&quot;</span>);<br>    <span class="hljs-keyword">for</span> (int i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;<br>        printf(<span class="hljs-string">&quot;%d &quot;</span>, i);<br>        enQueue(queue, i);<br>    &#125;<br>    <br>    printf(<span class="hljs-string">&quot;\n出队：\n&quot;</span>);<br>    <span class="hljs-keyword">for</span> (int i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;<br>        printf(<span class="hljs-string">&quot;%d &quot;</span>, deQueue(queue));<br>    &#125;<br>    <br>    return <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>数据结构作业</category>
      
      <category>课后作业</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构作业</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DS作业-3-Ch2-22网安物联网-20230927</title>
    <link href="/2023/10/04/DS_homework_3_Ch2_22wanganwulian_20230927/"/>
    <url>/2023/10/04/DS_homework_3_Ch2_22wanganwulian_20230927/</url>
    
    <content type="html"><![CDATA[<blockquote><p>声明：仅供留档查阅，仅用作起到提示引导性作用，仅用作学习交流，切勿直接照搬</p></blockquote><h1 id="作业Ch2-1"><a href="#作业Ch2-1" class="headerlink" title="作业Ch2-1:"></a>作业Ch2-1:</h1><p><strong>总结单链表中引入头节点的原因？</strong></p><p>为了使操作方便，加了头结点之后，无论单链表是否为空，头指针始终指向头节点，因此空表和非空表的处理也统一了</p><h1 id="作业Ch2-2"><a href="#作业Ch2-2" class="headerlink" title="作业Ch2-2:"></a>作业Ch2-2:</h1><p><strong>编程题目，逆置一个单链表为一个新表，编制源代码并运行。</strong></p><blockquote><p><del>没用ai跑，自己写的，实际上原理就是头插法和尾插法，两个方法的顺序是相反的</del></p><p>重做了，原来的做法不符题意，虽然功能是一样的，新做法的思路↓</p></blockquote><blockquote><p><code>nizhi</code>函数的原理是通过改变链表中节点的链接顺序来实现链表的反转。</p><p>具体步骤如下：</p><ol><li>初始化：创建一个新的空链表（只有头节点，头节点的<code>next</code>指针为<code>nullptr</code>）。</li><li>遍历原链表：从原链表的第一个节点开始，每次处理一个节点。</li><li>插入新链表：将当前处理的节点插入到新链表的头节点之后。具体操作是先将当前节点的<code>next</code>指针指向新链表的第一个节点，然后再将头节点的<code>next</code>指针指向当前节点。</li><li>移动到下一个节点：保存下一个要处理的节点的位置，然后将当前节点从原链表中断开（也就是将当前节点的<code>next</code>指针置为<code>nullptr</code>），最后移动到下一个要处理的节点。</li><li>重复步骤3和4，直到原链表中所有的节点都被处理完毕。</li></ol><p>这样，原链表中的节点就被逐个移动到了新链表中，并且在新链表中的顺序与在原链表中的顺序相反，从而实现了链表的反转。这个过程中，我们没有创建任何新的节点，只是改变了已有节点之间的链接关系。因此，这个函数的时间复杂度为O(n)，空间复杂度为O(1)。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span><br>&#123;<br>    DataType data;<br>    Node&lt;DataType&gt;* next;<br>&#125;;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">linklist</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">linklist</span>();<br>    <span class="hljs-built_in">linklist</span>(DataType a[], <span class="hljs-type">int</span> n);<br>    ~<span class="hljs-built_in">linklist</span>();<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">nizhi</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span></span>;<br><span class="hljs-keyword">private</span>:<br>    Node&lt;DataType&gt;* first;<span class="hljs-comment">//头结点</span><br>&#125;;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> DataType&gt;<br>linklist&lt;DataType&gt;::<span class="hljs-built_in">linklist</span>()<br>&#123;<br>    first = <span class="hljs-keyword">new</span> Node&lt;DataType&gt;;<br>    first-&gt;next = <span class="hljs-literal">nullptr</span>;<span class="hljs-comment">//头结点指针置空</span><br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br>linklist&lt;DataType&gt;::<span class="hljs-built_in">linklist</span>(DataType a[], <span class="hljs-type">int</span> n)<br>&#123;<br>    first = <span class="hljs-keyword">new</span> Node&lt;DataType&gt;;              <span class="hljs-comment">// 生成头结点</span><br>    Node&lt;DataType&gt;* r = first, * s = <span class="hljs-literal">nullptr</span>; <span class="hljs-comment">// 尾指针初始化</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        s = <span class="hljs-keyword">new</span> Node&lt;DataType&gt;;<br>        s-&gt;data = a[i];<br>        r-&gt;next = s;<br>        r = s; <span class="hljs-comment">// 将结点s插入到终端结点之后</span><br>    &#125;<br>    r-&gt;next = <span class="hljs-literal">nullptr</span>; <span class="hljs-comment">// 单链表建立完毕，将终端结点的指针域置空</span><br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-type">void</span> linklist&lt;DataType&gt;::<span class="hljs-built_in">nizhi</span>()<br>&#123;<br>    Node&lt;DataType&gt;* p = first-&gt;next;<br>    Node&lt;DataType&gt;* q;<br>    first-&gt;next = <span class="hljs-literal">nullptr</span>;<br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">nullptr</span>)<br>    &#123;<br>        q = p-&gt;next; <span class="hljs-comment">// 保存下一个节点的位置</span><br>        p-&gt;next = first-&gt;next; <span class="hljs-comment">// 将当前节点插入到头节点之后</span><br>        first-&gt;next = p;<br>        p = q; <span class="hljs-comment">// 移动到下一个节点</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-type">void</span> linklist&lt;DataType&gt;::<span class="hljs-built_in">display</span>()<br>&#123;<br>    Node&lt;DataType&gt;* p = first-&gt;next;<br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">nullptr</span>)<br>    &#123;<br>        cout &lt;&lt; p-&gt;data &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span>;<br>        p = p-&gt;next;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">DataType</span>&gt;<br>linklist&lt;DataType&gt;::~<span class="hljs-built_in">linklist</span>()<br>&#123;<br>    Node&lt;DataType&gt;* q = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">while</span> (first != <span class="hljs-literal">NULL</span>) <span class="hljs-comment">// 释放单链表的每一个结点的存储空间</span><br>    &#123;<br>        q = first;           <span class="hljs-comment">// 暂存被释放结点</span><br>        first = first-&gt;next; <span class="hljs-comment">// first指向被释放结点的下一个结点</span><br>        <span class="hljs-keyword">delete</span> q;<br>    &#125;<br>&#125;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">                   _ooOoo_</span><br><span class="hljs-comment">                  o8888888o</span><br><span class="hljs-comment">                  88&quot; . &quot;88</span><br><span class="hljs-comment">                  (| -_- |)</span><br><span class="hljs-comment">                  O\  =  /O</span><br><span class="hljs-comment">               ____/`---&#x27;\____</span><br><span class="hljs-comment">            .&#x27;  \\|     |//  `.</span><br><span class="hljs-comment">            /  \\|||  :  |||//  \</span><br><span class="hljs-comment">           /  _||||| -:- |||||-  \</span><br><span class="hljs-comment">           |   | \\\  -  /// |   |</span><br><span class="hljs-comment">           | \_|  &#x27;&#x27;\---/&#x27;&#x27;  |   |</span><br><span class="hljs-comment">           \  .-\__  `-`  ___/-. /</span><br><span class="hljs-comment">         ___`. .&#x27;  /--.--\  `. . __</span><br><span class="hljs-comment">      .&quot;&quot; &#x27;&lt;  `.___\_&lt;|&gt;_/___.&#x27;  &gt;&#x27;&quot;&quot;.</span><br><span class="hljs-comment">     | | :  `- \`.;`\ _ /`;.`/ - ` : | |</span><br><span class="hljs-comment">     \  \ `-.   \_ __\ /__ _/   .-` /  /</span><br><span class="hljs-comment">======`-.____`-.___\_____/___.-`____.-&#x27;======</span><br><span class="hljs-comment">                   `=---=&#x27;</span><br><span class="hljs-comment">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span><br><span class="hljs-comment">    佛祖保佑       永不宕机     永无BUG</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> maxsize;<br>    cout &lt;&lt; <span class="hljs-string">&quot;请输入你要创建数组的大小&quot;</span> &lt;&lt; endl;<br>    cin &gt;&gt; maxsize;<br>    <span class="hljs-type">int</span>* a = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[maxsize];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; maxsize; i++)<br>    &#123;<br>        a[i] = i + <span class="hljs-number">1</span>;<br>    &#125;<br>    cout &lt;&lt; <span class="hljs-string">&quot;已创建一个最大长度&quot;</span> &lt;&lt; maxsize &lt;&lt; <span class="hljs-string">&quot;的链表&quot;</span> &lt;&lt; endl;<br>    linklist&lt;<span class="hljs-type">int</span>&gt; L&#123; a, maxsize &#125;;<br>    cout &lt;&lt; <span class="hljs-string">&quot;执行遍历链表&quot;</span> &lt;&lt; endl;<br>    L.<span class="hljs-built_in">display</span>();<br>    cout &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;下面逆置最大长度为&quot;</span> &lt;&lt; maxsize &lt;&lt; <span class="hljs-string">&quot;的链表&quot;</span> &lt;&lt; endl;<br>    L.<span class="hljs-built_in">nizhi</span>();<br>    L.<span class="hljs-built_in">display</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="作业Ch2-3"><a href="#作业Ch2-3" class="headerlink" title="作业Ch2-3:"></a>作业Ch2-3:</h1><p><strong>教材P66, 2(1)题：请说明顺序表和单链表有何优缺点？并分析不同情况下采用何种存储结构更合适？</strong></p><p>顺序表的优点:① 无需为表示表中元素之间的逻辑关系而增加额外的存储空间;② 可以快速地存取表中任一位置的元素(即随机存取)。</p><p>顺序表的缺点:① 插入和删除操作需移动大量元素;② 表的容量难以确定;③ 造成存储空间的“碎片”。</p><p>单链表的优点:① 不必事先知道线性表的长度;② 插入和删除元素时只需修改指针,不用移动元素。</p><p>单链表的缺点:① 指针的结构性开销;② 存取表中任意元素不方便,只能进行顺序存取。</p><p>⑴ 应选用顺序存储结构。因为顺序表是随机存取结构,单链表是顺序存取结构。本题很少进行插入和删除操作,所以空间变化不大,且需要快速存取,所以应选用顺序存储结构。</p><p>⑵ 应选用链接存储结构。链表容易实现表容量的扩充,适合表的长度动态发生变化。⑶ 应选用链接存储结构。因为一个城市的设计和规划涉及活动很多,需要经常修改、扩充和删除各种信息, 才能适应不断发展的需要。而顺序表的插入、删除的效率低,故不合适。</p><h1 id="作业Ch2-4"><a href="#作业Ch2-4" class="headerlink" title="作业Ch2-4:"></a>作业Ch2-4:</h1><p><strong>算法设计：在顺序表中删除所有元素值为x的元素，要求空间复杂度为O(1)，给出算法伪代码和源代码。</strong></p><blockquote><p>ai加自己写的，有两个方法，第一个方法比较好一些</p></blockquote><h2 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h2><h3 id="法一"><a href="#法一" class="headerlink" title="法一"></a>法一</h3><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs haskell">输入：顺序表<span class="hljs-class"><span class="hljs-keyword">data</span>，元素x</span><br>输出：删除所有值为x的元素后的顺序表<br><br><span class="hljs-number">1</span>. 初始化一个新的索引j为<span class="hljs-number">0</span><br><span class="hljs-number">2</span>. 对于顺序表<span class="hljs-class"><span class="hljs-keyword">data</span>中的每个元素，执行以下操作：</span><br>   <span class="hljs-number">1</span>. 如果当前元素不等于x，则将当前元素复制到j位置，并将j增加<span class="hljs-number">1</span><br><span class="hljs-number">3</span>. 将顺序表<span class="hljs-class"><span class="hljs-keyword">data</span>的长度设置为j</span><br></code></pre></td></tr></table></figure><h3 id="法二"><a href="#法二" class="headerlink" title="法二"></a>法二</h3><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs haskell">输入：顺序表<span class="hljs-class"><span class="hljs-keyword">data</span>，元素x</span><br>输出：删除所有值为x的元素后的顺序表<br><br><span class="hljs-number">1</span>. 对于顺序表<span class="hljs-class"><span class="hljs-keyword">data</span>中的每个元素，执行以下操作：</span><br>   <span class="hljs-number">1</span>. 如果当前元素等于x，则执行以下操作：<br>      <span class="hljs-number">1</span>. 对于从当前元素到倒数第二个元素的每个元素，将下一个元素复制到当前位置<br>      <span class="hljs-number">2</span>. 将顺序表<span class="hljs-class"><span class="hljs-keyword">data</span>的长度减1</span><br>      <span class="hljs-number">3</span>. 将当前索引减<span class="hljs-number">1</span>（因为删除了元素）<br></code></pre></td></tr></table></figure><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;random&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;chrono&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MaxSize = <span class="hljs-number">100</span>;            <span class="hljs-comment">//100只是示例性的数据，根据实际问题具体定义</span><br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">DataType</span>&gt;          <span class="hljs-comment">//定义模板类SeqList</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SeqList</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">SeqList</span>();                     <span class="hljs-comment">//无参构造函数，建立空的顺序表</span><br>    <span class="hljs-built_in">SeqList</span>(DataType a[], <span class="hljs-type">int</span> n);      <span class="hljs-comment">//有参构造函数，建立长度为n的顺序表</span><br>    ~<span class="hljs-built_in">SeqList</span>();                    <span class="hljs-comment">//析构函数</span><br>    <span class="hljs-function">DataType <span class="hljs-title">Delete</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span></span>;            <span class="hljs-comment">//删除操作，删除第i个元素</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PrintList</span><span class="hljs-params">()</span></span>;                 <span class="hljs-comment">//遍历操作，按序号依次输出各元素</span><br><span class="hljs-keyword">private</span>:<br>    DataType data[MaxSize];          <span class="hljs-comment">//存放数据元素的数组</span><br>    <span class="hljs-type">int</span> length;                       <span class="hljs-comment">//线性表的长度</span><br>&#125;;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">DataType</span>&gt;<br>DataType SeqList&lt;DataType&gt; ::<span class="hljs-built_in">Delete</span>(<span class="hljs-type">int</span> x)<br>&#123;   <span class="hljs-comment">/*这段代码遍历顺序表，每次遇到值不等于x的元素时，就将其复制到新的位置。最后，它将顺序表的长度设置为新的长度。这个算法的空间复杂度是O(1)，因为它只使用了固定数量的额外空间。*/</span><br>    <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; length; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (data[i] != x)<br>        &#123;<br>            data[j] = data[i];<br>            j++;<br>        &#125;<br>        <br>    &#125;<br>    length = j;<br>    <span class="hljs-keyword">return</span> x;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    这个有两种做法，还有一种是直接删除。每次遇到值为x的元素时，就将其删除。但是，这种方法的时间复杂度是O(n^2)，因为每次删除操作都需要O(n)的时间。</span><br><span class="hljs-comment">    for (int i = 0; i &lt; length; i++)</span><br><span class="hljs-comment">    &#123;</span><br><span class="hljs-comment">        if (data[i] == x)</span><br><span class="hljs-comment">        &#123;</span><br><span class="hljs-comment">            for (int j = i; j &lt; length - 1; j++)</span><br><span class="hljs-comment">            &#123;</span><br><span class="hljs-comment">                data[j] = data[j + 1];</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">            length--;</span><br><span class="hljs-comment">            i--;  // 因为删除了元素，所以需要将索引减1</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">    &#125;*/</span><br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">DataType</span>&gt;<br>SeqList&lt;DataType&gt; :: ~<span class="hljs-built_in">SeqList</span>()<br>&#123;<br><br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">DataType</span>&gt;<br>SeqList&lt;DataType&gt; ::<span class="hljs-built_in">SeqList</span>()<br>&#123;<br>    length = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">DataType</span>&gt;<br>SeqList&lt;DataType&gt; ::<span class="hljs-built_in">SeqList</span>(DataType a[], <span class="hljs-type">int</span> n)<br>&#123;<br>    <span class="hljs-keyword">if</span> (n &gt; MaxSize)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-string">&quot;参数非法&quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        data[i] = a[i];<br>    length = n;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">DataType</span>&gt;<br><span class="hljs-type">void</span> SeqList&lt;DataType&gt; ::<span class="hljs-built_in">PrintList</span>()<br>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; length; i++)<br>        cout &lt;&lt; data[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;                   <span class="hljs-comment">//依次输出线性表的元素值</span><br>&#125;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">                   _ooOoo_</span><br><span class="hljs-comment">                  o8888888o</span><br><span class="hljs-comment">                  88&quot; . &quot;88</span><br><span class="hljs-comment">                  (| -_- |)</span><br><span class="hljs-comment">                  O\  =  /O</span><br><span class="hljs-comment">               ____/`---&#x27;\____</span><br><span class="hljs-comment">            .&#x27;  \\|     |//  `.</span><br><span class="hljs-comment">            /  \\|||  :  |||//  \</span><br><span class="hljs-comment">           /  _||||| -:- |||||-  \</span><br><span class="hljs-comment">           |   | \\\  -  /// |   |</span><br><span class="hljs-comment">           | \_|  &#x27;&#x27;\---/&#x27;&#x27;  |   |</span><br><span class="hljs-comment">           \  .-\__  `-`  ___/-. /</span><br><span class="hljs-comment">         ___`. .&#x27;  /--.--\  `. . __</span><br><span class="hljs-comment">      .&quot;&quot; &#x27;&lt;  `.___\_&lt;|&gt;_/___.&#x27;  &gt;&#x27;&quot;&quot;.</span><br><span class="hljs-comment">     | | :  `- \`.;`\ _ /`;.`/ - ` : | |</span><br><span class="hljs-comment">     \  \ `-.   \_ __\ /__ _/   .-` /  /</span><br><span class="hljs-comment">======`-.____`-.___\_____/___.-`____.-&#x27;======</span><br><span class="hljs-comment">                   `=---=&#x27;</span><br><span class="hljs-comment">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span><br><span class="hljs-comment">    佛祖保佑       永不宕机     永无BUG</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 使用当前时间作为随机数生成器的种子</span><br>    <span class="hljs-type">unsigned</span> seed = chrono::system_clock::<span class="hljs-built_in">now</span>().<span class="hljs-built_in">time_since_epoch</span>().<span class="hljs-built_in">count</span>();<br>    <span class="hljs-comment">// 创建一个随机数生成器</span><br>    <span class="hljs-function">default_random_engine <span class="hljs-title">generator</span><span class="hljs-params">(seed)</span></span>;<br>    <span class="hljs-comment">// 创建一个均匀分布的随机数生成器，范围从1到100</span><br>    <span class="hljs-function">uniform_int_distribution&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">distribution</span><span class="hljs-params">(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>)</span></span>;<br>    <span class="hljs-type">int</span> maxsize;<br>    cout &lt;&lt; <span class="hljs-string">&quot;请输入你要创建表的大小&quot;</span> &lt;&lt; endl;<br>    cin &gt;&gt; maxsize;<br>    <span class="hljs-type">int</span>* a = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[maxsize];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; maxsize; i++)<br>    &#123;<br>        a[i] = <span class="hljs-built_in">distribution</span>(generator);<span class="hljs-comment">//赋值</span><br>    &#125;<br>    cout &lt;&lt; <span class="hljs-string">&quot;已创建一个最大长度&quot;</span> &lt;&lt; maxsize &lt;&lt; <span class="hljs-string">&quot;的顺序表&quot;</span> &lt;&lt; endl;<br>    SeqList&lt;<span class="hljs-type">int</span>&gt; L&#123; a, maxsize &#125;;<br>    cout &lt;&lt; <span class="hljs-string">&quot;*******执行遍历链表******&quot;</span> &lt;&lt; endl;<br>    L.<span class="hljs-built_in">PrintList</span>();<br>    cout &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;**************************&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;请输入你要删除的数据&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-type">int</span> del;<br>    cin &gt;&gt; del;<br>    cout &lt;&lt; <span class="hljs-string">&quot;删除的数据是&quot;</span> &lt;&lt; L.<span class="hljs-built_in">Delete</span>(del) &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;*******执行遍历链表******&quot;</span> &lt;&lt; endl;<br>    L.<span class="hljs-built_in">PrintList</span>();<br>    cout &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;**************************&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="作业Ch2-5-算法设计：已知单链表中各结点的元素值为整型且递增有序，设计算法删除链表中大于mink且小于maxk的所有元素，并释放被删结点的存储空间，给出算法伪代码和源代码。"><a href="#作业Ch2-5-算法设计：已知单链表中各结点的元素值为整型且递增有序，设计算法删除链表中大于mink且小于maxk的所有元素，并释放被删结点的存储空间，给出算法伪代码和源代码。" class="headerlink" title="作业Ch2-5:算法设计：已知单链表中各结点的元素值为整型且递增有序，设计算法删除链表中大于mink且小于maxk的所有元素，并释放被删结点的存储空间，给出算法伪代码和源代码。"></a>作业Ch2-5:算法设计：已知单链表中各结点的元素值为整型且递增有序，设计算法删除链表中大于mink且小于maxk的所有元素，并释放被删结点的存储空间，给出算法伪代码和源代码。</h1><blockquote><p>这个也是借助ai加自己写的，就加了一个条件判断，另外还需要加强一下头插法尾插法的算法，不熟练</p></blockquote><h2 id="伪代码-1"><a href="#伪代码-1" class="headerlink" title="伪代码"></a>伪代码</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-number">1</span>. 定义一个模板函数Delete，接受两个参数mink和maxk。<br><span class="hljs-number">2</span>. 初始化两个指针<span class="hljs-selector-tag">p</span>和<span class="hljs-selector-tag">q</span>，其中<span class="hljs-selector-tag">p</span>指向链表的第一个节点，<span class="hljs-selector-tag">q</span>指向头节点。<br><span class="hljs-number">3</span>. 进入一个while循环，条件是<span class="hljs-selector-tag">p</span>不为空。<br>   - 如果<span class="hljs-selector-tag">p</span>指向的节点的数据在mink和maxk之间，则删除该节点，并将<span class="hljs-selector-tag">q</span>的next指针指向<span class="hljs-selector-tag">p</span>的next节点。然后更新<span class="hljs-selector-tag">p</span>为<span class="hljs-selector-tag">q</span>的next节点。<br>   - 如果<span class="hljs-selector-tag">p</span>指向的节点的数据不在mink和maxk之间，则将<span class="hljs-selector-tag">q</span>更新为<span class="hljs-selector-tag">p</span>，然后将<span class="hljs-selector-tag">p</span>更新为<span class="hljs-selector-tag">p</span>的next节点。<br><span class="hljs-number">4</span>. 循环结束后，所有在mink和maxk之间的节点都被删除。<br></code></pre></td></tr></table></figure><h2 id="源代码-1"><a href="#源代码-1" class="headerlink" title="源代码"></a>源代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span>                  <span class="hljs-comment">//引入输入输出流</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;random&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;chrono&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span><br>&#123;<br>    DataType data;               <span class="hljs-comment">//数据域</span><br>    Node&lt;DataType&gt;* next;       <span class="hljs-comment">//指针域</span><br>&#125;;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkList</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">LinkList</span>();                      <span class="hljs-comment">//无参构造函数，建立只有头结点的空链表</span><br>    <span class="hljs-built_in">LinkList</span>(DataType a[], <span class="hljs-type">int</span> n);       <span class="hljs-comment">//有参构造函数，建立有n个元素的单链表</span><br>    ~<span class="hljs-built_in">LinkList</span>();                     <span class="hljs-comment">//析构函数</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Delete</span><span class="hljs-params">(<span class="hljs-type">int</span> mink, <span class="hljs-type">int</span> maxk)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PrintList</span><span class="hljs-params">()</span></span>;                  <span class="hljs-comment">//遍历操作，按序号依次输出各元素</span><br><br><span class="hljs-keyword">private</span>:<br>    Node&lt;DataType&gt;* first;           <span class="hljs-comment">//单链表的头指针</span><br>&#125;; <br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-type">void</span> LinkList&lt;DataType&gt; ::<span class="hljs-built_in">Delete</span>(<span class="hljs-type">int</span> mink,<span class="hljs-type">int</span> maxk)<br>&#123;<br>    DataType x;<br>    Node&lt;DataType&gt;* p = first-&gt;next, * q = first;        <span class="hljs-comment">//工作指针p指向头结点</span><br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">nullptr</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> ((p-&gt;data&lt;maxk) &amp;&amp;(p-&gt;data&gt;mink) )<br>        &#123;<br>            q-&gt;next = p-&gt;next;<br>            <span class="hljs-keyword">delete</span> p;<br>            p = q-&gt;next;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            q = p;<br>            p = p-&gt;next;<br>            <br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br>LinkList&lt;DataType&gt; ::<span class="hljs-built_in">LinkList</span>()<br>&#123;<br>    first = <span class="hljs-keyword">new</span> Node&lt;DataType&gt;;              <span class="hljs-comment">//生成头结点</span><br>    first-&gt;next = <span class="hljs-literal">nullptr</span>;                      <span class="hljs-comment">//头结点的指针域置空</span><br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">DataType</span>&gt;<br>LinkList&lt;DataType&gt; :: ~<span class="hljs-built_in">LinkList</span>()<br>&#123;<br>    Node&lt;DataType&gt;* q = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">while</span> (first != <span class="hljs-literal">NULL</span>)        <span class="hljs-comment">//释放单链表的每一个结点的存储空间</span><br>    &#123;<br>        q = first;                 <span class="hljs-comment">//暂存被释放结点</span><br>        first = first-&gt;next;         <span class="hljs-comment">// first指向被释放结点的下一个结点</span><br>        <span class="hljs-keyword">delete</span> q;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-type">void</span> LinkList&lt;DataType&gt; ::<span class="hljs-built_in">PrintList</span>()<br>&#123;<br>    Node&lt;DataType&gt;* p = first-&gt;next;                <span class="hljs-comment">//工作指针p初始化</span><br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">nullptr</span>)<br>    &#123;<br>        cout &lt;&lt; p-&gt;data &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span>;<br>        p = p-&gt;next;                 <span class="hljs-comment">//工作指针p后移，注意不能写作p++</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//尾插法构造</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br>LinkList&lt;DataType&gt; ::<span class="hljs-built_in">LinkList</span>(DataType a[], <span class="hljs-type">int</span> n)<br>&#123;<br>    first = <span class="hljs-keyword">new</span> Node&lt;DataType&gt;;                    <span class="hljs-comment">//生成头结点</span><br>    Node&lt;DataType&gt;* r = first, * s = <span class="hljs-literal">nullptr</span>;           <span class="hljs-comment">//尾指针初始化</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        s = <span class="hljs-keyword">new</span> Node&lt;DataType&gt;; s-&gt;data = a[i];<br>        r-&gt;next = s; r = s;                 <span class="hljs-comment">//将结点s插入到终端结点之后</span><br>    &#125;<br>    r-&gt;next = <span class="hljs-literal">nullptr</span>;        <span class="hljs-comment">//单链表建立完毕，将终端结点的指针域置空</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> maxsize;<br>    cout &lt;&lt; <span class="hljs-string">&quot;请输入你要创建表的大小&quot;</span> &lt;&lt; endl;<br>    cin &gt;&gt; maxsize;<br>    <span class="hljs-type">int</span>* a = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[maxsize];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; maxsize; i++)<br>    &#123;<br>        a[i] = i;<br>    &#125;<br>    cout &lt;&lt; <span class="hljs-string">&quot;已创建一个最大长度&quot;</span> &lt;&lt; maxsize &lt;&lt; <span class="hljs-string">&quot;的单链表&quot;</span> &lt;&lt; endl;<br>    LinkList&lt;<span class="hljs-type">int</span>&gt; L&#123; a, maxsize &#125;;<br>    cout &lt;&lt; <span class="hljs-string">&quot;*******执行遍历链表******&quot;</span> &lt;&lt; endl;<br>    L.<span class="hljs-built_in">PrintList</span>();<br>    cout &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;**************************&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;请输入左右界定范围mink和maxk&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-type">int</span> mink, maxk;<br>    cin &gt;&gt; mink &gt;&gt; maxk;<br>    cout &lt;&lt; <span class="hljs-string">&quot;**************************&quot;</span> &lt;&lt; endl;<br>    L.<span class="hljs-built_in">Delete</span>(mink, maxk);<br>    cout &lt;&lt; <span class="hljs-string">&quot;题解删除操作已执行完毕&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;*******执行遍历链表******&quot;</span> &lt;&lt; endl;<br>    L.<span class="hljs-built_in">PrintList</span>();<br>    cout &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;**************************&quot;</span> &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>数据结构作业</category>
      
      <category>课后作业</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构作业</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用Kali中的工具John破解压缩包密码（弱密码</title>
    <link href="/2023/10/03/kali_john/"/>
    <url>/2023/10/03/kali_john/</url>
    
    <content type="html"><![CDATA[<p>推荐一篇文章</p><p><a href="https://blog.csdn.net/mengmeng0510/article/details/120812017">kali中binwalk&#x2F;foremost&#x2F;zip2john工具的配合使用</a></p><h3 id="第一步拿到hash文件"><a href="#第一步拿到hash文件" class="headerlink" title="第一步拿到hash文件"></a>第一步拿到hash文件</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">zip2john  <span class="hljs-selector-attr">[压缩包文件]</span>  &gt;&gt;  <span class="hljs-selector-attr">[名字.txt]</span><br></code></pre></td></tr></table></figure><h3 id="第二步解析hash文件"><a href="#第二步解析hash文件" class="headerlink" title="第二步解析hash文件"></a>第二步解析hash文件</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">john</span> <span class="hljs-meta"> [名字.txt]</span><br></code></pre></td></tr></table></figure><p>另外此处可以指定加密方式</p><p>在Kali系统中我们只需要添加–format&#x3D;[xxx]参数，即可指定John使用指定算法破解密码：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">john --<span class="hljs-keyword">format</span>=<span class="hljs-keyword">crypt</span> passwd.txt<br></code></pre></td></tr></table></figure><p>破解结束后无需再次对相同密文进行破解通常会提示：</p><blockquote><p>Loaded [number] password hashes with [number] different salts (crypt, generic crypt([number]) [?&#x2F;64])<br>No password hashes left to crack (see FAQ)</p></blockquote><p>如果我们需要再次查看破解后的密码只需执行如下命令：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">john </span>--<span class="hljs-keyword">show </span>passwd.txt<br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">john <span class="hljs-attr">--format</span>=<span class="hljs-selector-attr">[加密方式]</span> <span class="hljs-attr">--wordlist</span>=<span class="hljs-selector-attr">[字典路径]</span> <span class="hljs-selector-attr">[待解密密文文件]</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>kali</category>
      
      <category>john</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《拣爱》游戏心得</title>
    <link href="/2023/10/01/love_choice/"/>
    <url>/2023/10/01/love_choice/</url>
    
    <content type="html"><![CDATA[<p>注:部分资料来自百度，部分图片来自知乎，游戏狗</p><h1 id="游戏介绍"><a href="#游戏介绍" class="headerlink" title="游戏介绍"></a>游戏介绍</h1><p><img src="https://ts1.cn.mm.bing.net/th/id/R-C.69cb6a56106651395dd883ce4d06bfb5?rik=o5ik/GOs5kjyfA&riu=http://pic.qt6.com/up/2021-5/16214970414542509.jpg&ehk=qBqfjnePXOeJlvpUxh8YEbYFJJeB/anrwS3OIhcuWd4=&risl=&pid=ImgRaw&r=0" srcset="/img/loading.gif" lazyload></p><blockquote><p>百度百科</p></blockquote><p>拣，有<a href="https://baike.baidu.com/item/%E9%80%89%E6%8B%A9/980212?fromModule=lemma_inlink">选择</a>之意。游戏中每一个<a href="https://baike.baidu.com/item/%E5%9C%BA%E6%99%AF/82239?fromModule=lemma_inlink">场景</a>，每一个选择都合理而有其自己的意义。它还是一款谈论爱的游戏。希望通过游戏和故事，让玩家能够感受爱，学会爱他人和爱人的方法。</p><p>这个游戏鼓励人们拥有一颗温暖柔软，<a href="https://baike.baidu.com/item/%E5%96%84%E8%A7%A3%E4%BA%BA%E6%84%8F/4595238?fromModule=lemma_inlink">善解人意</a>的心。</p><p>《拣爱》由三个独立故事构成。完整游玩一次游戏大概需要1.5小时。 </p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="对游戏的评价"><a href="#对游戏的评价" class="headerlink" title="对游戏的评价"></a>对游戏的评价</h2><p>首先我想先写一下我对这个游戏的评价，游戏的可玩时间并不长，毕竟是剧情向游戏，剧情过完了就没得玩了，第二游戏的剧情做得非常好，能够引发玩家引起共鸣和无限的思考，我更觉得它像是一种艺术，就像一千个人眼中有一千个哈姆雷特一样，我对游戏其中的剧情的思考有一些我也问过原作者，而原作者的回答是纯主观想法，无标准答案。是的，艺术的意义便是这样。</p><h2 id="这个游戏引发出来的我的思考"><a href="#这个游戏引发出来的我的思考" class="headerlink" title="这个游戏引发出来的我的思考"></a>这个游戏引发出来的我的思考</h2><p>游戏一共分三章，第一章讲的是恋爱过程中的情侣，第二章讲的是两个青梅竹马的分分合合，第三章讲的是已婚夫妻的朝夕相处</p><p>虽然我是牡丹solo，但是对我的触动也是很深刻的</p><p>第一章是我印象最深的一章，也许是因为我正处于这么一个年龄段，所引发的共鸣比较多</p><p>游戏有存档，但爱没有存档，游戏可以回档，爱不能重来</p><p>每个人都拥有爱的能力，每个人都值得被爱</p><p>游戏中有很多操作是不被告知的，比如有的剧情要等着，有的剧情要点击小物品，而不是只点明显的选项而已，爱也是一样，有时候并不能思维定式，只看选项，而更多的是爱情中的不确定</p><h1 id="我的游戏历程"><a href="#我的游戏历程" class="headerlink" title="我的游戏历程"></a>我的游戏历程</h1><h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><h3 id="一、相遇、相知、相识"><a href="#一、相遇、相知、相识" class="headerlink" title="一、相遇、相知、相识"></a>一、相遇、相知、相识</h3><blockquote><p>我是一个游戏开发者，今天参加了一个gamejam活动。</p><p>（注：GameJam是一个游戏开发活动，参加者自由组队，48小时内围绕指定的主题进行创作，从零开始完成一款游戏)</p><p>传闻中gamejam现场可以偶遇女生一起组队，但偏偏我们组却是全男班</p><p>活动在一个周五的下午开始，大部分队伍都会把第一天夜晚用来进行整个游戏的构思和设计工作。</p><p>而我们组的讨论进行得十分顺利。在方案基本定下来以后，我也放松紧绷的神经，开始环顾会场四周。</p><p>这时候，我留意到她的存在。她所在的小组就坐在我们隔壁</p><p>他们组好像还在激烈的讨论。我听到他们其中一个队员说:大家先休息10分钟，之后再回来继续讨论吧。</p><p>她的队友都纷纷离开了座位，留下她一个人在本子上写写画画</p><p>”现在是个和她说话的好机会。“我心想</p><p>我简单整理了一下仪表仪容，在脸上挤出一个自认为最好的表情</p><p>鼓足勇气，走到她的身旁</p></blockquote><p><img src="https://pic3.zhimg.com/v2-e98b1b7a3ecfc8be7cb4894b249eddd6_r.jpg" srcset="/img/loading.gif" lazyload></p><h4 id="第一次玩"><a href="#第一次玩" class="headerlink" title="第一次玩"></a>第一次玩</h4><p>这是第一个对话选项，第一个选项相比而言还是比较自然的，第二个有有点显得高傲自大，像是很夸赞很吹嘘自己的想法，我不喜欢，<font color='red'>所以我选择了第一个</font></p><blockquote><p>她仿佛面有难色。但依然礼貌地介绍了自己:…“嗨，我叫000.“</p></blockquote><p><font color='red'>其实你向我搭讪的时候，我内心是拒绝的。大概是因为给我感觉很不自然吧</font></p><h4 id="第二次玩"><a href="#第二次玩" class="headerlink" title="第二次玩"></a>第二次玩</h4><p>由于结局提示这边选错了，所以无奈我选了另一个，但是结局还是有错，我觉得有蹊跷，鼠标移动到屏幕才发现画框可以点，点击场景中的海报，才能走向正确剧情</p><blockquote><p>“这次GameJam的题目不错，很有趣。”</p><p>“是啊，我觉得图中男女相互纠缠，可以做一个和恋爱相关的游戏”</p><p>“恋爱游戏啊…我觉得挺适合的。这次的题目或许还有一个意思:‘一件事情总有你意想不到的另一面。’”</p><p>“我也是这么想的，如果把这层意思放进恋爱游戏里或许会很有趣吧”</p><p>“对了，我们还可以…”</p><p>不知不觉，我们聊了很久。可惜的是她的队友最后还是没有采用她的建议</p><p>而这也是她后来告诉我的</p></blockquote><ul><li><font color='green'>两个兴趣相同的人有共同话题，这样才是最好的搭讪方式，不是吗？</font></li></ul><h3 id="二、第一次约会前的准备"><a href="#二、第一次约会前的准备" class="headerlink" title="二、第一次约会前的准备"></a>二、第一次约会前的准备</h3><blockquote><p>GameJam活动结束后，我通过活动的微信群找到了她</p><p>开始大家都有些拘谨，但很快我们就成为了相互倾诉生活琐事的”笔友</p><p>朋友都说我虽然在GameJam上没获奖，但却是所有人中唯一中了大奖的</p><p>我没法反驳，因为我真的太幸运了。</p><p>两周后的一天，我们在微信上聊着</p><p>而我一直想找机会把她约出来一起看个电影，吃个饭</p></blockquote><p><img src="https://pic3.zhimg.com/v2-2cdb0ea00331561fedafa23e4cb1b86a_r.jpg" srcset="/img/loading.gif" lazyload></p><p>第二个对话选项，虽然这个对话选什么都不影响结局，但还是第一个选项更好一些，第一个选项更适合来安慰对方，而第二个选项传达出来的意思就好像是她确实是做错了，但第一个就能传达出其实大家都这样，你没错，是上司的原因的意思，更好一些</p><ul><li><font color='green'>安慰别人的时候不要把错误说到对方身上</font></li></ul><p>后面紧跟着的对话刚刚一样，与上面同理，选第一个</p><p>男主开始尝试约女主出来玩</p><ul><li><font color='green'>自然地进行，不要带着目的做事</font></li><li><font color='green'>需要关注女孩子的朋友圈昂，才能知道女孩子的兴趣</font></li><li><font color='green'>和女孩子出来玩不能只看电影啊~不还得吃点东西吗</font></li></ul><p>这里有个细节，就是朋友圈里传达出来两个信息，“女主是猫尔摩斯的真爱粉”和“喜欢吃火锅”，这两个信息是推动剧情的关键点</p><p><img src="https://pic2.zhimg.com/80/v2-546f6f6dd8a695c8a2697557f7df05c1_720w.webp" srcset="/img/loading.gif" lazyload alt="点开朋友圈"></p><p><img src="https://pic2.zhimg.com/80/v2-82b172d45cada35288d61319afb22e3d_720w.webp" srcset="/img/loading.gif" lazyload alt="选猫尔摩斯"></p><p>然后后面有个小游戏，中间会有弹窗来分散你的注意力</p><ul><li><font color='green'>和女孩子约会怎么能分心呢！</font></li></ul><h3 id="三、看完电影吃饭"><a href="#三、看完电影吃饭" class="headerlink" title="三、看完电影吃饭"></a>三、看完电影吃饭</h3><blockquote><p>终于到了和她见面的日子</p><p>第一次和她看电影，不免有些紧张</p><p>但我还是告诉自己要尽量把注意力放在电影上面</p><p>电影放映完之后，我们在椅子上留到了最后</p><p>“刚刚的电影还挺精彩的”</p><p>”虽然和原著有些出入，但是看得出导演为了拍出原著的味道很用心!太精彩了!“</p><p>“不枉我期待这电影这么久!”</p><p>“我们接着去哪里?”</p><p>“这附近的话，我知道有家不错的店。”<br>当然是选择她最喜欢吃的火锅啦~</p></blockquote><p><img src="https://pic3.zhimg.com/v2-5d7189081ad21b6ca5c9bce8d56fa392_r.jpg" srcset="/img/loading.gif" lazyload></p><h3 id="四、约会后的闲聊"><a href="#四、约会后的闲聊" class="headerlink" title="四、约会后的闲聊"></a>四、约会后的闲聊</h3><blockquote><p>月光在她的脸上勾画出一道银白色的轮廓</p><p>看着她的脸，走在旁边的我内心有点不安分了起来</p><p>两人的距离越走越近，就算不说出口，两人之间也早已经有了默契</p><p>我还需要开口说些什么吗?</p></blockquote><p><img src="https://pic2.zhimg.com/v2-63c9446c97fadf1ba722e70c324e4589_r.jpg" srcset="/img/loading.gif" lazyload></p><h4 id="第一次玩-1"><a href="#第一次玩-1" class="headerlink" title="第一次玩"></a>第一次玩</h4><p>这里有三个选项，“我喜欢你”，“我能牵着你的手吗？”，“月色真美”</p><p>第一个选项未免有些太直接了，第二个选项也有点尴尬，<font color='red'>于是我选择了第三个</font></p><h4 id="第二次玩-1"><a href="#第二次玩-1" class="headerlink" title="第二次玩"></a>第二次玩</h4><p>由于后面结局的提示这边选错了</p><p>所以这边我第二次直接选了第二个选项，“我能牵着你的手吗”</p><p>但还是错了</p><h4 id="第三次玩"><a href="#第三次玩" class="headerlink" title="第三次玩"></a>第三次玩</h4><p>第三次玩才知道屏幕可以点，我才明白是点男女主的手！</p><blockquote><p>这一刻，或许任何言语，都是多余。</p><p>我们就这样开始了。</p></blockquote><ul><li><font color='green'>有时无言胜过千言万语，男孩子只要出手就好了！</font></li></ul><h3 id="五、无话不聊的甜蜜期"><a href="#五、无话不聊的甜蜜期" class="headerlink" title="五、无话不聊的甜蜜期"></a>五、无话不聊的甜蜜期</h3><blockquote><p>我们就这样开始了</p><p>我们之间仿佛有聊不完的话题</p><p>只要找到能够挑起话题的东西，我们都绝对不会放过</p><p>我们渴望了解对方，恨不得把镜头拉近，对焦到对方心里面去看对方心底在想什么。</p></blockquote><p><img src="https://pic4.zhimg.com/80/v2-d3c4c982bf9fe915cf51f9640d9ae793_720w.webp" srcset="/img/loading.gif" lazyload></p><h4 id="第一次玩-2"><a href="#第一次玩-2" class="headerlink" title="第一次玩"></a>第一次玩</h4><p>这里只有一个选项，<font color='red'>第一次玩只好点选项了</font>因为没得选</p><p>经过结局的提示才知道这边操作错了</p><p>“<font color='red'>但是我们的话题往往只能停留于表面。其实，我一直希望能与你分享更深层的想法</font>”</p><h4 id="第二次玩-2"><a href="#第二次玩-2" class="headerlink" title="第二次玩"></a>第二次玩</h4><p>第二次玩因为有了之前的经验了，所以我觉得这边肯定是有东西可以点的，结合屏幕发现男女主都有同类的物品，所以应该是<font color='green'>共同话题</font>以此点击六个物品之后点了选项，发现还是提示不完美</p><h4 id="第三次玩-1"><a href="#第三次玩-1" class="headerlink" title="第三次玩"></a>第三次玩</h4><p>这边我猜着应该是有深层义，但是我不知道怎么操作，在往上查了才知道是滑动鼠标滚轮，会出现六个idea。</p><p><img src="https://pic3.zhimg.com/80/v2-49d3f449c0d92fa1b6a5d545afeaaa6a_720w.webp" srcset="/img/loading.gif" lazyload></p><p>找到六个每两个一一对应就可以触发完美剧情</p><p><font color='green'>对白真的很暖！</font></p><h3 id="六、甜蜜过后的烦躁期"><a href="#六、甜蜜过后的烦躁期" class="headerlink" title="六、甜蜜过后的烦躁期"></a>六、甜蜜过后的烦躁期</h3><p><img src="https://pic3.zhimg.com/80/v2-9c33bda2179064731e26b4eecfbe183e_720w.webp" srcset="/img/loading.gif" lazyload></p><p>生活上的烦心事和小事，最容易在细节处伤到别人</p><blockquote><p>“￥%……*&amp;……o”</p></blockquote><p>此时的音乐也开始变得急促</p><h4 id="第一次玩-3"><a href="#第一次玩-3" class="headerlink" title="第一次玩"></a>第一次玩</h4><p>这里只有一个选项，所以<font color='red'>我直接选了</font>，然后过一会又出现一个选项，<font color='red'>我接着点了</font>。<font color='red'>吵架的气泡也随着越来越大</font></p><p>到结局提示才知道这边也有错误</p><p><font color='red'>吵架时的你是那么得理不饶人。而我也不愿意先让步，常常把一些鸡毛蒜皮的小事弄得发不可收拾</font></p><h4 id="第二次玩-3"><a href="#第二次玩-3" class="headerlink" title="第二次玩"></a>第二次玩</h4><p>有了第一次的经验和以往点屏幕的经验，我开始点屏幕上的东西，但是丝毫没有反应</p><h4 id="第三次玩-2"><a href="#第三次玩-2" class="headerlink" title="第三次玩"></a>第三次玩</h4><p>有了前两次的教训，我已经逐渐理解，应该做出让步，但是只有一个选项，要怎么选？</p><p>经过查了才知道，这边要等一会才会触发完美结局</p><p><img src="http://p.qpic.cn/mwegame/0/de786890024b6ab99e3b67b7416bd523/550" srcset="/img/loading.gif" lazyload></p><ul><li><font color='green'>生活上的烦心事和小事，最容易在细节处伤到别人，在吵架的时候双方每个人都需要作出让步，相互理解相互宽容</font></li></ul><h3 id="七、同居时的陪伴"><a href="#七、同居时的陪伴" class="headerlink" title="七、同居时的陪伴"></a>七、同居时的陪伴</h3><blockquote><p>和刚认识她的时候一样，她还是很喜欢和我抱怨生活中遇到的烦心事.</p><p>她明明很聪明，我想这些琐事应该难不倒她</p><p>却不知为何好像总是因为这些琐事而烦心</p></blockquote><p><img src="https://pic3.zhimg.com/80/v2-d883f8a91b1484b7153f5c42db1e239e_720w.webp" srcset="/img/loading.gif" lazyload></p><h4 id="第一次玩-4"><a href="#第一次玩-4" class="headerlink" title="第一次玩"></a>第一次玩</h4><p>这对话框怎么跟之前一样啊歪，我刚看到就觉得有蹊跷，但是无奈，只得点击选项</p><p>当然，不是完美结局</p><h4 id="第二次玩-4"><a href="#第二次玩-4" class="headerlink" title="第二次玩"></a>第二次玩</h4><p>由于明白了屏幕可以点，我试着点了点男主，发现男主可以滑动，顺着滑动过去，让男主过去陪女主，做一个好的倾听者</p><p><font color='green'>这边的对白也很暖！！！</font></p><blockquote><p>其实我知道，她很清楚这些问题该怎么处理</p><p>我只需要当一个聆听者，陪在她的身边，那就足够了.</p></blockquote><ul><li><font color='green'>一个好男友一定是一个好的倾听者！！！</font></li><li><font color='green'>情侣间有时候需要处理的不是事情，而是态度</font></li></ul><h3 id="八、同居时的烦恼"><a href="#八、同居时的烦恼" class="headerlink" title="八、同居时的烦恼"></a>八、同居时的烦恼</h3><blockquote><p>当距离越来越近，原本从远处看不清的瑕疵，也会越发明显</p><p>只要两个人生活在一起，就会有问题发生</p><p>这时候，要么是她迁就我，要么是我迁就她，难道不是吗?</p><p>加班到深夜回来时，她正看着她最爱的韩剧。</p><p>四周散落着零食的包装和纸巾。</p></blockquote><p><img src="http://img1.gamedog.cn/2023/01/30/12023312-2301301KF20.jpg" srcset="/img/loading.gif" lazyload></p><h4 id="第一次玩-5"><a href="#第一次玩-5" class="headerlink" title="第一次玩"></a>第一次玩</h4><p>这里有两个选项“让女主收拾”和“我来收拾”，我首先想到的是我就惯着他吧，我来收拾，后来通过结局才发现我错了</p><p><font color='red'>无论是谁迁就谁，只要是单方面的迁就，就不会有相互谅解的关系长久</font></p><p><font color='red'>但矛盾的是，有时候，我又会想你能够包容一下我的缺点。</font></p><h4 id="第二次玩-5"><a href="#第二次玩-5" class="headerlink" title="第二次玩"></a>第二次玩</h4><p>由于第一次错了于是我又点了另一个，让她来收拾，但还是错了</p><h4 id="第三次玩-3"><a href="#第三次玩-3" class="headerlink" title="第三次玩"></a>第三次玩</h4><p>想到屏幕可以滑动，我点了一下垃圾，才走到正确剧情</p><p>我以为剧情一直是从男主的视角来考虑爱情，没想到这个镜头的主角是女主，作者太有心了</p><p><img src="https://pic2.zhimg.com/80/v2-39e4fd39344f2736ba2e7c7a3ce9fa4d_720w.webp" srcset="/img/loading.gif" lazyload></p><ul><li><font color='green'>原来爱情中是双方的付出，而不是一个人单方面的付出，另一个人只知享受</font></li></ul><blockquote><p>比起单方面的迁就，两个人的相处更应该是相互的。</p><p>相互依靠的两人总比单依赖一方的两人站得稳，不是吗?</p><p>时间飞快流逝，距离你我相识，已经过去三年</p></blockquote><h3 id="九、结局"><a href="#九、结局" class="headerlink" title="九、结局"></a>九、结局</h3><h4 id="不完美结局"><a href="#不完美结局" class="headerlink" title="不完美结局"></a>不完美结局</h4><blockquote><p>我突然的来信没有吓到你吧?</p><p>这或许是我第一次这么毫无保留地向你透露心声</p><p>也是应该是最后一次了。</p><p>很可惜我们最后还是没能一起走下去。</p><p>但是我不后悔，因为我从我们的相处中学到了很多</p><p>祝君安好。再见。</p></blockquote><h4 id="完美结局"><a href="#完美结局" class="headerlink" title="完美结局"></a>完美结局</h4><blockquote><p>还记得我们是在gamejam上认识的</p><p>当时你主动和我说话。</p><p><font color='green'>聊到游戏我们的意见是一拍即合。围绕那次gamejam主题，我们开始越聊越投契</font></p><p>在那之后，我们又开始聊微信。</p><p>不知不觉中，你就成为了我的第一倾诉对象</p><p>还记得我们的第一次约会吗?</p><p><font color='green'>你和我去看我最喜欢的”猫耳摩斯”电影。然后又带我去吃我最喜欢的麻辣火锅。大概你有仔细看过我朋友圈吧?</font></p><p><font color='green'>知道你事前有好好为约会准备，我当时还是挺感动的</font></p><p>还记得我们的第一次牵手吗?</p><p><font color='green'>那天晚上月色很美。我到现在还记得你静静牵起我手时的感觉。我们就这样开始了。</font></p><p>在一起以后，我们有了更多的时间去了解彼此</p><p>我们谈论共同的兴趣爱好，生活中大小事情</p><p>和你在一起的日子大多都是甜蜜的，然而我们有时也会吵架</p><p><font color='green'>但庆幸我们能够相互谅解。一点点的争吵反而成为我们加深了解的机会</font></p><p>有时我会想你听我抱怨生活中的那那些烦心事</p><p><font color='green'>而你总能够在我需要的时候，做一个安静的聆听者</font></p><p><font color='green'>陪在我身边，静静听我讲那些生活中的琐碎事情。</font></p><p>我知道我们都并不完美。</p><p><font color='green'>好在我们知道怎样平衡彼此的关系，而不是一味依赖某一方</font></p><p>这或许是我第一次这么毫无保留地向你透露心声</p><p>我只是希望你能够理解我的心情，多点关心我</p><p>希望在我们的下一个三年里，我们能够更好地相处吧。相识周年纪念日快乐!</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>游戏心得</category>
      
    </categories>
    
    
    <tags>
      
      <tag>内心深处的呐喊-《拣爱》</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kali如何切换源</title>
    <link href="/2023/10/01/kali_yuan/"/>
    <url>/2023/10/01/kali_yuan/</url>
    
    <content type="html"><![CDATA[<p>转载  </p><p><a href="https://blog.csdn.net/fingue/article/details/127096363">https://blog.csdn.net/fingue/article/details/127096363</a></p><h1 id="1、进入vim模式"><a href="#1、进入vim模式" class="headerlink" title="1、进入vim模式"></a>1、进入vim模式</h1><p>sudo su进入root 模式<br>vim &#x2F;etc&#x2F;apt&#x2F;sources.list编辑软件源配置文件</p><p>随后进入vim模式</p><h1 id="2、国内源"><a href="#2、国内源" class="headerlink" title="2、国内源"></a>2、国内源</h1><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs 1c">官方源<br>deb http:<span class="hljs-comment">//http.kali.org/kali kali-rolling main non-free contrib</span><br>deb-src http:<span class="hljs-comment">//http.kali.org/kali kali-rolling main non-free contrib</span><br><span class="hljs-meta">#根据需要自己选一个，中科大的还可以</span><br><span class="hljs-meta">#中科大</span><br>deb http:<span class="hljs-comment">//mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib</span><br>deb-src http:<span class="hljs-comment">//mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib</span><br><span class="hljs-meta">#阿里云</span><br><span class="hljs-meta">#deb http:<span class="hljs-comment">//mirrors.aliyun.com/kali kali-rolling main non-free contrib</span></span><br><span class="hljs-meta">#deb-src http:<span class="hljs-comment">//mirrors.aliyun.com/kali kali-rolling main non-free contrib</span></span><br><span class="hljs-meta">#清华大学</span><br><span class="hljs-meta">#deb http:<span class="hljs-comment">//mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free</span></span><br><span class="hljs-meta">#deb-src https:<span class="hljs-comment">//mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free</span></span><br><span class="hljs-meta">#浙大</span><br><span class="hljs-meta">#deb http:<span class="hljs-comment">//mirrors.zju.edu.cn/kali kali-rolling main contrib non-free</span></span><br><span class="hljs-meta">#deb-src http:<span class="hljs-comment">//mirrors.zju.edu.cn/kali kali-rolling main contrib non-free</span></span><br><span class="hljs-meta">#东软大学</span><br><span class="hljs-meta">#deb http:<span class="hljs-comment">//mirrors.neusoft.edu.cn/kali kali-rolling/main non-free contrib</span></span><br><span class="hljs-meta">#deb-src http:<span class="hljs-comment">//mirrors.neusoft.edu.cn/kali kali-rolling/main non-free contrib</span></span><br><span class="hljs-meta">#重庆大学</span><br><span class="hljs-meta">#deb http:<span class="hljs-comment">//http.kali.org/kali kali-rolling main non-free contrib</span></span><br><span class="hljs-meta">#deb-src http:<span class="hljs-comment">//http.kali.org/kali kali-rolling main non-free contrib</span></span><br></code></pre></td></tr></table></figure><h1 id="3、换源"><a href="#3、换源" class="headerlink" title="3、换源"></a>3、换源</h1><p>按“i”进行编辑</p><p>将源插入后，点击“Esc”退出编辑，输入“：wq”回车保存退出，此处插入的是清华大学的源。</p><p>注：“#”有注释本行的用途，可以先将原来的源进行注释，再插入新源</p><h1 id="4、随后输入下列命令行进行更新"><a href="#4、随后输入下列命令行进行更新" class="headerlink" title="4、随后输入下列命令行进行更新"></a>4、随后输入下列命令行进行更新</h1><p>更新软件列表(非root权限在命令行前加“sudo”)</p><p>apt-get update 更新索引</p><p>apt-get upgrade 更新软件</p><p>apt-get dist-upgrade 升级</p><p>apt-get clean 删除缓存包</p><p>apt-get autoclean 删除未安装的deb包<br>————————————————<br>版权声明：本文为CSDN博主「不过教资不改名111」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/fingue/article/details/127096363">https://blog.csdn.net/fingue/article/details/127096363</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>kali</category>
      
      <category>切换源</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo博文中front-matter的用法</title>
    <link href="/2023/09/30/hexo_front_matter/"/>
    <url>/2023/09/30/hexo_front_matter/</url>
    
    <content type="html"><![CDATA[<p><a href="https://hexo.io/zh-cn/docs/front-matter">https://hexo.io/zh-cn/docs/front-matter</a></p><h1 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h1><p>Front-matter 是文件最上方以 <code>---</code> 分隔的区域，用于指定个别文件的变量，举例来说：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">Hello</span> <span class="hljs-string">World</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2013</span><span class="hljs-string">/7/13</span> <span class="hljs-number">20</span><span class="hljs-string">:46:25</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>以下是预先定义的参数，您可在模板中使用这些参数值并加以利用。</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left"><code>layout</code></td><td align="left">布局</td><td align="left"><a href="https://hexo.io/zh-cn/docs/configuration#%E6%96%87%E7%AB%A0"><code>config.default_layout</code></a></td></tr><tr><td align="left"><code>title</code></td><td align="left">标题</td><td align="left">文章的文件名</td></tr><tr><td align="left"><code>date</code></td><td align="left">建立日期</td><td align="left">文件建立日期</td></tr><tr><td align="left"><code>updated</code></td><td align="left">更新日期</td><td align="left">文件更新日期</td></tr><tr><td align="left"><code>comments</code></td><td align="left">开启文章的评论功能</td><td align="left"><code>true</code></td></tr><tr><td align="left"><code>tags</code></td><td align="left">标签（不适用于分页）</td><td align="left"></td></tr><tr><td align="left"><code>categories</code></td><td align="left">分类（不适用于分页）</td><td align="left"></td></tr><tr><td align="left"><code>permalink</code></td><td align="left">覆盖文章的永久链接，永久链接应该以 <code>/</code> 或 <code>.html</code> 结尾</td><td align="left"><code>null</code></td></tr><tr><td align="left"><code>excerpt</code></td><td align="left">纯文本的页面摘要。使用 <a href="https://hexo.io/zh-cn/docs/tag-plugins#%E6%96%87%E7%AB%A0%E6%91%98%E8%A6%81%E5%92%8C%E6%88%AA%E6%96%AD">该插件</a> 来格式化文本</td><td align="left"></td></tr><tr><td align="left"><code>disableNunjucks</code></td><td align="left">启用时禁用 Nunjucks 标签 <code>&#123;&#123; &#125;&#125;</code>&#x2F;<code>&#123;% %&#125;</code> 和 <a href="https://hexo.io/zh-cn/docs/tag-plugins">标签插件</a> 的渲染功能</td><td align="left">false</td></tr><tr><td align="left"><code>lang</code></td><td align="left">设置语言以覆盖 <a href="https://hexo.io/zh-cn/docs/internationalization#%E8%B7%AF%E5%BE%84">自动检测</a></td><td align="left">继承自 <code>_config.yml</code></td></tr><tr><td align="left"><code>published</code></td><td align="left">文章是否发布</td><td align="left">对于 <code>_posts</code> 下的文章为 <code>true</code>，对于 <code>_draft</code> 下的文章为 <code>false</code></td></tr></tbody></table><h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><p>根据 <code>_config.yml</code> 中 <a href="https://hexo.io/zh-cn/docs/configuration#%E6%96%87%E7%AB%A0"><code>default_layout</code></a> 的设置，默认布局是 <code>post</code> 。当文章中的布局被禁用(<code>layout: false</code>)，它将不会使用主题处理。然而，它仍然会被任何可用的渲染引擎渲染：如果一篇文章是用 Markdown 写的，并且安装了 Markdown 渲染引擎（比如默认的 <a href="https://github.com/hexojs/hexo-renderer-marked">hexo-renderer-marked</a>)，它将被渲染成HTML。</p><p>除非通过 <code>disableNunjucks</code> 设置或 <a href="https://hexo.io/zh-cn/api/renderer#%E7%A6%81%E7%94%A8-Nunjucks-%E6%A0%87%E7%AD%BE">渲染引擎</a> 禁用，否则无论布局如何，<a href="https://hexo.io/zh-cn/docs/tag-plugins">标签插件</a> 总是被处理。</p><h2 id="分类和标签"><a href="#分类和标签" class="headerlink" title="分类和标签"></a>分类和标签</h2><p>只有文章支持分类和标签，您可以在 Front-matter 中设置。在其他系统中，分类和标签听起来很接近，但是在 Hexo 中两者有着明显的差别：分类具有顺序性和层次性，也就是说 <code>Foo, Bar</code> 不等于 <code>Bar, Foo</code>；而标签没有顺序和层次。</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs subunit">categories:<br>- Diary<br><span class="hljs-keyword">tags:</span><br>- PS3<br>- Games<br></code></pre></td></tr></table></figure><blockquote><p>分类方法的分歧</p><p>如果您有过使用 WordPress 的经验，就很容易误解 Hexo 的分类方式。WordPress 支持对一篇文章设置多个分类，而且这些分类可以是同级的，也可以是父子分类。但是 Hexo 不支持指定多个同级分类。下面的指定方法：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">categories</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">Diary</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">Life</span><br></code></pre></td></tr></table></figure><p>会使分类 <code>Life</code> 成为 <code>Diary</code> 的子分类，而不是并列分类。因此，有必要为您的文章选择尽可能准确的分类。</p><p>如果你需要为文章添加多个分类，可以尝试以下 list 中的方法。</p><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ldif"><span class="hljs-attribute">categories</span>:<br><span class="hljs-literal">-</span> [Diary, PlayStation]<br><span class="hljs-literal">-</span> [Diary, Games]<br><span class="hljs-literal">-</span> [Life]<br></code></pre></td></tr></table></figure><p>此时这篇文章同时包括三个分类： <code>PlayStation</code> 和 <code>Games</code> 分别都是父分类 <code>Diary</code> 的子分类，同时 <code>Life</code> 是一个没有子分类的分类。</p></blockquote><h2 id="JSON-Front-matter"><a href="#JSON-Front-matter" class="headerlink" title="JSON Front-matter"></a>JSON Front-matter</h2><p>除了 YAML 外，你也可以使用 JSON 来编写 Front-matter，只要将 <code>---</code> 代换成 <code>;;;</code> 即可。</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;Hello World&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-string">&quot;date&quot;</span>: <span class="hljs-string">&quot;2013/7/13 20:46:25&quot;</span><br><span class="hljs-comment">;;;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
      <category>用法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>跟随欧丽娟老师学习哲学</title>
    <link href="/2023/09/30/Ou_li_juan/"/>
    <url>/2023/09/30/Ou_li_juan/</url>
    
    <content type="html"><![CDATA[<p>永远学习欧丽娟老师！</p><p><img src="https://z1.ax1x.com/2023/09/30/pPqcohF.jpg" srcset="/img/loading.gif" lazyload></p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>哲学</category>
      
      <category>欧丽娟</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实验二、链式存储结构线性表的建立及操作</title>
    <link href="/2023/09/29/DS_test2/"/>
    <url>/2023/09/29/DS_test2/</url>
    
    <content type="html"><![CDATA[<blockquote><p>声明：仅供留档查阅，仅用作起到提示引导性作用，仅用作学习交流，切勿直接照搬</p></blockquote><p><img src="https://cyberdownload.anrunlu.net/FlO6Qn0cVLJHriuYzOv453gkwMYY" srcset="/img/loading.gif" lazyload></p><h1 id="代码主体"><a href="#代码主体" class="headerlink" title="代码主体"></a>代码主体</h1><p>以下是一个简单的C++实现，用于维护单链表：</p><blockquote><p>来自bing ai</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span><br>&#123;<br>    DataType data;        <span class="hljs-comment">// 数据域</span><br>    Node&lt;DataType&gt;* next; <span class="hljs-comment">// 指针域</span><br>&#125;;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkList</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">LinkList</span>();                    <span class="hljs-comment">// 无参构造函数，建立只有头结点的空链表</span><br>    <span class="hljs-built_in">LinkList</span>(DataType a[], <span class="hljs-type">int</span> n); <span class="hljs-comment">// 有参构造函数，建立有n个元素的单链表</span><br>    ~<span class="hljs-built_in">LinkList</span>();                   <span class="hljs-comment">// 析构函数</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Length</span><span class="hljs-params">()</span></span>;                  <span class="hljs-comment">// 求单链表的长度</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Empety</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function">DataType <span class="hljs-title">Get</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span></span>;            <span class="hljs-comment">// 按位查找。查找第i个结点的元素值</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Locate</span><span class="hljs-params">(DataType x)</span></span>;         <span class="hljs-comment">// 按值查找。查找值为x的元素序号</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Insert</span><span class="hljs-params">(<span class="hljs-type">int</span> i, DataType x)</span></span>; <span class="hljs-comment">// 插入操作，第i个位置插入值为x的结点</span><br>    <span class="hljs-function">DataType <span class="hljs-title">Delete</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span></span>;         <span class="hljs-comment">// 删除操作，删除第i个结点</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PrintList</span><span class="hljs-params">()</span></span>;               <span class="hljs-comment">// 遍历操作，按序号依次输出各元素</span><br><span class="hljs-keyword">private</span>:<br>    Node&lt;DataType&gt;* first; <span class="hljs-comment">// 单链表的头指针</span><br>&#125;;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br>LinkList&lt;DataType&gt;::<span class="hljs-built_in">LinkList</span>()<br>&#123;<br>    first = <span class="hljs-keyword">new</span> Node&lt;DataType&gt;; <span class="hljs-comment">// 生成头结点</span><br>    first-&gt;next = <span class="hljs-literal">nullptr</span>;      <span class="hljs-comment">// 头结点的指针域置空</span><br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-type">int</span> LinkList&lt;DataType&gt;::<span class="hljs-built_in">Empety</span>()<br>&#123;<br>    <span class="hljs-keyword">if</span> (first-&gt;next == <span class="hljs-literal">nullptr</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-type">void</span> LinkList&lt;DataType&gt;::<span class="hljs-built_in">PrintList</span>()<br>&#123;<br>    Node&lt;DataType&gt;* p = first-&gt;next; <span class="hljs-comment">// 工作指针p初始化</span><br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">nullptr</span>)<br>    &#123;<br>        cout &lt;&lt; p-&gt;data &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span>;<br>        p = p-&gt;next; <span class="hljs-comment">// 工作指针p后移，注意不能写作p++</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-type">int</span> LinkList&lt;DataType&gt;::<span class="hljs-built_in">Length</span>()<br>&#123;<br>    Node&lt;DataType&gt;* p = first-&gt;next; <span class="hljs-comment">// 工作指针p初始化为开始接点</span><br>    <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;                   <span class="hljs-comment">// 累加器count初始化</span><br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">nullptr</span>)<br>    &#123;<br>        p = p-&gt;next;<br>        count++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> count; <span class="hljs-comment">// 注意count的初始化和返回值之间的关系</span><br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br>DataType LinkList&lt;DataType&gt;::<span class="hljs-built_in">Get</span>(<span class="hljs-type">int</span> i)<br>&#123;<br>    Node&lt;DataType&gt;* p = first-&gt;next; <span class="hljs-comment">// 工作指针p初始化</span><br>    <span class="hljs-type">int</span> count = <span class="hljs-number">1</span>;                   <span class="hljs-comment">// 累加器count初始化</span><br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">nullptr</span> &amp;&amp; count &lt; i)<br>    &#123;<br>        p = p-&gt;next; <span class="hljs-comment">// 工作指针p后移</span><br>        count++;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (p == <span class="hljs-literal">nullptr</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-string">&quot;位置&quot;</span>;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> p-&gt;data;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-type">int</span> LinkList&lt;DataType&gt;::<span class="hljs-built_in">Locate</span>(DataType x)<br>&#123;<br>    Node&lt;DataType&gt;* p = first-&gt;next; <span class="hljs-comment">// 工作指针p初始化</span><br>    <span class="hljs-type">int</span> count = <span class="hljs-number">1</span>;                   <span class="hljs-comment">// 累加器count初始化</span><br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">nullptr</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (p-&gt;data == x)<br>            <span class="hljs-keyword">return</span> count; <span class="hljs-comment">// 查找成功，结束函数并返回序号</span><br>        p = p-&gt;next;<br>        count++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 退出循环表明查找失败</span><br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-type">void</span> LinkList&lt;DataType&gt;::<span class="hljs-built_in">Insert</span>(<span class="hljs-type">int</span> i, DataType x)<br>&#123;<br>    Node&lt;DataType&gt;* p = first, * s = <span class="hljs-literal">nullptr</span>; <span class="hljs-comment">// 工作指针p初始化</span><br>    <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">nullptr</span> &amp;&amp; count &lt; i - <span class="hljs-number">1</span>) <span class="hljs-comment">// 查找第i – 1个结点</span><br>    &#123;<br>        p = p-&gt;next; <span class="hljs-comment">// 工作指针p后移</span><br>        count++;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (p == <span class="hljs-literal">nullptr</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-string">&quot;位置&quot;</span>; <span class="hljs-comment">// 没有找到第i – 1个结点</span><br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        s = <span class="hljs-keyword">new</span> Node&lt;DataType&gt;;<br>        s-&gt;data = x; <span class="hljs-comment">// 申请结点s，数据域为x</span><br>        s-&gt;next = p-&gt;next;<br>        p-&gt;next = s; <span class="hljs-comment">// 将结点s插入到结点p之后</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br>LinkList&lt;DataType&gt;::<span class="hljs-built_in">LinkList</span>(DataType a[], <span class="hljs-type">int</span> n)<br>&#123;<br>    first = <span class="hljs-keyword">new</span> Node&lt;DataType&gt;;              <span class="hljs-comment">// 生成头结点</span><br>    Node&lt;DataType&gt;* r = first, * s = <span class="hljs-literal">nullptr</span>; <span class="hljs-comment">// 尾指针初始化</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        s = <span class="hljs-keyword">new</span> Node&lt;DataType&gt;;<br>        s-&gt;data = a[i];<br>        r-&gt;next = s;<br>        r = s; <span class="hljs-comment">// 将结点s插入到终端结点之后</span><br>    &#125;<br>    r-&gt;next = <span class="hljs-literal">nullptr</span>; <span class="hljs-comment">// 单链表建立完毕，将终端结点的指针域置空</span><br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br>DataType LinkList&lt;DataType&gt;::<span class="hljs-built_in">Delete</span>(<span class="hljs-type">int</span> i)<br>&#123;<br>    DataType x;<br>    Node&lt;DataType&gt;* p = first, * q = <span class="hljs-literal">nullptr</span>; <span class="hljs-comment">// 工作指针p指向头结点</span><br>    <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">nullptr</span> &amp;&amp; count &lt; i - <span class="hljs-number">1</span>) <span class="hljs-comment">// 查找第i-1个结点</span><br>    &#123;<br>        p = p-&gt;next;<br>        count++;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (p == <span class="hljs-literal">nullptr</span> || p-&gt;next == <span class="hljs-literal">nullptr</span>) <span class="hljs-comment">// 结点p不存在或p的后继结点不存在</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-string">&quot;位置&quot;</span>;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        q = p-&gt;next;<br>        x = q-&gt;data;       <span class="hljs-comment">// 暂存被删结点</span><br>        p-&gt;next = q-&gt;next; <span class="hljs-comment">// 摘链</span><br>        <span class="hljs-keyword">delete</span> q;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">DataType</span>&gt;<br>LinkList&lt;DataType&gt;::~<span class="hljs-built_in">LinkList</span>()<br>&#123;<br>    Node&lt;DataType&gt;* q = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">while</span> (first != <span class="hljs-literal">NULL</span>) <span class="hljs-comment">// 释放单链表的每一个结点的存储空间</span><br>    &#123;<br>        q = first;           <span class="hljs-comment">// 暂存被释放结点</span><br>        first = first-&gt;next; <span class="hljs-comment">// first指向被释放结点的下一个结点</span><br>        <span class="hljs-keyword">delete</span> q;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> maxsize;<br>    cout &lt;&lt; <span class="hljs-string">&quot;请输入你要创建数组的大小&quot;</span> &lt;&lt; endl;<br>    cin &gt;&gt; maxsize;<br>    <span class="hljs-type">int</span>* a = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[maxsize];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; maxsize; i++)<br>    &#123;<br>        a[i] = i+<span class="hljs-number">1</span>;<br>        cout &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; endl;<br>    &#125;<br>    cout &lt;&lt; <span class="hljs-string">&quot;已创建一个最大长度&quot;</span>&lt;&lt;maxsize&lt;&lt;<span class="hljs-string">&quot;的随机数链表&quot;</span> &lt;&lt; endl;<br>    LinkList&lt;<span class="hljs-type">int</span>&gt; L&#123; a, maxsize &#125;;<br>    cout &lt;&lt; <span class="hljs-string">&quot;执行遍历链表&quot;</span> &lt;&lt; endl;<br>    L.<span class="hljs-built_in">PrintList</span>();<br>    cout &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;请输入一个最大长度内的数字查找元素&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-type">int</span> i;<br>    cin &gt;&gt; i;<br>    cout &lt;&lt; L.<span class="hljs-built_in">Locate</span>(i) &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;请插入一个新数字元素，请依次输入位置和数据&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-type">int</span> j, k;<br>    cin &gt;&gt; j &gt;&gt; k;<br>    L.<span class="hljs-built_in">Insert</span>(j, k);<br>    cout &lt;&lt; <span class="hljs-string">&quot;执行遍历链表&quot;</span> &lt;&lt; endl;<br>    L.<span class="hljs-built_in">PrintList</span>();<br>    cout &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;请删除一个新数字元素，请输入位置&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-type">int</span> l;<br>    cin &gt;&gt; l;<br>    cout &lt;&lt; <span class="hljs-string">&quot;删除的元素位置是&quot;</span> &lt;&lt; l &lt;&lt; <span class="hljs-string">&quot;数据是&quot;</span> &lt;&lt; L.<span class="hljs-built_in">Get</span>(l) &lt;&lt; endl;<br>    L.<span class="hljs-built_in">Delete</span>(l);<br>    cout &lt;&lt; <span class="hljs-string">&quot;执行遍历链表&quot;</span> &lt;&lt; endl;<br>    L.<span class="hljs-built_in">PrintList</span>();<br>    cout &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个程序首先创建了一个空的单链表，然后向其中添加了一些节点。然后，它遍历了整个列表，查找了一个元素，插入了一个新的元素，删除了一个元素，然后再次遍历了整个列表。希望这个示例能对你有所帮助！</p><h1 id="两个有序单链表合并为一个有序单链表"><a href="#两个有序单链表合并为一个有序单链表" class="headerlink" title="两个有序单链表合并为一个有序单链表"></a>两个有序单链表合并为一个有序单链表</h1><p>当然，这是一个包含main函数的完整程序，它创建了两个有序链表，并将它们合并为一个有序链表：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-comment">// 定义链表节点</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ListNode</span> &#123;<br>    <span class="hljs-type">int</span> val;<br>    ListNode *next;<br>    <span class="hljs-built_in">ListNode</span>(<span class="hljs-type">int</span> x) : <span class="hljs-built_in">val</span>(x), <span class="hljs-built_in">next</span>(<span class="hljs-literal">NULL</span>) &#123;&#125;<br>&#125;;<br><br><span class="hljs-comment">// 合并两个有序链表</span><br><span class="hljs-function">ListNode* <span class="hljs-title">mergeTwoLists</span><span class="hljs-params">(ListNode* l1, ListNode* l2)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (l1 == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> l2;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (l2 == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> l1;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (l1-&gt;val &lt; l2-&gt;val) &#123;<br>        l1-&gt;next = <span class="hljs-built_in">mergeTwoLists</span>(l1-&gt;next, l2);<br>        <span class="hljs-keyword">return</span> l1;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        l2-&gt;next = <span class="hljs-built_in">mergeTwoLists</span>(l1, l2-&gt;next);<br>        <span class="hljs-keyword">return</span> l2;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 创建第一个有序链表：1 -&gt; 3 -&gt; 5</span><br>    ListNode *l1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">1</span>);<br>    l1-&gt;next = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">3</span>);<br>    l1-&gt;next-&gt;next = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">5</span>);<br><br>    <span class="hljs-comment">// 创建第二个有序链表：2 -&gt; 4 -&gt; 6</span><br>    ListNode *l2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">2</span>);<br>    l2-&gt;next = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">4</span>);<br>    l2-&gt;next-&gt;next = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">6</span>);<br><br>    <span class="hljs-comment">// 合并两个有序链表</span><br>    ListNode *merged = <span class="hljs-built_in">mergeTwoLists</span>(l1, l2);<br><br>    <span class="hljs-comment">// 打印合并后的链表</span><br>    <span class="hljs-keyword">while</span> (merged != <span class="hljs-literal">NULL</span>) &#123;<br>        std::cout &lt;&lt; merged-&gt;val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        merged = merged-&gt;next;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个程序首先创建了两个有序链表<code>l1</code>和<code>l2</code>，然后调用<code>mergeTwoLists</code>函数将它们合并为一个新的有序链表。最后，它遍历新的链表并打印出每个节点的值。</p><p>请注意，这个程序没有释放分配给链表节点的内存。在实际使用中，你应该在不再需要节点时释放它们的内存，以防止内存泄漏。此外，这个程序假设输入的链表已经排序。如果输入的链表没有排序，你需要先对它们进行排序。</p><h1 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h1><p>双链表是一种更复杂的线性数据结构，它的每个节点都有两个链接，一个指向前一个节点，另一个指向后一个节点。以下是一个使用C++实现的双链表的基本设计：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-comment">// 定义双链表节点</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ListNode</span> &#123;<br>    <span class="hljs-type">int</span> val;<br>    ListNode *prev;<br>    ListNode *next;<br>    <span class="hljs-built_in">ListNode</span>(<span class="hljs-type">int</span> x) : <span class="hljs-built_in">val</span>(x), <span class="hljs-built_in">prev</span>(<span class="hljs-literal">NULL</span>), <span class="hljs-built_in">next</span>(<span class="hljs-literal">NULL</span>) &#123;&#125;<br>&#125;;<br><br><span class="hljs-comment">// 添加节点到双链表的末尾</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addNode</span><span class="hljs-params">(ListNode* &amp;head, <span class="hljs-type">int</span> val)</span> </span>&#123;<br>    ListNode* newNode = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(val);<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">NULL</span>) &#123;<br>        head = newNode;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        ListNode* temp = head;<br>        <span class="hljs-keyword">while</span> (temp-&gt;next != <span class="hljs-literal">NULL</span>) &#123;<br>            temp = temp-&gt;next;<br>        &#125;<br>        temp-&gt;next = newNode;<br>        newNode-&gt;prev = temp;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 打印双链表</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printList</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;<br>    ListNode* temp = head;<br>    <span class="hljs-keyword">while</span> (temp != <span class="hljs-literal">NULL</span>) &#123;<br>        std::cout &lt;&lt; temp-&gt;val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        temp = temp-&gt;next;<br>    &#125;<br>    std::cout &lt;&lt; std::endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 创建一个空的双链表</span><br>    ListNode* head = <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-comment">// 添加节点到双链表</span><br>    <span class="hljs-built_in">addNode</span>(head, <span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">addNode</span>(head, <span class="hljs-number">2</span>);<br>    <span class="hljs-built_in">addNode</span>(head, <span class="hljs-number">3</span>);<br><br>    <span class="hljs-comment">// 打印双链表</span><br>    <span class="hljs-built_in">printList</span>(head);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个程序首先定义了一个双链表节点的结构，然后定义了两个函数：<code>addNode</code>用于向双链表的末尾添加新的节点，<code>printList</code>用于打印双链表的所有节点。在<code>main</code>函数中，它创建了一个空的双链表，然后添加了几个节点，并打印出了这个双链表。</p><p>请注意，这个程序没有释放分配给链表节点的内存。在实际使用中，你应该在不再需要节点时释放它们的内存，以防止内存泄漏。此外，你可能还需要实现其他操作，如删除节点、查找节点等。这取决于你的具体需求。如果你需要帮助实现这些操作，请随时向我询问！</p><h1 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h1><p>循环链表是一种特殊的链表，其中最后一个元素指向链表的第一个元素。这种类型的数据结构可以用于实现需要循环或重复的算法。以下是一个使用C++实现的循环链表的基本设计：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-comment">// 定义链表节点</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ListNode</span> &#123;<br>    <span class="hljs-type">int</span> val;<br>    ListNode *next;<br>    <span class="hljs-built_in">ListNode</span>(<span class="hljs-type">int</span> x) : <span class="hljs-built_in">val</span>(x), <span class="hljs-built_in">next</span>(<span class="hljs-literal">NULL</span>) &#123;&#125;<br>&#125;;<br><br><span class="hljs-comment">// 添加节点到循环链表的末尾</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addNode</span><span class="hljs-params">(ListNode* &amp;head, <span class="hljs-type">int</span> val)</span> </span>&#123;<br>    ListNode* newNode = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(val);<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">NULL</span>) &#123;<br>        head = newNode;<br>        newNode-&gt;next = head;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        ListNode* temp = head;<br>        <span class="hljs-keyword">while</span> (temp-&gt;next != head) &#123;<br>            temp = temp-&gt;next;<br>        &#125;<br>        temp-&gt;next = newNode;<br>        newNode-&gt;next = head;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 打印循环链表</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printList</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span>;<br>    ListNode* temp = head;<br>    <span class="hljs-keyword">do</span> &#123;<br>        std::cout &lt;&lt; temp-&gt;val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        temp = temp-&gt;next;<br>    &#125; <span class="hljs-keyword">while</span> (temp != head);<br>    std::cout &lt;&lt; std::endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 创建一个空的循环链表</span><br>    ListNode* head = <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-comment">// 添加节点到循环链表</span><br>    <span class="hljs-built_in">addNode</span>(head, <span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">addNode</span>(head, <span class="hljs-number">2</span>);<br>    <span class="hljs-built_in">addNode</span>(head, <span class="hljs-number">3</span>);<br><br>    <span class="hljs-comment">// 打印循环链表</span><br>    <span class="hljs-built_in">printList</span>(head);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个程序首先定义了一个链表节点的结构，然后定义了两个函数：<code>addNode</code>用于向循环链表的末尾添加新的节点，<code>printList</code>用于打印循环链表的所有节点。在<code>main</code>函数中，它创建了一个空的循环链表，然后添加了几个节点，并打印出了这个循环链表。</p><p>请注意，这个程序没有释放分配给链表节点的内存。在实际使用中，你应该在不再需要节点时释放它们的内存，以防止内存泄漏。此外，你可能还需要实现其他操作，如删除节点、查找节点等。这取决于你的具体需求。如果你需要帮助实现这些操作，请随时向我询问！</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>数据结构作业</category>
      
      <category>实验</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构作业</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>提问的智慧</title>
    <link href="/2023/09/29/how_to_ask/"/>
    <url>/2023/09/29/how_to_ask/</url>
    
    <content type="html"><![CDATA[<h1 id="提问的智慧"><a href="#提问的智慧" class="headerlink" title="提问的智慧"></a>提问的智慧</h1><p>How To Ask Questions The Smart Way</p><p>Copyright © 2001,2006,2014 Eric S. Raymond, Rick Moen 本指南英文版版权为 Eric S. Raymond, Rick Moen 所有。</p><p>原文网址:<a href="http://www.catb.org/~esr/faqs/smart-questions.html">http://www.catb.org/~esr/faqs/smart-questions.html</a></p><p>Copyleft 2001 by D.H.Grand(nOBODY&#x2F;Ginux), 2010 by Gasolin, 2015 by Ryan Wu 本中文指南是基于原文 3.10 版以及 2010 年由 <a href="https://github.com/gasolin">Gasolin </a>所翻译版本的最新翻译；协助指出翻译问题，<strong>请</strong><a href="https://github.com/ryanhanwu/smartquestions/issues/new">发Issue</a><strong>，或直接</strong><a href="https://github.com/ryanhanwu/smartquestions/compare/">发Pull Request</a><strong>给我。</strong></p><p>本文另有简体中文版: <a href="https://github.com/FredWe/How-To-Ask-Questions-The-Smart-Way/blob/master/README-zh_CN.mdWay/blob/master/README-zh_CN.md">https://github.com/FredWe/How-To-Ask-Questions-The-Smart-Way/blob/master/README-zh_CN.mdWay/blob/master/README-zh_CN.md</a></p><p><font size=5><a href="https://github.com/ryanhanwu/smartquestions/blob/master/history.md">原文版本历史</a></font></p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><p><a href="#%E5%A3%B0%E6%98%8E"> 声明</a></p></li><li><p><a href="#%E7%AE%80%E4%BB%8B"> 简介</a></p></li><li><p><a href="#%E5%9C%A8%E6%8F%90%E9%97%AE%E4%B9%8B%E5%89%8D"> 在提问之前</a></p></li><li><p><a href="#%E5%BD%93%E4%BD%A0%E6%8F%90%E9%97%AE%E6%97%B6"> 当你提问时</a></p><ul><li><p><a href="#%E6%85%8E%E9%80%89%E6%8F%90%E9%97%AE%E7%9A%84%E8%AE%BA%E5%9D%9B"> 慎选提问的论坛</a></p></li><li><p><a href="#%E7%BD%91%E7%AB%99%E5%92%8CIRC%E8%AE%BA%E5%9D%9B"> 网站和IRC论坛</a></p></li><li><p><a href="#%E7%AC%AC%E4%BA%8C%E6%AD%A5%EF%BC%8C%E4%BD%BF%E7%94%A8%E9%A1%B9%E7%9B%AE%E9%82%AE%E4%BB%B6%E5%88%97%E8%A1%A8"> 第二步，使用项目邮件列表</a></p></li><li><p><a href="#%E4%BD%BF%E7%94%A8%E6%9C%89%E6%84%8F%E4%B9%89%E4%B8%94%E6%8F%8F%E8%BF%B0%E6%98%8E%E7%A1%AE%E7%9A%84%E6%A0%87%E9%A2%98"> 使用有意义且描述明确的标题</a></p></li><li><p><a href="#%E4%BD%BF%E9%97%AE%E9%A2%98%E5%AE%B9%E6%98%93%E5%9B%9E%E5%A4%8D"> 使问题容易回复</a></p></li><li><p><a href="#%E7%94%A8%E6%B8%85%E6%99%B0%E3%80%81%E6%AD%A3%E7%A1%AE%E3%80%81%E7%B2%BE%E5%87%86%E5%B9%B6%E5%90%88%E6%B3%95%E8%AF%AD%E6%B3%95%E7%9A%84%E8%AF%AD%E5%8F%A5">用清晰、正确、精准并合法语法的语句</a></p></li><li><p><a href="#%E4%BD%BF%E7%94%A8%E6%98%93%E4%BA%8E%E8%AF%BB%E5%8F%96%E4%B8%94%E6%A0%87%E5%87%86%E7%9A%84%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E5%8F%91%E9%80%81%E9%97%AE%E9%A2%98"> 使用易于读取且标准的文件格式发送问题</a></p></li><li><p><a href="#%E7%B2%BE%E7%A1%AE%E7%9A%84%E6%8F%8F%E8%BF%B0%E9%97%AE%E9%A2%98%E5%B9%B6%E8%A8%80%E4%B9%8B%E6%9C%89%E7%89%A9"> 精确的描述问题并言之有物</a></p></li><li><p><a href="#%E8%AF%9D%E4%B8%8D%E5%9C%A8%E5%A4%9A%E8%80%8C%E5%9C%A8%E7%B2%BE"> 话不在多而在精</a></p></li><li><p><a href="#%E5%88%AB%E5%8A%A8%E8%BE%84%E5%A3%B0%E7%A7%B0%E6%89%BE%E5%88%B0Bug"> 别动辄声称找到Bug</a></p></li><li><p><a href="#%E5%8F%AF%E4%BB%A5%E4%BD%8E%E5%A3%B0%E4%B8%8B%E6%B0%94%EF%BC%8C%E4%BD%86%E8%BF%98%E6%98%AF%E8%A6%81%E5%85%88%E5%81%9A%E5%8A%9F%E8%AF%BE"> 可以低声下气，但还是要先做功课</a></p></li><li><p><a href="#%E6%8F%8F%E8%BF%B0%E9%97%AE%E9%A2%98%E7%97%87%E7%8A%B6%E8%80%8C%E9%9D%9E%E7%8C%9C%E6%B5%8B"> 描述问题症状而非猜测</a></p></li><li><p><a href="#%E6%8C%89%E5%8F%91%E7%94%9F%E6%97%B6%E9%97%B4%E5%85%88%E5%90%8E%E5%88%97%E5%87%BA%E9%97%AE%E9%A2%98%E7%97%87%E7%8A%B6"> 按发生时间先后列出问题症状</a></p></li><li><p><a href="#%E6%8F%8F%E8%BF%B0%E7%9B%AE%E6%A0%87%E8%80%8C%E4%B8%8D%E6%98%AF%E8%BF%87%E7%A8%8B"> 描述目标而不是过程</a></p></li><li><p><a href="#%E5%88%AB%E8%A6%81%E6%B1%82%E4%BD%BF%E7%94%A8%E7%A7%81%E4%BA%BA%E7%94%B5%E9%82%AE%E5%9B%9E%E5%A4%8D"> 别要求使用私人电邮回复</a></p></li><li><p><a href="#%E6%B8%85%E6%A5%9A%E6%98%8E%E7%A1%AE%E7%9A%84%E8%A1%A8%E8%BE%BE%E4%BD%A0%E7%9A%84%E9%97%AE%E9%A2%98%E4%BB%A5%E5%8F%8A%E9%9C%80%E6%B1%82"> 清楚明确的表达你的问题以及需求</a></p></li><li><p><a href="#%E8%AF%A2%E9%97%AE%E6%9C%89%E5%85%B3%E4%BB%A3%E7%A0%81%E7%9A%84%E9%97%AE%E9%A2%98%E6%97%B6"> 询问有关代码的问题时</a></p></li><li><p><a href="#%E5%88%AB%E6%8A%8A%E8%87%AA%E5%B7%B1%E5%AE%B6%E5%BA%AD%E4%BD%9C%E4%B8%9A%E7%9A%84%E9%97%AE%E9%A2%98%E8%B4%B4%E4%B8%8A%E6%9D%A5"> 别把自己家庭作业的问题贴上来</a></p></li><li><p><a href="#%E5%8E%BB%E6%8E%89%E6%97%A0%E6%84%8F%E4%B9%89%E7%9A%84%E6%8F%90%E9%97%AE%E5%8F%A5"> 去掉无意义的提问句</a></p></li><li><p><a href="#%E5%8D%B3%E4%BD%BF%E4%BD%A0%E5%BE%88%E6%80%A5%E4%B9%9F%E4%B8%8D%E8%A6%81%E5%9C%A8%E6%A0%87%E9%A2%98%E5%86%99%E7%B4%A7%E6%80%A5"> 即使你很急也不要在标题写紧急</a></p></li><li><p><a href="#%E7%A4%BC%E5%A4%9A%E4%BA%BA%E4%B8%8D%E6%80%AA%EF%BC%8C%E8%80%8C%E4%B8%94%E6%9C%89%E6%97%B6%E8%BF%98%E5%BE%88%E6%9C%89%E5%B8%AE%E5%8A%A9"> 礼多人不怪，而且有时还很有帮助</a></p></li><li><p><a href="#%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E5%90%8E%EF%BC%8C%E5%8A%A0%E4%B8%AA%E7%AE%80%E7%9F%AD%E7%9A%84%E8%A1%A5%E5%85%85%E8%AF%B4%E6%98%8E"> 问题解决后，加个简短的补充说明</a></p></li></ul></li><li><p><a href="#%E5%A6%82%E4%BD%95%E8%A7%A3%E8%AF%BB%E7%AD%94%E6%A1%88"> 如何解读答案</a></p><ul><li><p><a href="#RTFM%E5%92%8CSTFW%EF%BC%9A%E5%A6%82%E4%BD%95%E7%9F%A5%E9%81%93%E4%BD%A0%E5%B7%B2%E5%AE%8C%E5%85%A8%E6%90%9E%E7%A0%B8%E4%BA%86"> RTFM和STFW：如何知道你已完全搞砸了</a></p></li><li><p><a href="#%E5%A6%82%E6%9E%9C%E8%BF%98%E6%98%AF%E6%90%9E%E4%B8%8D%E6%87%82"> 如果还是搞不懂</a></p></li><li><p><a href="#%E5%A4%84%E7%90%86%E6%97%A0%E7%A4%BC%E7%9A%84%E5%9B%9E%E5%BA%94"> 处理无礼的回应</a></p></li></ul></li><li><p><a href="#%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E6%89%AE%E6%BC%94%E5%A4%B1%E8%B4%A5%E8%80%85"> 如何避免扮演失败者</a></p></li><li><p><a href="#%E4%B8%8D%E8%AF%A5%E9%97%AE%E7%9A%84%E9%97%AE%E9%A2%98"> 不该问的问题</a></p></li><li><p><a href="#%E5%A5%BD%E9%97%AE%E9%A2%98%E4%B8%8E%E8%A0%A2%E9%97%AE%E9%A2%98"> 好问题与蠢问题</a></p></li><li><p><a href="#%E5%A6%82%E6%9E%9C%E5%BE%97%E4%B8%8D%E5%88%B0%E5%9B%9E%E7%AD%94"> 如果得不到回答</a></p></li><li><p><a href="#%E5%A6%82%E4%BD%95%E6%9B%B4%E5%A5%BD%E5%9C%B0%E5%9B%9E%E7%AD%94%E9%97%AE%E9%A2%98"> 如何更好地回答问题</a></p></li><li><p><a href="#%E7%9B%B8%E5%85%B3%E8%B5%84%E6%BA%90"> 相关资源</a></p></li><li><p><a href="#%E9%B8%A3%E8%B0%A2"> 鸣谢</a></p></li></ul><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>许多项目在他们的使用协助&#x2F;说明网页中链接了本指南，这么做很好，我们也鼓励大家都这么做。但如果你是负责管理这个项目网页的人，请在超链接附近的显着位置上注明：</p><p><strong>本指南不提供此项目的实际支持服务！</strong></p><p>我们已经深刻领教到少了上述声明所带来的痛苦。因为少了这点声明，我们不停地被一些白痴纠缠。这些白痴认为既然我们发布了这本指南，那么我们就有责任解决世上所有的技术问题。</p><p>如果你是因为需要某些协助而正在阅读这本指南，并且最后离开是因为发现从本指南作者们身上得不到直接的协助，那么你就是我们所说的那些白痴之一。别问我们问题，我们只会忽略你。我们在这本指南中是教你如何从那些真正懂得你所遇到软件或硬件问题的人取得协助，而99%的情况下那不会是我们。除非你确定本指南的作者之一刚好是你所遇到的问题领域的专家，否则请不要打扰我们，这样大家都会开心一点。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在<a href="http://www.catb.org/~esr/faqs/hacker-howto.html">黑客</a>的世界里，当你拋出一个技术问题时，最终是否能得到有用的回答，往往取决于你所提问和追问的方式。本指南将教你如何正确的提问以获得你满意的答案。</p><p>不只是黑客，现在开放源代码（Open Source）软件已经相当盛行，你常常也可以由其他有经验的使用者身上得到好答案，这是件<em><strong>好事</strong></em> ；使用者比起黑客来，往往对那些新手常遇到的问题更宽容一些。然而，将有经验的使用者视为黑客，并采用本指南所提的方法与他们沟通，同样也是能从他们身上得到满意回答的最有效方式。</p><p>首先你应该明白，黑客们喜爱有挑战性的问题，或者能激发我们思维的好问题。如果我们并非如此，那我们也不会成为你想询问的对象。如果你给了我们一个值得反复咀嚼玩味的好问题，我们自会对你感激不尽。好问题是激励，是厚礼。好问题可以提高我们的理解力，而且通常会暴露我们以前从没意识到或者思考过的问题。对黑客而言，”好问题！”是诚挚的大力称赞。</p><p>尽管如此，黑客们有着蔑视或傲慢面对简单问题的坏名声，这有时让我们看起来对新手、无知者似乎较有敌意，但其实不是那样的。</p><p>我们不讳言我们对那些不愿思考、或者在发问前不做他们该做的事的人的蔑视。那些人是时间杀手 -– 他们只想索取，从不付出，消耗我们可用在更有趣的问题或更值得回答的人身上的时间。我们称这样的人为 <code>失败者（撸瑟）</code> （由于历史原因，我们有时把它拼作 <code>lusers</code> ）。</p><p>我们意识到许多人只是想使用我们写的软件，他们对学习技术细节没有兴趣。对大多数人而言，电脑只是种工具，是种达到目的的手段而已。他们有自己的生活并且有更要紧的事要做。我们了解这点，也从不指望每个人都对这些让我们着迷的技术问题感兴趣。尽管如此，我们回答问题的风格是指向那些真正对此有兴趣并愿意主动参与解决问题的人，这一点不会变，也不该变。如果连这都变了，我们就是在降低做自己最擅长的事情上的效率。</p><p>我们（在很大程度上）是自愿的，从繁忙的生活中抽出时间来解答疑惑，而且时常被提问淹没。所以我们无情的滤掉一些话题，特别是拋弃那些看起来像失败者的家伙，以便更高效的利用时间来回答<code>赢家（winner）</code>的问题。</p><p>如果你厌恶我们的态度，高高在上，或过于傲慢，不妨也设身处地想想。我们并没有要求你向我们屈服 -</p><p>- 事实上，我们大多数人非常乐意与你平等地交流，只要你付出小小努力来满足基本要求，我们就会欢迎你加入我们的文化。但让我们帮助那些不愿意帮助自己的人是没有效率的。无知没有关系，但装白痴就是不行。</p><p>所以，你不必在技术上很在行才能吸引我们的注意，但你必须表现出能引导你变得在行的特质 – 机敏、有想法、善于观察、乐于主动参与解决问题。如果你做不到这些使你与众不同的事情，我们建议你花点钱找家商业公司签个技术支持服务合同，而不是要求黑客个人无偿地帮助你。</p><p>如果你决定向我们求助，当然你也不希望被视为失败者，更不愿成为失败者中的一员。能立刻得到快速并有效答案的最好方法，就是像赢家那样提问 – 聪明、自信、有解决问题的思路，只是偶尔在特定的问题上需要获得一点帮助。</p><p>（欢迎对本指南提出改进意见。你可以 email 你的建议至 <a href="mailto:&#101;&#115;&#114;&#x40;&#x74;&#104;&#x79;&#x72;&#115;&#117;&#115;&#x2e;&#99;&#111;&#x6d;">&#101;&#115;&#114;&#x40;&#x74;&#104;&#x79;&#x72;&#115;&#117;&#115;&#x2e;&#99;&#111;&#x6d;</a> 或<a href="mailto:&#114;&#101;&#115;&#112;&#111;&#110;&#x64;&#45;&#97;&#117;&#x74;&#x6f;&#64;&#x6c;&#x69;&#110;&#117;&#120;&#x6d;&#x61;&#x66;&#105;&#97;&#x2e;&#99;&#111;&#109;">&#114;&#101;&#115;&#112;&#111;&#110;&#x64;&#45;&#97;&#117;&#x74;&#x6f;&#64;&#x6c;&#x69;&#110;&#117;&#120;&#x6d;&#x61;&#x66;&#105;&#97;&#x2e;&#99;&#111;&#109;</a>。然而请注意，本文并非<a href="http://www.ietf.org/rfc/rfc1855.txt">网络礼节</a>的通用指南，而我们通常会拒绝无助于在技术论坛得到有用答案的建议。）</p><h2 id="在提问之前"><a href="#在提问之前" class="headerlink" title="在提问之前"></a>在提问之前</h2><p>在你准备要通过电子邮件、新闻群组或者聊天室提出技术问题前，请先做到以下事情：</p><ol><li><p>   尝试在你准备提问的论坛的旧文章中搜索答案。</p></li><li><p>   尝试上网搜索以找到答案。</p></li><li><p>   尝试阅读手册以找到答案。</p></li><li><p>   尝试阅读常见问题文件（FAQ）以找到答案。</p></li><li><p>   尝试自己检查或试验以找到答案</p></li><li><p>   向你身边的强者朋友打听以找到答案。</p></li><li><p>   如果你是程序开发者，请尝试阅读源代码以找到答案</p></li></ol><p>当你提出问题的时候，请先表明你已经做了上述的努力；这将有助于树立你并不是一个不劳而获且浪费别人的时间的提问者。如果你能一并表达在做了上述努力的过程中所学到的东西会更好，因为我们更乐于回答那些表现出能从答案中学习的人的问题。</p><p>运用某些策略，比如先用Google搜索你所遇到的各种错误信息（既搜索<a href="http://groups.google.com/">Google论坛</a>，也搜索网页），这样很可能直接就找到了能解决问题的文件或邮件列表线索。即使没有结果，在邮件列表或新闻组寻求帮助时加上一句<code>我在Google中搜过下列句子但没有找到什么有用的东西 </code>也是件好事，即使它只是表明了搜索引擎不能提供哪些帮助。这么做（加上搜索过的字串）也让遇到相似问题的其他人能被搜索引擎引导到你的提问来。</p><p>别着急，不要指望几秒钟的Google搜索就能解决一个复杂的问题。在向专家求助之前，再阅读一下常见问题文件（FAQ）、放轻松、坐舒服一些，再花点时间思考一下这个问题。相信我们，他们能从你的提问看出你做了多少阅读与思考，如果你是有备而来，将更有可能得到解答。不要将所有问题一股脑拋出，只因你的第一次搜索没有找到答案（或者找到太多答案）。</p><p>准备好你的问题，再将问题仔细的思考过一遍，因为草率的发问只能得到草率的回答，或者根本得不到任何答案。越是能表现出在寻求帮助前你为解决问题所付出的努力，你越有可能得到实质性的帮助。</p><p>小心别问错了问题。如果你的问题基于错误的假设，某个普通黑客（J. Random Hacker）多半会一边在心里想着<code>蠢问题… </code>， 一边用无意义的字面解释来答复你，希望着你会从问题的回答（而非你想得到的答案）中汲取教训。</p><p>绝不要自以为<em><strong>够格</strong></em>得到答案，你没有；你并没有。毕竟你没有为这种服务支付任何报酬。你将会是自己去<em><strong>挣到</strong></em>一个答案，靠提出有内涵的、有趣的、有思维激励作用的问题 –一个有潜力能贡献社区经验的问题，而不仅仅是被动的从他人处索取知识。</p><p>另一方面，表明你愿意在找答案的过程中做点什么是一个非常好的开端。 <code>谁能给点提示？</code> 、 <code>我的这个例子里缺了什么？</code> 以及<code>我应该检查什么地方</code>比<code>请把我需要的确切的过程贴出来</code>更容易得到答复。因为你表现出只要有人能指个正确方向，你就有完成它的能力和决心。</p><h2 id="当你提问时"><a href="#当你提问时" class="headerlink" title="当你提问时"></a>当你提问时</h2><h3 id="慎选提问的论坛"><a href="#慎选提问的论坛" class="headerlink" title="慎选提问的论坛"></a>慎选提问的论坛</h3><p>小心选择你要提问的场合。如果你做了下述的事情，你很可能被忽略掉或者被看作失败者：</p><ul><li><p>在与主题不合的论坛上贴出你的问题</p></li><li><p>在探讨进阶技术问题的论坛张贴非常初级的问题；反之亦然</p></li><li><p>在太多的不同新闻群组上重复转贴同样的问题（cross-post）</p></li><li><p>向既非熟人也没有义务解决你问题的人发送私人电邮</p></li></ul><p>黑客会剔除掉那些搞错场合的问题，以保护他们沟通的渠道不被无关的东西淹没。你不会想让这种事发 生在自己身上的。</p><p>因此，第一步是找到对的论坛。再说一次，Google和其它搜索引擎还是你的朋友，用它们来找到与你遭 遇到困难的软硬件问题最相关的网站。通常那儿都有常见问题（FAQ）、邮件列表及相关说明文件的链 接。如果你的努力（包括<em><strong>阅读</strong></em>FAQ）都没有结果，网站上也许还有报告Bug（Bug-reporting）的流程或 链接，如果是这样，连过去看看。</p><p>向陌生的人或论坛发送邮件最可能是风险最大的事情。举例来说，别假设一个提供丰富内容的网页的作 者会想充当你的免费顾问。不要对你的问题是否会受到欢迎做太乐观的估计 – 如果你不确定，那就向别 处发送，或者压根别发。</p><p>在选择论坛、新闻群组或邮件列表时，别太相信名字，先看看FAQ或者许可书以弄清楚你的问题是否切 题。发文前先翻翻已有的话题，这样可以让你感受一下那里的文化。事实上，事先在新闻组或邮件列表 的历史记录中搜索与你问题相关的关键词是个极好的主意，也许这样就找到答案了。即使没有，也能帮 助你归纳出更好的问题。</p><p>别像机关枪似的一次”扫射”所有的帮助渠道，这就像大喊大叫一样会使人不快。要一个一个地来。 </p><p>搞清楚你的主题！最典型的错误之一是在某种致力于跨平台可移植的语言、套件或工具的论坛中提关于 Unix或Windows操作系统程序界面的问题。如果你不明白为什么这是大错，最好在搞清楚这之间差异之 前什么也别问。</p><p>一般来说，在仔细挑选的公共论坛中提问，会比在私有论坛中提同样的问题更容易得到有用的回答。有 几个理由可以支持这点，一是看潜在的回复者有多少，二是看观众有多少。黑客较愿意回答那些能帮助 到许多人的问题。</p><p>可以理解的是，老练的黑客和一些热门软件的作者正在接受过多的错发信息。就像那根最后压垮骆驼背 的稻草一样，你的加入也有可能使情况走向极端 – 已经好几次了，一些热门软件的作者从自己软件的支 持中抽身出来，因为伴随而来涌入其私人邮箱的无用邮件变得无法忍受。</p><h2 id="Stack-Overflow"><a href="#Stack-Overflow" class="headerlink" title="Stack Overflow"></a>Stack Overflow</h2><p>搜索，<em><strong>然后</strong></em> 在 Stack Exchange 问。</p><p>近年来，Stack Exchange community 社区已经成为回答技术及其他问题的主要渠道，尤其是那些开放 源码的项目。</p><p>因为 Google 索引是即时的，在看 Stack Exchange 之前先在 Google 搜索。有很高的机率某人已经问了 一个类似的问题，而且 Stack Exchange 网站们往往会是搜索结果中最前面几个。如果你在 Google 上没 有找到任何答案，你再到特定相关主题的网站去找。用标签（Tag）搜索能让你更缩小你的搜索结果。</p><p>Stack Exchange 已经成长到<a href="http://stackexchange.com/sites">超过一百个网站</a>，以下是最常用的几个站：</p><ul><li><p>Super User 是问一些通用的电脑问题，如果你的问题跟代码或是写程序无关，只是一些网络连线 之类的，请到这里。 </p></li><li><p>Stack Overflow 是问写程序有关的问题。 </p></li><li><p>Server Fault 是问服务器和网管相关的问题。</p></li></ul><h2 id="网站和IRC论坛"><a href="#网站和IRC论坛" class="headerlink" title="网站和IRC论坛"></a>网站和IRC论坛</h2><p>本地的使用者群组（user group），或者你所用的 Linux 发行版本也许正在宣传他们的网页论坛或 IRC 频道，并提供新手帮助（在一些非英语国家，新手论坛很可能还是邮件列表）， 这些地方是开始提问的 好首选，特别是当你觉得遇到的也许只是相对简单或者很普通的问题时。经过宣传的 IRC 频道是公开欢 迎提问的地方，通常可以即时得到回应。</p><p>事实上，如果程序出的问题只发生在特定 Linux 发行版提供的版本（这很常见），最好先去该发行版的 论坛或邮件列表中提问，再到程序本身的论坛或邮件列表提问。（否则）该项目的黑客可能仅仅回复 “用<em><strong>我们的</strong></em>版本”。</p><p>在任何论坛发文以前，先确认一下有没有搜索功能。如果有，就试着搜索一下问题的几个关键词，也许 这会有帮助。如果在此之前你已做过通用的网页搜索（你也该这样做），还是再搜索一下论坛，搜索引 擎有可能没来得及索引此论坛的全部内容。</p><p>通过论坛或 IRC 频道来提供使用者支持服务有增长的趋势，电子邮件则大多为项目开发者间的交流而保 留。所以最好先在论坛或 IRC 中寻求与该项目相关的协助。</p><h2 id="第二步，使用项目邮件列表"><a href="#第二步，使用项目邮件列表" class="headerlink" title="第二步，使用项目邮件列表"></a>第二步，使用项目邮件列表</h2><p>当某个项目提供开发者邮件列表时，要向列表而不是其中的个别成员提问，即使你确信他能最好地回答 你的问题。查一查项目的文件和首页，找到项目的邮件列表并使用它。有几个很好的理由支持我们采用 这种办法：</p><ul><li><p>任何好到需要向个别开发者提出的问题，也将对整个项目群组有益。反之，如果你认为自己的问题 对整个项目群组来说太愚蠢，也不能成为骚扰个别开发者的理由。</p></li><li><p>向列表提问可以分散开发者的负担，个别开发者（尤其是项目领导人）也许太忙以至于没法回答你的问题。</p></li><li><p>大多数邮件列表都会被存档，那些被存档的内容将被搜索引擎索引。如果你向列表提问并得到解答，将来其它人可以通过网页搜索找到你的问题和答案，也就不用再次发问了。</p></li><li><p>如果某些问题经常被问到，开发者可以利用此信息来改进说明文件或软件本身，以使其更清楚。如果只是私下提问，就没有人能看到最常见问题的完整场景。</p></li></ul><p>如果一个项目既有”使用者” 也有”开发者”（或”黑客”）邮件列表或论坛，而你又不会动到那些源代码，那么就向”使用者”列表或论坛提问。不要假设自己会在开发者列表中受到欢迎，那些人多半会将你的提问视为干扰他们开发的噪音。</p><p>然而，如果你<em><strong>确信</strong></em>你的问题很特别，而且在”使用者” 列表或论坛中几天都没有回复，可以试试前往”开发 者”列表或论坛发问。建议你在张贴前最好先暗地里观察几天以了解那里的行事方式（事实上这是参与任 何私有或半私有列表的好主意）</p><p>如果你找不到一个项目的邮件列表，而只能查到项目维护者的电子邮件地址，尽管向他发信。即使是在 这种情况下，也别假设（项目）邮件列表不存在。在你的电子邮件中，请陈述你已经试过但没有找到合 适的邮件列表，也提及你不反对将自己的邮件转发给他人（许多人认为，即使没什么秘密，私人电子邮 件也不应该被公开。通过允许将你的电子邮件转发他人，你给了相应人员处置你邮件的选择）。</p><h2 id="使用有意义且描述明确的标题"><a href="#使用有意义且描述明确的标题" class="headerlink" title="使用有意义且描述明确的标题"></a>使用有意义且描述明确的标题</h2><p>在邮件列表、新闻群组或论坛中，大约50字以内的标题是抓住资深专家注意力的好机会。别用喋喋不休的<code>帮帮忙</code>、<code>跪求</code> 、<code>急</code> （更别说<code>救命啊！！！！</code>这样让人反感的话，用这种标题会被条件反射式地忽略） 来浪费这个机会。不要妄想用你的痛苦程度来打动我们，而是在这点空间中使用极简单扼要的描述方式 来提出问题。</p><p>一个好标题范例是<code>目标 -- 差异</code>式的描述，许多技术支持组织就是这样做的。在<code>目标</code>部分指出是哪一个 或哪一组东西有问题，在<code>差异</code>部分则描述与期望的行为不一致的地方。</p><blockquote><p>蠢问题：救命啊！我的笔电不能正常显示了！ </p></blockquote><blockquote><p>聪明问题：X.org 6.8.1的鼠标游标会变形，某牌显卡 MV1005 芯片组。</p></blockquote><blockquote><p> 更聪明问题：X.org 6.8.1的鼠标游标，在某牌显卡 MV1005 芯片组环境下 - 会变形。</p></blockquote><p>编写<code>目标 -- 差异</code>式描述的过程有助于你组织对问题的细緻思考。是什么被影响了？ 仅仅是鼠标游标或 者还有其它图形？只在 X.org 的 X 版中出现？或只是出现在6.8.1版中？ 是针对某牌显卡芯片组？或者只 是其中的 MV1005 型号？ 一个黑客只需瞄一眼就能够立即明白你的环境<em><strong>和</strong></em>你遇到的问题。</p><p>总而言之，请想像一下你正在一个只显示标题的存档讨论串（Thread）索引中查寻。让你的标题更好地 反映问题，可使下一个搜索类似问题的人能够关注这个讨论串，而不用再次提问相同的问题。</p><p>如果你想在回复中提出问题，记得要修改内容标题，以表明你是在问一个问题， 一个看起来像<code>Re: 测试</code>或者<code>Re: 新bug</code>的标题很难引起足够重视。另外，在不影响连贯性之下，适当引用并删减前文的内 容，能给新来的读者留下线索。</p><p>对于讨论串，不要直接点击回复来开始一个全新的讨论串，这将限制你的观众。因为有些邮件阅读程 序，比如 mutt ，允许使用者按讨论串排序并通过折叠讨论串来隐藏消息，这样做的人永远看不到你发 的消息。</p><p>仅仅改变标题还不够。mutt 和其它一些邮件阅读程序还会检查邮件标题以外的其它信息，以便为其指定 讨论串。所以宁可发一个全新的邮件。</p><p>在网页论坛上，好的提问方式稍有不同，因为讨论串与特定的信息紧密结合，并且通常在讨论串外就看 不到里面的内容，故通过回复提问，而非改变标题是可接受的。不是所有论坛都允许在回复中出现分离 的标题，而且这样做了基本上没有人会去看。不过，通过回复提问，这本身就是暧昧的做法，因为它们 只会被正在查看该标题的人读到。所以，除非你<em><strong>只想</strong></em>在该讨论串当前活跃的人群中提问，不然还是另起炉灶比较好。</p><h2 id="使问题容易回复"><a href="#使问题容易回复" class="headerlink" title="使问题容易回复"></a>使问题容易回复</h2><p>以<code>**请将你的回复寄到**……</code> 来结束你的问题多半会使你得不到回答。如果你觉得花几秒钟在邮件客户端设置一下回复地址都麻烦，我们也觉得花几秒钟思考你的问题更麻烦。如果你的邮件程序不支持这样做，<a href="http://linuxmafia.com/faq/Mail/muas.html">换个好点的</a>；如果是操作系统不支持这种邮件程序，也换个好点的。</p><p>在论坛，要求通过电子邮件回复是非常无礼的，除非你相信回复的信息可能比较敏感（而且有人会为了某些未知的原因，只让你而不是整个论坛知道答案）。如果你只是想在有人回复讨论串时得到电子邮件提醒，可以要求网页论坛发送给你。几乎所有论坛都支持诸如<code>追踪此讨论串</code>、<code>有回复时发送邮件提醒</code>等功能。</p><h2 id="用清晰、正确、精准并语法正确的语句"><a href="#用清晰、正确、精准并语法正确的语句" class="headerlink" title="用清晰、正确、精准并语法正确的语句"></a>用清晰、正确、精准并语法正确的语句</h2><p>我们从经验中发现，粗心的提问者通常也会粗心的写程序与思考（我敢打包票）。回答粗心大意者的问 题很不值得，我们宁愿把时间耗在别处。</p><p>正确的拼字、标点符号和大小写是很重要的。一般来说，如果你觉得这样做很麻烦，不想在乎这些，那 我们也觉得麻烦，不想在乎你的提问。花点额外的精力斟酌一下字句，用不着太僵硬与正式 – 事实上， 黑客文化很看重能准确地使用非正式、俚语和幽默的语句。但它<em><strong>必须很</strong></em>准确，而且有迹象表明你是在思 考和关注问题。</p><p>正确地拼写、使用标点和大小写，不要将 <code>its</code> 混淆为 <code>it&#39;s </code>，<code>loose</code>搞成<code>lose</code>或者将 <code>discrete</code> 弄成 <code>discreet</code> 。不要<strong>全部用大写</strong>，这会被视为无礼的大声嚷嚷（全部小写也好不到哪去，因为不易阅读。<a href="http://en.wikipedia.org/wiki/Alan_Cox">Alan Cox</a>也许可以这样做，但你不行。）</p><p>更白话的说，如果你写得像是个半文盲[译注：<a href="http://zh.wikipedia.org/zh-tw/%E5%B0%8F%E7%99%BD">小白</a>]），那多半得不到理睬。也不要使用即时通讯中的简写或<a href="http://zh.wikipedia.org/zh-tw/%E7%81%AB%E6%98%9F%E6%96%87">火星文</a>，如将<code>的</code> 简化为<code>ㄉ</code> 会使你看起来像一个为了少打几个键而省字的小白。更糟的是，如果像个小孩似地鬼画符那绝对是在找死，可以肯定没人会理你（或者最多是给你一大堆指责与挖苦）。</p><p>如果在使用非母语的论坛提问，你可以犯点拼写和语法上的小错，但决不能在思考上马虎（没错，我们 通常能弄清两者的分别）。同时，除非你知道回复者使用的语言，否则请使用英语书写。繁忙的黑客一 般会直接删除用他们看不懂语言写的消息。在网络上英语是通用语言，用英语书写可以将你的问题在尚 未被阅读就被直接删除的可能性降到最低。</p><p>如果英文是你的外语（Second language），提示潜在回复者你有潜在的语言困难是很好的： [译注：以下附上原文以供使用]</p><blockquote><p>English is not my native language; please excuse typing errors.</p></blockquote><ul><li>英文不是我的母语，请原谅我的错字或语法</li></ul><blockquote><p>If you speak $LANGUAGE, please email&#x2F;PM me; </p><p>I may need assistance translating my question.</p></blockquote><ul><li>如果你说<strong>某语言</strong>，请寄信&#x2F;私讯给我；我需要有人协助我翻译我的问题</li></ul><blockquote><p>I’ve posted my question in $LANGUAGE and English. </p><p>I’ll be glad to translate responses, if you only use one or the other.</p></blockquote><ul><li>我把我的问题用<strong>某语言</strong>和英文写出来，如果你只用一种语言回答，我会乐意将其翻译成另一种。</li></ul><h2 id="使用易于读取且标准的文件格式发送问题"><a href="#使用易于读取且标准的文件格式发送问题" class="headerlink" title="使用易于读取且标准的文件格式发送问题"></a>使用易于读取且标准的文件格式发送问题</h2><p>如果你人为地将问题搞得难以阅读，它多半会被忽略，人们更愿读易懂的问题，所以：</p><ul><li><p>使用纯文字而不是HTML (<a href="http://archive.birdhouse.org/etc/evilmail.html">关闭HTML</a>并不难）</p></li><li><p>使用MIME附件通常是可以的，前提是真正有内容（譬如附带的源代码或patch），而不仅仅是邮件 程序生成的模板（譬如只是信件内容的拷贝）。 </p></li><li><p>不要发送一段文字只是单行句子但多次断行的邮件（这使得回复部分内容非常困难）。设想你的读 者是在80个字符宽的终端机上阅读邮件，最好设置你的断行点小于80字。 </p></li><li><p>但是，也<em><strong>不要</strong></em>用任何固定断行资料（譬如日志档案拷贝或会话记录）。档案应该原样包含，让回复 者有信心他们看到的是和你看到的一样的东西。 </p></li><li><p>在英语论坛中，不要使用 <code>Quoted-Printable</code> MIME编码发送消息。这种编码对于张贴非ASCII语言 可能是必须的，但很多邮件程序并不支持这种编码。当它们分断时，那些文本中四处散布的 <code>=20</code> 符 号既难看也分散注意力，甚至有可能破坏内容的语意。 </p></li><li><p>绝对，<em><strong>永远</strong></em>不要指望黑客们阅读使用封闭格式编写的文档，像是微软公司的Word或Excel文件等。 大多数黑客对此的反应就像有人将还在冒热气的猪粪倒在你门口阶梯上时你的反应一样。即便他们 能够处理，他们也很厌恶这么做。</p></li><li><p>如果你从使用Windows的电脑发送电子邮件，关闭微软愚蠢的 <code>智能引号</code> 功能 （从[选项] &gt; [校订] &gt; [自动校正选项], 按掉 <code>智能引号</code> 单选框），以免在你的邮件中到处散布垃圾字符。</p></li><li><p>在论坛，勿滥用 <code>表情符号</code> 和 <code>HTML</code> 功能（当它们提供时）。一两个表情符号通常没有问题，但花哨 的彩色文本倾向于使人认为你是个无能之辈。过滥地使用表情符号、色彩和字体会使你看来像个傻 笑的小姑娘。这通常不是个好主意，除非你只是对sex而不是有用的回复更有兴趣。</p></li></ul><p>如果你使用图形用户界面的邮件程序（如微软公司的Outlook或者其它类似的），注意它们的默认设置 不一定满足这些要求。大多数这类程序有基于选单的 <code>查看源代码</code> 命令，用它来检查发送文件夹中的消 息，以确保发送的是没有多餘杂质的纯文本文件。</p><h2 id="精确的描述问题并言之有物"><a href="#精确的描述问题并言之有物" class="headerlink" title="精确的描述问题并言之有物"></a>精确的描述问题并言之有物</h2><ul><li><p>仔细、清楚地描述你的问题或Bug的症状。</p></li><li><p>描述问题发生的环境（机器配置、操作系统、应用程序、以及相关的信息），提供经销商的发行版 和版本号（如： <code>Fedora Core 4</code> 、 <code>Slackware 9.1</code> 等）。</p></li><li><p>描述在提问前你是怎样去研究和理解这个问题的。</p></li><li><p>描述在提问前为确定问题而采取的诊断步骤。</p></li><li><p>描述最近做过什么可能相关的硬件或软件变更。 </p></li><li><p>尽可能的提供一个可以 <code>重现这个问题的既定环境</code> 的方法</p></li></ul><p>尽量去揣测一个黑客会怎样反问你，在他提问的时候预先给他答案。</p><p>以上几点中，当你报告的是你认为可能在代码中的问题时，给黑客一个可以重现你的问题的环境尤其重 要。当你这么做时，你得到有效的回答的机会和速度都会大大的提升。</p><p><a href="http://www.chiark.greenend.org.uk/~sgtatham/">Simon Tatham</a>写过一篇名为《<a href="http://www.chiark.greenend.org.uk/~sgtatham/bugs-tw.html">如何有效的报告Bug</a>》的出色文章。强力推荐你也读一读。</p><h2 id="话不在多而在精"><a href="#话不在多而在精" class="headerlink" title="话不在多而在精"></a>话不在多而在精</h2><p>你需要提供精确有内容的信息。这并不是要求你简单的把成堆的出错代码或者资料完全转录到你的提问中。如果你有庞大而复杂的测试样例能重现程序挂掉的情境，尽量将它剪裁得越小越好。</p><p>这样做的用处至少有三点。</p><p>第一，表现出你为简化问题付出了努力，这可以使你得到回答的机会增加；</p><p>第二，简化问题使你更有可能得到<em><strong>有用</strong></em>的答案；</p><p>第三，在精炼你的bug报告的过程中，你很可能就自己找到了解决方法或权宜之计。</p><h2 id="别动辄声称找到Bug"><a href="#别动辄声称找到Bug" class="headerlink" title="别动辄声称找到Bug"></a>别动辄声称找到Bug</h2><p>当你在使用软件中遇到问题，除非你非常、<em><strong>非常</strong></em>的有根据，不要动辄声称找到了Bug。提示：除非你能 提供解决问题的源代码补丁，或者对前一版本的回归测试表现出不正确的行为，否则你都多半不够完全 确信。这同样适用在网页和文件，如果你（声称）发现了文件的 <code>Bug</code> ，你应该能提供相应位置的修正或 替代文件。</p><p>请记得，还有许多其它使用者没遇到你发现的问题，否则你在阅读文件或搜索网页时就应该发现了（你在抱怨前<a href="#page3">已经做了这些，是吧</a>？）。这也意味着很有可能是你弄错了而不是软件本身有问题。</p><p>编写软件的人总是非常辛苦地使它尽可能完美。如果你声称找到了Bug，也就是在质疑他们的能力，即 使你是对的，也有可能会冒犯到其中某部分人。这尤其严重当你在标题中嚷嚷着有 <code>Bug</code> 。</p><p>提问时，即使你私下非常确信已经发现一个真正的Bug，最好写得像是<em><strong>你</strong></em>做错了什么。如果真的有 Bug，你会在回复中看到这点。这样做的话，如果真有Bug，维护者就会向你道歉，这总比你惹恼别人 然后欠别人一个道歉要好一点。</p><h2 id="可以低声下气，但还是要先做功课"><a href="#可以低声下气，但还是要先做功课" class="headerlink" title="可以低声下气，但还是要先做功课"></a>可以低声下气，但还是要先做功课</h2><p>有些人明白他们不该粗鲁或傲慢的提问并要求得到答复，但他们选择另一个极端 – 低声下气： <code>我知道我只是个可悲的新手，一个撸瑟，但...</code> 。这既使人困扰，也没有用，尤其是伴随着与实际问题含糊不清的描 述时更令人反感。</p><p>别用原始灵长类动物的把戏来浪费你我的时间。取而代之的是，尽可能清楚地描述背景条件和你的问题 情况。这比低声下气更好地定位了你的位置。</p><p>有时网页论坛会设有专为新手提问的版面，如果你真的认为遇到了初学者的问题，到那去就是了，但一 样别那么低声下气。</p><h2 id="描述问题症状而非猜测"><a href="#描述问题症状而非猜测" class="headerlink" title="描述问题症状而非猜测"></a>描述问题症状而非猜测</h2><p>告诉黑客们你认为问题是怎样造成的并没什么帮助。（如果你的推断如此有效，还用向别人求助 吗？），因此要确信你原原本本告诉了他们问题的症状，而不是你的解释和理论；让黑客们来推测和诊 断。如果你认为陈述自己的猜测很重要，清楚地说明这只是你的猜测，并描述为什么它们不起作用。</p><p><em><strong>蠢问题</strong></em></p><blockquote><p>我在编译内核时接连遇到 SIG11 错误， </p><p>我怀疑某条飞线搭在主板的走线上了，这种情况应该怎样检查最好？</p></blockquote><p><em><strong>聪明问题</strong></em></p><blockquote><p>我的组装电脑是 FIC-PA2007 主机板搭载 AMD K6&#x2F;233 CPU（威盛 Apollo VP2芯片组）， 256MB Corsair PC133 SDRAM内存，在编译内核时，从开机20分钟以后就频频产生 SIG11 错误， </p><p>但是在头20分钟内从没发生过相同的问题。重新启动也没有用，但是关机一晚上就又能工作20分钟。</p><p>所有内存都换过了，没有效果。相关部分的标准编译记录如下…。</p></blockquote><p>由于以上这点似乎让许多人觉得难以配合，这里有句话可以提醒你： <code>所有的诊断专家都来自密苏里州</code>。 美国国务院的官方座右铭则是： <code>让我看看</code> （出自国会议员 Willard D. Vandiver 在1899年时的讲话： <code>我来自一个出产玉米，棉花，牛蒡和民主党人的国家，滔滔雄辩既不能说服我，也不会让我满意。我来自密苏里州，你必须让我看看。</code> ） 针对诊断者而言，这并不是一种怀疑，而只是一种真实而有用的需求，以便让他们看 到的是与你看到的原始证据尽可能一致的东西，而不是你的猜测与归纳的结论。所以，大方的展示给我 们看吧！</p><h2 id="按发生时间先后列出问题症状"><a href="#按发生时间先后列出问题症状" class="headerlink" title="按发生时间先后列出问题症状"></a>按发生时间先后列出问题症状</h2><p>问题发生前的一系列操作，往往就是对找出问题最有帮助的线索。因此，你的说明里应该包含你的操作 步骤，以及机器和软件的反应，直到问题发生。在命令行处理的情况下，提供一段操作记录（例如运行 脚本工具所生成的），并引用相关的若干行（如20行）记录会非常有帮助。</p><p>如果挂掉的程序有诊断选项（如 -v 的详述开关），试着选择这些能在记录中增加调试信息的选项。记住， <code>多</code> 不等于 <code>好</code> 。试着选取适当的调试级别以便提供有用的信息而不是让读者淹没在垃圾中。</p><p>如果你的说明很长（如超过四个段落），在开头简述问题，接下来再按时间顺序详述会有所帮助。这样 黑客们在读你的记录时就知道该注意哪些内容了。</p><h2 id="描述目标而不是过程"><a href="#描述目标而不是过程" class="headerlink" title="描述目标而不是过程"></a>描述目标而不是过程</h2><p>如果你想弄清楚如何做某事（而不是报告一个Bug），在开头就描述你的目标，然后才陈述重现你所卡 住的特定步骤。</p><p>经常寻求技术帮助的人在心中有个更高层次的目标，而他们在自以为能达到目标的特定道路上被卡住 了，然后跑来问该怎么走，但没有意识到这条路本身就有问题。结果要费很大的劲才能搞定。</p><p><strong>蠢问题</strong></p><blockquote><p>我怎样才能从某绘图程序的颜色选择器中取得十六进制的的RGB值？</p></blockquote><p><strong>聪明问题</strong></p><blockquote><p>我正试着用替换一幅图片的色码成自己选定的色码，我现在知道的唯一方法是编辑每个色码区块， 但却无法从某绘图程序的颜色选择器取得十六进制的的RGB值。</p></blockquote><p>第二种提问法比较聪明，你可能得到像是 <code>建议采用另一个更合适的工具</code> 的回复。</p><h2 id="别要求使用私人电邮回复"><a href="#别要求使用私人电邮回复" class="headerlink" title="别要求使用私人电邮回复"></a>别要求使用私人电邮回复</h2><p>黑客们认为问题的解决过程应该公开、透明，此过程中如果更有经验的人注意到不完整或者不当之处， 最初的回复才能够、也应该被纠正。同时，作为提供帮助者也能因为能力和学识被其它同行看到而得到 某种奖励。</p><p>当你要求私下回复时，这个过程和奖励都被中止。别这样做，让<em><strong>回复者</strong></em>来决定是否私下回答 – 如果他真 这么做了，通常是因为他认为问题编写太差或者太肤浅，以至于对其它人没有兴趣。</p><p>这条规则存在一条有限的例外，如果你确信提问可能会引来大量雷同的回复时，那么这个神奇的提问句 <code>会是向我发电邮，我将为论坛归纳这些回复</code> 。试着将邮件列表或新闻群组从洪水般的雷同回复中解救出来 是非常有礼貌的 – 但你必须信守诺言。</p><h2 id="清楚明确的表达你的问题以及需求"><a href="#清楚明确的表达你的问题以及需求" class="headerlink" title="清楚明确的表达你的问题以及需求"></a>清楚明确的表达你的问题以及需求</h2><p>漫无边际的提问近乎无休无止的时间黑洞。最有可能给你有用答案的人通常也正是最忙的人（他们忙是 因为要亲自完成大部分工作）。这样的人对无节制的时间黑洞相当厌恶，所以他们也倾向于厌恶那些漫 无边际的提问。</p><p>如果你明确表述需要回答者做什么（如提供指点、发送一段代码、检查你的补丁、或是其他等等），就 最有可能得到有用的答案。因为这会定出一个时间和精力的上限，便于回答者能集中精力来帮你。这么 做很棒。</p><p>要理解专家们所处的世界，请把专业技能想像为充裕的资源，而回复的时间则是稀缺的资源。你要求他 们奉献的时间越少，你越有可能从真正专业而且很忙的专家那里得到解答。</p><p>所以，界定一下你的问题，使专家花在辨识你的问题和回答所需要付出的时间减到最少，这技巧对你有 用答案相当有帮助 – 但这技巧通常和简化问题有所区别。因此，问 <code>我想更好的理解X，可否指点一下哪有好 一点说明？</code> 通常比问 <code>你能解释一下X吗？</code> 更好。如果你的代码不能运作，通常请别人看看哪里有问题，比 要求别人替你改正要明智得多。</p><h2 id="询问有关代码的问题时"><a href="#询问有关代码的问题时" class="headerlink" title="询问有关代码的问题时"></a>询问有关代码的问题时</h2><p>别要求他人帮你有问题的代码调试而不提示一下应该从何入手。张贴几百行的代码，然后说一声： <code>它不会动</code> 会让你完全被忽略。只贴几十行代码，然后说一句： <code>在第七行以后，我期待它显示&lt;x&gt; ，但实际出现的是&lt;y&gt;比较有可能让你得到回应</code>。</p><p>最有效描述程序问题的方法是提供最精简的Bug展示测试示例（bug-demonstrating test case）。什么是最精简的测试示例? 那是问题的缩影；一小个程序片段能<strong>刚好</strong>展示出程序的异常行为，而不包含其他令人分散注意力的内容。怎么制作最精简的测试示例？如果你知道哪一行或哪一段代码会造成异常的行为，复制下来并加入足够重现这个状况的代码（例如，足以让这段代码能被编译&#x2F;直译&#x2F;被应用程序处理）。如果你无法将问题缩减到一个特定区块，就复制一份代码并移除不影响产生问题行为的部分。总之，测试示例越小越好（查看<a href="#%E8%AF%9D%E4%B8%8D%E5%9C%A8%E5%A4%9A%E8%80%8C%E5%9C%A8%E7%B2%BE">话不在多而在精</a>一节）。</p><p>一般而言，要得到一段相当精简的测试示例并不太容易，但永远先尝试这样做的是种好习惯。这种方式可以帮助你了解如何自行解决这个问题 —- 而且即使你的尝试不成功，黑客们也会看到你在尝试取得答案的过程中付出了努力，这可以让他们更愿意与你合作。</p><p>如果你只是想让别人帮忙审查（Review）一下代码，在信的开头就要说出来，并且一定要提到你认为哪一部分特别需要关注以及为什么。</p><h2 id="别把自己家庭作业的问题贴上来"><a href="#别把自己家庭作业的问题贴上来" class="headerlink" title="别把自己家庭作业的问题贴上来"></a>别把自己家庭作业的问题贴上来</h2><p>黑客们很擅长分辨哪些问题是家庭作业式的问题；因为我们中的大多数都曾自己解决这类问题。同样， 这些问题得由<em><strong>你</strong></em>来搞定，你会从中学到东西。你可以要求给点提示，但别要求得到完整的解决方案。</p><p>如果你怀疑自己碰到了一个家庭作业式的问题，但仍然无法解决，试试在<em><strong>使用者</strong></em>群组，论坛或（最后一 招）在项目的使用者邮件列表或论坛中提问。尽管黑客们<em><strong>会</strong></em>看出来，但一些有经验的使用者也许仍会给 你一些提示。</p><h2 id="去掉无意义的提问句"><a href="#去掉无意义的提问句" class="headerlink" title="去掉无意义的提问句"></a>去掉无意义的提问句</h2><p>避免用无意义的话结束提问，例如<code>有人能帮我吗？</code> 或者<code>这有答案吗？</code> 。</p><p>首先：如果你对问题的描述不是很好，这样问更是画蛇添足。</p><p>其次：由于这样问是画蛇添足，黑客们会很厌烦你 – 而且通常会用逻辑上正确，但毫无意义的回答来表示他们的蔑视， 例如：<code>没错，有人能帮你</code> 或者<code>不，没答案</code> 。</p><p>一般来说，避免用 <code>是或否</code> 、<code>对或错</code> 、<code>有或没有</code> 类型的问句，除非你想得到<a href="http://homepage.ntlworld.com./jonathan.deboynepollard/FGA/questions-with-yes-or-no-answers.html">是或否类型的回答</a>。</p><h2 id="即使你很急也不要在标题写紧急"><a href="#即使你很急也不要在标题写紧急" class="headerlink" title="即使你很急也不要在标题写紧急"></a>即使你很急也不要在标题写<code>紧急</code></h2><p>这是你的问题，不是我们的。宣称 <code>紧急</code> 极有可能事与愿违：大多数黑客会直接删除无礼和自私地企图即 时引起关注的问题。更严重的是， <code>紧急</code> 这个字（或是其他企图引起关注的标题）通常会被垃圾信过滤器 过滤掉 – 你希望能看到你问题的人可能永远也看不到。</p><p>有半个例外的情况是，如果你是在一些很高调，会使黑客们兴奋的地方，也许值得这样去做。在这种情 况下，如果你有时间压力，也很有礼貌地提到这点，人们也许会有兴趣回答快一点。</p><p>当然，这风险很大，因为黑客们兴奋的点多半与你的不同。譬如从 NASA 国际空间站（International Space Station）发这样的标题没有问题，但用自我感觉良好的慈善行为或政治原因发肯定不行。事实 上，张贴诸如 <code>紧急：帮我救救这个毛绒绒的小海豹！</code> 肯定让你被黑客忽略或惹恼他们，即使他们认为毛绒 绒的小海豹很重要。</p><h2 id="礼多人不怪，而且有时还很有帮助"><a href="#礼多人不怪，而且有时还很有帮助" class="headerlink" title="礼多人不怪，而且有时还很有帮助"></a>礼多人不怪，而且有时还很有帮助</h2><p>彬彬有礼，多用 <code>请</code> 和 <code>谢谢您的关注</code> ，或 <code>谢谢你的关照</code> 。让大家都知道你对他们花时间免费提供帮助心存感激。</p><p>坦白说，这一点并没有比清晰、正确、精准并合法语法和避免使用专用格式重要（也不能取而代之）。 黑客们一般宁可读有点唐突但技术上鲜明的Bug报告，而不是那种有礼但含糊的报告。（如果这点让你 不解，记住我们是按问题能教我们什么来评价问题的价值的）</p><p>然而，如果你有一串的问题待解决，客气一点肯定会增加你得到有用回应的机会。</p><p> （我们注意到，自从本指南发布后，从资深黑客那里得到的唯一严重缺陷反馈，就是对预先道谢这一 条。一些黑客觉得 <code>先谢了</code> 意味着事后就不用再感谢任何人的暗示。我们的建议是要么先说 <code>先谢了</code> ，然后 事后再对回复者表示感谢，或者换种方式表达感激，譬如用 <code>谢谢你的关注</code> 或 <code>谢谢你的关照</code> 。）</p><h2 id="问题解决后，加个简短的补充说明"><a href="#问题解决后，加个简短的补充说明" class="headerlink" title="问题解决后，加个简短的补充说明"></a>问题解决后，加个简短的补充说明</h2><p>问题解决后，向所有帮助过你的人发个说明，让他们知道问题是怎样解决的，并再一次向他们表示感谢。如果问题在新闻组或者邮件列表中引起了广泛关注，应该在那里贴一个说明比较恰当。</p><p>最理想的方式是向最初提问的话题回复此消息，并在标题中包含<code>已修正</code> ，已解决 或其它同等含义的明显标记。在人来人往的邮件列表里，一个看见讨论串<code>问题 X</code> 和<code>问题的X - 已解决</code> 的潜在回复者就明白不用再浪费时间了（除非他个人觉得<code>问题 X</code> 的有趣），因此可以利用此时间去解决其它问题。</p><p>补充说明不必很长或是很深入；简单的一句你<code>好，原来是网线出了问题！谢谢大家 – Bill</code> 比什么也不说要来的好。事实上，除非结论真的很有技术含量，否则简短可爱的小结比长篇大论更好。说明问题是怎样解决的，但大可不必将解决问题的过程复述一遍。</p><p>对于有深度的问题，张贴调试记录的摘要是有帮助的。描述问题的最终状态，说明是什么解决了问题， 在此<em><strong>之后</strong></em>才指明可以避免的盲点。避免盲点的部分应放在正确的解决方案和其它总结材料之后，而不要 将此信息搞成侦探推理小说。列出那些帮助过你的名字，会让你交到更多朋友。</p><p>除了有礼貌和有内涵以外，这种类型的补充也有助于他人在邮件列表&#x2F;新闻群组&#x2F;论坛中搜索到真正解决你问题的方案，让他们也从中受益。</p><p>至少，这种补充有助于让每位参与协助的人因问题的解决而从中得到满足感。如果你自己不是技术专家或者黑客，那就相信我们，这种感觉对于那些你向他们求助的大师或者专家而言，是非常重要的。问题悬而未决会让人灰心；黑客们渴望看到问题被解决。好人有好报，满足他们的渴望，你会在下次提问时尝到甜头。</p><p>思考一下怎样才能避免他人将来也遇到类似的问题，自问写一份文件或加个常见问题（FAQ）会不会有帮助。如果是的话就将它们发给维护者。</p><p>在黑客中，这种良好的后继行动实际上比传统的礼节更为重要，也是你如何透过善待他人而赢得声誉的方式，这是非常有价值的资产。</p><h2 id="如何解读答案"><a href="#如何解读答案" class="headerlink" title="如何解读答案"></a>如何解读答案</h2><h3 id="RTFM和STFW：如何知道你已完全搞砸了"><a href="#RTFM和STFW：如何知道你已完全搞砸了" class="headerlink" title="RTFM和STFW：如何知道你已完全搞砸了"></a>RTFM和STFW：如何知道你已完全搞砸了</h3><p>有一个古老而神圣的传统：如果你收到 <code>RTFM （Read The Fucking Manual）</code> 的回应，回答者认为<strong>你应该去读他妈的手册</strong>。当然，基本上他是对的，你应该去读一读。</p><p>RTFM 有一个年轻的亲戚。如果你收到 <code>STFW（Search The Fucking Web）</code> 的回应，回答者认为你<strong>应该到他妈的网上搜索</strong>过了。那人多半也是对的，去搜索一下吧。（更温和一点的说法是<a href="http://lmgtfy.com/">Google是你的朋友</a></p><p>在论坛，你也可能被要求去爬爬论坛的旧文。事实上，有人甚至可能热心地为你提供以前解决此问题的讨论串。但不要依赖这种关照，提问前应该先搜索一下旧文。</p><p>通常，用这两句之一回答你的人会给你一份包含你需要内容的手册或者一个网址，而且他们打这些字的时候也正在读着。这些答复意味着回答者认为</p><ul><li>你需要的信息非常容易获得； </li><li>你自己去搜索这些信息比灌给你能让你学到更多。</li></ul><p>你不应该因此不爽；<strong>依照黑客的标准，他已经表示了对你一定程度的关注，而没有对你的要求视而不见</strong>。你应该对他祖母般的慈祥表示感谢。</p><h3 id="如果还是搞不懂"><a href="#如果还是搞不懂" class="headerlink" title="如果还是搞不懂"></a>如果还是搞不懂</h3><p>如果你看不懂回应，别立刻要求对方解释。像你以前试着自己解决问题时那样（利用手册，FAQ，网 络，身边的高手），先试着去搞懂他的回应。如果你真的需要对方解释，记得表现出你已经从中学到了 点什么。</p><p>比方说，如果我回答你： <code>看来似乎是 zentry 卡住了；你应该先清除它。</code> ，然后，这是一个<em><strong>很糟的</strong></em>后续问 题回应： <code>zentry是什么？</code> 好的问法应该是这样： <code>哦~~~我看过说明了但是只有 -z 和 -p 两个参数中提到了 zentries，而且还都没有清楚的解释如何清除它。你是指这两个中的哪一个吗？还是我看漏了什么？</code></p><h3 id="处理无礼的回应"><a href="#处理无礼的回应" class="headerlink" title="处理无礼的回应"></a>处理无礼的回应</h3><p>很多黑客圈子中看似无礼的行为并不是存心冒犯。相反，它是直接了当，一针见血式的交流风格，这种 风格更注重解决问题，而不是使人感觉舒服而却模模糊糊。</p><p>如果你觉得被冒犯了，试着平静地反应。如果有人真的做了出格的事，邮件列表、新闻群组或论坛中的 前辈多半会招呼他。如果这<em><strong>没有</strong></em>发生而你却发火了，那么你发火对象的言语可能在黑客社区中看起来是 正常的，而你将被视为有错的一方，这将伤害到你获取信息或帮助的机会。</p><p>另一方面，你偶而真的会碰到无礼和无聊的言行。与上述相反，对真正的冒犯者狠狠地打击，用犀利的 语言将其驳得体无完肤都是可以接受的。然而，在行事之前一定要非常非常的有根据。纠正无礼的言论 与开始一场毫无意义的口水战仅一线之隔，黑客们自己莽撞地越线的情况并不鲜见。如果你是新手或外 人，避开这种莽撞的机会并不高。如果你想得到的是信息而不是消磨时光，这时最好不要把手放在键盘 上以免冒险。</p><p>（有些人断言很多黑客都有轻度的自闭症或亚斯伯格综合症，缺少用于润滑人类社会<strong>正常</strong>交往所需的神 经。这既可能是真也可能是假的。如果你自己不是黑客，兴许你认为我们脑袋有问题还能帮助你应付我 们的古怪行为。只管这么干好了，我们不在乎。我们<strong>喜欢</strong>我们现在这个样子，并且通常对病患标记都有 站得住脚的怀疑。）</p><p>在下一节，我们会谈到另一个问题，当<em><strong>你</strong></em>行为不当时所会受到的 <code>冒犯</code> 。</p><h2 id="如何避免扮演失败者"><a href="#如何避免扮演失败者" class="headerlink" title="如何避免扮演失败者"></a>如何避免扮演失败者</h2><p>黑客社区的论坛中有那么几次你可能会搞砸 – 以本指南所描述到的或类似的方式。而你会在公开场合中被告知你是如何搞砸的，也许攻击的言语中还会带点夹七夹八的颜色。</p><p>这种事发生以后，你能做的最糟糕的事莫过于哀嚎你的遭遇、宣称被口头攻击、要求道歉、高声尖叫、憋闷气、威胁诉诸法律、向其雇主报怨、忘了关马桶盖等等。相反地，你该这么做：</p><p>熬过去，这很正常。事实上，它是有益健康且合理的。</p><p>社区的标准不会自行维持，它们是通过参与者积极而<em><strong>公开地</strong></em>执行来维持的。不要哭嚎所有的批评都应该 通过私下的邮件传送，它不是这样运作的。当有人评论你的一个说法有误或者提出不同看法时，坚持声 称受到个人攻击也毫无益处，这些都是失败者的态度。</p><p>也有其它的黑客论坛，受过高礼节要求的误导，禁止参与者张贴任何对别人帖子挑毛病的消息，并声称 <code>如果你不想帮助用户就闭嘴。</code> 结果造成有想法的参与者纷纷离开，这么做只会使它们沦为毫无意义的嘮叨 与无用的技术论坛。</p><p>夸张的讲法是：你要的是<strong>友善</strong>（以上述方式）还是有用？两个里面挑一个。</p><p>记着：当黑客说你搞砸了，并且（无论多么刺耳）告诉你别再这样做时，他正在为关心<strong>你</strong>和<strong>他的社区</strong>而行动。对他而言，不理你并将你从他的生活中滤掉更简单。如果你无法做到感谢，至少要表现地有点尊 严，别大声哀嚎，也别因为自己是个有戏剧性超级敏感的灵魂和自以为有资格的新来者，就指望别人像 对待脆弱的洋娃娃那样对你。</p><p>有时候，即使你没有搞砸（或者只是在他的想像中你搞砸了），有些人也会无缘无故地攻击你本人。在这种情况下，抱怨倒是<strong>真的</strong>会把问题搞砸。</p><p>这些来找麻烦的人要么是毫无办法但自以为是专家的不中用家伙，要么就是测试你是否真会搞砸的心理 专家。其它读者要么不理睬，要么用自己的方式对付他们。这些来找麻烦的人在给他们自己找麻烦，这 点你不用操心。</p><p>也别让自己卷入口水战，最好不要理睬大多数的口水战 – 当然，是在你检验它们只是口水战，而并未指 出你有搞砸的地方，且也没有巧妙地将问题真正的答案藏于其后（这也是有可能的）。</p><h2 id="不该问的问题"><a href="#不该问的问题" class="headerlink" title="不该问的问题"></a>不该问的问题</h2><p>以下是几个经典蠢问题，以及黑客没回答时心中所想的：</p><p>问题：<a href="#%E9%97%AE%E9%A2%98%EF%BC%9A%E6%88%91%E8%83%BD%E5%9C%A8%E5%93%AA%E6%89%BE%E5%88%B0X%E7%A8%8B%E5%BA%8F%E6%88%96X%E8%B5%84%E6%BA%90%EF%BC%9F">我能在哪找到 X 程序或 X 资源？</a></p><p>问题：<a href="#%E9%97%AE%E9%A2%98%EF%BC%9A%E6%88%91%E6%80%8E%E6%A0%B7%E7%94%A8X%E5%81%9AY%EF%BC%9F">我怎样用 X 做 Y？</a></p><p>问题：<a href="#%E9%97%AE%E9%A2%98%EF%BC%9A%E5%A6%82%E4%BD%95%E8%AE%BE%E5%AE%9A%E6%88%91%E7%9A%84shell%E6%8F%90%E7%A4%BA%EF%BC%9F">如何设定我的 shell 提示？</a></p><p>问题：<a href="#%E9%97%AE%E9%A2%98%EF%BC%9A%E6%88%91%E5%8F%AF%E4%BB%A5%E7%94%A8Bass-o-matic%E6%96%87%E4%BB%B6%E8%BD%AC%E6%8D%A2%E5%B7%A5%E5%85%B7%E5%B0%86AcmeCorp%E6%A1%A3%E6%A1%88%E8%BD%AC%E6%8D%A2%E4%B8%BATeX%E6%A0%BC%E5%BC%8F%E5%90%97%EF%BC%9F">我可以用 Bass-o-matic 文件转换工具将 AcmeCorp 档案转换为 TeX 格式吗？</a></p><p>问题：<a href="#%E9%97%AE%E9%A2%98%EF%BC%9A%E6%88%91%E7%9A%84%E7%A8%8B%E5%BA%8F%E3%80%81%E8%AE%BE%E5%AE%9A%E3%80%81SQL%E8%AF%AD%E5%8F%A5%E6%B2%A1%E6%9C%89%E7%94%A8">我的程序、设定、SQL语句没有用</a></p><p>问题：<a href="#%E9%97%AE%E9%A2%98%EF%BC%9A%E6%88%91%E7%9A%84Windows%E7%94%B5%E8%84%91%E6%9C%89%E9%97%AE%E9%A2%98%EF%BC%8C%E4%BD%A0%E8%83%BD%E5%B8%AE%E6%88%91%E5%90%97%EF%BC%9F">我的 Windows 电脑有问题，你能帮我吗？</a></p><p>问题：<a href="#%E9%97%AE%E9%A2%98%EF%BC%9A%E6%88%91%E7%9A%84%E7%A8%8B%E5%BA%8F%E4%B8%8D%E4%BC%9A%E5%8A%A8%E4%BA%86%EF%BC%8C%E6%88%91%E8%AE%A4%E4%B8%BA%E7%B3%BB%E7%BB%9F%E5%B7%A5%E5%85%B7X%E6%9C%89%E9%97%AE%E9%A2%98">我的程序不会动了，我认为系统工具 X 有问题</a></p><p>问题：<a href="#%E9%97%AE%E9%A2%98%EF%BC%9A%E6%88%91%E5%9C%A8%E5%AE%89%E8%A3%85Linux%EF%BC%88%E6%88%96%E8%80%85X%EF%BC%89%E6%97%B6%E6%9C%89%E9%97%AE%E9%A2%98%EF%BC%8C%E4%BD%A0%E8%83%BD%E5%B8%AE%E6%88%91%E5%90%97%EF%BC%9F">我在安装 Linux（或者 X ）时有问题，你能帮我吗？</a></p><p>问题：<a href="#%E9%97%AE%E9%A2%98%EF%BC%9A%E6%88%91%E6%80%8E%E4%B9%88%E6%89%8D%E8%83%BD%E7%A0%B4%E8%A7%A3root%E5%B8%90%E5%8F%B7%E3%80%81%E7%AA%83%E5%8F%96OP%E7%89%B9%E6%9D%83%E3%80%81%E8%AF%BB%E5%88%AB%E4%BA%BA%E7%9A%84%E9%82%AE%E4%BB%B6%E5%91%A2%EF%BC%9F">我怎么才能破解 root 帐号&#x2F;窃取 OP 特权&#x2F;读别人的邮件呢？</a></p><hr><blockquote><h6 id="问题：我能在哪找到X程序或X资源？"><a href="#问题：我能在哪找到X程序或X资源？" class="headerlink" title="问题：我能在哪找到X程序或X资源？"></a>问题：我能在哪找到X程序或X资源？</h6></blockquote><p>回答：就在我找到它的地方啊，白痴 – 搜索引擎的那一头。天哪！难道还有人不会用 <a href="http://www.google.com/">Google </a>吗？</p><blockquote><h6 id="问题：我怎样用X做Y？"><a href="#问题：我怎样用X做Y？" class="headerlink" title="问题：我怎样用X做Y？"></a>问题：我怎样用X做Y？</h6></blockquote><p>回答：如果你想解决的是 Y ，提问时别给出可能并不恰当的方法。这种问题说明提问者不但对 X 完全无知，也对 Y 要解决的问题糊涂，还被特定形势禁锢了思维。最好忽略这种人，等他们把问题搞清楚了再说。</p><blockquote><h6 id="问题：如何设定我的shell提示？"><a href="#问题：如何设定我的shell提示？" class="headerlink" title="问题：如何设定我的shell提示？"></a>问题：如何设定我的shell提示？</h6></blockquote><p>回答：如果你有足够的智慧提这个问题，你也该有足够的智慧去 RTFM，然后自己去找出来。</p><blockquote><h6 id="问题：我可以用Bass-o-matic文件转换工具将AcmeCorp档案转换为TeX格式吗？"><a href="#问题：我可以用Bass-o-matic文件转换工具将AcmeCorp档案转换为TeX格式吗？" class="headerlink" title="问题：我可以用Bass-o-matic文件转换工具将AcmeCorp档案转换为TeX格式吗？"></a>问题：我可以用Bass-o-matic文件转换工具将AcmeCorp档案转换为TeX格式吗？</h6></blockquote><p>回答：试试看就知道了。如果你试过，你既知道了答案，就不用浪费我的时间了。</p><blockquote><h6 id="问题：我的程序、设定、SQL语句没有用"><a href="#问题：我的程序、设定、SQL语句没有用" class="headerlink" title="问题：我的程序、设定、SQL语句没有用"></a>问题：我的程序、设定、SQL语句没有用</h6></blockquote><p>回答：这不算是问题吧，我对要我问你二十个问题才找得出你真正问题的问题没兴趣 – 我有更有意思的 事要做呢。在看到这类问题的时候，我的反应通常不外如下三种</p><ul><li>你还有什么要补充的吗？ </li><li>真糟糕，希望你能搞定。 </li><li>这关我有什么屁事？</li></ul><blockquote><h6 id="问题：我的Windows电脑有问题，你能帮我吗？"><a href="#问题：我的Windows电脑有问题，你能帮我吗？" class="headerlink" title="问题：我的Windows电脑有问题，你能帮我吗？"></a>问题：我的Windows电脑有问题，你能帮我吗？</h6></blockquote><p>回答：能啊，扔掉萎软的垃圾，换个像 Linux 或 BSD 的开放源代码操作系统吧。</p><p>注意：如果程序有官方版 Windows 或者与 Windows 有互动（如Samba），你<em><strong>可以</strong></em>问与Windows相关 的问题， 只是别对问题是由 Windows 操作系统而不是程序本身造成的回复感到惊讶， 因为 Windows 一般来说实在太烂，这种说法通常都是对的。</p><blockquote><h6 id="问题：我的程序不会动了，我认为系统工具X有问题"><a href="#问题：我的程序不会动了，我认为系统工具X有问题" class="headerlink" title="问题：我的程序不会动了，我认为系统工具X有问题"></a>问题：我的程序不会动了，我认为系统工具X有问题</h6></blockquote><p>回答：你完全有可能是第一个注意到被成千上万用户反复使用的系统调用与函数库档案有明显缺陷的 人，更有可能的是你完全没有根据。不同凡响的说法需要不同凡响的证据，当你这样声称时，你必须有 清楚而详尽的缺陷说明文件作后盾。</p><blockquote><h6 id="问题：我在安装Linux（或者X）时有问题，你能帮我吗？"><a href="#问题：我在安装Linux（或者X）时有问题，你能帮我吗？" class="headerlink" title="问题：我在安装Linux（或者X）时有问题，你能帮我吗？"></a>问题：我在安装Linux（或者X）时有问题，你能帮我吗？</h6></blockquote><p>回答：不能，我只有亲自在你的电脑上动手才能找到毛病。还是去找你当地的 Linux 使用群组者寻求实际的指导吧（你能在<a href="http://www.linux.org/groups/index.html">这儿</a>找到使用者群组的清单）。</p><p>注意：如果安装问题与某 Linux 的发行版有关，在它的邮件列表、论坛或本地使用者群组中提问也许是 恰当的。此时，应描述问题的准确细节。在此之前，先用 <code>Linux</code> 和<em><strong>所有</strong></em>被怀疑的硬件作关键词仔细搜索。</p><blockquote><h6 id="问题：我怎么才能破解root帐号、窃取OP特权、读别人的邮件呢？"><a href="#问题：我怎么才能破解root帐号、窃取OP特权、读别人的邮件呢？" class="headerlink" title="问题：我怎么才能破解root帐号、窃取OP特权、读别人的邮件呢？"></a>问题：我怎么才能破解root帐号、窃取OP特权、读别人的邮件呢？</h6></blockquote><p>回答：想要这样做，说明了你是个卑鄙小人；想找个黑客帮你，说明你是个白痴！</p><h2 id="好问题与蠢问题"><a href="#好问题与蠢问题" class="headerlink" title="好问题与蠢问题"></a>好问题与蠢问题</h2><p>最后，我将透过举一些例子，来说明怎样聪明的提问；同一个问题的两种问法被放在一起，一种是愚蠢 的，另一种才是明智的。</p><p><em><strong>蠢问题：</strong></em></p><blockquote><p>我可以在哪儿找到关于 Foonly Flurbamatic 的资料？</p></blockquote><p>这种问法无非想得到 <a href="#page12">STFW </a>这样的回答。</p><p><em><strong>聪明问题：</strong></em></p><blockquote><p>我用Google搜索过 “Foonly Flurbamatic 2600”，但是没找到有用的结果。谁知道上哪儿去找对这 种设备编程的资料？ </p></blockquote><p>这个问题已经 STFW 过了，看起来他真的遇到了麻烦。</p><p> <em><strong>蠢问题</strong></em> </p><blockquote><p>我从 foo 项目找来的源码没法编译。它怎么这么烂？ </p></blockquote><p>他觉得都是别人的错，这个傲慢自大的提问者 </p><p><em><strong>聪明问题</strong></em> </p><blockquote><p>foo 项目代码在 Nulix 6.2 版下无法编译通过。我读过了 FAQ，但里面没有提到跟 Nulix 有关的问 题。这是我编译过程的记录，我有什么做的不对的地方吗？ </p></blockquote><p>提问者已经指明了环境，也读过了FAQ，还列出了错误，并且他没有把问题的责任推到别人头上，他的 问题值得被关注。</p><p><em><strong>蠢问题</strong></em> </p><blockquote><p>我的主机板有问题了，谁来帮我？ </p></blockquote><p>某黑客对这类问题的回答通常是： <code>好的，还要帮你拍拍背和换尿布吗？</code> ，然后按下删除键。</p><p><em><strong>聪明问题</strong></em></p><blockquote><p>我在 S2464 主机板上试过了 X 、 Y 和 Z ，但没什么作用，我又试了 A 、 B 和 C 。请注意当我尝 试 C 时的奇怪现象。显然 florbish 正在 grommicking，但结果出人意料。通常在 Athlon MP 主机 板上引起 grommicking 的原因是什么？有谁知道接下来我该做些什么测试才能找出问题？</p></blockquote><p>这个家伙，从另一个角度来看，值得去回答他。他表现出了解决问题的能力，而不是坐等天上掉答案。 在最后一个问题中，注意 <code>告诉我答案</code> 和 <code>给我启示，指出我还应该做什么诊断工作</code> 之间微妙而又重要的区别。</p><p>事实上，后一个问题源自于 2001 年 8 月在 Linux 内核邮件列表（lkml）上的一个真实的提问。我 （Eric）就是那个提出问题的人。我在 Tyan S2464 主板上观察到了这种无法解释的锁定现象，列表成员 们提供了解决这一问题的重要信息。</p><p>通过我的提问方法，我给了别人可以咀嚼玩味的东西；我设法让人们很容易参与并且被吸引进来。我显 示了自己具备和他们同等的能力，并邀请他们与我共同探讨。通过告诉他们我所走过的弯路，以避免他 们再浪费时间，我也表明了对他们宝贵时间的尊重。</p><p>事后，当我向每个人表示感谢，并且讚赏这次良好的讨论经歷的时候， 一个 Linux 内核邮件列表的成员 表示，他觉得我的问题得到解决并非由于我是这个列表中的<code>名人</code>，而是因为我用了正确的方式来提问。</p><p>黑客从某种角度来说是拥有丰富知识但缺乏人情味的家伙；我相信他是对的，如果我<code>像</code>个乞讨者那样提 问，不论我是谁，一定会惹恼某些人或者被他们忽视。他建议我记下这件事，这直接导致了本指南的出 现。</p><h2 id="如果得不到回答"><a href="#如果得不到回答" class="headerlink" title="如果得不到回答"></a>如果得不到回答</h2><p>如果仍得不到回答，请不要以为我们觉得无法帮助你。有时只是看到你问题的人不知道答案罢了。没有回应不代表你被忽视，虽然不可否认这种差别很难区分。</p><p>总的来说，简单的重复张贴问题是个很糟的点子。这将被视为无意义的喧闹。有点耐心，知道你问题答案的人可能生活在不同的时区，可能正在睡觉，也有可能你的问题一开始就没有组织好。</p><p>你可以通过其他渠道获得帮助，这些渠道通常更适合初学者的需要。</p><p>有许多网上的以及本地的使用者群组，由热情的软件爱好者（即使他们可能从没亲自写过任何软件）组成。通常人们组建这样的团体来互相帮助并帮助新手。</p><p>另外，你可以向很多商业公司寻求帮助，不论公司大还是小。别为要付费才能获得帮助而感到沮丧！毕竟，假使你的汽车发动机汽缸密封圈爆掉了– 完全可能如此 –你还得把它送到修车铺，并且为维修付费。就算软件没花费你一分钱，你也不能强求技术支持总是免费的。</p><p>对像是 Linux 这种大众化的软件，每个开发者至少会对应到上万名使用者。根本不可能由一个人来处理来自上万名使用者的求助电话。要知道，即使你要为这些协助付费，和你所购买的同类软件相比，你所付出的也是微不足道的（通常封闭源代码软件的技术支持费用比开放源代码软件的要高得多，且内容也没那么丰富）。</p><h2 id="如何更好地回答问题"><a href="#如何更好地回答问题" class="headerlink" title="如何更好地回答问题"></a>如何更好地回答问题</h2><p><em><strong>态度和善一点。</strong></em>问题带来的压力常使人显得无礼或愚蠢，其实并不是这样。</p><p><em><strong>对初犯者私下回复。</strong></em>对那些坦诚犯错之人没有必要当众羞辱，一个真正的新手也许连怎么搜索或在哪找 常见问题都不知道。</p><p><em><strong>如果你不确定，一定要说出来！</strong></em>一个听起来权威的错误回复比没有还要糟，别因为听起来像个专家很好 玩，就给别人乱指路。要谦虚和诚实，给提问者与同行都树个好榜样。</p><p><em><strong>如果帮不了忙，也别妨碍他。</strong></em>不要在实际步骤上开玩笑，那样也许会毁了使用者的设置 –有些可怜的呆 瓜会把它当成真的指令。</p><p><em><strong>试探性的反问以引出更多的细节。</strong></em>如果你做得好，提问者可以学到点东西 –你也可以。试试将蠢问题转 变成好问题，别忘了我们都曾是新手。</p><p>尽管对那些懒虫抱怨一声 RTFM 是正当的，能指出文件的位置（即使只是建议个 Google 搜索关键词） 会更好。</p><p><em><strong>如果你决定回答，就请给出好的答案。</strong></em>当别人正在用错误的工具或方法时别建议笨拙的权宜之计 （wordaround），应推荐更好的工具，重新界定问题。</p><p><em><strong>正面的回答问题！</strong></em>如果这个提问者已经很深入的研究而且也表明已经试过 X 、 Y 、 Z 、 A 、 B 、 C 但 没得到结果，回答 <code>试试看 A 或是 B</code> 或者 <code>试试X 、 Y 、 Z 、 A 、 B 、 C</code> 并附上一个链接一点用都 没有。</p><p><em><strong>帮助你的社区从问题中学习。</strong></em>当回复一个好问题时，问问自己 <code>如何修改相关文件或常见问题文件以免再次解 答同样的问题？</code> ，接着再向文件维护者发一份补丁。</p><p>如果你是在研究一番后才做出的回答，<em><strong>展现你的技巧而不是直接端出结果</strong></em>。毕竟 <code>授人以鱼不如授人以渔</code> 。</p><h2 id="相关资源"><a href="#相关资源" class="headerlink" title="相关资源"></a>相关资源</h2><p>如果你需要个人电脑、Unix 系统和网络如何运作的基础知识，参阅<a href="http://en.tldp.org/HOWTO/Unix-and-Internet-Fundamentals-HOWTO/">Unix系统和网络基本原理</a>。</p><p>当你发布软件或补丁时，试着按<a href="http://en.tldp.org/HOWTO/Software-Release-Practice-HOWTO/index.html">软件发布实践</a>操作。</p><h2 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢"></a>鸣谢</h2><p>Evelyn Mitchel贡献了一些愚蠢问题例子并启发了编写 <code>如何更好地回答问题</code> 这一节， Mikhail Ramendik 贡献了一些特别有价值的建议和改进。</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>提问的智慧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>中华人民共和国网络安全法</title>
    <link href="/2023/09/24/Cybersecurity_Law_of_the_People&#39;s_Republic_of_China/"/>
    <url>/2023/09/24/Cybersecurity_Law_of_the_People&#39;s_Republic_of_China/</url>
    
    <content type="html"><![CDATA[<h1 id="中华人民共和国网络安全法"><a href="#中华人民共和国网络安全法" class="headerlink" title="中华人民共和国网络安全法"></a>中华人民共和国网络安全法</h1><p>​（2016年11月7日第十二届全国人民代表大会常务委员会第二十四次会议通过）</p><p>来源： 中国人大网 2016年11月7日 17:31:34</p><p>目  录</p><p>  [第一章  总  则](#第一章  总  则)</p><p>  [第二章  网络安全支持与促进](#第二章  网络安全支持与促进)</p><p>  <a href="#%E7%AC%AC%E4%B8%89%E7%AB%A0-%E7%BD%91%E7%BB%9C%E8%BF%90%E8%A1%8C%E5%AE%89%E5%85%A8">第三章  网络运行安全</a></p><p>​          <a href="#%E7%AC%AC%E4%B8%80%E8%8A%82-%E4%B8%80%E8%88%AC%E8%A7%84%E5%AE%9A">第一节 一般规定</a></p><p>​          <a href="#%E7%AC%AC%E4%BA%8C%E8%8A%82-%E5%85%B3%E9%94%AE%E4%BF%A1%E6%81%AF%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E7%9A%84%E8%BF%90%E8%A1%8C%E5%AE%89%E5%85%A8">第二节 关键信息基础设施的运行安全</a></p><p>  <a href="#%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8">第四章  网络信息安全</a></p><p>  <a href="#%E7%AC%AC%E4%BA%94%E7%AB%A0-%E7%9B%91%E6%B5%8B%E9%A2%84%E8%AD%A6%E4%B8%8E%E5%BA%94%E6%80%A5%E5%A4%84%E7%BD%AE">第五章 监测预警与应急处置</a></p><p>  [第六章 法律责任](#第六章 法律责任)</p><p>  [第七章 附  则](#第七章 附  则)</p><h2 id="第一章-总-则"><a href="#第一章-总-则" class="headerlink" title="第一章  总  则"></a>第一章  总  则</h2><p><strong>第一条</strong> 为了保障网络安全，维护网络空间主权和国家安全、社会公共利益，保护公民、法人和其他组织的合法权益，促进经济社会信息化健康发展，制定本法。</p><p><strong>第二条</strong> 在中华人民共和国境内建设、运营、维护和使用网络，以及网络安全的监督管理，适用本法。</p><p><strong>第三条</strong> 国家坚持网络安全与信息化发展并重，遵循积极利用、科学发展、依法管理、确保安全的方针，推进网络基础设施建设和互联互通，鼓励网络技术创新和应用，支持培养网络安全人才，建立健全网络安全保障体系，提高网络安全保护能力。</p><p><strong>第四条</strong> 国家制定并不断完善网络安全战略，明确保障网络安全的基本要求和主要目标，提出重点领域的网络安全政策、工作任务和措施。</p><p><strong>第五条</strong> 国家采取措施，监测、防御、处置来源于中华人民共和国境内外的网络安全风险和威胁，保护关键信息基础设施免受攻击、侵入、干扰和破坏，依法惩治网络违法犯罪活动，维护网络空间安全和秩序。</p><p><strong>第六条</strong> 国家倡导诚实守信、健康文明的网络行为，推动传播社会主义核心价值观，采取措施提高全社会的网络安全意识和水平，形成全社会共同参与促进网络安全的良好环境。</p><p><strong>第七条</strong> 国家积极开展网络空间治理、网络技术研发和标准制定、打击网络违法犯罪等方面的国际交流与合作，推动构建和平、安全、开放、合作的网络空间，建立多边、民主、透明的网络治理体系。</p><p><strong>第八条</strong> 国家网信部门负责统筹协调网络安全工作和相关监督管理工作。国务院电信主管部门、公安部门和其他有关机关依照本法和有关法律、行政法规的规定，在各自职责范围内负责网络安全保护和监督管理工作。</p><p>县级以上地方人民政府有关部门的网络安全保护和监督管理职责，按照国家有关规定确定。</p><p><strong>第九条</strong> 网络运营者开展经营和服务活动，必须遵守法律、行政法规，尊重社会公德，遵守商业道德，诚实信用，履行网络安全保护义务，接受政府和社会的监督，承担社会责任。</p><p><strong>第十条</strong> 建设、运营网络或者通过网络提供服务，应当依照法律、行政法规的规定和国家标准的强制性要求，采取技术措施和其他必要措施，保障网络安全、稳定运行，有效应对网络安全事件，防范网络违法犯罪活动，维护网络数据的完整性、保密性和可用性。</p><p><strong>第十一条</strong> 网络相关行业组织按照章程，加强行业自律，制定网络安全行为规范，指导会员加强网络安全保护，提高网络安全保护水平，促进行业健康发展。</p><p><strong>第十二条</strong> 国家保护公民、法人和其他组织依法使用网络的权利，促进网络接入普及，提升网络服务水平，为社会提供安全、便利的网络服务，保障网络信息依法有序自由流动。</p><p>任何个人和组织使用网络应当遵守宪法法律，遵守公共秩序，尊重社会公德，不得危害网络安全，不得利用网络从事危害国家安全、荣誉和利益，煽动颠覆国家政权、推翻社会主义制度，煽动分裂国家、破坏国家统一，宣扬恐怖主义、极端主义，宣扬民族仇恨、民族歧视，传播暴力、淫秽色情信息，编造、传播虚假信息扰乱经济秩序和社会秩序，以及侵害他人名誉、隐私、知识产权和其他合法权益等活动。</p><p><strong>第十三条</strong> 国家支持研究开发有利于未成年人健康成长的网络产品和服务，依法惩治利用网络从事危害未成年人身心健康的活动，为未成年人提供安全、健康的网络环境。</p><p><strong>第十四条</strong> 任何个人和组织有权对危害网络安全的行为向网信、电信、公安等部门举报。收到举报的部门应当及时依法作出处理；不属于本部门职责的，应当及时移送有权处理的部门。</p><p>有关部门应当对举报人的相关信息予以保密，保护举报人的合法权益。</p><h2 id="第二章-网络安全支持与促进"><a href="#第二章-网络安全支持与促进" class="headerlink" title="第二章  网络安全支持与促进"></a>第二章  网络安全支持与促进</h2><p><strong>第十五条</strong> 国家建立和完善网络安全标准体系。国务院标准化行政主管部门和国务院其他有关部门根据各自的职责，组织制定并适时修订有关网络安全管理以及网络产品、服务和运行安全的国家标准、行业标准。</p><p>国家支持企业、研究机构、高等学校、网络相关行业组织参与网络安全国家标准、行业标准的制定。</p><p><strong>第十六条</strong> 国务院和省、自治区、直辖市人民政府应当统筹规划，加大投入，扶持重点网络安全技术产业和项目，支持网络安全技术的研究开发和应用，推广安全可信的网络产品和服务，保护网络技术知识产权，支持企业、研究机构和高等学校等参与国家网络安全技术创新项目。</p><p><strong>第十七条</strong> 国家推进网络安全社会化服务体系建设，鼓励有关企业、机构开展网络安全认证、检测和风险评估等安全服务。</p><p><strong>第十八条</strong> 国家鼓励开发网络数据安全保护和利用技术，促进公共数据资源开放，推动技术创新和经济社会发展。</p><p>国家支持创新网络安全管理方式，运用网络新技术，提升网络安全保护水平。</p><p><strong>第十九条</strong> 各级人民政府及其有关部门应当组织开展经常性的网络安全宣传教育，并指导、督促有关单位做好网络安全宣传教育工作。</p><p>大众传播媒介应当有针对性地面向社会进行网络安全宣传教育。</p><p><strong>第二十条</strong> 国家支持企业和高等学校、职业学校等教育培训机构开展网络安全相关教育与培训，采取多种方式培养网络安全人才，促进网络安全人才交流。</p><h2 id="第三章-网络运行安全"><a href="#第三章-网络运行安全" class="headerlink" title="第三章 网络运行安全"></a>第三章 网络运行安全</h2><h3 id="第一节-一般规定"><a href="#第一节-一般规定" class="headerlink" title="第一节 一般规定"></a>第一节 一般规定</h3><p><strong>第二十一条</strong> 国家实行网络安全等级保护制度。网络运营者应当按照网络安全等级保护制度的要求，履行下列安全保护义务，保障网络免受干扰、破坏或者未经授权的访问，防止网络数据泄露或者被窃取、篡改：</p><p>（一）制定内部安全管理制度和操作规程，确定网络安全负责人，落实网络安全保护责任；</p><p>（二）采取防范计算机病毒和网络攻击、网络侵入等危害网络安全行为的技术措施；</p><p>（三）采取监测、记录网络运行状态、网络安全事件的技术措施，并按照规定留存相关的网络日志不少于六个月；</p><p>（四）采取数据分类、重要数据备份和加密等措施；</p><p>（五）法律、行政法规规定的其他义务。</p><p><strong>第二十二条</strong> 网络产品、服务应当符合相关国家标准的强制性要求。网络产品、服务的提供者不得设置恶意程序；发现其网络产品、服务存在安全缺陷、漏洞等风险时，应当立即采取补救措施，按照规定及时告知用户并向有关主管部门报告。</p><p>网络产品、服务的提供者应当为其产品、服务持续提供安全维护；在规定或者当事人约定的期限内，不得终止提供安全维护。</p><p>网络产品、服务具有收集用户信息功能的，其提供者应当向用户明示并取得同意；涉及用户个人信息的，还应当遵守本法和有关法律、行政法规关于个人信息保护的规定。</p><p><strong>第二十三条</strong> 网络关键设备和网络安全专用产品应当按照相关国家标准的强制性要求，由具备资格的机构安全认证合格或者安全检测符合要求后，方可销售或者提供。国家网信部门会同国务院有关部门制定、公布网络关键设备和网络安全专用产品目录，并推动安全认证和安全检测结果互认，避免重复认证、检测。</p><p><strong>第二十四条</strong> 网络运营者为用户办理网络接入、域名注册服务，办理固定电话、移动电话等入网手续，或者为用户提供信息发布、即时通讯等服务，在与用户签订协议或者确认提供服务时，应当要求用户提供真实身份信息。用户不提供真实身份信息的，网络运营者不得为其提供相关服务。</p><p>国家实施网络可信身份战略，支持研究开发安全、方便的电子身份认证技术，推动不同电子身份认证之间的互认。</p><p><strong>第二十五条</strong> 网络运营者应当制定网络安全事件应急预案，及时处置系统漏洞、计算机病毒、网络攻击、网络侵入等安全风险；在发生危害网络安全的事件时，立即启动应急预案，采取相应的补救措施，并按照规定向有关主管部门报告。</p><p><strong>第二十六条</strong> 开展网络安全认证、检测、风险评估等活动，向社会发布系统漏洞、计算机病毒、网络攻击、网络侵入等网络安全信息，应当遵守国家有关规定。</p><p><strong>第二十七条</strong> 任何个人和组织不得从事非法侵入他人网络、干扰他人网络正常功能、窃取网络数据等危害网络安全的活动；不得提供专门用于从事侵入网络、干扰网络正常功能及防护措施、窃取网络数据等危害网络安全活动的程序、工具；明知他人从事危害网络安全的活动的，不得为其提供技术支持、广告推广、支付结算等帮助。</p><p><strong>第二十八条</strong> 网络运营者应当为公安机关、国家安全机关依法维护国家安全和侦查犯罪的活动提供技术支持和协助。</p><p><strong>第二十九条</strong> 国家支持网络运营者之间在网络安全信息收集、分析、通报和应急处置等方面进行合作，提高网络运营者的安全保障能力。</p><p>有关行业组织建立健全本行业的网络安全保护规范和协作机制，加强对网络安全风险的分析评估，定期向会员进行风险警示，支持、协助会员应对网络安全风险。</p><p><strong>第三十条</strong> 网信部门和有关部门在履行网络安全保护职责中获取的信息，只能用于维护网络安全的需要，不得用于其他用途。</p><h3 id="第二节-关键信息基础设施的运行安全"><a href="#第二节-关键信息基础设施的运行安全" class="headerlink" title="第二节 关键信息基础设施的运行安全"></a>第二节 关键信息基础设施的运行安全</h3><p><strong>第三十一条</strong> 国家对公共通信和信息服务、能源、交通、水利、金融、公共服务、电子政务等重要行业和领域，以及其他一旦遭到破坏、丧失功能或者数据泄露，可能严重危害国家安全、国计民生、公共利益的关键信息基础设施，在网络安全等级保护制度的基础上，实行重点保护。关键信息基础设施的具体范围和安全保护办法由国务院制定。</p><p>国家鼓励关键信息基础设施以外的网络运营者自愿参与关键信息基础设施保护体系。</p><p><strong>第三十二条</strong> 按照国务院规定的职责分工，负责关键信息基础设施安全保护工作的部门分别编制并组织实施本行业、本领域的关键信息基础设施安全规划，指导和监督关键信息基础设施运行安全保护工作。</p><p><strong>第三十三条</strong> 建设关键信息基础设施应当确保其具有支持业务稳定、持续运行的性能，并保证安全技术措施同步规划、同步建设、同步使用。</p><p><strong>第三十四条</strong> 除本法第二十一条的规定外，关键信息基础设施的运营者还应当履行下列安全保护义务：</p><p>（一）设置专门安全管理机构和安全管理负责人，并对该负责人和关键岗位的人员进行安全背景审查；</p><p>（二）定期对从业人员进行网络安全教育、技术培训和技能考核；</p><p>（三）对重要系统和数据库进行容灾备份；</p><p>（四）制定网络安全事件应急预案，并定期进行演练；</p><p>（五）法律、行政法规规定的其他义务。</p><p><strong>第三十五条</strong> 关键信息基础设施的运营者采购网络产品和服务，可能影响国家安全的，应当通过国家网信部门会同国务院有关部门组织的国家安全审查。</p><p><strong>第三十六条</strong> 关键信息基础设施的运营者采购网络产品和服务，应当按照规定与提供者签订安全保密协议，明确安全和保密义务与责任。</p><p><strong>第三十七条</strong> 关键信息基础设施的运营者在中华人民共和国境内运营中收集和产生的个人信息和重要数据应当在境内存储。因业务需要，确需向境外提供的，应当按照国家网信部门会同国务院有关部门制定的办法进行安全评估；法律、行政法规另有规定的，依照其规定。</p><p><strong>第三十八条</strong> 关键信息基础设施的运营者应当自行或者委托网络安全服务机构对其网络的安全性和可能存在的风险每年至少进行一次检测评估，并将检测评估情况和改进措施报送相关负责关键信息基础设施安全保护工作的部门。</p><p><strong>第三十九条</strong> 国家网信部门应当统筹协调有关部门对关键信息基础设施的安全保护采取下列措施：</p><p>（一）对关键信息基础设施的安全风险进行抽查检测，提出改进措施，必要时可以委托网络安全服务机构对网络存在的安全风险进行检测评估；</p><p>（二）定期组织关键信息基础设施的运营者进行网络安全应急演练，提高应对网络安全事件的水平和协同配合能力；</p><p>（三）促进有关部门、关键信息基础设施的运营者以及有关研究机构、网络安全服务机构等之间的网络安全信息共享；</p><p>（四）对网络安全事件的应急处置与网络功能的恢复等，提供技术支持和协助。</p><h2 id="第四章-网络信息安全"><a href="#第四章-网络信息安全" class="headerlink" title="第四章 网络信息安全"></a>第四章 网络信息安全</h2><p><strong>第四十条</strong> 网络运营者应当对其收集的用户信息严格保密，并建立健全用户信息保护制度。</p><p><strong>第四十一条</strong> 网络运营者收集、使用个人信息，应当遵循合法、正当、必要的原则，公开收集、使用规则，明示收集、使用信息的目的、方式和范围，并经被收集者同意。</p><p>网络运营者不得收集与其提供的服务无关的个人信息，不得违反法律、行政法规的规定和双方的约定收集、使用个人信息，并应当依照法律、行政法规的规定和与用户的约定，处理其保存的个人信息。</p><p><strong>第四十二条</strong> 网络运营者不得泄露、篡改、毁损其收集的个人信息；未经被收集者同意，不得向他人提供个人信息。但是，经过处理无法识别特定个人且不能复原的除外。</p><p>网络运营者应当采取技术措施和其他必要措施，确保其收集的个人信息安全，防止信息泄露、毁损、丢失。在发生或者可能发生个人信息泄露、毁损、丢失的情况时，应当立即采取补救措施，按照规定及时告知用户并向有关主管部门报告。</p><p><strong>第四十三条</strong> 个人发现网络运营者违反法律、行政法规的规定或者双方的约定收集、使用其个人信息的，有权要求网络运营者删除其个人信息；发现网络运营者收集、存储的其个人信息有错误的，有权要求网络运营者予以更正。网络运营者应当采取措施予以删除或者更正。</p><p><strong>第四十四条</strong> 任何个人和组织不得窃取或者以其他非法方式获取个人信息，不得非法出售或者非法向他人提供个人信息。</p><p><strong>第四十五条</strong> 依法负有网络安全监督管理职责的部门及其工作人员，必须对在履行职责中知悉的个人信息、隐私和商业秘密严格保密，不得泄露、出售或者非法向他人提供。</p><p><strong>第四十六条</strong> 任何个人和组织应当对其使用网络的行为负责，不得设立用于实施诈骗，传授犯罪方法，制作或者销售违禁物品、管制物品等违法犯罪活动的网站、通讯群组，不得利用网络发布涉及实施诈骗，制作或者销售违禁物品、管制物品以及其他违法犯罪活动的信息。</p><p><strong>第四十七条</strong> 网络运营者应当加强对其用户发布的信息的管理，发现法律、行政法规禁止发布或者传输的信息的，应当立即停止传输该信息，采取消除等处置措施，防止信息扩散，保存有关记录，并向有关主管部门报告。</p><p><strong>第四十八条</strong> 任何个人和组织发送的电子信息、提供的应用软件，不得设置恶意程序，不得含有法律、行政法规禁止发布或者传输的信息。</p><p>电子信息发送服务提供者和应用软件下载服务提供者，应当履行安全管理义务，知道其用户有前款规定行为的，应当停止提供服务，采取消除等处置措施，保存有关记录，并向有关主管部门报告。</p><p><strong>第四十九条</strong> 网络运营者应当建立网络信息安全投诉、举报制度，公布投诉、举报方式等信息，及时受理并处理有关网络信息安全的投诉和举报。</p><p>网络运营者对网信部门和有关部门依法实施的监督检查，应当予以配合。</p><p><strong>第五十条</strong> 国家网信部门和有关部门依法履行网络信息安全监督管理职责，发现法律、行政法规禁止发布或者传输的信息的，应当要求网络运营者停止传输，采取消除等处置措施，保存有关记录；对来源于中华人民共和国境外的上述信息，应当通知有关机构采取技术措施和其他必要措施阻断传播。</p><h2 id="第五章-监测预警与应急处置"><a href="#第五章-监测预警与应急处置" class="headerlink" title="第五章 监测预警与应急处置"></a>第五章 监测预警与应急处置</h2><p><strong>第五十一条</strong> 国家建立网络安全监测预警和信息通报制度。国家网信部门应当统筹协调有关部门加强网络安全信息收集、分析和通报工作，按照规定统一发布网络安全监测预警信息。</p><p><strong>第五十二条</strong> 负责关键信息基础设施安全保护工作的部门，应当建立健全本行业、本领域的网络安全监测预警和信息通报制度，并按照规定报送网络安全监测预警信息。</p><p><strong>第五十三条</strong> 国家网信部门协调有关部门建立健全网络安全风险评估和应急工作机制，制定网络安全事件应急预案，并定期组织演练。</p><p>负责关键信息基础设施安全保护工作的部门应当制定本行业、本领域的网络安全事件应急预案，并定期组织演练。</p><p>网络安全事件应急预案应当按照事件发生后的危害程度、影响范围等因素对网络安全事件进行分级，并规定相应的应急处置措施。</p><p><strong>第五十四条</strong> 网络安全事件发生的风险增大时，省级以上人民政府有关部门应当按照规定的权限和程序，并根据网络安全风险的特点和可能造成的危害，采取下列措施：</p><p>（一）要求有关部门、机构和人员及时收集、报告有关信息，加强对网络安全风险的监测；</p><p>（二）组织有关部门、机构和专业人员，对网络安全风险信息进行分析评估，预测事件发生的可能性、影响范围和危害程度；</p><p>（三）向社会发布网络安全风险预警，发布避免、减轻危害的措施。</p><p><strong>第五十五条</strong> 发生网络安全事件，应当立即启动网络安全事件应急预案，对网络安全事件进行调查和评估，要求网络运营者采取技术措施和其他必要措施，消除安全隐患，防止危害扩大，并及时向社会发布与公众有关的警示信息。</p><p><strong>第五十六条</strong> 省级以上人民政府有关部门在履行网络安全监督管理职责中，发现网络存在较大安全风险或者发生安全事件的，可以按照规定的权限和程序对该网络的运营者的法定代表人或者主要负责人进行约谈。网络运营者应当按照要求采取措施，进行整改，消除隐患。</p><p><strong>第五十七条</strong> 因网络安全事件，发生突发事件或者生产安全事故的，应当依照《中华人民共和国突发事件应对法》、《中华人民共和国安全生产法》等有关法律、行政法规的规定处置。</p><p><strong>第五十八条</strong> 因维护国家安全和社会公共秩序，处置重大突发社会安全事件的需要，经国务院决定或者批准，可以在特定区域对网络通信采取限制等临时措施。</p><h2 id="第六章-法律责任"><a href="#第六章-法律责任" class="headerlink" title="第六章 法律责任"></a>第六章 法律责任</h2><p><strong>第五十九条</strong> 网络运营者不履行本法第二十一条、第二十五条规定的网络安全保护义务的，由有关主管部门责令改正，给予警告；拒不改正或者导致危害网络安全等后果的，处一万元以上十万元以下罚款，对直接负责的主管人员处五千元以上五万元以下罚款。</p><p>关键信息基础设施的运营者不履行本法第三十三条、第三十四条、第三十六条、第三十八条规定的网络安全保护义务的，由有关主管部门责令改正，给予警告；拒不改正或者导致危害网络安全等后果的，处十万元以上一百万元以下罚款，对直接负责的主管人员处一万元以上十万元以下罚款。</p><p><strong>第六十条</strong> 违反本法第二十二条第一款、第二款和第四十八条第一款规定，有下列行为之一的，由有关主管部门责令改正，给予警告；拒不改正或者导致危害网络安全等后果的，处五万元以上五十万元以下罚款，对直接负责的主管人员处一万元以上十万元以下罚款：</p><p>（一）设置恶意程序的；</p><p>（二）对其产品、服务存在的安全缺陷、漏洞等风险未立即采取补救措施，或者未按照规定及时告知用户并向有关主管部门报告的；</p><p>（三）擅自终止为其产品、服务提供安全维护的。</p><p><strong>第六十一条</strong> 网络运营者违反本法第二十四条第一款规定，未要求用户提供真实身份信息，或者对不提供真实身份信息的用户提供相关服务的，由有关主管部门责令改正；拒不改正或者情节严重的，处五万元以上五十万元以下罚款，并可以由有关主管部门责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照，对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款。</p><p><strong>第六十二条</strong> 违反本法第二十六条规定，开展网络安全认证、检测、风险评估等活动，或者向社会发布系统漏洞、计算机病毒、网络攻击、网络侵入等网络安全信息的，由有关主管部门责令改正，给予警告；拒不改正或者情节严重的，处一万元以上十万元以下罚款，并可以由有关主管部门责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照，对直接负责的主管人员和其他直接责任人员处五千元以上五万元以下罚款。</p><p><strong>第六十三条</strong> 违反本法第二十七条规定，从事危害网络安全的活动，或者提供专门用于从事危害网络安全活动的程序、工具，或者为他人从事危害网络安全的活动提供技术支持、广告推广、支付结算等帮助，尚不构成犯罪的，由公安机关没收违法所得，处五日以下拘留，可以并处五万元以上五十万元以下罚款；情节较重的，处五日以上十五日以下拘留，可以并处十万元以上一百万元以下罚款。</p><p>单位有前款行为的，由公安机关没收违法所得，处十万元以上一百万元以下罚款，并对直接负责的主管人员和其他直接责任人员依照前款规定处罚。</p><p>违反本法第二十七条规定，受到治安管理处罚的人员，五年内不得从事网络安全管理和网络运营关键岗位的工作；受到刑事处罚的人员，终身不得从事网络安全管理和网络运营关键岗位的工作。</p><p><strong>第六十四条</strong> 网络运营者、网络产品或者服务的提供者违反本法第二十二条第三款、第四十一条至第四十三条规定，侵害个人信息依法得到保护的权利的，由有关主管部门责令改正，可以根据情节单处或者并处警告、没收违法所得、处违法所得一倍以上十倍以下罚款，没有违法所得的，处一百万元以下罚款，对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款；情节严重的，并可以责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照。</p><p>违反本法第四十四条规定，窃取或者以其他非法方式获取、非法出售或者非法向他人提供个人信息，尚不构成犯罪的，由公安机关没收违法所得，并处违法所得一倍以上十倍以下罚款，没有违法所得的，处一百万元以下罚款。</p><p><strong>第六十五条</strong> 关键信息基础设施的运营者违反本法第三十五条规定，使用未经安全审查或者安全审查未通过的网络产品或者服务的，由有关主管部门责令停止使用，处采购金额一倍以上十倍以下罚款；对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款。</p><p><strong>第六十六条</strong> 关键信息基础设施的运营者违反本法第三十七条规定，在境外存储网络数据，或者向境外提供网络数据的，由有关主管部门责令改正，给予警告，没收违法所得，处五万元以上五十万元以下罚款，并可以责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照；对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款。</p><p><strong>第六十七条</strong> 违反本法第四十六条规定，设立用于实施违法犯罪活动的网站、通讯群组，或者利用网络发布涉及实施违法犯罪活动的信息，尚不构成犯罪的，由公安机关处五日以下拘留，可以并处一万元以上十万元以下罚款；情节较重的，处五日以上十五日以下拘留，可以并处五万元以上五十万元以下罚款。关闭用于实施违法犯罪活动的网站、通讯群组。</p><p>单位有前款行为的，由公安机关处十万元以上五十万元以下罚款，并对直接负责的主管人员和其他直接责任人员依照前款规定处罚。</p><p><strong>第六十八条</strong> 网络运营者违反本法第四十七条规定，对法律、行政法规禁止发布或者传输的信息未停止传输、采取消除等处置措施、保存有关记录的，由有关主管部门责令改正，给予警告，没收违法所得；拒不改正或者情节严重的，处十万元以上五十万元以下罚款，并可以责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照，对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款。</p><p>电子信息发送服务提供者、应用软件下载服务提供者，不履行本法第四十八条第二款规定的安全管理义务的，依照前款规定处罚。</p><p><strong>第六十九条</strong> 网络运营者违反本法规定，有下列行为之一的，由有关主管部门责令改正；拒不改正或者情节严重的，处五万元以上五十万元以下罚款，对直接负责的主管人员和其他直接责任人员，处一万元以上十万元以下罚款：</p><p>（一）不按照有关部门的要求对法律、行政法规禁止发布或者传输的信息，采取停止传输、消除等处置措施的；</p><p>（二）拒绝、阻碍有关部门依法实施的监督检查的；</p><p>（三）拒不向公安机关、国家安全机关提供技术支持和协助的。</p><p><strong>第七十条</strong> 发布或者传输本法第十二条第二款和其他法律、行政法规禁止发布或者传输的信息的，依照有关法律、行政法规的规定处罚。</p><p><strong>第七十一条</strong> 有本法规定的违法行为的，依照有关法律、行政法规的规定记入信用档案，并予以公示。</p><p><strong>第七十二条</strong> 国家机关政务网络的运营者不履行本法规定的网络安全保护义务的，由其上级机关或者有关机关责令改正；对直接负责的主管人员和其他直接责任人员依法给予处分。</p><p><strong>第七十三条</strong> 网信部门和有关部门违反本法第三十条规定，将在履行网络安全保护职责中获取的信息用于其他用途的，对直接负责的主管人员和其他直接责任人员依法给予处分。</p><p>网信部门和有关部门的工作人员玩忽职守、滥用职权、徇私舞弊，尚不构成犯罪的，依法给予处分。</p><p><strong>第七十四条</strong> 违反本法规定，给他人造成损害的，依法承担民事责任。</p><p>违反本法规定，构成违反治安管理行为的，依法给予治安管理处罚；构成犯罪的，依法追究刑事责任。</p><p><strong>第七十五条</strong> 境外的机构、组织、个人从事攻击、侵入、干扰、破坏等危害中华人民共和国的关键信息基础设施的活动，造成严重后果的，依法追究法律责任；国务院公安部门和有关部门并可以决定对该机构、组织、个人采取冻结财产或者其他必要的制裁措施。</p><h2 id="第七章-附-则"><a href="#第七章-附-则" class="headerlink" title="第七章 附  则"></a>第七章 附  则</h2><p><strong>第七十六条</strong> 本法下列用语的含义：</p><p>（一）网络，是指由计算机或者其他信息终端及相关设备组成的按照一定的规则和程序对信息进行收集、存储、传输、交换、处理的系统。</p><p>（二）网络安全，是指通过采取必要措施，防范对网络的攻击、侵入、干扰、破坏和非法使用以及意外事故，使网络处于稳定可靠运行的状态，以及保障网络数据的完整性、保密性、可用性的能力。</p><p>（三）网络运营者，是指网络的所有者、管理者和网络服务提供者。</p><p>（四）网络数据，是指通过网络收集、存储、传输、处理和产生的各种电子数据。</p><p>（五）个人信息，是指以电子或者其他方式记录的能够单独或者与其他信息结合识别自然人个人身份的各种信息，包括但不限于自然人的姓名、出生日期、身份证件号码、个人生物识别信息、住址、电话号码等。</p><p><strong>第七十七条</strong> 存储、处理涉及国家秘密信息的网络的运行安全保护，除应当遵守本法外，还应当遵守保密法律、行政法规的规定。</p><p><strong>第七十八条</strong> 军事网络的安全保护，由中央军事委员会另行规定。</p><p><strong>第七十九条</strong> 本法自2017年6月1日起施行。</p>]]></content>
    
    
    <categories>
      
      <category>法律</category>
      
      <category>网络安全法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一些零碎的知识点</title>
    <link href="/2023/09/24/%E4%B8%80%E4%BA%9B%E9%9B%B6%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <url>/2023/09/24/%E4%B8%80%E4%BA%9B%E9%9B%B6%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="关于二维码"><a href="#关于二维码" class="headerlink" title="关于二维码"></a>关于二维码</h1><p>二维码除了定位点不能被遮挡外，其他地方不是有数据冗余机制嘛，允许10%-20%以内的遮挡&#x2F;噪声好像是</p><p>不同软件算法可能不一样，有的能算出来原始数据，有的算不出来</p><p>这也是那个stable diffusion生成二维码能契合原图的原因</p><p>在生成二维码的时候，由于有这部分冗余的存在，在一定程度上“丢掉”某些颜色差异与底图过大的信息是不影响数据表达的。但会影响传输可靠性</p><p>比如这个码你很难在 摄像设备歪斜&#x2F;远距离&#x2F;模糊的展板 的情况下成功扫出来</p><p>——来自芃哥</p><h1 id="修改文件创建时间等"><a href="#修改文件创建时间等" class="headerlink" title="修改文件创建时间等"></a>修改文件创建时间等</h1><p>使用windows自带的powershell即可，win+r键，输入powershell,在弹出的命令窗口输入命令，以abc.txt举例</p><p>1.修改文件创建时间</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">$</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">Get</span><span class="hljs-operator">-</span><span class="hljs-built_in">Item</span> <span class="hljs-variable">abc</span><span class="hljs-operator">.</span><span class="hljs-variable">txt</span><span class="hljs-punctuation">)</span><span class="hljs-operator">.</span><span class="hljs-variable">creationtime</span><span class="hljs-operator">=</span><span class="hljs-variable">$</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">Get</span><span class="hljs-operator">-</span><span class="hljs-built_in">Date</span> <span class="hljs-string">&quot;11/04/2019 20:42:23&quot;</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>2.修改文件最后访问时间</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">$</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">Get</span><span class="hljs-operator">-</span><span class="hljs-built_in">Item</span> <span class="hljs-variable">abc</span><span class="hljs-operator">.</span><span class="hljs-variable">txt</span><span class="hljs-punctuation">)</span><span class="hljs-operator">.</span><span class="hljs-variable">lastaccesstime</span><span class="hljs-operator">=</span><span class="hljs-variable">$</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">Get</span><span class="hljs-operator">-</span><span class="hljs-built_in">Date</span> <span class="hljs-string">&quot;11/04/2019 20:42:23&quot;</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>3.修改文件最后修改时间</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">$</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">Get</span><span class="hljs-operator">-</span><span class="hljs-built_in">Item</span> <span class="hljs-variable">abc</span><span class="hljs-operator">.</span><span class="hljs-variable">txt</span><span class="hljs-punctuation">)</span><span class="hljs-operator">.</span><span class="hljs-variable">lastwritetime</span><span class="hljs-operator">=</span><span class="hljs-variable">$</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">Get</span><span class="hljs-operator">-</span><span class="hljs-built_in">Date</span> <span class="hljs-string">&quot;11/04/2019 20:42:23&quot;</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><h1 id="关于Python—base64编码"><a href="#关于Python—base64编码" class="headerlink" title="关于Python—base64编码"></a>关于Python—base64编码</h1><p>crypt &#x3D; base64.b64encode(enc.encode(‘utf-8’)).decode(‘utf-8’)</p><p>cipher &#x3D; base64.b64decode(crypt).decode(‘utf-8’)</p><p>关于这两段为什么要写两个utf-8</p><p>​                                 </p><h1 id="关于Python解密"><a href="#关于Python解密" class="headerlink" title="关于Python解密"></a>关于Python解密</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python">Str = <span class="hljs-string">&quot;ylqq]aycqyp&#123;&quot;</span><br><br>flag = []<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(Str)):<br><br>  <span class="hljs-keyword">if</span> (Str[i] &lt;= <span class="hljs-built_in">chr</span>(<span class="hljs-number">94</span>) <span class="hljs-keyword">or</span> Str[i] &gt; <span class="hljs-built_in">chr</span>(<span class="hljs-number">96</span>)) <span class="hljs-keyword">and</span> (Str[i] &lt;= <span class="hljs-built_in">chr</span>(<span class="hljs-number">62</span>) <span class="hljs-keyword">or</span> Str[i] &gt; <span class="hljs-built_in">chr</span>(<span class="hljs-number">64</span>)):<br><br>     flag.append(<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(Str[i])+<span class="hljs-number">2</span>))<br><br>  <span class="hljs-keyword">else</span>:<br><br>     flag.append(<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(Str[i])-<span class="hljs-number">24</span>))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>.join(flag))<br><br><span class="hljs-comment"># 知识点</span><br><span class="hljs-comment"># flag要写为列表，字符串不可以直接相加减</span><br><span class="hljs-comment"># 做加减法的时候要先ord转化在加减然后转化为chr字符串</span><br><span class="hljs-comment"># 然后在字符操作</span><br><span class="hljs-comment"># 最后用join()拼接</span><br></code></pre></td></tr></table></figure><h1 id="关于Python找数组相同元素下标"><a href="#关于Python找数组相同元素下标" class="headerlink" title="关于Python找数组相同元素下标"></a>关于Python找数组相同元素下标</h1><p>可以直接用函数find，例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python">flag = <span class="hljs-string">&#x27;&#x27;</span><br><br>s = <span class="hljs-string">&#x27;wesyvbniazxchjko1973652048@$+-&amp;*&lt;&gt;&#x27;</span><br><br>result = <span class="hljs-string">&#x27;v0b9n1nkajz@j0c4jjo3oi1h1i937b395i5y5e0e$i&#x27;</span><br><br>len1=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">len</span>(result)/<span class="hljs-number">2</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(len1):<br><br>  s1 = s.find(result[i * <span class="hljs-number">2</span>]) - i<br><br>  s2 = <span class="hljs-number">34</span> - s.find(result[i * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>]) - i - <span class="hljs-number">1</span><br><br>  <span class="hljs-keyword">if</span> s2 &lt; <span class="hljs-number">0</span>:<br><br>     s2 = s2 + <span class="hljs-number">34</span><br><br>  <span class="hljs-keyword">else</span>:<br><br>     flag += <span class="hljs-built_in">chr</span>(s1 * <span class="hljs-number">17</span> + s2)<br><br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><p>其中s.find(result[i<em>2])就是找s中和result[2</em>i]元素相同元素的下标</p><h1 id="关于upx加壳脱壳指令"><a href="#关于upx加壳脱壳指令" class="headerlink" title="关于upx加壳脱壳指令"></a>关于upx加壳脱壳指令</h1><p>upx.exe –o 别名.exe –d 现名.exe</p><p>-o：表示输出；</p><p>-o 别名.exe：表示以别名.exe作为脱壳后的输出；</p><p>-d 现名.exe：表示以现名.exe作为脱壳前的输入。</p><h1 id="关于Python切片"><a href="#关于Python切片" class="headerlink" title="关于Python切片"></a>关于Python切片</h1><p><a href="https://blog.csdn.net/qq_30460949/article/details/118888961">Python切片操作_小魔王降临的博客-CSDN博客</a></p><h1 id="关于IDA"><a href="#关于IDA" class="headerlink" title="关于IDA"></a>关于IDA</h1><p>交叉引用就是看哪段代码引用了这个变量</p><h1 id="关于C语言伪代码转化"><a href="#关于C语言伪代码转化" class="headerlink" title="关于C语言伪代码转化"></a>关于C语言伪代码转化</h1><h1 id="关于Python的random库"><a href="#关于Python的random库" class="headerlink" title="关于Python的random库"></a>关于Python的random库</h1><p>import random</p><p>print(random.getrandbits(8))    #返回一个八位大小的整数</p><p>扩展：8位大小的整数是指二进制八位00000000-11111111的数，转换成十进制就是0-255</p><p>random.seed(1)             #设置一个种子为1并生成随机数，设置种子后生成的随机数就是固定的（逆向题可用）</p><h1 id="关于xor异或的逆运算"><a href="#关于xor异或的逆运算" class="headerlink" title="关于xor异或的逆运算"></a>关于xor异或的逆运算</h1><p>A&#x3D;A^B^B</p><h1 id="关于Python语法小记"><a href="#关于Python语法小记" class="headerlink" title="关于Python语法小记"></a>关于Python语法小记</h1><p>字符串连接时只能将字符和字符连接，flag+&#x3D;str（）</p><p>Ord是转化成对应的ascll</p><p>异或运算只能int类型，ord()^int()</p><p>定义字符串单双引号都可以</p><h1 id="关于大端序和小端序的区别"><a href="#关于大端序和小端序的区别" class="headerlink" title="关于大端序和小端序的区别"></a>关于大端序和小端序的区别</h1><p><a href="https://blog.csdn.net/afanzcf/article/details/118788007">BUUCTF SimpleRev（涉及大小端序存储的问题）_Afanbird的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/Casuall/article/details/98481469">大端序和小端序_Casuall的博客-CSDN博客</a></p><p>1、大端模式：高字节保存在内存的低地址</p><p>2、小端模式：高字节保存在内存的高地址</p><p>Big-endian：高位字节存入低地址，低位字节存入高地址</p><p>Little-endian：低位字节存入低地址，高位字节存入高地址</p><p>一般来说，x86系列CPU都是Little-endian字节序，PowerPC通常是Big-endian字节序。</p><h1 id="关于可以直接打进地址栏的文件类型"><a href="#关于可以直接打进地址栏的文件类型" class="headerlink" title="关于可以直接打进地址栏的文件类型"></a>关于可以直接打进地址栏的文件类型</h1><p>data:image&#x2F;png;base64,iVB………………………………</p><h1 id="关于base编码原理"><a href="#关于base编码原理" class="headerlink" title="关于base编码原理"></a>关于base编码原理</h1><p><a href="https://www.cnblogs.com/0yst3r-2046/p/11962942.html">Base系列编码浅析【base16 base32 base64 base85 base36 base 58 base91 base 92 base62】 - 0yst3r - 博客园 (cnblogs.com)</a></p><h1 id="关于CTF常见编码以及加解密"><a href="#关于CTF常见编码以及加解密" class="headerlink" title="关于CTF常见编码以及加解密"></a>关于CTF常见编码以及加解密</h1><p><a href="https://www.cnblogs.com/ruoli-s/p/14206145.html">CTF常见编码及加解密（超全） - ruoli-s - 博客园 (cnblogs.com)</a></p><h1 id="常用的在线编码工具"><a href="#常用的在线编码工具" class="headerlink" title="常用的在线编码工具"></a>常用的在线编码工具</h1><p><a href="https://gchq.github.io/CyberChef/">CyberChef (gchq.github.io)</a></p><p><a href="https://github.com/Ciphey/Ciphey">Ciphey&#x2F;Ciphey: ⚡ Automatically decrypt encryptions without knowing the key or cipher, decode encodings, and crack hashes ⚡ (github.com)</a></p><p><a href="http://www.hiencode.com/">CTF在线工具-CTF工具|CTF编码|CTF密码学|CTF加解密|程序员工具|在线编解码 (hiencode.com)</a></p><p><a href="https://ctf.bugku.com/tools">在线工具 - Bugku CTF</a></p><h1 id="关于ASCII逆向穷举"><a href="#关于ASCII逆向穷举" class="headerlink" title="关于ASCII逆向穷举"></a>关于ASCII逆向穷举</h1><p>例如：[ACTF新生赛2020]rome1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python">a= <span class="hljs-string">&#x27;ACTF&#123;&#x27;</span><br><br>enc=<span class="hljs-string">&#x27;Qsw3sj_lz4_Ujw@l&#x27;</span><br><br>s=<span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(enc)):<br><br>  <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">128</span>):<br><br>     j=n<br><br>     <span class="hljs-keyword">if</span> j &gt;<span class="hljs-number">64</span> <span class="hljs-keyword">and</span> j&lt;=<span class="hljs-number">90</span>:<br><br>       j=(j-<span class="hljs-number">51</span>)%<span class="hljs-number">26</span>+<span class="hljs-number">65</span><br><br>     <span class="hljs-keyword">if</span> j&gt;<span class="hljs-number">96</span> <span class="hljs-keyword">and</span> j&lt;=<span class="hljs-number">122</span>:<br><br>       j= (j-<span class="hljs-number">79</span>)%<span class="hljs-number">26</span> +<span class="hljs-number">97</span><br><br>     <span class="hljs-keyword">if</span> j==<span class="hljs-built_in">ord</span>(enc[i]):<br><br>       a=a+<span class="hljs-built_in">chr</span>(n)<br><br><span class="hljs-built_in">print</span>(a+<span class="hljs-string">&#x27;&#125;&#x27;</span>)<br></code></pre></td></tr></table></figure><p>ACTF{Cae3ar_th4_Gre@t}</p><p>题目中意思是输入的字符经过一系列加密得到enc，在逆向的过程中可以用穷举的方法逐渐得到结果，以顺代逆</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>计算机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>简单两步，将Windows11右键菜单修改为Windows10风格</title>
    <link href="/2023/09/23/%E5%B0%86Windows11%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%E4%BF%AE%E6%94%B9%E4%B8%BAWindows10%E9%A3%8E%E6%A0%BC/"/>
    <url>/2023/09/23/%E5%B0%86Windows11%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%E4%BF%AE%E6%94%B9%E4%B8%BAWindows10%E9%A3%8E%E6%A0%BC/</url>
    
    <content type="html"><![CDATA[<p>原文链接<a href="http://t.csdn.cn/dhe9N">http://t.csdn.cn/dhe9N</a></p><p>Windows11更新后，右键菜单很多功能隐藏起来了，使用时需要点击“显示更多选型”才能获取完整功能。为了能获得Windows10右键菜单丝滑的体验，我总结了以下方法。</p><p>修改前：</p><p><a href="https://img-blog.csdnimg.cn/img_convert/59704c4ffbd6af9764dd5ab84c0fc7bf.gif">https://img-blog.csdnimg.cn/img_convert/59704c4ffbd6af9764dd5ab84c0fc7bf.gif</a></p><p>修改后：</p><p><a href="https://img-blog.csdnimg.cn/img_convert/1e8911f87d020b6034f90d8b5b1a9255.gif">https://img-blog.csdnimg.cn/img_convert/1e8911f87d020b6034f90d8b5b1a9255.gif</a></p><h1 id="方法一：控制台操作法"><a href="#方法一：控制台操作法" class="headerlink" title="方法一：控制台操作法"></a>方法一：控制台操作法</h1><p>按住win+R打开运行窗口</p><p>输入cmd，打开控制台<br>在控制泰中输入下方代码，回车，显示操作成功<br>开启旧版右键菜单：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">reg <span class="hljs-keyword">add</span><span class="language-bash"> <span class="hljs-string">&quot;HKCU\Software\Classes\CLSID\&#123;86ca1aa0-34aa-4e8b-a509-50c905bae2a2&#125;\InprocServer32&quot;</span> /f /ve</span><br></code></pre></td></tr></table></figure><p>恢复windows11新版右键菜单：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs subunit">reg delete &quot;HKCU\Software\Classes\CLSID\&#123;86ca1aa0<span class="hljs-string">-34</span>aa<span class="hljs-string">-4</span>e8b-a509<span class="hljs-string">-50</span>c905bae2a2&#125;&quot; /f<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Windows</category>
      
      <category>系统设置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows技术分享</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何安装Microsoft office各种版本以及破解||office盗版弹窗的关闭方法</title>
    <link href="/2023/09/22/Windows_office_free/"/>
    <url>/2023/09/22/Windows_office_free/</url>
    
    <content type="html"><![CDATA[<hr><p class="note note-warning">这篇文章需要重写，有空再改改</p><hr><p>想必大家都认识Microsoft office</p><p>就是常说的Word  Excel  PPT三大办公套件</p><p>当然也有Outlook OneNote Publisher Access  Teams等这些不常用的</p><p>但是，正版购买要七百多甚至一千多！太贵了怎么办</p><p>没事</p><p>教你不花钱免费用</p><h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><p>原地址：<a href="https://www.coolhub.top/archives/42">[新手必读] Office Tool Plus 入门教程</a></p><h2 id="写在开头"><a href="#写在开头" class="headerlink" title="写在开头"></a>写在开头</h2><p>Office Tool Plus 是一个强大且实用的 Office 部署工具。</p><p>Office Tool Plus 基于 <a href="https://aka.ms/ODT">Office 部署工具</a> 制作，可以很方便的部署 Office，其内置迅雷和 Downloader 引擎可帮助您更快地下载 Office。</p><p>你也可以使用 Office Tool Plus 的其他功能或者是内置的小工具方便、快捷地管理 Office 哦！</p><p>支持下列产品：</p><ul><li>Microsoft 365</li><li>Office 2016 - 2021</li><li>Visio Online Plan 2 &amp; Visio 2016 - 2021</li><li>Project Online Desktop Client &amp; Project 2016 - 2021</li></ul><p>个人主页：<a href="https://officetool.plus/">https://officetool.plus/</a></p><p>官方网站：<a href="https://otp.landian.vip/">https://otp.landian.vip/</a></p><p>帮助文档：<a href="https://otp.landian.vip/help/">https://otp.landian.vip/help/</a></p><p>GitHub：<a href="https://github.com/YerongAI/Office-Tool">https://github.com/YerongAI/Office-Tool</a></p><p>无论你是个体还是团队，Office Tool Plus 都是你的得力小助手。</p><h2 id="系统要求"><a href="#系统要求" class="headerlink" title="系统要求"></a>系统要求</h2><p>请查看<a href="https://otp.landian.vip/docs/zh-cn/start/requirement.html">帮助文档</a>。</p><h2 id="相关教程"><a href="#相关教程" class="headerlink" title="相关教程"></a>相关教程</h2><h3 id="点击阅读以下教程"><a href="#点击阅读以下教程" class="headerlink" title="点击阅读以下教程"></a>点击阅读以下教程</h3><p>[<a href="https://www.coolhub.top/archives/11">安装 Office] Office Tool Plus 入门教程</a></p><p>[<a href="https://www.coolhub.top/archives/14">激活 Office] Office Tool Plus 入门教程</a></p><p>[<a href="https://www.coolhub.top/archives/13">疑难解答] Office Tool Plus 入门教程</a></p><p>[<a href="https://www.coolhub.top/archives/44">技能扩展] Office Tool Plus 高级教程</a></p><h2 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h2><ul><li>创建 Office 安装配置，支持导出到本地；或从本地或网络位置导入。</li><li>下载 Office，支持所有通道的 Office，支持所有的 Office 语言。</li><li>安装 Office，支持对现有的 Office 进行修改，包括新增或卸载产品和应用程序。[1]</li><li>创建 Office ISO，支持默认安装配置、静默安装配置。</li><li>支持 Office 激活管理，包括许可证管理，密钥管理以及 KMS 管理。[2]</li><li>激活 Office，支持在线激活、电话激活、KMS 激活。[3]</li><li>修改 Office 更新通道，支持在不重装 Office 的情况下升级&#x2F;降级 Office.</li><li>移除 Office，在 Office 无法正常卸载的情况下强制移除 Office，几乎支持所有 Office 版本。</li><li>内置 Office 工具箱，可以修复安装或使用 Office 过程中遇到的大多数问题。</li><li>转换 Office 文档，基于 Office COM，稳定可靠。</li><li>自定义主题，打造你自己的专属 Office Tool Plus。</li></ul><p>还有更多功能，等待您的体验~</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">注<span class="hljs-selector-attr">[1]</span>：能够安装的 Office 版本视 Windows 版本决定。<br>注<span class="hljs-selector-attr">[2]</span>：安装许可证时，旧的许可证不会被清除，因此零售和批量许可证可以共存。<br>注<span class="hljs-selector-attr">[3]</span>：无论你如何激活 Office 都需要自行处理，Office Tool Plus 不会也不可能提供任何破解途径。<br></code></pre></td></tr></table></figure><h2 id="Office-Tool-Plus-合法吗？"><a href="#Office-Tool-Plus-合法吗？" class="headerlink" title="Office Tool Plus 合法吗？"></a>Office Tool Plus 合法吗？</h2><p>Office Tool Plus 是一款完全合法的应用程序，提供的是原版 Office，不对 Office 的任何东西进行未经授权的修改。我们给用户提供了 Office 的下载、安装、激活功能，具体 Office 正版与否，取决于用户如何激活 Office。</p><p>Office 是支持账户、密钥、KMS 激活的，前两者基本都是正版授权（网上找的密钥另说），KMS 的正版和非正版因为人们多少都有点误解，因此在这里补充解释一下。</p><h2 id="什么是-KMS？"><a href="#什么是-KMS？" class="headerlink" title="什么是 KMS？"></a>什么是 KMS？</h2><p>具体的技术性资料可从网上搜索得到，这里就简单粗暴地描述一下。</p><hr><p>KMS 激活类似于签名一样，在大多数现实情况下，签名可以仿写，就像是“家长签名”一样，很多时候其实不是真的家长签名吧 <img src="https://www.coolhub.top/wp-content/themes/kratos-pjax-0.4.3/static/images/smilies/huaji.png" srcset="/img/loading.gif" lazyload alt=":huaji:"></p><p>那么你把这份“经过家长签名”的东西给了老师或者领导，他们大多数时候也不会去验证是吧？</p><p>KMS 激活也是有正规的，正规的来讲就是要经过微软授权的（就比如签名一定得是家长本人签的）。</p><p>但 KMS 也可以像“家长签名”一样伪造，就是 Office 接收到了来自 KMS 主机返回的激活信息，它不知道这个信息是不是正版授权的，总之接收到了正确的信息然后就这么简单地就激活了。</p><p>一句话讲晒，就是冒名顶替，没人查确实不知道，一查出来你就 gg</p><hr><p>这就是 Office 与 KMS 的关系，简单来讲就是这样。再补充一下：</p><p>每隔 7 天（默认），Office 都会与 KMS 通信一次，以更新自己的许可证状态。</p><p>如果 KMS 允许你更新许可，那么新的许可就是 180 天期限。</p><p>如果 KMS 不允许你更新许可，或者 KMS 不可用，那么原来的 180 天期限到期后，你的 Office 就会变成未激活了。</p><h2 id="KMS-正版与否的区别"><a href="#KMS-正版与否的区别" class="headerlink" title="KMS 正版与否的区别"></a>KMS 正版与否的区别</h2><p>有微软授权的 KMS 服务器一般情况下只能部署在 Windows Server 上，且通常只在内网部署，不对外开放。</p><p>目前网上公开的基本都是基于 vlmcs 的 KMS 服务器，非正版，无激活限制，谁都可以访问。</p><h1 id="office提示你的许可证不是正版，你可能是盗版软件的受害者？"><a href="#office提示你的许可证不是正版，你可能是盗版软件的受害者？" class="headerlink" title="office提示你的许可证不是正版，你可能是盗版软件的受害者？"></a>office提示你的许可证不是正版，你可能是盗版软件的受害者？</h1><p>看这个</p><p><a href="https://blog.csdn.net/qq_44275213/article/details/128543910">office提示你的许可证不是正版，你可能是盗版软件的受害者？</a></p>]]></content>
    
    
    <categories>
      
      <category>Windows</category>
      
      <category>office破解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows技术分享</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一些好玩的网站</title>
    <link href="/2023/09/21/%E4%B8%80%E4%BA%9B%E5%A5%BD%E7%8E%A9%E7%9A%84%E7%BD%91%E7%AB%99/"/>
    <url>/2023/09/21/%E4%B8%80%E4%BA%9B%E5%A5%BD%E7%8E%A9%E7%9A%84%E7%BD%91%E7%AB%99/</url>
    
    <content type="html"><![CDATA[<h1 id="1-致美化"><a href="#1-致美化" class="headerlink" title="1.致美化"></a>1.<a href="https://zhutix.com/">致美化</a></h1><p>windows美化</p><p>致美化是一个老牌桌面美化分享站，创办于 2014 年。探索丰富多彩的主题、壁纸、图标、皮肤等酷炫的美化素材，更有全面的美化教程及工具，是一个比较良心的美化站。</p><h1 id="2-在线文件转换器"><a href="#2-在线文件转换器" class="headerlink" title="2.在线文件转换器"></a>2.<a href="https://cn.cloud-converter.com/">在线文件转换器</a></h1><p>使用这款免费快速在线转换器. 将pdf, 图像, 视频, 文档, 音频, 电子书及压缩等文件格式转换为其他格式。现支持超过20200多种不同格式转换。</p><h1 id="3-从0开始做博客"><a href="#3-从0开始做博客" class="headerlink" title="3.从0开始做博客"></a>3.<a href="https://zhuanlan.zhihu.com/p/102592286">从0开始做博客</a></h1><p>不用介绍什么了，这是知乎大佬收集的一篇文章，我的博客就是根据这个搭建的</p>]]></content>
    
    
    <categories>
      
      <category>网站收录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网站收录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++类的基本学习</title>
    <link href="/2023/09/17/C++_class_study/"/>
    <url>/2023/09/17/C++_class_study/</url>
    
    <content type="html"><![CDATA[<p>（因为上学期C++选修课没认真听，导致这学期数据结构啥也不会，好吧，出来混迟早是要还的，现在开始恶补C++）</p><p>目前需要学习&#x2F;复习的内容是</p><ol><li>C++类</li><li>C++结构体</li><li>template模板类</li><li>双链表的插入和删除</li><li>C++DataType的用法</li><li>mod运算在C++的应用<ol><li>保证小于最大长度</li><li>数组指针绕回</li><li>数组前移</li></ol></li></ol><hr><h1 id="C-类-对象"><a href="#C-类-对象" class="headerlink" title="C++ 类 &amp; 对象"></a>C++ 类 &amp; 对象</h1><p>C++ 在 C 语言的基础上增加了面向对象编程，C++ 支持面向对象程序设计。类是 C++ 的核心特性，通常被称为用户定义的类型。</p><p>类用于指定对象的形式，是一种用户自定义的数据类型，它是一种封装了数据和函数的组合。类中的数据称为成员变量，函数称为成员函数。类可以被看作是一种模板，可以用来创建具有相同属性和行为的多个对象。</p><h2 id="C-类定义"><a href="#C-类定义" class="headerlink" title="C++ 类定义"></a>C++ 类定义</h2><p>定义一个类需要使用关键字 <strong>class</strong>，然后指定类的名称，并类的主体是包含在一对花括号中，主体包含类的成员变量和成员函数。</p><p>定义一个类，本质上是定义一个数据类型的蓝图，它定义了类的对象包括了什么，以及可以在这个对象上执行哪些操作。</p><p><img src="https://www.runoob.com/wp-content/uploads/2015/05/cpp-classes-objects-2020-12-10-11.png" srcset="/img/loading.gif" lazyload alt="img"></p><p>以下实例我们使用关键字 <strong>class</strong> 定义 Box 数据类型，包含了三个成员变量 length、breadth 和 height：</p><p>class Box {   public:      double length;   &#x2F;&#x2F; 盒子的长度      double breadth;  &#x2F;&#x2F; 盒子的宽度      double height;   &#x2F;&#x2F; 盒子的高度 };</p><p>关键字 <strong>public</strong> 确定了类成员的访问属性。在类对象作用域内，公共成员在类的外部是可访问的。您也可以指定类的成员为 <strong>private</strong> 或 <strong>protected</strong>，这个我们稍后会进行讲解。</p><h2 id="定义-C-对象"><a href="#定义-C-对象" class="headerlink" title="定义 C++ 对象"></a>定义 C++ 对象</h2><p>类提供了对象的蓝图，所以基本上，对象是根据类来创建的。声明类的对象，就像声明基本类型的变量一样。下面的语句声明了类 Box 的两个对象：</p><p>Box Box1;          &#x2F;&#x2F; 声明 Box1，类型为 Box Box Box2;          &#x2F;&#x2F; 声明 Box2，类型为 Box</p><p>对象 Box1 和 Box2 都有它们各自的数据成员。</p><h2 id="访问数据成员"><a href="#访问数据成员" class="headerlink" title="访问数据成员"></a>访问数据成员</h2><p>类的对象的公共数据成员可以使用直接成员访问运算符 <strong>.</strong> 来访问。</p><p><img src="https://www.runoob.com/wp-content/uploads/2015/05/cpp-classes-objects-2020-12-10-11-2.png" srcset="/img/loading.gif" lazyload alt="img"></p><p>为了更好地理解这些概念，让我们尝试一下下面的实例：</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br> <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br> <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Box</span><br>&#123;<br>   <span class="hljs-keyword">public</span>:<br>      <span class="hljs-type">double</span> length;   <span class="hljs-comment">// 长度</span><br>      <span class="hljs-type">double</span> breadth;  <span class="hljs-comment">// 宽度</span><br>      <span class="hljs-type">double</span> height;   <span class="hljs-comment">// 高度</span><br>      <span class="hljs-comment">// 成员函数声明</span><br>      <span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span>;<br>      <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">set</span><span class="hljs-params">( <span class="hljs-type">double</span> len, <span class="hljs-type">double</span> bre, <span class="hljs-type">double</span> hei )</span></span>;<br>&#125;;<br><span class="hljs-comment">// 成员函数定义</span><br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">Box::get</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> length * breadth * height;<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Box::set</span><span class="hljs-params">( <span class="hljs-type">double</span> len, <span class="hljs-type">double</span> bre, <span class="hljs-type">double</span> hei)</span></span><br><span class="hljs-function"></span>&#123;<br>    length = len;<br>    breadth = bre;<br>    height = hei;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">( )</span></span><br><span class="hljs-function"></span>&#123;<br>   Box Box1;        <span class="hljs-comment">// 声明 Box1，类型为 Box</span><br>   Box Box2;        <span class="hljs-comment">// 声明 Box2，类型为 Box</span><br>   Box Box3;        <span class="hljs-comment">// 声明 Box3，类型为 Box</span><br>   <span class="hljs-type">double</span> volume = <span class="hljs-number">0.0</span>;     <span class="hljs-comment">// 用于存储体积</span><br> <br>   <span class="hljs-comment">// box 1 详述</span><br>   Box1.height = <span class="hljs-number">5.0</span>; <br>   Box1.length = <span class="hljs-number">6.0</span>; <br>   Box1.breadth = <span class="hljs-number">7.0</span>;<br> <br>   <span class="hljs-comment">// box 2 详述</span><br>   Box2.height = <span class="hljs-number">10.0</span>;<br>   Box2.length = <span class="hljs-number">12.0</span>;<br>   Box2.breadth = <span class="hljs-number">13.0</span>;<br> <br>   <span class="hljs-comment">// box 1 的体积</span><br>   volume = Box1.height * Box1.length * Box1.breadth;<br>   cout &lt;&lt; <span class="hljs-string">&quot;Box1 的体积：&quot;</span> &lt;&lt; volume &lt;&lt;endl;<br> <br>   <span class="hljs-comment">// box 2 的体积</span><br>   volume = Box2.height * Box2.length * Box2.breadth;<br>   cout &lt;&lt; <span class="hljs-string">&quot;Box2 的体积：&quot;</span> &lt;&lt; volume &lt;&lt;endl;<br> <br> <br>   <span class="hljs-comment">// box 3 详述</span><br>   Box3.<span class="hljs-built_in">set</span>(<span class="hljs-number">16.0</span>, <span class="hljs-number">8.0</span>, <span class="hljs-number">12.0</span>); <br>   volume = Box3.<span class="hljs-built_in">get</span>(); <br>   cout &lt;&lt; <span class="hljs-string">&quot;Box3 的体积：&quot;</span> &lt;&lt; volume &lt;&lt;endl;<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Box1</span> 的体积：<span class="hljs-number">210</span><br><span class="hljs-attribute">Box2</span> 的体积：<span class="hljs-number">1560</span><br><span class="hljs-attribute">Box3</span> 的体积：<span class="hljs-number">1536</span><br></code></pre></td></tr></table></figure><p>需要注意的是，私有的成员和受保护的成员不能使用直接成员访问运算符 (.) 来直接访问。我们将在后续的教程中学习如何访问私有成员和受保护的成员。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>类</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>公文写作基础知识</title>
    <link href="/2023/09/17/how_to_write_word/"/>
    <url>/2023/09/17/how_to_write_word/</url>
    
    <content type="html"><![CDATA[<h1 id="公文写作基础知识"><a href="#公文写作基础知识" class="headerlink" title="公文写作基础知识"></a>公文写作基础知识</h1><p>1.题目：（正标题：三号黑体；副标题：小三号楷体）<br> 2.“摘要”：（五号黑体），摘要内容（楷体五号）<br>3.“关键词”：（五号黑体），关键词内容（五号楷体，多个关键词之间用“；”隔开）。<br>4.正文小四号宋体，标题黑体小四号，正文行间距为1.5倍<br>5.参考文献：（小四号黑体），参考文献内容（五号楷体）。参考文献是作者写作论著时所参考的文献书目。<br>附：参考文献格式要求<br>参考文献格式要求<br>参考文献统一放在文章最后，序号用方括号[1][2][3]……标出，序号左顶格。参照ISO690及ISO690-2，每一参考文献条目的最后均以“.”结束。各类参考文献条目的编排格式及示例如下：<br>a. 专著、论文集、学位论文、报告<br>[序号]主要责任者.文献题名[文献类型标识].出版地：出版者，出版年.起止页码(任选).（中译本前要加国别）<br>[1] [英]M奥康诺尔著，王耀先译．科技书刊的编译工作[M].北京：人民教育出版社，1982.56－57.<br>[2] 辛希孟.信息技术与信息服务国际研讨会论文集：A集[C].北京：中国社会科学出版社，1994.<br>[3] 张筑生.微分半动力系统的不变集[D].北京：北京大学数学系数学研究所，1983.<br>[4] 冯西桥.核反应堆压力管道与压力容器的LBB分析[R].北京：清华大学核能技术设计研究院，1997.<br>b. 期刊文章<br>[序号]主要责任者.文献题名[J].刊名，年，卷(期)：起止页码.<br>[5] 何龄修.读顾城《南明史》[J].中国史研究，1998，(3)：167-173.<br>[6] 金显贺，王昌长，王忠东，等.一种用于在线检测局部放电的数字滤波技术[J].清华大学学报(自然科学版)，1993，33(4)：62-67.<br>c. 论文集中的析出文献<br>[序号]析出文献主要责任者.析出文献题名[A].原文献主要责任者(任选).原文献题名[C].出版地：出版者，出版年.析出文献起止页码.<br>[7] 钟文发.非线性规划在可燃毒物配置中的应用[A].赵玮.运筹学的理论与应用——中国运筹学会第五届大会论文集[C].西安：西安电子科技大学出版社，1996.468-471.<br>d. 报纸文章<br>[序号]主要责任者.文献题名[N].报纸名，出版日期(版次).<br>[8] 谢希德.创造学习的新思路[N].人民日报，1998-12-25(10).<br>e. 国际、国家标准<br>[序号]标准编号，标准名称[S].<br>[9] GB&#x2F;T16159-1996，汉语拼音正词法基本规则[S].<br>f. 专利<br>[序号]专利所有者.专利题名[P].专利国别：专利号，出版日期.<br>[10] 姜锡洲.一种温热外敷药制备方案[P].中国专利：881056073，1989-07-26.<br>g. 电子文献<br>[序号]主要责任者.电子文献题名[电子文献及载体类型标识].电子文献的出处或可获得地址，发表或更新日期&#x2F;引用日期(任选).<br>[11] 王明亮.关于中国学术期刊标准化数据库系统工程的进展[EB&#x2F;OL]. <a href="http://www.cajcd.edu.cn/pub/wml.txt/980810-2.html,1998-08-16/1998-10-04">http://www.cajcd.edu.cn/pub/wml.txt/980810-2.html,1998-08-16/1998-10-04</a>.<br>[12] 万锦坤.中国大学学报论文文摘(1983-1993).英文版[DB&#x2F;CD].北京:中国大百科全书出版社，1996.<br>h. 各种未定义类型的文献<br>[序号]主要责任者.文献题名[Z].出版地：出版者，出版年.</p><p>Word文档格式一般为：</p><p>①标题<font color='red'>方正小标宋简体</font>    <font color='blue'>二号</font>  不加粗 居中 段落固定值33磅</p><p>②标题与正文空一行（从正文开始打）</p><p>（空行字体字号与正文保持一致，仿宋三号固定值29磅）</p><p>③正文为<font color='red'>仿宋三号不加粗</font>，行间距固定值29磅。首行缩进2字符。两端对齐</p><p>3.标题：与正文缩进等相同、全部用中文字符</p><p>一级标题：黑体三号“一、XXXX”。</p><p>二级标题：楷体三号“（一）XXXX”。</p><p>三级标题：仿宋三号“1.XXXX”。</p><p>四级标题：仿宋三号“（1）XXXX”</p><p>4.Word表格</p><p>①标题方正小标宋简体二号不加粗居中。</p><p>②标题与表格间空一行，表格随内容适当调整。</p><p>③表格全部内容设置单元格格式居中对齐。</p><p>④注意标点。</p><p>⑤两个字的内容或人名中间空两格。</p><p>注：字体根据需要调整，三号，四号或小四。</p><p>5.其他注意点（视图选项）</p><p>①注意符号需为中文符号，区分中英文符号</p><p>如逗号, ， 冒号: ： 破折号- —— 括号( ) （ ）</p><p>②<strong>（根据实际情况进行增删）</strong></p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>写作格式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>攻防世界-Reverse-easyxorwriteup</title>
    <link href="/2023/09/16/CTF_writeup_adworld.xctf_Reverse_easyxor/"/>
    <url>/2023/09/16/CTF_writeup_adworld.xctf_Reverse_easyxor/</url>
    
    <content type="html"><![CDATA[<h1 id="查壳"><a href="#查壳" class="headerlink" title="查壳"></a>查壳</h1><p>无壳</p><h1 id="反编译"><a href="#反编译" class="headerlink" title="反编译"></a>反编译</h1><p>拉进漂亮姐姐中（IDA）</p><p>shift+F12看一下字串</p><p><img src="https://z1.ax1x.com/2023/09/16/pPfDEYF.jpg" srcset="/img/loading.gif" lazyload></p><p>首先看到一个关键信息，点进去，Ctrl+x交叉引用</p><p><img src="https://z1.ax1x.com/2023/09/16/pPfDVW4.jpg" srcset="/img/loading.gif" lazyload></p><p>F5看一下伪代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> __cdecl <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">int</span> v3; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">char</span> v4; <span class="hljs-comment">// al</span><br>  <span class="hljs-type">int</span> v5; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">char</span> v7; <span class="hljs-comment">// [rsp+33h] [rbp-Dh]</span><br>  <span class="hljs-type">char</span> v8; <span class="hljs-comment">// [rsp+33h] [rbp-Dh]</span><br>  <span class="hljs-type">int</span> v9; <span class="hljs-comment">// [rsp+34h] [rbp-Ch]</span><br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+38h] [rbp-8h]</span><br>  <span class="hljs-type">int</span> v11; <span class="hljs-comment">// [rsp+3Ch] [rbp-4h]</span><br><br>  _main();<br>  v11 = <span class="hljs-number">0</span>;<br>  v9 = <span class="hljs-number">0</span>;<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Please input your flag:&quot;</span>);<br>  <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>  &#123;<br>    v8 = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">if</span> ( v8 == <span class="hljs-number">10</span> )<br>      <span class="hljs-keyword">break</span>;<br>v7 = key[v9 % <span class="hljs-number">4</span>] ^ v8;<span class="hljs-comment">//输入的字符，进行异或操作，得到v7</span><br>    <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>    &#123;<br>      v4 = v7--;<span class="hljs-comment">//循环v7次</span><br>      <span class="hljs-keyword">if</span> ( v4 &lt;= <span class="hljs-number">0</span> )<span class="hljs-comment">//此while循环是向s[]中输入v7个1</span><br>        <span class="hljs-keyword">break</span>;<br>      v3 = v11++;<br>      s[v3] = <span class="hljs-number">1</span>;<br>    &#125;<br>    v5 = v11++;<span class="hljs-comment">//输出v7个1后，使用0与下一串1隔开</span><br>    s[v5] = <span class="hljs-number">0</span>;<br>    ++v9;<br>  &#125;<br>  <span class="hljs-keyword">while</span> ( v11 &lt;= <span class="hljs-number">2559</span> )<span class="hljs-comment">//输入的字符全部转化为1之后，不够2559个的话填充-1（255）</span><br>    s[v11++] = <span class="hljs-number">-1</span>;<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">2559</span>; ++i )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( r[i] != s[i] )<span class="hljs-comment">//进行比较</span><br>    &#123;<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Lose lose lose!&quot;</span>);<br>      <span class="hljs-keyword">break</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">if</span> ( i == <span class="hljs-number">2560</span> )<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Win win win!&quot;</span>);<br>  <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中r是</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">r = [<span class="hljs-number">0x35</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x70</span>,<br>     <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x66</span>,<br>     <span class="hljs-number">0x21</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x28</span>]<br></code></pre></td></tr></table></figure><p>key是SCNU</p><h1 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h1><p>写一下解密python</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">r = [<span class="hljs-number">0x35</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x70</span>,<br>     <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x66</span>,<br>     <span class="hljs-number">0x21</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x28</span>]<br>key = <span class="hljs-string">&quot;SCNU&quot;</span><br>flag=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(r)):<br>    flag+=<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(key[i % <span class="hljs-number">4</span>]) ^ r[i])<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><h1 id="FLAG"><a href="#FLAG" class="headerlink" title="FLAG"></a>FLAG</h1><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">flag&#123;Wi<span class="hljs-symbol">nn3</span>r_<span class="hljs-symbol">n0</span>t_L<span class="hljs-number">0</span>s<span class="hljs-number">3</span>r_<span class="hljs-attr">#&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>WP</category>
      
      <category>RE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>密码学——凯撒密码原理</title>
    <link href="/2023/09/16/CTF_crypto_principle_caesar/"/>
    <url>/2023/09/16/CTF_crypto_principle_caesar/</url>
    
    <content type="html"><![CDATA[<h1 id="凯撒密码"><a href="#凯撒密码" class="headerlink" title="凯撒密码"></a>凯撒密码</h1><blockquote><p>来自千千秀字</p></blockquote><p>凯撒密码最早由古罗马军事统帅盖乌斯·尤利乌斯·凯撒在军队中用来传递加密信息，故称凯撒密码。这是一种位移加密方式，只对26个字母进行位移替换加密，规则简单，容易破解。下面是位移1次的对比：</p><table><thead><tr><th>明文字母表</th><th>Z</th><th>A</th><th>B</th><th>C</th><th>D</th><th>E</th><th>F</th><th>G</th><th>H</th><th>I</th><th>J</th><th>K</th><th>L</th><th>M</th><th>N</th><th>O</th><th>P</th><th>Q</th><th>R</th><th>S</th><th>T</th><th>U</th><th>V</th><th>W</th><th>X</th><th>Y</th></tr></thead><tbody><tr><td>密文字母表</td><td>A</td><td>B</td><td>C</td><td>D</td><td>E</td><td>F</td><td>G</td><td>H</td><td>I</td><td>J</td><td>K</td><td>L</td><td>M</td><td>N</td><td>O</td><td>P</td><td>Q</td><td>R</td><td>S</td><td>T</td><td>U</td><td>V</td><td>W</td><td>X</td><td>Y</td><td>Z</td></tr></tbody></table><p>将明文字母表向后移动1位，A变成了B，B变成了C……，Z变成了A。同理，若将明文字母表向后移动3位：</p><table><thead><tr><th>明文字母表</th><th>X</th><th>Y</th><th>Z</th><th>A</th><th>B</th><th>C</th><th>D</th><th>E</th><th>F</th><th>G</th><th>H</th><th>I</th><th>J</th><th>K</th><th>L</th><th>M</th><th>N</th><th>O</th><th>P</th><th>Q</th><th>R</th><th>S</th><th>T</th><th>U</th><th>V</th><th>W</th></tr></thead><tbody><tr><td>密文字母表</td><td>A</td><td>B</td><td>C</td><td>D</td><td>E</td><td>F</td><td>G</td><td>H</td><td>I</td><td>J</td><td>K</td><td>L</td><td>M</td><td>N</td><td>O</td><td>P</td><td>Q</td><td>R</td><td>S</td><td>T</td><td>U</td><td>V</td><td>W</td><td>X</td><td>Y</td><td>Z</td></tr></tbody></table><p>则A变成了D，B变成了E……，Z变成了C。</p><p>字母表最多可以移动25位。凯撒密码的明文字母表向后或向前移动都是可以的，通常表述为向后移动，如果要向前移动1位，则等同于向后移动25位，位移选择为25即可。</p><h1 id="尝试一下"><a href="#尝试一下" class="headerlink" title="尝试一下"></a>尝试一下</h1><p>现在你已经知道原理了，解密一下下面这个吧</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">oknqdbqmo<span class="hljs-string">q&#123;kag_tmhq_xqmdzqp_omqemd_qzodkbfuaz&#125;</span><br></code></pre></td></tr></table></figure><p>.</p><p>.</p><h1 id="在线解密地址"><a href="#在线解密地址" class="headerlink" title="在线解密地址"></a>在线解密地址</h1><p><a href="https://www.qqxiuzi.cn/bianma/kaisamima.php">凯撒密码在线加密解密 - 千千秀字 (qqxiuzi.cn)</a></p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>cyberpeace{you_have_learned_caesar_encryption}</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>密码学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DS作业-2-22网安物联网-20230913</title>
    <link href="/2023/09/15/DS_homework_2_22wanganwulian_20230913/"/>
    <url>/2023/09/15/DS_homework_2_22wanganwulian_20230913/</url>
    
    <content type="html"><![CDATA[<blockquote><p>声明：仅供留档查阅，仅用作起到提示引导性作用，仅用作学习交流，切勿直接照搬</p></blockquote><h1 id="DS作业-2-22网安物联网-20230913"><a href="#DS作业-2-22网安物联网-20230913" class="headerlink" title="DS作业-2-22网安物联网-20230913"></a><strong>DS作业-2-22网安物联网-20230913</strong></h1><p><strong>作业Ch1-4:  P24-P25 1.选择题</strong></p><p>1-5  <u>CD</u>    B  B A A   6-9  C  <u>CE</u>  </p><p>第九题解析</p><blockquote><p>这段代码的时间复杂度是O(n²)。这是因为外部循环会执行n次，而内部循环会执行2<em>i次，其中i的最大值是n。因此，最坏情况下，内部循环会执行2n次。所以，总的执行次数是n</em>(2n)，即O(n²)。这意味着，如果输入大小（即n的值）增加，那么执行时间将按平方增加。这是典型的二次时间复杂度的例子。</p></blockquote><h1 id="作业Ch1-5"><a href="#作业Ch1-5" class="headerlink" title="作业Ch1-5:"></a><strong>作业Ch1-5:</strong></h1><p><strong>算法编程题，给出代码、测试过程和运行结果：</strong></p><p><font color='red'>这个题存疑，算法思路还没看懂</font></p><p>将一个具有 n 个元素的数组A[n]向左循环移动k个位置，要求时间复杂度为O(n)，空间复杂度为O(1)。</p><blockquote><p>答案（来自bing ai</p></blockquote><p>这是一个经典的问题，可以通过三次反转数组的方法来解决。首先，我们将数组的前k个元素反转，然后将剩余的元素反转，最后将整个数组反转。这样就可以实现将数组向左循环移动k个位置。以下是具体的C++代码实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">reverse</span><span class="hljs-params">(<span class="hljs-type">int</span> A[], <span class="hljs-type">int</span> start, <span class="hljs-type">int</span> end)</span> </span>&#123;<br>    <span class="hljs-keyword">while</span>(start &lt; end) &#123;<br>        <span class="hljs-built_in">swap</span>(A[start], A[end]);<br>        start++;<br>        end--;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">leftRotate</span><span class="hljs-params">(<span class="hljs-type">int</span> A[], <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> k)</span> </span>&#123;<br>    <span class="hljs-built_in">reverse</span>(A, <span class="hljs-number">0</span>, k<span class="hljs-number">-1</span>);<br>    <span class="hljs-built_in">reverse</span>(A, k, n<span class="hljs-number">-1</span>);<br>    <span class="hljs-built_in">reverse</span>(A, <span class="hljs-number">0</span>, n<span class="hljs-number">-1</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> A[] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>&#125;;<br>    <span class="hljs-type">int</span> n = <span class="hljs-built_in">sizeof</span>(A)/<span class="hljs-built_in">sizeof</span>(A[<span class="hljs-number">0</span>]);<br>    <span class="hljs-type">int</span> k = <span class="hljs-number">2</span>;<br>    <br>    <span class="hljs-built_in">leftRotate</span>(A, n, k);<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        cout &lt;&lt; A[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这段代码首先定义了一个<code>reverse</code>函数，用于反转数组中从<code>start</code>到<code>end</code>的元素。然后定义了一个<code>leftRotate</code>函数，用于将数组向左循环移动k个位置。在<code>main</code>函数中，我们创建了一个数组，并调用了<code>leftRotate</code>函数来进行旋转。最后，我们打印出旋转后的数组。</p><p>这个解决方案的时间复杂度为O(n)，空间复杂度为O(1)，满足了题目的要求。希望这个答案对你有所帮助！</p><p><font color='red'>新知识，要使其不大于最大长度可以用取模运算来解决</font></p><h2 id="作业Ch1-6"><a href="#作业Ch1-6" class="headerlink" title="作业Ch1-6:"></a><strong>作业Ch1-6:</strong></h2><p><strong>算法编程题，给出代码、测试过程和运行结果：</strong></p><p>找出整型数组A[n]中的最大值和次最大值。</p><blockquote><p>答案（来自bing ai</p></blockquote><p>以下是一个C++代码片段，它可以找出整型数组A[n]中的最大值和次最大值。这个代码假设数组中至少有两个元素，并且所有元素都是唯一的。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">findMaxAndSecondMax</span><span class="hljs-params">(<span class="hljs-type">int</span> A[], <span class="hljs-type">int</span> n)</span> </span>&#123;<br>    <span class="hljs-type">int</span> max1 = A[<span class="hljs-number">0</span>], max2 = A[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-keyword">if</span>(A[i] &gt; max1) &#123;<br>            max2 = max1;<br>            max1 = A[i];<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(A[i] &gt; max2) &#123;<br>            max2 = A[i];<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; <span class="hljs-string">&quot;最大值: &quot;</span> &lt;&lt; max1 &lt;&lt; <span class="hljs-string">&quot;, 次最大值: &quot;</span> &lt;&lt; max2 &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> A[] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>&#125;;<br>    <span class="hljs-type">int</span> n = <span class="hljs-built_in">sizeof</span>(A)/<span class="hljs-built_in">sizeof</span>(A[<span class="hljs-number">0</span>]);<br>    <br>    <span class="hljs-built_in">findMaxAndSecondMax</span>(A, n);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这段代码首先定义了一个<code>findMaxAndSecondMax</code>函数，用于找出数组中的最大值和次最大值。然后在<code>main</code>函数中，我们创建了一个数组，并调用了<code>findMaxAndSecondMax</code>函数来找出最大值和次最大值。希望这个答案对你有所帮助！</p><h1 id="END"><a href="#END" class="headerlink" title="END"></a>END</h1>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>数据结构作业</category>
      
      <category>课后作业</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构作业</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实验一、顺序存储结构线性表的建立及操作</title>
    <link href="/2023/09/15/DS_test1/"/>
    <url>/2023/09/15/DS_test1/</url>
    
    <content type="html"><![CDATA[<blockquote><p>声明：仅供留档查阅，仅用作起到提示引导性作用，仅用作学习交流，切勿直接照搬</p></blockquote><p><img src="https://cyberdownload.anrunlu.net/Fis_1Y1PQhtSsV6Vv8uzbswmKvrW" srcset="/img/loading.gif" lazyload></p><h1 id="代码主体"><a href="#代码主体" class="headerlink" title="代码主体"></a>代码主体</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-type">long</span> num;<br>    <span class="hljs-type">char</span> name[<span class="hljs-number">10</span>];<br>    <span class="hljs-type">float</span> score;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ScoreList</span> &#123;<br><span class="hljs-keyword">private</span>:<br>    Student data[<span class="hljs-number">100</span>];<br>    <span class="hljs-type">int</span> length;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">ScoreList</span>() &#123;<br>        length = <span class="hljs-number">5</span>;<br>        data[<span class="hljs-number">0</span>] = &#123; <span class="hljs-number">1001</span>, <span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">85</span> &#125;;<br>        data[<span class="hljs-number">1</span>] = &#123; <span class="hljs-number">1002</span>, <span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-number">90</span> &#125;;<br>        data[<span class="hljs-number">2</span>] = &#123; <span class="hljs-number">1003</span>, <span class="hljs-string">&quot;王五&quot;</span>, <span class="hljs-number">80</span> &#125;;<br>        data[<span class="hljs-number">3</span>] = &#123; <span class="hljs-number">1004</span>, <span class="hljs-string">&quot;赵六&quot;</span>, <span class="hljs-number">95</span> &#125;;<br>        data[<span class="hljs-number">4</span>] = &#123; <span class="hljs-number">1005</span>, <span class="hljs-string">&quot;孙七&quot;</span>, <span class="hljs-number">88</span> &#125;;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">del</span><span class="hljs-params">(<span class="hljs-type">long</span> num)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (data[i].num == num) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i; j &lt; length - <span class="hljs-number">1</span>; j++) &#123;<br>                    data[j] = data[j + <span class="hljs-number">1</span>];<br>                &#125;<br>                length--;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(Student stu)</span> </span>&#123;<br>        <span class="hljs-type">int</span> pos = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (pos &lt; length &amp;&amp; data[pos].score &gt; stu.score) pos++;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = length; i &gt; pos; i--) &#123;<br>            data[i] = data[i - <span class="hljs-number">1</span>];<br>        &#125;<br>        data[pos] = stu;<br>        length++;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">output</span><span class="hljs-params">()</span> </span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;学号\t姓名\t分数&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br>            cout &lt;&lt; data[i].num &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span> &lt;&lt; data[i].name &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span> &lt;&lt; data[i].score &lt;&lt; endl;<br>        &#125;<br>    &#125;<br><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">long</span> a;<br>    <span class="hljs-type">char</span> b[<span class="hljs-number">10</span>];<br>    <span class="hljs-type">float</span> c;<br>    ScoreList list;<br>    list.<span class="hljs-built_in">output</span>();<br>    cout &lt;&lt; <span class="hljs-string">&quot;删除一个学生，请输入学生学号&quot;</span> &lt;&lt; endl;<br>    cin &gt;&gt; a;<br>    list.<span class="hljs-built_in">del</span>(a);<br>    list.<span class="hljs-built_in">output</span>();<br>    cout &lt;&lt; <span class="hljs-string">&quot;插入一个新学生（学号 姓名 分数 ）用空格隔开&quot;</span> &lt;&lt; endl;<br>    cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;<br>    Student newStu = &#123; a, <span class="hljs-string">&quot;&quot;</span>, c &#125;;<br>    <span class="hljs-built_in">strcpy_s</span>(newStu.name, b); <span class="hljs-comment">// 使用 strcpy 函数复制字符串</span><br>    list.<span class="hljs-built_in">insert</span>(newStu);<br>    list.<span class="hljs-built_in">output</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>数据结构作业</category>
      
      <category>实验</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构作业</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CTF入门指北——web</title>
    <link href="/2023/09/15/CTF_easy_web/"/>
    <url>/2023/09/15/CTF_easy_web/</url>
    
    <content type="html"><![CDATA[<h1 id="moectf2023-web-入门指南"><a href="#moectf2023-web-入门指南" class="headerlink" title="moectf2023 web 入门指南"></a>moectf2023 web 入门指南</h1><p>Klutton</p><h1 id="知识和资源的获取"><a href="#知识和资源的获取" class="headerlink" title="知识和资源的获取"></a>知识和资源的获取</h1><p>前言</p><p>ctf知识的学习与课内一板一眼式的教书不同，如果你想要获得成长的能力，那么你 必须 获取 自主获取知识 的 能力，如果你是一个初学者，这是一个脱离以前填鸭式应试教育的学习模式，你需要不得不逐步适应新的学习 方式， 这样的能力不管在哪个方向，甚至在别的竞赛学科中，都是必要的 </p><p>这样的学习方式是受益终生的，不是吗？</p><h2 id="从公开资源获取知识和资源"><a href="#从公开资源获取知识和资源" class="headerlink" title="从公开资源获取知识和资源"></a>从公开资源获取知识和资源</h2><p>这个目录表是有难易顺序的，因为每一个途径都需要一定的经验和知识才能掌握</p><h3 id="搜索引擎"><a href="#搜索引擎" class="headerlink" title="搜索引擎"></a>搜索引擎</h3><p>优先选择bing和google</p><p> 不会就先搜，搜索引擎的速度肯定比管理员回消息快</p><p> 在上面两引擎信息不足情况下考虑其他引擎</p><h3 id="人工智能"><a href="#人工智能" class="headerlink" title="人工智能"></a>人工智能</h3><p>随着时代的发展，从2023年（笔者确信）开始，无论国内外，语言模型的发展使得我们可以大概 地与人工智能沟通获取知识，人工智能不怕累、不怕麻烦，值得重复问一些简单问题</p><p>如果不知道怎么弄，请接着看下面的内容</p><h3 id="GitHub等开源社区"><a href="#GitHub等开源社区" class="headerlink" title="GitHub等开源社区"></a>GitHub等开源社区</h3><p>搜索关键词，可能有热心的开源作者汇集的一些某某大全形式的攻击载荷，忘了就去翻翻嘛</p><p>例子： </p><p>​PayloadsAlltheThings —— payload大全 </p><p>​vulhub的docker（需要会使用搭配相应漏洞知识）</p><p>如果觉得你访问的仓库有价值，不妨给仓库一个一个star</p><h3 id="从私下获取资源"><a href="#从私下获取资源" class="headerlink" title="从私下获取资源"></a>从私下获取资源</h3><p>有些知识在互联网上传播是有风险的，例如怎么上GitHub，我老是上不去，不妨私下问问你的室友如何解决 <del>或 者你可以陪我跑跑山吃吃饭的时候聊一聊</del></p><p>例如：chatgpt不允许国内访问；openai的账号注册需要外国手机号码</p><p>那你可以找朋友问一问，借一借</p><h3 id="从私下获取知识"><a href="#从私下获取知识" class="headerlink" title="从私下获取知识"></a>从私下获取知识</h3><p>那就和问老师问题一样嘛（而且老师还比同学多出来一个教人的义务），主要几点</p><p>不要问“在吗？”一类的字眼，言语谦逊地完整提出问题再等待答复 </p><p>被提问者不一定了解具体的细节，要及时补充要求的具体内容</p><p>如果被问者也不知道，请原谅他 </p><p>如果认为受益匪浅，不妨给出物质上的答谢</p><h4 id="综上，遇到不会的怎么办"><a href="#综上，遇到不会的怎么办" class="headerlink" title="综上，遇到不会的怎么办"></a>综上，遇到不会的怎么办</h4><p>把你认为是特征内容的复制下来 </p><p>扔给上面提到的资源</p><h2 id="如何练习"><a href="#如何练习" class="headerlink" title="如何练习"></a>如何练习</h2><h4 id="一些练习场"><a href="#一些练习场" class="headerlink" title="一些练习场"></a>一些练习场</h4><p>buuoj </p><p>bugku （可以看三哈师傅的网站了解更多平台）<a href="https://www.su-sanha.cn/platforms">https://www.su-sanha.cn/platforms</a></p><p>需要知道的：<strong>靶场分普通的ctf靶场，有的是awd或者awdp，有的则是给你一个虚拟机自己从头到尾拿下系统 权限（vulnhub）最前者是最基础的，如果想要了解完整真实的渗透流程，可以去尝试vulnhub这类网站</strong></p><h4 id="学会查看题解write-up（wp）"><a href="#学会查看题解write-up（wp）" class="headerlink" title="学会查看题解write up（wp）"></a>学会查看题解write up（wp）</h4><p>在平时的练习中，肯定会遇到不会的题，千万不要死磕，不会就看wp，下一道更好！ 在搜索引擎或者开源社 区查找wp，在看wp的过程中，补充并且掌握自己的不会的知识点</p><h3 id="如何配置环境"><a href="#如何配置环境" class="headerlink" title="如何配置环境"></a>如何配置环境</h3><p><strong>一定要有耐心！</strong> 一套环境不是十分钟二十分钟就能配完的，对于新手而言，几天甚至一两周都有可能，反复地 确认自己的步骤、教程的日期、教程使用的系统版本是否正确；</p><p>尽量选择官方网站的配置方式：寻找document字样去看文档，这是最稳的方法，但是比较费力； 可以去看私 人的文章，但不一定能成功</p><p><strong>熟能生巧</strong></p><p>可以自己尝试配置一套lamp环境，或者配一台虚拟机，运行一个docker</p><h3 id="一些知识清单"><a href="#一些知识清单" class="headerlink" title="一些知识清单"></a>一些知识清单</h3><p>编码</p><p>在网络传输中，数据被编码成为二进制内容经过网络传输之后解码，由于在这个过程中应用了不同的规则，只 有使用了相应的编码才能正确地解析内容，有很多编码形式需要你了解（正经和不正经的），在深度了解编码 规则后，你甚至可以自创独属于你的编码规则！</p><p>可供参考的资料：<a href="https://www.cnblogs.com/ruoli-s/p/14206145.html">https://www.cnblogs.com/ruoli-s/p/14206145.html</a></p><p>编程语言</p><p>当提到计算机，不可避免地需要了解编程，事实上，已经存在相当多主流的编程语言，有一些适用于提供和处 理web服务，例如python, java, php, golang, rust，你需要具备对于这些代码最少有审计能力（看得懂在做什么）</p><p>工具</p><p><strong>够用</strong>： </p><p>​postman </p><p>​burp </p><p>​sqlmap</p><p><strong>计网知识</strong> </p><p>​标准的OSI七层模型（其实了解tcp足矣） </p><p>​了解 “协议”（例如http，https，ftp，gopher，也需要了解php伪协议）</p><p><strong>HTTP</strong> </p><p>​请求方法（get&#x2F;post） </p><p>​请求内容（json&#x2F;raw&#x2F;binary） </p><p>​请求头（content-type&#x2F;xff&#x2F;referer&#x2F;cookie）</p><p><strong>服务框架</strong></p><p>​有现成的网络框架用于高效并发处理请求，所以你需要了解函数是干嘛用的，怎么处理请求的</p><p>​python: Flask, Django, Tornado </p><p>​java: Spring Boot</p><p><strong>用户凭证</strong></p><p>​http是无状态协议，因此需要储存处理用户信息，你需要了解：</p><p>​cookie </p><p>​session </p><p>​jwt</p><p>​有时会涉及到用户信息伪造，例如flask框架下的session伪造，通过获取（或者弱口令爆破）secret_key来伪造 一个session，通常需要自己写脚本（或者获取GitHub现成的脚本改一改使用）</p><p><strong>数据储存</strong></p><p>实际上，大部分持久化信息是储存在数据库的，有的出题人为了简化流程也会直接把信息储存在内存里</p><p><strong>数据库管理系统</strong>（DBMS）</p><p>​你需要知道去哪儿了解不同DBMS的sql语法，以便完成相应的挑战：</p><p>​sql injection注入：查询脚本由于过滤不严导致查询语句可控，用户得以访问数据库</p><p>​有回显</p><p>​盲注</p><p>​文件读写：通过数据库进行文件的读写，可以配合起来getshell</p><p>（sql注入可以尝试sqlmap一把梭，前提是你找对了注入点）</p><p><strong>反序列化</strong></p><p>反序列化一直是一个离不开的话题，大体来说，序列化就是把内存里处理好的数据变成二进制内容（通常）用 来传输或储存；反序列化就是按照序列化的规则的把内容读取到内存中参与程序运行；如果反序列化不得当， 被恶意构造的内容就可能导致机器被”骇入”</p><p>xxe（xml外部实体攻击 libxml 2.8.0以下） </p><p>php反序列化（包括了解其中的魔术方法）</p><p>pickle反序列化（可能会有r指令过滤不过涉及出题不多）</p><p>java反序列化（pop链）</p><p><strong>CMS</strong></p><p>​上网查吧（杂 </p><p>​内网渗透</p><p><strong>代理工具</strong></p><p>配置socks代理，继续进行内网渗透 </p><p>​nps </p><p>​frp </p><p>​proxifier </p><p>​proxychains</p><p><strong>扫描工具</strong> </p><p>发现内网资产 </p><p>​nmap</p><p>​fscan</p><h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1><p>祝你能玩得愉快，学得愉快！</p><hr><p>666c61673d6257396c5933526d6533637a62454e7662575666564739666257396c513152475831637959 6c396a61474673624756755a3055684958303d</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>CTF入门指北</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通过 Hexo 5 注入器为主题添加新功能</title>
    <link href="/2023/09/13/hexoV5_injector/"/>
    <url>/2023/09/13/hexoV5_injector/</url>
    
    <content type="html"><![CDATA[<h2 id="Hexo-注入器"><a href="#Hexo-注入器" class="headerlink" title="Hexo 注入器"></a>Hexo 注入器</h2><p><a href="https://hexo.io/zh-cn/api/injector.html">Hexo 注入器</a>是 Hexo 5 版本自身加入的一项新功能，所以在所有 Hexo 主题都是支持这个功能的。</p><p>该注入器可以将 HTML 片段注入生成页面的 <code>&lt;head&gt;</code> 和 <code>&lt;body&gt;</code> 节点中。</p><p>编写注入代码，需要在博客的根目录下创建 <code>scripts</code> 文件夹，然后在里面任意命名创建一个 js 文件即可。</p><p>例如创建一个 <code>/blog/scripts/example.js</code>，内容为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml">hexo.extend.injector.register(&#x27;body_end&#x27;, &#x27;<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/jquery.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>&#x27;, &#x27;default&#x27;);<br><br>JAVASCRIPT<br></code></pre></td></tr></table></figure><p>上述代码会在生成的页面 <code>&lt;/body&gt;</code> 注入加载 <code>jquery.js</code> 的代码。</p><p><code>register</code> 函数可接受三个参数，第一个参数是代码片段注入的位置，接受以下值：<br>- <code>head_begin</code>: 注入在 <code>&lt;head&gt;</code> 之后（默认）<br>- <code>head_end</code>: 注入在 <code>&lt;/head&gt;</code> 之前<br>- <code>body_begin</code>: 注入在 <code>&lt;body&gt;</code> 之后<br>- <code>body_end</code>: 注入在 <code>&lt;/body&gt;</code> 之前</p><p>第二个参数是注入的片段，可以是字符串，也可以是一个返回值为字符串的函数。</p><p>第三个参数是注入的页面类型，接受以下值：<br>- <code>default</code>: 注入到每个页面（默认值）<br>- <code>home</code>: 只注入到主页（<code>is_home()</code> 为 <code>true</code> 的页面）<br>- <code>post</code>: 只注入到文章页面（<code>is_post()</code> 为 <code>true</code> 的页面）<br>- <code>page</code>: 只注入到独立页面（<code>is_page()</code> 为 <code>true</code> 的页面）<br>- <code>archive</code>: 只注入到归档页面（<code>is_archive()</code> 为 <code>true</code> 的页面）<br>- <code>category</code>: 只注入到分类页面（<code>is_category()</code> 为 <code>true</code> 的页面）<br>- <code>tag</code>: 只注入到标签页面（<code>is_tag()</code> 为 <code>true</code> 的页面）<br>- 或是其他自定义 layout 名称，例如在Fluid 主题中 <code>about</code> 对应关于页、<code>links</code> 对应友联页</p><h2 id="实际案例"><a href="#实际案例" class="headerlink" title="实际案例"></a>实际案例</h2><p>在实际使用中，建议将 js 代码独立成为 js 文件，存放在博客的 <code>source</code> 目录下，然后在 <code>scripts</code> 里通过一个包含 injector 的 js 文件统一引入。</p><p>例如创建一个 <code>/source/js/custom.js</code>，里面包含初始化的代码，然后在 <code>/scripts/injector.js</code> 里写入：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">hexo<span class="hljs-selector-class">.extend</span><span class="hljs-selector-class">.injector</span><span class="hljs-selector-class">.register</span>(<span class="hljs-string">&#x27;body_end&#x27;</span>, `<br>  &lt;script <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;/js/custom.js&quot;</span>&gt;&lt;/script&gt;<br>`)<br><br>JAVASCRIPT<br></code></pre></td></tr></table></figure><p>以下案例都采用类似的形式，不再赘述。</p><h3 id="APlayer-音乐播放器"><a href="#APlayer-音乐播放器" class="headerlink" title="APlayer 音乐播放器"></a>APlayer 音乐播放器</h3><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs xquery">hexo.extend.injector.register(<span class="hljs-string">&#x27;body_end&#x27;</span>, `<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;aplayer&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  &lt;link defer rel=<span class="hljs-string">&quot;stylesheet&quot;</span> href=<span class="hljs-string">&quot;https://cdn.staticfile.org/aplayer/1.10.1/APlayer.min.css&quot;</span> /&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.staticfile.org/aplayer/1.10.1/APlayer.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>  &lt;script defer src=<span class="hljs-string">&quot;/js/aplayer.js&quot;</span>&gt;&lt;/script&gt;<br>`);<br><br>JAVASCRIPT<br>!(<span class="hljs-keyword">function</span>() &#123;<br>  var oldLoadAp = <span class="hljs-keyword">window</span>.onload;<br>  <span class="hljs-keyword">window</span>.onload = <span class="hljs-keyword">function</span> () &#123;<br>    oldLoadAp &amp;&amp; oldLoadAp();<br><br>    new APlayer(&#123;<br>      container:<span class="hljs-built_in"> document</span>.getElementById(<span class="hljs-string">&#x27;aplayer&#x27;</span>),<br>      fixed:<span class="hljs-built_in"> true</span>,<br>      autoplay:<span class="hljs-built_in"> false</span>,<br>      loop: <span class="hljs-string">&#x27;all&#x27;</span>,<br>      order: <span class="hljs-string">&#x27;random&#x27;</span>,<br>      theme: <span class="hljs-string">&#x27;#b7daff&#x27;</span>,<br>      preload: <span class="hljs-string">&#x27;none&#x27;</span>,<br>      audio: [<br>        &#123;<br>         <span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;song1&#x27;</span>,<br>          artist: <span class="hljs-string">&#x27;artist1&#x27;</span>,<br>          url: <span class="hljs-string">&#x27;/songs/song1.mp3&#x27;</span>,<br>          cover: <span class="hljs-string">&#x27;/img/cover.jpg&#x27;</span><br>        &#125;<br>      ]<br>    &#125;);<br>  &#125;<br>&#125;)();<br><br>JAVASCRIPT<br></code></pre></td></tr></table></figure><p>更多参数详见 <a href="https://aplayer.js.org/#/zh-Hans/?id=%E5%8F%82%E6%95%B0">Aplayer 文档</a>。</p><h3 id="DaoVoice-聊天插件"><a href="#DaoVoice-聊天插件" class="headerlink" title="DaoVoice 聊天插件"></a>DaoVoice 聊天插件</h3><p>先在 <a href="https://daovoice.io/">https://daovoice.io</a> 注册一个账号，按其中的引导获得 appId，然后添加如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs javascript">hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">injector</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;body_end&#x27;</span>, <span class="hljs-string">`</span><br><span class="hljs-string">  &lt;script defer src=&quot;/js/daovoice.js&quot;&gt;&lt;/script&gt;</span><br><span class="hljs-string">`</span>);<br><br><span class="hljs-variable constant_">XML</span><br>!(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> appId = <span class="hljs-string">&#x27;这里填上注册后账号的 appId&#x27;</span>;<br><br>  (<span class="hljs-keyword">function</span> (<span class="hljs-params">i, s, o, g, r, a, m</span>) &#123;  <br>    i[<span class="hljs-string">&#x27;DaoVoiceObject&#x27;</span>] = r;<br>    i[r] = i[r] ||<br>      <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        (i[r].<span class="hljs-property">q</span> = i[r].<span class="hljs-property">q</span> || []).<span class="hljs-title function_">push</span>(<span class="hljs-variable language_">arguments</span>);<br>      &#125;;<br>    i[r].<span class="hljs-property">l</span> = <span class="hljs-number">1</span> * <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>    a = s.<span class="hljs-title function_">createElement</span>(o);<br>    m = s.<span class="hljs-title function_">getElementsByTagName</span>(o)[<span class="hljs-number">0</span>];<br>    a.<span class="hljs-property">async</span> = <span class="hljs-number">1</span>;<br>    a.<span class="hljs-property">src</span> = g;<br>    a.<span class="hljs-property">charset</span> = <span class="hljs-string">&#x27;utf-8&#x27;</span>;<br>    m.<span class="hljs-property">parentNode</span>.<span class="hljs-title function_">insertBefore</span>(a, m);<br>  &#125;)(<span class="hljs-variable language_">window</span>, <span class="hljs-variable language_">document</span>, <span class="hljs-string">&#x27;script&#x27;</span>, (<span class="hljs-string">&#x27;https:&#x27;</span> === <span class="hljs-variable language_">document</span>.<span class="hljs-property">location</span>.<span class="hljs-property">protocol</span> ? <span class="hljs-string">&#x27;https:&#x27;</span> : <span class="hljs-string">&#x27;http:&#x27;</span>) + <span class="hljs-string">&#x27;//widget.daovoice.io/widget/&#x27;</span> + appId + <span class="hljs-string">&#x27;.js&#x27;</span>, <span class="hljs-string">&#x27;daovoice&#x27;</span>);<br>  <span class="hljs-title function_">daovoice</span>(<span class="hljs-string">&#x27;init&#x27;</span>, &#123;<br>    <span class="hljs-attr">app_id</span>: appId,<br>  &#125;);<br>  <span class="hljs-title function_">daovoice</span>(<span class="hljs-string">&#x27;update&#x27;</span>);<br>&#125;)();<br><br><span class="hljs-variable constant_">JAVASCRIPT</span><br></code></pre></td></tr></table></figure><h3 id="文章时效性提示"><a href="#文章时效性提示" class="headerlink" title="文章时效性提示"></a>文章时效性提示</h3><p>技术性文章往往存在时效性的问题，比如某些文章会介绍一些临时解决方案，但随着时间推移可能已经失效了。我们可以通过判断发布时间（即文章设置的 <code>date</code>）与当前时间的间隔，来为文章开头插入一条提示。</p><p>代码效果如下所示：</p><p>文章时效性提示</p><p>这是一篇发布于 263 天前的文章，部分信息可能已发生改变，请注意甄别。</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs scheme">(<span class="hljs-name">function</span>() &#123;<br>  var times = document.getElementsByTagName(<span class="hljs-symbol">&#x27;time</span>&#x27;)<span class="hljs-comment">;</span><br>  if (<span class="hljs-name">times.length</span> === <span class="hljs-number">0</span>) &#123; return<span class="hljs-comment">; &#125;</span><br>  var posts = document.getElementsByClassName(<span class="hljs-symbol">&#x27;post-content</span>&#x27;)<span class="hljs-comment">;</span><br>  if (<span class="hljs-name">posts.length</span> === <span class="hljs-number">0</span>) &#123; return<span class="hljs-comment">; &#125;</span><br><br>  var pubTime = new Date(<span class="hljs-name">times</span>[<span class="hljs-name">0</span>].dateTime)<span class="hljs-comment">;  /* 文章发布时间戳 */</span><br>  var now = Date.now()  /* 当前时间戳 */<br>  var interval = parseInt(<span class="hljs-name">now</span> - pubTime)<br>  /* 发布时间超过指定时间（毫秒） */<br>  if (<span class="hljs-name">interval</span> &gt; <span class="hljs-number">3600</span>*24*30*1000)&#123;<br>    var days = parseInt(<span class="hljs-name">interval</span> / <span class="hljs-number">86400000</span>)<br>    posts[<span class="hljs-name">0</span>].innerHTML = <span class="hljs-symbol">&#x27;&lt;div</span> class=<span class="hljs-string">&quot;note note-warning&quot;</span> style=<span class="hljs-string">&quot;font-size:0.9rem&quot;</span>&gt;&lt;p&gt;&#x27; +<br>      <span class="hljs-symbol">&#x27;&lt;div</span> class=<span class="hljs-string">&quot;h6&quot;</span>&gt;文章时效性提示&lt;/div&gt;&lt;p&gt;这是一篇发布于 &#x27; + days + &#x27; 天前的文章，部分信息可能已发生改变，请注意甄别。&#x27; +<br>      <span class="hljs-symbol">&#x27;&lt;/p&gt;&lt;/p&gt;&lt;/div&gt;</span>&#x27; + posts[<span class="hljs-name">0</span>].innerHTML<span class="hljs-comment">;</span><br>  &#125;<br>&#125;)()<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
      <category>用法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo博客中tags与categories用法</title>
    <link href="/2023/09/13/hexo_tags_and_categories/"/>
    <url>/2023/09/13/hexo_tags_and_categories/</url>
    
    <content type="html"><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/348131730">hexo博客中tags与categories用法 - 知乎 (zhihu.com)</a></p><h3 id="tags与categories"><a href="#tags与categories" class="headerlink" title="tags与categories"></a>tags与categories</h3><p>在hexo中使用tags与categories往往需要使用多标签和多分类,这里记录一下它们的用法。</p><h3 id="tag"><a href="#tag" class="headerlink" title="tag"></a>tag</h3><p>用法：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">tags:<br>  - 123<br>  - 456<br>tags: [123, 456]<br></code></pre></td></tr></table></figure><p>多标签写法，这2种都是一样的效果，用哪个都可以，建议使用列表[]式，直观清晰。</p><h3 id="categories"><a href="#categories" class="headerlink" title="categories"></a>categories</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs text"># 这是默认的写法，给文章添加一个分类。<br>categories: 123<br># 这会将文章分类123/456子分类目录下。<br>categories: [123, 456]<br>这会将文章分类到123/456子分类目录下。<br>categories:<br>   - 123<br>   - 456<br>多标签写法，文章被分类到123、456以及123的自分类789这3个分类下面，官方指定写法。<br>categories:<br>   - [123]<br>   - [456]<br>   - [123, 789]<br></code></pre></td></tr></table></figure><h3 id="Tag-插件"><a href="#Tag-插件" class="headerlink" title="Tag 插件"></a>Tag 插件</h3><h4 id="便签"><a href="#便签" class="headerlink" title="便签"></a>便签</h4><p>在 markdown 中加入如下的代码来使用便签：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% note success %&#125;<br>文字 或者 <span class="hljs-code">`markdown`</span> 均可<br>&#123;% endnote %&#125;<br></code></pre></td></tr></table></figure><p>或者使用 HTML 形式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;note note-primary&quot;</span>&gt;</span>标签<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可选便签：</p><p>primary</p><p>secondary</p><p>success</p><p>danger</p><p>warning</p><p>info</p><p>light</p><p>WARNING</p><p>使用时 <code>&#123;% note primary %&#125;` 和 `&#123;% endnote %&#125;</code> 需单独一行，否则会出现问题</p><h4 id="行内标签"><a href="#行内标签" class="headerlink" title="#行内标签"></a><a href="https://hexo.fluid-dev.com/docs/guide/#%E8%A1%8C%E5%86%85%E6%A0%87%E7%AD%BE">#</a>行内标签</h4><p>在 markdown 中加入如下的代码来使用 Label：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% label primary @text %&#125;<br></code></pre></td></tr></table></figure><p>或者使用 HTML 形式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;label label-primary&quot;</span>&gt;</span>Label<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可选 Label：</p><p>primary default info success warning danger</p><h4 id="折叠块"><a href="#折叠块" class="headerlink" title="#折叠块"></a><a href="https://hexo.fluid-dev.com/docs/guide/#%E6%8A%98%E5%8F%A0%E5%9D%97">#</a>折叠块</h4><p>使用折叠块，可以折叠代码、图片、文字等任何内容，你可以在 markdown 中按如下格式：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% fold info @title %&#125;<br>需要折叠的一段内容，支持 markdown<br>&#123;% endfold %&#125;<br></code></pre></td></tr></table></figure><p>info: 和行内标签类似的可选参数 title: 折叠块上的标题</p><h4 id="勾选框"><a href="#勾选框" class="headerlink" title="#勾选框"></a><a href="https://hexo.fluid-dev.com/docs/guide/#%E5%8B%BE%E9%80%89%E6%A1%86">#</a>勾选框</h4><p>在 markdown 中加入如下的代码来使用 Checkbox：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% cb text, checked?, incline? %&#125;<br></code></pre></td></tr></table></figure><p>text：显示的文字<br>checked：默认是否已勾选，默认 false<br>incline: 是否内联（可以理解为后面的文字是否换行），默认 false</p><p>示例：</p><div>            <input type="checkbox"  >普通示例          </div><div>            <input type="checkbox"  checked="checked">默认选中          </div>            <input type="checkbox"  >内联示例           后面文字不换行<input type="checkbox" disabled > 也可以只传入一个参数，文字写在后边（这样不支持外联）<h4 id="按钮"><a href="#按钮" class="headerlink" title="#按钮"></a><a href="https://hexo.fluid-dev.com/docs/guide/#%E6%8C%89%E9%92%AE">#</a>按钮</h4><p>你可以在 markdown 中加入如下的代码来使用 Button：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% btn url, text, title %&#125;<br></code></pre></td></tr></table></figure><p>或者使用 HTML 形式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span>text<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>url：跳转链接<br>text：显示的文字<br>title：鼠标悬停时显示的文字（可选）</p><p><a href="javascript:;">text</a></p><h4 id="组图"><a href="#组图" class="headerlink" title="#组图"></a><a href="https://hexo.fluid-dev.com/docs/guide/#%E7%BB%84%E5%9B%BE">#</a>组图</h4><p>如果想把多张图片按一定布局组合显示，你可以在 markdown 中按如下格式：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% gi total n1-n2-... %&#125;<br>  ![](<span class="hljs-link">url</span>)<br>  ![](<span class="hljs-link">url</span>)<br>  ![](<span class="hljs-link">url</span>)<br>  ![](<span class="hljs-link">url</span>)<br>  ![](<span class="hljs-link">url</span>)<br>&#123;% endgi %&#125;<br></code></pre></td></tr></table></figure><p>total：图片总数量，对应中间包含的图片 url 数量<br>n1-n2-…：每行的图片数量，可以省略，默认单行最多 3 张图，求和必须相等于 total，否则按默认样式</p><p>如下图为 <code>&#123;% gi 5 3-2 %&#125;</code> 示例，代表共 5 张图，第一行 3 张图，第二行 2 张图。</p><p><img src="https://hexo.fluid-dev.com/docs/assets/img/group_image.c1b58381.png" srcset="/img/loading.gif" lazyload alt="Group Images"></p>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
      <category>用法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CTF入门指北——reserve</title>
    <link href="/2023/09/13/CTF_easy_reserve/"/>
    <url>/2023/09/13/CTF_easy_reserve/</url>
    
    <content type="html"><![CDATA[<blockquote><p>来自西安电子科技大学Moectf</p></blockquote><h1 id="逆向工程（re"><a href="#逆向工程（re" class="headerlink" title="逆向工程（re)"></a>逆向工程（re)</h1><blockquote><p>来自维基</p></blockquote><blockquote><p>逆向工程（英语：Reverse Engineering），又称反向工程，是一种技术仿造过程。 即对一项目标产品进行逆向分析及研究，从而演绎并得出该产品的处理流程、组织结构、功能性能规 其主要目的是，在无法轻易获得必要的生产信息下，直接从成品的分析，推导产品的设计原理</p></blockquote><p>那么，我们要做的是对于软件的逆向工程</p><p>一般，CTF中的逆向工程题目形式为：程序接收用户的一个输入，并在程序中进行一系 列校验算法，如通过校验则提示成功，此时的输入即flag。这些校验算法可以是已经成 熟的加解密方案，也可以是作者自创的某种算法。比如，一个小游戏将用户的输入作为 游戏的操作步骤进行判断等。这类题目要求参赛者具备一定的算法能力、思维能力，甚 至联想能力。</p><p>我们知道，我们可以阅读源代码，了解一个程序的功能 但是一个程序不一定需要源代码才能运行。 事实上，我们在运行可执行文件，那么他 们打开来实际上是一些二进制数据。</p><p> 例如下面这一段程序源码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello world&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>我们使用记事本打开就能看到逻辑。但是真正编译出来的，我们用来运行的程序，使用 记事本打开是这样的</p><p><img src="https://z1.ax1x.com/2023/09/13/pPRF6uF.png" srcset="/img/loading.gif" lazyload></p><p>这些二进制数据直接无法识读，但是包含了程序执行所需要的东西，而我们的工作就 是，识读他们，找到flag！</p><h1 id="如何开始逆向呢"><a href="#如何开始逆向呢" class="headerlink" title="如何开始逆向呢"></a>如何开始逆向呢</h1><p>ctf中的逆向（ reverse ）涉及很多编程语言，最常见的是C、C++ 、python、java、C#，或者一 常见的编程语言golang、rust、lisp等等。 除了windows与linux系统下可执行文件的逆向，还经常遇到安卓的（ apk ）逆向、系统驱动、固 件逆向等等。 但是作为一个 beginner ，你不需要在刚入门的时候就去掌握这么多的编程语言 从C语言以及C语言逆向开始，是一个比较好的选择 因为C语言十分接近高级语言，又有充分的系统底层的支持 同时入门的逆向题很多是用C语言写的 并且当你学会了C语言，尽管你无法使用java、python等语言进行编程，但是你会发现，看懂这些高 语言写的代码还是比较容易的。</p><h1 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a>常用工具</h1><blockquote><p>来自含树</p></blockquote><h2 id="常用工具介绍"><a href="#常用工具介绍" class="headerlink" title="常用工具介绍"></a>常用工具介绍</h2><h3 id="1．IDA-Pro"><a href="#1．IDA-Pro" class="headerlink" title="1．IDA Pro"></a>1．IDA Pro</h3><p>IDA（Interactive DisAssembler）Pro（以下简称IDA）是一款强大的可执行文件分析工 具，可以对包括但不限于x86&#x2F;x64、ARM、MIPS等架构，PE、ELF等格式的可执行文件进行静态分析和动态调试。IDA集成了Hex-Rays Decompiler，提供了从汇编语言到C 语言伪代码的反编译功能，可以极大地减少分析程序时的工作量</p><h3 id="2．OllyDbg和x64dbg"><a href="#2．OllyDbg和x64dbg" class="headerlink" title="2．OllyDbg和x64dbg"></a>2．OllyDbg和x64dbg</h3><p>OllyDbg是Windows 32位环境下一款优秀的调试器，最强大的功能是可扩展性，许多开 发者为其开发了具备各种功能的插件，能够绕过许多软件保护措施。但OllyDbg在64位 环境下已经不能使用，许多人因此转而使用了x64dbg。</p><h1 id="这些怎么下载？"><a href="#这些怎么下载？" class="headerlink" title="这些怎么下载？"></a>这些怎么下载？</h1><p><a href="https://down.52pojie.cn/">爱盘 - 最新的在线破解工具包 (52pojie.cn)</a></p><h1 id="下好了怎么用呢"><a href="#下好了怎么用呢" class="headerlink" title="下好了怎么用呢"></a>下好了怎么用呢</h1><p>推荐查阅一些书籍，如 《从0到1：CTFer成长之路》 re篇 </p><p>或者直接b站搜ctf re入门</p><p> 以及第一题的bin在压缩包里，试试ida吧，你会需要它的。</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>CTF入门指北</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>“这些文案像光一样救赎过我”</title>
    <link href="/2023/09/06/good_words/"/>
    <url>/2023/09/06/good_words/</url>
    
    <content type="html"><![CDATA[<hr><p>“即使降临不到我身上，但爱是存在的”</p><hr><p>突然就放下了所有执念，我还有万里路要行</p><hr><p>风是抓不住的，花也会凋谢</p><p>人总是要学会和不属于自己的东西说再见</p><p>当你不再奢望遥不可及，很多美好将触手可得。</p><p>有人理解是我之幸，无人理解我淡定独行</p><hr><p>知世故而不世故，善自嘲而不嘲人</p><hr><p>越是艰难处，越是修心时</p><hr><p>我这一生都是坚定不移的唯物主义者，唯有你我希望有来生。</p><hr><p>第一次吻你 是用我的眼睛</p><hr><p>我曾经七次鄙视自己的灵魂</p><p>第一次，当它本可进取时，却故作谦卑；</p><p>第二次，当它在空虚时，用爱欲来填充；</p><p>第三次，在困难和容易之间，它选择了容易；</p><p>第四次，它犯了错，却借由别人也会犯错来宽慰自己；</p><p>第五次，它自由软弱，却把它认为是生命的坚韧；</p><p>第六次，当它鄙夷一张丑恶的嘴脸时，却不知那正是自己面具中的一副；</p><p>第七次，它侧身于生活的污泥中，虽不甘心，却又畏首畏尾。</p><hr><p>当你以阴谋的眼光看世界，那什么都是阴谋</p><hr><p>我独我， </p><p>世间第一等， </p><p>此间最上乘。</p><hr><p>愿你勇怀善意， </p><p>清澈明朗。</p><hr><p>视他人之疑目如盏盏鬼火，</p><p>大胆地去走你的夜路。</p><hr><p>日落是免费的，</p><p>春夏秋冬也是，</p><p>不要觉得人生那么无望，</p><p>希望你快乐。</p><hr><p>麻木不仁的日子里，</p><p>记录 就是反抗。</p><hr><p>再坚持一下吧 ，</p><p>山那边就是海了。</p><hr><p>他们说答案都在路上。</p>]]></content>
    
    
    <categories>
      
      <category>文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习笔记</tag>
      
      <tag>文案</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>曲阜师范大学选课指北</title>
    <link href="/2023/09/01/QFNU_Course_Selection_Guide_North/"/>
    <url>/2023/09/01/QFNU_Course_Selection_Guide_North/</url>
    
    <content type="html"><![CDATA[<div style="display: flex; justify-content: space-around;">  <a href="https://qm.qq.com/q/9n506oZ8Ri&personal_qrcode_source=4" target="_blank">    <img src="https://img.shields.io/badge/QQ-2769731875-blue" srcset="/img/loading.gif" lazyload alt="QQ Badge">  </a>  <a href="https://qm.qq.com/cgi-bin/qm/qr?k=dYQwQJT2qp-vcE9qVyOM0thZ7kTdCclU&jump_from=webapi&authKey=PNZm7QgI5/6ih6EleAdhjyz01gLqTbr8u86ArFmhQCCTOb1Z+FzzbjoZ7HdaJhDC" target="_blank">    <img src="https://img.shields.io/badge/QQ群-497554955-red" srcset="/img/loading.gif" lazyload alt="QQ Badge">  </a>  <a href="https://t.me/+6WZxzjWFoOczZWE1" target="_blank">    <img src="https://img.shields.io/badge/Telegram-Join-blue" srcset="/img/loading.gif" lazyload alt="Telegram Channel Badge">  </a>  <a href="https://discord.gg/fJKHSkmf5n" target="_blank">    <img src="https://img.shields.io/badge/Discord-Join-blue" srcset="/img/loading.gif" lazyload alt="Discord Server Badge">  </a></div><hr><div style="display: flex; justify-content: space-between; text-align: center;">    <div style="text-align: left;">        PS:        <a href="https://w1ndys.top/2023/08/25/QFNU_Survival_Handbook/">《曲阜师范大学日常问题汇总》</a>        已开始施工    </div>    <div style="text-align: right;">        <a href="#用户协议"> 本页面用户协议 </a>    </div></div><p> 更新通知群： <a href="https://qm.qq.com/cgi-bin/qm/qr?k=dYQwQJT2qp-vcE9qVyOM0thZ7kTdCclU&jump_from=webapi&authKey=PNZm7QgI5/6ih6EleAdhjyz01gLqTbr8u86ArFmhQCCTOb1Z+FzzbjoZ7HdaJhDC"> 点击加群 </a> </p><p><strong>若发现本文有任何与你想法不同的地方，或者有任何排版&#x2F;编辑错误，请私信与我核实并及时修改，避免误导</strong></p><p> 联系我： <a href="https://qm.qq.com/q/9n506oZ8Ri&personal_qrcode_source=4"> 点击联系 QQ </a>(请注明来源) <br> 邮箱：w1ndys@outlook.com 请注明来源 </p><hr><p><font color='3498db'> 本项目数据原则上只客观描述上课风格，对于每一种情况，每一种同学的评价也不相同，数据来自全校同学并追加署名，无法做到完全符合实际情况，请仔细甄别 </font></p><div style="text-align: center;">  <span style="font-size: 1.4em; font-family: serif;">    2023-2024 上半学期已结束，现面向全校收集完善数据↓  </span></div><h1 id="数据收集地址"><a href="#数据收集地址" class="headerlink" title="数据收集地址"></a>数据收集地址</h1><p><span style="color:#00FF00; font-size:1.1em;"> <span style="color:#99FF99;"> 数据收录完善问卷地址→戳 : </span> </span> <a href="https://wj.qq.com/s2/12987247/cca3/">https://wj.qq.com/s2/12987247/cca3/</a></p><p><span style="color:#66FF66; font-size:1.1em;"> 本页面意见建议收集地址：</span> <a href="https://wj.qq.com/s2/13891803/e877/">https://wj.qq.com/s2/13891803/e877/</a></p><h1 id="快捷跳转目录"><a href="#快捷跳转目录" class="headerlink" title="快捷跳转目录"></a>快捷跳转目录</h1><p><span style="background:#FFFFFF; color:#000000;">         施工中………………     </span></p><hr><h1 id="数据正文"><a href="#数据正文" class="headerlink" title="数据正文"></a>数据正文</h1><h2 id="大学语文"><a href="#大学语文" class="headerlink" title="大学语文"></a>大学语文</h2><h3 id="——————曲阜——————"><a href="#——————曲阜——————" class="headerlink" title="——————曲阜——————"></a>——————曲阜——————</h3><h4 id="🎈🎈张建勇"><a href="#🎈🎈张建勇" class="headerlink" title="🎈🎈张建勇"></a>🎈🎈张建勇</h4><p>平时不点名，点名也不记，上课不收手机不强制要求听课。期中考试是写一篇八百字作文。期末要是不考试的话也是写一篇论文。认真完成的话也有 90+</p><blockquote><p> 路人甲</p></blockquote><h4 id="🎈🎈朱献贞"><a href="#🎈🎈朱献贞" class="headerlink" title="🎈🎈朱献贞"></a>🎈🎈朱献贞</h4><p>不考试，也挺好过的，期中期末需要各写 1 篇文学评论，老师不只看最后的作业分，平时里课主动回答问题和提问也加平时分</p><blockquote><p> 路人甲</p></blockquote><h4 id="🎈🎈焦福民"><a href="#🎈🎈焦福民" class="headerlink" title="🎈🎈焦福民"></a>🎈🎈焦福民</h4><p>只要认真完成论文作业，不抄袭就会给优，上课只点最后一次名 其他时间不多事 期中一次 800 左右的对课堂的感悟 期末一篇论文</p><blockquote><p>乌拉拉</p></blockquote><h3 id="——————日照——————"><a href="#——————日照——————" class="headerlink" title="——————日照——————"></a>——————日照——————</h3><h4 id="🎈🎈张福海"><a href="#🎈🎈张福海" class="headerlink" title="🎈🎈张福海"></a>🎈🎈张福海</h4><p>给分特别高，上课不收手机，作业简单，两千字论文或者讲十五分钟课</p><blockquote><p>10086</p></blockquote><h2 id="高等数学-高数"><a href="#高等数学-高数" class="headerlink" title="高等数学&#x2F;高数"></a>高等数学&#x2F;高数</h2><h3 id="——————曲阜——————-1"><a href="#——————曲阜——————-1" class="headerlink" title="——————曲阜——————"></a>——————曲阜——————</h3><h4 id="🎈🎈蒋继强"><a href="#🎈🎈蒋继强" class="headerlink" title="🎈🎈蒋继强"></a>🎈🎈蒋继强</h4><p>上课基本用课件，作业不严，不提问，给分一般，基本靠自学。</p><blockquote><p>Luu_(2023 年)</p></blockquote><h4 id="🎈🎈关永亮"><a href="#🎈🎈关永亮" class="headerlink" title="🎈🎈关永亮"></a>🎈🎈关永亮</h4><p>老师巨无敌好，凡尔赛，听说是宋浩老师同学，管的很水，期末会海底捞，但是浮不上去他就不会捞人了，不点名不收手机</p><blockquote><p>青山可乐</p></blockquote><p>不推荐，疯狂挂人，材化班挂了一多半</p><blockquote><p>flower(2023 年)</p></blockquote><p>关永亮老师他我也不知道怎么回事，往届学生都说捞人，结果到我们这一届直接拿期末成绩按百分百，考不及格就是不及格，没有平时分，我们班有很多挂的</p><blockquote><p>无名氏(2023 年)</p></blockquote><h4 id="🎈🎈王琳"><a href="#🎈🎈王琳" class="headerlink" title="🎈🎈王琳"></a>🎈🎈王琳</h4><p>经济学院的老师，讲课真的很好，说不上来的好，全程板书，基本上课来不及走神全程都认真听下去了；人很亲和，看大家上不进去课的时候会聊八卦，考试会捞！！！</p><blockquote><p>忒忒</p></blockquote><h4 id="🎈🎈张歆秋"><a href="#🎈🎈张歆秋" class="headerlink" title="🎈🎈张歆秋"></a>🎈🎈张歆秋</h4><p>不明确</p><blockquote><p>曦</p></blockquote><p>老师讲课的时候声音比较小，然后在黑板上写的字也比较小，坐在后排的同学基本上是听不到老师说什么的，而且要求很严格，基本不会捞人。</p><blockquote><p>，，（2023年）</p></blockquote><h4 id="🎈🎈孙钦福"><a href="#🎈🎈孙钦福" class="headerlink" title="🎈🎈孙钦福"></a>🎈🎈孙钦福</h4><p>上课交手机，不能睡觉，但是非常能捞，期中考试成绩 100，平常成绩也是 100，除非 2 个都是 100 也捞不起来，才不给你满分，平时教的也很好。</p><blockquote><p>雾眠气泡水</p></blockquote><h3 id="——————日照——————-1"><a href="#——————日照——————-1" class="headerlink" title="——————日照——————"></a>——————日照——————</h3><h4 id="🎈🎈张辉"><a href="#🎈🎈张辉" class="headerlink" title="🎈🎈张辉"></a>🎈🎈张辉</h4><p>上课会听写公式，有时候点名\n 基本上一周一次考试，并且计入平时分\n 期末不清楚</p><blockquote><p>111(2023 年)</p></blockquote><h2 id="线性代数"><a href="#线性代数" class="headerlink" title="线性代数"></a>线性代数</h2><h3 id="——————曲阜——————-2"><a href="#——————曲阜——————-2" class="headerlink" title="——————曲阜——————"></a>——————曲阜——————</h3><h4 id="🎈🎈王龙春"><a href="#🎈🎈王龙春" class="headerlink" title="🎈🎈王龙春"></a>🎈🎈王龙春</h4><p>这个是我的专业课老师，老师很好，上课管的也不严，期中考试很水，就是黑板上写几个题自己做，抄同学的也不怎么管，期末考试考前会把全部题型说出来(解方程类的具体提醒)，</p><blockquote><p>W1ndys</p></blockquote><h2 id="大学英语"><a href="#大学英语" class="headerlink" title="大学英语"></a>大学英语</h2><h3 id="————曲阜————"><a href="#————曲阜————" class="headerlink" title="————曲阜————"></a>————曲阜————</h3><h4 id="🎈🎈王瑾"><a href="#🎈🎈王瑾" class="headerlink" title="🎈🎈王瑾"></a>🎈🎈王瑾</h4><p>老师脾气很好，讲课方式也很干脆简洁，不提问，没有乱七八糟的形式主义，私信回复也很耐心，作业期末前允许补交。</p><blockquote><p>Luu_(2023 年)</p></blockquote><p>上课气氛很好，作业不算多，考试简单</p><blockquote><p>默颜(2023 年)</p></blockquote><h4 id="🎈🎈杨明"><a href="#🎈🎈杨明" class="headerlink" title="🎈🎈杨明"></a>🎈🎈杨明</h4><p>被分到杨明老师班上真是三生有幸！！我快爱死她了～  老师脾气超好很体谅学生，会和学生共情防止我们被无良机构骗钱，每周还会推荐英文电影。而且期末会拿桶捞捞我们！老师上课不会找人回答问题，但每节课都点名所以上老师的课不来一定要请假。老师的课干货很多，想认真学是绝对能提升的，但摸鱼的话到也能摸，总之丰俭由人，不管是想学知识还是想摸鱼都挺可以的</p><blockquote><p>韩小姐(2023 年)</p></blockquote><h4 id="🎈🎈秦泗武"><a href="#🎈🎈秦泗武" class="headerlink" title="🎈🎈秦泗武"></a>🎈🎈秦泗武</h4><p>作业一学期只有一篇作文，没有线上作业，上课不用交手机管的很松(适合摆烂人士选！！！！！), 想认真学的建议选择其他老师，秦老师上课标准山东方言，而且听不清楚，真的适合摆烂人选(他很抢手，不好抢)</p><blockquote><p> W1ndys</p></blockquote><p>作业少，一学期就期末一篇作文</p><blockquote><p>热心市民</p></blockquote><p>【上课情况】上课非常非常水，不提问，没有口语作文等课下作业，期中考试仅为一片 150 单词的作文【老师脾气】脾气有些古怪，会公然说别人坏话(连自己也黑)而且有些男👊🏻色彩介意的避雷，不过完全可以当耳旁风【特殊情况】只进行课间点名，点名不在即旷课，请假为旷课</p><blockquote><p>蔼(2022 年</p></blockquote><h4 id="🎈🎈张媛媛"><a href="#🎈🎈张媛媛" class="headerlink" title="🎈🎈张媛媛"></a>🎈🎈张媛媛</h4><p>媛媛老师人超好，作业不多，发音是一口地道的伦敦腔，只要认真完成作业，最后可以拿 90 多，给分超级好</p><blockquote><p>进击的小王</p></blockquote><p>老师上课非常严谨认真，然后作业给的很少，课堂上的要求也不是特别多，很少有课堂展示这种环节，讲课真的超级好，伦敦腔很好听！！</p><blockquote><p>，，（2023年）</p></blockquote><h4 id="🎈🎈庞峰"><a href="#🎈🎈庞峰" class="headerlink" title="🎈🎈庞峰"></a>🎈🎈庞峰</h4><p>上课很水，基本不会点名，上课睡觉也不会管你，回答不上来问题也没有事情，作业不是很多而且可以延期，总之想要轻松上课的可以选她。</p><blockquote><p>饮月君，你无处可逃</p></blockquote><p>看手机入袋查人 按名单随机点名 一学期每个人至少会被点到两次 上课睡觉会叫你 学期末讲不完让学生讲 每个人必须讲  给分中规中矩</p><blockquote><p>小明</p></blockquote><p>一开始两三节课会收手机，看手机袋空没空查人，然后后面几节课就不怎么管了，不交手机也不管，上课有时候会让人回答问题，回答不上来也没啥事，作业暂时只有课本，作业不做她也不说什么，整体不算很严，但给分中规中矩，后面又开始收手机，第一节课交手机，第二节课可以拿回去</p><blockquote><p>W1ndys(数据源 2023 年)</p></blockquote><h4 id="🎈🎈郑桂玲"><a href="#🎈🎈郑桂玲" class="headerlink" title="🎈🎈郑桂玲"></a>🎈🎈郑桂玲</h4><p>只要认真完成作业，课上主动回答一两次问题就可拿高分。期中考试是自己互换改，85 分以上是按满分换算。老师很温柔，会讲很多她的故事。上课交手机但是不严，交手机壳就可以。</p><blockquote><p>Fafaaaaaaaaaaaaaaaa</p></blockquote><h4 id="🎈🎈吴静"><a href="#🎈🎈吴静" class="headerlink" title="🎈🎈吴静"></a>🎈🎈吴静</h4><p>上课几乎不点名，不提问。可以学到东西。课间会放英语歌和英文电影。作业有规律，两周 u 校园, 一周口语和作文。适合那种想摆又不想摆的同学</p><blockquote><p> NZM</p></blockquote><h4 id="🎈🎈于红"><a href="#🎈🎈于红" class="headerlink" title="🎈🎈于红"></a>🎈🎈于红</h4><p>给分很认真，顶多保证不挂，要求上交手机，有期中考试。但是，于红老师教的很认真，课文都会学而且节奏很舒服，如果想认真上课而且有能力的可以选，想轻松一点上课打咩</p><blockquote><p> 小废物 333</p></blockquote><p>可以跟室友和朋友一起上因为要做一次英语对话(算平时分但不强制)，作业适中，交手机，有期中考试(课后题和翻译)，学完一单元会听写，人挺好的，给分挺高，强烈推荐想好好学的宝子来上</p><blockquote><p>ying</p></blockquote><h4 id="🎈🎈孙海珊"><a href="#🎈🎈孙海珊" class="headerlink" title="🎈🎈孙海珊"></a>🎈🎈孙海珊</h4><p>老师挺好的，给分也高</p><blockquote><p>fabxj</p></blockquote><p>人很温柔，口语好，给分好，讲的也很好</p><blockquote><p>南风知我意</p></blockquote><h4 id="🎈🎈唐秀峰"><a href="#🎈🎈唐秀峰" class="headerlink" title="🎈🎈唐秀峰"></a>🎈🎈唐秀峰</h4><p>老师给分挺高的，人也很友善，非常认真负责，上课不算水，作业和活动量适中但是需要认真做，想学习的同学可以选她</p><blockquote><p> 苏西</p></blockquote><h4 id="🎈🎈梁景会"><a href="#🎈🎈梁景会" class="headerlink" title="🎈🎈梁景会"></a>🎈🎈梁景会</h4><p>老师人好课水，作业有点多但是会给补做的机会。</p><blockquote><p> 温歌</p></blockquote><p>梁老师强推冲就是了，作业甚至可以补做这还不冲？</p><blockquote><p>神之爱</p></blockquote><h4 id="🎈🎈范存英"><a href="#🎈🎈范存英" class="headerlink" title="🎈🎈范存英"></a>🎈🎈范存英</h4><p>布置作业较少 一个学期两篇作文没有阅读 口语 3 次 上课不收手机 偶尔提问  最好是选老师在实验中心的课 这样的话 前面有电脑挡着老师一节课基本不下来溜达 </p><blockquote><p> 求改善校园网</p></blockquote><h4 id="🎈🎈马艳颖"><a href="#🎈🎈马艳颖" class="headerlink" title="🎈🎈马艳颖"></a>🎈🎈马艳颖</h4><p>老师脾气很好，很温柔，上课认真，几乎不提问，给分高，但作业比较多</p><blockquote><p> 。。。</p></blockquote><h4 id="🎈🎈董伟"><a href="#🎈🎈董伟" class="headerlink" title="🎈🎈董伟"></a>🎈🎈董伟</h4><p>老师给分有很严格的标准，老师人很美性格很好，上课没点过名，偶尔交手机，但是上课互动很多，基本上你没来老师一定知道，留的作业也很多。但老师很负责任，如果认真学会有收获(不适合摆烂人士)</p><blockquote><p>稀粥</p></blockquote><h4 id="🎈🎈任丽丽"><a href="#🎈🎈任丽丽" class="headerlink" title="🎈🎈任丽丽"></a>🎈🎈任丽丽</h4><p>老师很温柔。平常布置的作业都是英语组要求的，没有额外作业，检查作业时间会提前说并且时间宽裕，基本上平时分都是满分。课前需要提前预习。总之老师真的很美丽又善解人意！！</p><blockquote><p>拜托小叮</p></blockquote><h4 id="🎈🎈马艳颖-1"><a href="#🎈🎈马艳颖-1" class="headerlink" title="🎈🎈马艳颖"></a>🎈🎈马艳颖</h4><p>给分还好，上课需要交手机，老师非常温柔，讲课非常细致，不会强制回答问题，缺点就是作业挺多，快期末的时候会有口语测试满分 5 分计入期末成绩。</p><blockquote><p>null</p></blockquote><h4 id="🎈🎈张晓宇"><a href="#🎈🎈张晓宇" class="headerlink" title="🎈🎈张晓宇"></a>🎈🎈张晓宇</h4><p>上课讲的很详细；作业做不完可以找机会再补，不会直接扣分；会提问但次数不算多，一般是回答作业答案、翻译句子和上节课讲过的单词句子等。但是作业布置的挺多，上课要交手机</p><blockquote><p>忒忒</p></blockquote><h4 id="🎈🎈仲蕾"><a href="#🎈🎈仲蕾" class="headerlink" title="🎈🎈仲蕾"></a>🎈🎈仲蕾</h4><p>给分看努力情况只要该做的都做了就很高, 上课非常棒知识扩展很多, 老师性格很好挺温柔的也负责</p><blockquote><p>在下熬夜冠军</p></blockquote><h4 id="🎈🎈张燕"><a href="#🎈🎈张燕" class="headerlink" title="🎈🎈张燕"></a>🎈🎈张燕</h4><p>喜欢让人回答问题。作业也不少，welearn，u 校园还有 fif 以及作文都会布置，且 welearn 当时一布置就是一整个单元，上课点名收手机，手机不能响</p><blockquote><p> 青山可乐</p></blockquote><p>上课收手机且会给你编号，点人回答问题时会点手机号，请假会扣平时分且补上的假条算旷课，讲课比较水想好好学的不太建议考虑她，作业量有点子多完不成也会扣平时分，期中考试属于能不考就不考，但期末会捞捞</p><blockquote><p>饮月君，你无处可逃</p></blockquote><p>上课严格，基本上每节课都点名，收手机，作业多</p><blockquote><p>学校选课系统你麻薯了</p></blockquote><p>上课会提问但比较简单，多与上课内容有关，老师脾气其实很好，上课有时会讲故事(很少)，期末试题统一没什么好说的</p><blockquote><p>Delta</p></blockquote><h4 id="🎈🎈万敏"><a href="#🎈🎈万敏" class="headerlink" title="🎈🎈万敏"></a>🎈🎈万敏</h4><p>不适合划水的，上课点名收手机加提问，检查单词背诵，作业很多，尤其是口语作业，读一两个小时。确实能学到点东西，摆烂选手勿选(摆烂手推荐移步至秦泗武老师)</p><blockquote><p>鲨鱼</p></blockquote><p>给分还行，但是极其折磨人。交手机，提问，听力听完就让同学说答案，不解围，有课堂展示，一点也不水。</p><blockquote><p> 幸运的小羊羔</p></blockquote><h4 id="🎈🎈梁莎"><a href="#🎈🎈梁莎" class="headerlink" title="🎈🎈梁莎"></a>🎈🎈梁莎</h4><p>作业多，上课随机点名回答问题，读课文念习题答案。</p><blockquote><p>ergo</p></blockquote><h4 id="🎈🎈姬梦月"><a href="#🎈🎈姬梦月" class="headerlink" title="🎈🎈姬梦月"></a>🎈🎈姬梦月</h4><p>作业多，Fif，大英思博，iwrite 每月更新，从不迟到。写英语周记，一个学期大约七八篇，三百词以上，抄了被发现就悲了。有小组作业 presentation，下课给看电影，上课喜讲峥嵘往事。</p><blockquote><p>ergo</p></blockquote><h4 id="🎈🎈付强"><a href="#🎈🎈付强" class="headerlink" title="🎈🎈付强"></a>🎈🎈付强</h4><p>推荐，刚上了几个周，老师脾气性格都很好，就要求我们会说会读英语，作业的话，只有 fif 口语，不过量不少，有 50 个作业，上课不交手机</p><blockquote><p>十口月(2023</p></blockquote><h3 id="————日照————"><a href="#————日照————" class="headerlink" title="————日照————"></a>————日照————</h3><h4 id="🎈🎈秦兆荣"><a href="#🎈🎈秦兆荣" class="headerlink" title="🎈🎈秦兆荣"></a>🎈🎈秦兆荣</h4><p>秦老师上课比较有趣，她会分享各种信息给你，她的平时分都是有对应的作业，只要你完成平时分就是满的。期末考试会给你划重点，而且老师脾气好，考试会狠狠捞</p><blockquote><p>期末不挂科</p></blockquote><p>秦老师给分比较高，上课幽默，会讲很多有意思的事，老师人很和蔼，但是作业比较多，都是线上作业，做完平时分就是满分。没有期中考试</p><blockquote><p>忙 ten</p></blockquote><h4 id="🎈🎈刘媛"><a href="#🎈🎈刘媛" class="headerlink" title="🎈🎈刘媛"></a>🎈🎈刘媛</h4><p>给分不错，上课讲的知识挺多，课外的知识也有涉及，老师很温柔，作业适中，纯摆烂同学就不推荐选她的课了</p><blockquote><p>豆橛子大王</p></blockquote><h4 id="🎈🎈乔松"><a href="#🎈🎈乔松" class="headerlink" title="🎈🎈乔松"></a>🎈🎈乔松</h4><p>给分高，脾气好，跟着学习的能学到东西，想放松的也很松弛，课前课间有美剧看</p><blockquote><p> juzihaiii</p></blockquote><p>超级好的老师，授课方式特别好，给分还行，正常好老师。</p><blockquote><p>奋斗着</p></blockquote><h4 id="🎈🎈吴涛"><a href="#🎈🎈吴涛" class="headerlink" title="🎈🎈吴涛"></a>🎈🎈吴涛</h4><p>有时候会要求交手机，但是大部分时间她都会忘记。老师脾气好，上课很轻松，几乎不提问，课后作业少。期末考试前会给范围，会捞人。</p><blockquote><p>恦.</p></blockquote><p>老师很温柔上课很轻松 基本不提问不查手机 作业不多 给分中上</p><blockquote><p>无敌暴龙战士(op 版(2022 年)</p></blockquote><h4 id="🎈🎈尹川"><a href="#🎈🎈尹川" class="headerlink" title="🎈🎈尹川"></a>🎈🎈尹川</h4><p>给分可以看自己本事，但是上课真的很水，除了第一节课会稍微认真一些，真心推荐</p><blockquote><p>hhh</p></blockquote><p>平时分给分普遍挺高，大一选课的时候作业有点多，大二下学期就很水了，课上不太管，基本不会提问，老师人很好👍</p><blockquote><p>热心网友(2022)</p></blockquote><h4 id="🎈🎈曹敬美"><a href="#🎈🎈曹敬美" class="headerlink" title="🎈🎈曹敬美"></a>🎈🎈曹敬美</h4><p>作业多，给分一般</p><blockquote><p>脆脆爆米花</p></blockquote><p>作业多，五天假写五个单元练习册；上课速度快，差不多一次课一单元；上课爱贬低学生，锐评，好处是不收手机，给分正常</p><blockquote><p>颜珞</p></blockquote><h4 id="🎈🎈门超元"><a href="#🎈🎈门超元" class="headerlink" title="🎈🎈门超元"></a>🎈🎈门超元</h4><p>老师上课非常轻松幽默且查手机不严 感觉非常有人格魅力 但是课真的不好抢一开教务系统就是秒空(悲)总结是有门选门绝对没错！</p><blockquote><p>无敌暴龙战士(op 版(2022 年)</p></blockquote><h2 id="艺体英语"><a href="#艺体英语" class="headerlink" title="艺体英语"></a>艺体英语</h2><h3 id="————曲阜————-1"><a href="#————曲阜————-1" class="headerlink" title="————曲阜————"></a>————曲阜————</h3><h4 id="🎈🎈陶书贞"><a href="#🎈🎈陶书贞" class="headerlink" title="🎈🎈陶书贞"></a>🎈🎈陶书贞</h4><p>老师很好，给分高</p><blockquote><p>W</p></blockquote><h2 id="戏剧鉴赏"><a href="#戏剧鉴赏" class="headerlink" title="戏剧鉴赏"></a>戏剧鉴赏</h2><h3 id="————曲阜————-2"><a href="#————曲阜————-2" class="headerlink" title="————曲阜————"></a>————曲阜————</h3><h4 id="🎈🎈王婧娴"><a href="#🎈🎈王婧娴" class="headerlink" title="🎈🎈王婧娴"></a>🎈🎈王婧娴</h4><p>给分高，上课一般看戏剧，偶尔点名，上课基本不管但是有点无聊</p><blockquote><p> 。。。</p></blockquote><h4 id="🎈🎈袁梅"><a href="#🎈🎈袁梅" class="headerlink" title="🎈🎈袁梅"></a>🎈🎈袁梅</h4><p>不点名无作业给分高</p><blockquote><p> 鲨鱼</p></blockquote><p>袁梅老师人巨好，基本不点名，平时上课就是看看戏剧，上个学期上她的课一点作业都没写，最后也没写论文，让我们写上名字和最喜欢的戏剧交上，一点作业没有，最后 95 分</p><blockquote><p> 热带雨林</p></blockquote><h2 id="美术鉴赏"><a href="#美术鉴赏" class="headerlink" title="美术鉴赏"></a>美术鉴赏</h2><h3 id="————曲阜————-3"><a href="#————曲阜————-3" class="headerlink" title="————曲阜————"></a>————曲阜————</h3><h4 id="🎈🎈刘育华"><a href="#🎈🎈刘育华" class="headerlink" title="🎈🎈刘育华"></a>🎈🎈刘育华</h4><p>给分一般，没缺勤作业认真做(真的从他 PPT 一点一点找的)，75 中；上课讲的是美术史，一些中外古代绘画啥的</p><blockquote><p> 苏西</p></blockquote><p>给分随机</p><blockquote><p>西城(2023 年)</p></blockquote><h3 id="————日照————-1"><a href="#————日照————-1" class="headerlink" title="————日照————"></a>————日照————</h3><h4 id="🎈🎈陆畅"><a href="#🎈🎈陆畅" class="headerlink" title="🎈🎈陆畅"></a>🎈🎈陆畅</h4><p>给分高，课堂轻松</p><blockquote><p>juzihaiii</p></blockquote><h2 id="书法鉴赏"><a href="#书法鉴赏" class="headerlink" title="书法鉴赏"></a>书法鉴赏</h2><h3 id="————曲阜————-4"><a href="#————曲阜————-4" class="headerlink" title="————曲阜————"></a>————曲阜————</h3><h4 id="🎈🎈陈敏"><a href="#🎈🎈陈敏" class="headerlink" title="🎈🎈陈敏"></a>🎈🎈陈敏</h4><p>很温柔 作业不多 上课可以听音乐 </p><blockquote><p>烦烦帆</p></blockquote><h2 id="音乐鉴赏"><a href="#音乐鉴赏" class="headerlink" title="音乐鉴赏"></a>音乐鉴赏</h2><h3 id="————曲阜————-5"><a href="#————曲阜————-5" class="headerlink" title="————曲阜————"></a>————曲阜————</h3><h4 id="🎈🎈王军"><a href="#🎈🎈王军" class="headerlink" title="🎈🎈王军"></a>🎈🎈王军</h4><p>给分高，学钢琴，期末就是弹两到三首学过的简单曲子，只要弹就 90+，不过基本每天都点名。可选择不弹，点完名就可以走，期末交论文就 OK，不过这样的话分不高</p><blockquote><p>咕咕</p></blockquote><h4 id="🎈🎈王晋"><a href="#🎈🎈王晋" class="headerlink" title="🎈🎈王晋"></a>🎈🎈王晋</h4><p>较上课水，老师温柔，但这些都是甜蜜炮弹！老师给分良比较多！有的宿舍一起选这个课认真完成作业优比较少</p><blockquote><p> 综英去死</p></blockquote><h4 id="🎈🎈张石磊"><a href="#🎈🎈张石磊" class="headerlink" title="🎈🎈张石磊"></a>🎈🎈张石磊</h4><p>名字看起来像是男老师 其实是一个很开朗的女老师 上课不点名不提问, 课程主要讲流行乐 从上世纪的开始 每节课都听很多音乐 没有作业, 结课作业是一篇千字论文和唱一首歌 可以是全民 k 歌 也可以课堂上现场唱</p><blockquote><p>沙拉</p></blockquote><p>给分高，老师好，结课只要 1500 字论文以及用全民 K 歌录一首歌私发给老师，不会强制要求上台唱歌</p><blockquote><p>曦</p></blockquote><h2 id="影视鉴赏"><a href="#影视鉴赏" class="headerlink" title="影视鉴赏"></a>影视鉴赏</h2><h3 id="————曲阜————-6"><a href="#————曲阜————-6" class="headerlink" title="————曲阜————"></a>————曲阜————</h3><h4 id="🎈🎈刘新"><a href="#🎈🎈刘新" class="headerlink" title="🎈🎈刘新"></a>🎈🎈刘新</h4><p>老师超级无敌好，上课讲的很通俗易懂接地气，人也很温柔，很民主开放很好说话，而且，老师给分很高，把论文写的差不多，我当时期末论文都是有借鉴的，最后都 95+，而且老师上课很放松。但是老师选的部分电影比较高深，如果想放松看电影可能有点困难</p><blockquote><p> 神奇的火龙果一枚</p></blockquote><h4 id="🎈🎈孙传波"><a href="#🎈🎈孙传波" class="headerlink" title="🎈🎈孙传波"></a>🎈🎈孙传波</h4><p>只要按时写作业，一定是优(绩点 4.5)，有一次容错机会(不交作业的机会)。老师在课上会讲很多干货，包括电影赏析方面的，比如色彩、环境，以及心理学知识，比如破窗效应，是可以学到很多东西的，而且看电影也会很开心，非常建议喜欢看电影的同学选择。但是作业每次要求至少 1000 字，需要在周日上午 12 点之前提交，如果工作日无法完成，需要占用周末时间。</p><p>作业可以电子版</p><blockquote><p>xm</p><p>W1ndys</p></blockquote><h2 id="书写技能"><a href="#书写技能" class="headerlink" title="书写技能"></a>书写技能</h2><h3 id="————曲阜————-7"><a href="#————曲阜————-7" class="headerlink" title="————曲阜————"></a>————曲阜————</h3><h4 id="🎈🎈张兢兢"><a href="#🎈🎈张兢兢" class="headerlink" title="🎈🎈张兢兢"></a>🎈🎈张兢兢</h4><p>给分高，每节课都在写字，但是只要写的认真，能让老师看出你的态度端正，分就很高，不收手机可以偷偷带一只耳机听歌，一只耳朵听课，感觉也挺轻松的；期末就是两幅硬笔作品，需要自备作品纸(建议跟同学拼团买)</p><blockquote><p>苏西</p></blockquote><h2 id="影视艺术鉴赏"><a href="#影视艺术鉴赏" class="headerlink" title="影视艺术鉴赏"></a>影视艺术鉴赏</h2><h3 id="————日照————-2"><a href="#————日照————-2" class="headerlink" title="————日照————"></a>————日照————</h3><p>只要在这门课教学周内正常完成 1500 字论文&#x2F;PPT 讲课得分绝对不会低于 95 分 不查手机不查考勤没有考试 我愿称为救苦救厄学分之神</p><blockquote><p>无敌暴龙战士(op 版(2022 年)</p></blockquote><h2 id="心理学经典电影赏析"><a href="#心理学经典电影赏析" class="headerlink" title="心理学经典电影赏析"></a>心理学经典电影赏析</h2><h3 id="————曲阜————-8"><a href="#————曲阜————-8" class="headerlink" title="————曲阜————"></a>————曲阜————</h3><h4 id="🎈🎈孙传波-1"><a href="#🎈🎈孙传波-1" class="headerlink" title="🎈🎈孙传波"></a>🎈🎈孙传波</h4><p>只要按时写作业，一定是优(绩点 4.5)，有一次容错机会(不交作业的机会)。老师在课上会讲很多干货，包括电影赏析方面的，比如色彩、环境，以及心理学知识，比如破窗效应，是可以学到很多东西的，而且看电影也会很开心，非常建议喜欢看电影的同学选择。但是作业每次要求至少 1000 字，需要在周日上午 12 点之前提交，如果工作日无法完成，需要占用周末时间。</p><p>作业可以电子版</p><blockquote><p>xm</p><p>W1ndys</p></blockquote><h2 id="经济数学应用专题"><a href="#经济数学应用专题" class="headerlink" title="经济数学应用专题"></a>经济数学应用专题</h2><h3 id="————日照————-3"><a href="#————日照————-3" class="headerlink" title="————日照————"></a>————日照————</h3><h4 id="🎈🎈李翠玲"><a href="#🎈🎈李翠玲" class="headerlink" title="🎈🎈李翠玲"></a>🎈🎈李翠玲</h4><p>经济学院的选修课程，可以选，凑学分外加补高数，李老师教 1.2 的高数。讲的挺好的，很清晰，会给补充考研题和结论什么的。很亲和，上课有时候会聊聊天。平时没作业，会要求交手机，不提问。期末是在手机上做题，全是选择，分数的话看自己啦，会看情况捞(根据大多数同学的表现)</p><blockquote><p>忒忒</p></blockquote><h2 id="古典爱情诗词鉴赏"><a href="#古典爱情诗词鉴赏" class="headerlink" title="古典爱情诗词鉴赏"></a>古典爱情诗词鉴赏</h2><h3 id="————曲阜————-9"><a href="#————曲阜————-9" class="headerlink" title="————曲阜————"></a>————曲阜————</h3><h4 id="🎈🎈孙刚"><a href="#🎈🎈孙刚" class="headerlink" title="🎈🎈孙刚"></a>🎈🎈孙刚</h4><p>非常温柔，如果想确实学一点东西的话可以选择，他上课会提问，作业是抄写自己喜欢的爱情诗词和写自己对爱情的见解(可以写小说)仅限于推荐有学习需求的宝</p><blockquote><p>楠方</p></blockquote><h2 id="孔子与论语-孔子与《论语》-孔论"><a href="#孔子与论语-孔子与《论语》-孔论" class="headerlink" title="孔子与论语, 孔子与《论语》&#x2F;孔论"></a>孔子与论语, 孔子与《论语》&#x2F;孔论</h2><h3 id="————曲阜————-10"><a href="#————曲阜————-10" class="headerlink" title="————曲阜————"></a>————曲阜————</h3><h4 id="🎈🎈周海生"><a href="#🎈🎈周海生" class="headerlink" title="🎈🎈周海生"></a>🎈🎈周海生</h4><p>老师人很好！因为孔论是常驻水课嘛所以挺多同学听讲会没那么认真，但老师依旧认真负责地对待课堂，不过也不会狠抓狠罚摸鱼同学。而且老师讲课挺有意思的，偶尔一两次我真听进去时还确实感觉学到了东西。不常点名、不强制收手机、不布置很难完成的作业，最后一节课要认真听，这节课讲的和考的有重叠。目前没出分，但老师真的不是个会为难学生的人。</p><blockquote><p>韩小姐(2023 年)</p></blockquote><p>虽然课程很无聊，也几乎没人听，但老师挺敬业的，讲课很认真，也会提前下课，期末大体说了一下重点。</p><blockquote><p>Luu_(2023 年)</p></blockquote><h4 id="🎈🎈林桂臻"><a href="#🎈🎈林桂臻" class="headerlink" title="🎈🎈林桂臻"></a>🎈🎈林桂臻</h4><p>给分高，但是得看运气，林老师给分两个极端，要么很高，要么很低，但是给我的分可以，九十多，而且上课不提问，没有作业，但是听说第二学期他变了。</p><blockquote><p>奋斗着</p></blockquote><h4 id="🎈🎈罗志国"><a href="#🎈🎈罗志国" class="headerlink" title="🎈🎈罗志国"></a>🎈🎈罗志国</h4><p>给分还可以 90 左右；上课很水，不管手机，不管说话睡觉，不点名，也不怎么提问(印象里一两次)，基本是各干各的；平时没有作业；另外他跟大家分享书，说找他探讨的可以加分(不知道加没加)。不过听说上儒学的时候他变了，好像会提问。</p><blockquote><p>忒忒</p></blockquote><h4 id="🎈🎈盛夏"><a href="#🎈🎈盛夏" class="headerlink" title="🎈🎈盛夏"></a>🎈🎈盛夏</h4><p>这个老师真的超级超级好，就是上课不会收手机，然后也不会很管课堂纪律，他就是自己讲自己的。而且他讲课的内容也很有深度，讲的很好，最后考试的时候也会捞人，基本都是90以上。</p><blockquote><p>。（2023年）</p></blockquote><h2 id="思想道德与法治"><a href="#思想道德与法治" class="headerlink" title="思想道德与法治"></a>思想道德与法治</h2><h3 id="————曲阜————-11"><a href="#————曲阜————-11" class="headerlink" title="————曲阜————"></a>————曲阜————</h3><h4 id="🎈🎈张敏"><a href="#🎈🎈张敏" class="headerlink" title="🎈🎈张敏"></a>🎈🎈张敏</h4><p>收手机，念课件，偶尔提问，回答问题和平时分挂钩。</p><blockquote><p>Luu_(2023 年)</p></blockquote><h4 id="🎈🎈宗超"><a href="#🎈🎈宗超" class="headerlink" title="🎈🎈宗超"></a>🎈🎈宗超</h4><p>老师长得很漂亮。但是！！！上课频繁管纪律，下来转，不水；每节课提问(念句子或回答课后题答案)，每节课要求班长点名、交手机；布置小组作业，让挨个上来讲；最后给分不明确，慎重选择</p><blockquote><p>忒忒</p></blockquote><h2 id="儒学与中华文化"><a href="#儒学与中华文化" class="headerlink" title="儒学与中华文化"></a>儒学与中华文化</h2><h3 id="————曲阜————-12"><a href="#————曲阜————-12" class="headerlink" title="————曲阜————"></a>————曲阜————</h3><h4 id="🎈🎈闫现霞"><a href="#🎈🎈闫现霞" class="headerlink" title="🎈🎈闫现霞"></a>🎈🎈闫现霞</h4><p>老师人很温柔，不收手机，偶尔会点名但查得不严，知识渊博，很负责任，但是上课时声音比较小(想好好学的建议占前排的位子)，会点人起来读 ppt，但是说不上来她讲到哪里也不会生气，给分很高，基本上都是 90+</p><blockquote><p>饮月君，你无处可逃</p></blockquote><h4 id="🎈🎈任子田"><a href="#🎈🎈任子田" class="headerlink" title="🎈🎈任子田"></a>🎈🎈任子田</h4><p>老师上课不严，基本不会点名，有时候会点一两次，用加好友或者发邮件等方法，上课也不管，自己讲自己的，给分也不低</p><blockquote><p>W1ndys</p></blockquote><p>任子田老师给分高，脾气好，上课摆，能解决你所有的儒学焦虑</p><blockquote><p>little monkey</p></blockquote><h4 id="🎈🎈张韶宇"><a href="#🎈🎈张韶宇" class="headerlink" title="🎈🎈张韶宇"></a>🎈🎈张韶宇</h4><p>不怎么点名，给分一般</p><blockquote><p> 雷锋</p></blockquote><p>给分一般，考试要求比较多，上课不交手机但会不定时通过出题答题方式查考勤，会提前把试题发在群里但你不要提前写，因为到考试时他会更改题目顺序，然后他给的答案也不行，比如让你列举人名他会要求你简单介绍一下这几个人(包括时代著作很多东西)，但他是等你快答完了才提出这个要求，而且考试时他一直说一直说，默写题自己打分，如果是满分就需要抽查背诵</p><blockquote><p>苏西</p></blockquote><p>考试临时改题序号，写了三四页给打六七十。</p><blockquote><p>抵制坏蛋</p></blockquote><p>写了 11 页，给分 85 ，我哭死</p><blockquote><p>阿米娜</p></blockquote><h4 id="🎈🎈林桂臻-1"><a href="#🎈🎈林桂臻-1" class="headerlink" title="🎈🎈林桂臻"></a>🎈🎈林桂臻</h4><p>经常会点名，最后几周经常抄几千字。</p><blockquote><p>稀粥</p></blockquote><h4 id="🎈🎈杨秀娟"><a href="#🎈🎈杨秀娟" class="headerlink" title="🎈🎈杨秀娟"></a>🎈🎈杨秀娟</h4><p>上课不点名字，但是会挑人回答问题(一般只会提问 4 个人左右，一学期大约提问 3 次)，作业有点多 但是只要认真写分数也是挺高的，上课可以玩手机但是一直玩让老师看到会不开心(没有什么惩罚也不会扣分)。</p><blockquote><p>null</p></blockquote><h2 id="形势与政策-形策"><a href="#形势与政策-形策" class="headerlink" title="形势与政策&#x2F;形策"></a>形势与政策&#x2F;形策</h2><h3 id="————曲阜————-13"><a href="#————曲阜————-13" class="headerlink" title="————曲阜————"></a>————曲阜————</h3><h4 id="🎈🎈刘润欣"><a href="#🎈🎈刘润欣" class="headerlink" title="🎈🎈刘润欣"></a>🎈🎈刘润欣</h4><p>老师人美心善，给分最低 90，上课回答问题四次就给满分，不够四次也会有相应的加分，而且老师人长得非常漂亮，上课不交手机，期末作业就写一篇论文，八百字就够，可以手写可以打印。</p><blockquote><p>W1ndys</p></blockquote><p>人美心善</p><blockquote><p>孤独的🐺(2023 年)</p></blockquote><h4 id="🎈🎈刘怀峰"><a href="#🎈🎈刘怀峰" class="headerlink" title="🎈🎈刘怀峰"></a>🎈🎈刘怀峰</h4><p>上课时老师讲课方式比较幽默，可以学到东西，不会收手机，偶尔点名，迟到十分钟以内不会有事情，平时没有作业，期末交一篇论文即可(他基本不看内容，只要不是太离谱都行)，给分很高，基本都是 90+，最后论文可以延期补交，但会影响分数</p><blockquote><p>饮月君，你无处可逃</p></blockquote><h4 id="🎈🎈孙金玲"><a href="#🎈🎈孙金玲" class="headerlink" title="🎈🎈孙金玲"></a>🎈🎈孙金玲</h4><p>老师比较佛系 上课偶尔点名 不太管 期末论文给分高 </p><blockquote><p> 多喝水</p></blockquote><p>温柔人美心善，老师身体不太好。给分高，不点名。只要交上作业就 90+</p><blockquote><p>路人甲</p></blockquote><h4 id="🎈🎈刘贤贤"><a href="#🎈🎈刘贤贤" class="headerlink" title="🎈🎈刘贤贤"></a>🎈🎈刘贤贤</h4><p>期末一般都是 90f 往上，老师脾气很好，但是会点名会收手机。</p><blockquote><p> ➕呗</p></blockquote><h4 id="🎈🎈张乾坤"><a href="#🎈🎈张乾坤" class="headerlink" title="🎈🎈张乾坤"></a>🎈🎈张乾坤</h4><p>上课特别有意思 让人主动放下手机听课 不交手机 回答一次问题(不管对错只要屁股离开椅子)期末就给满分 而且期末作业交电子稿就行 他说有需要他会帮忙打印</p><blockquote><p>小菠</p></blockquote><p>不交手机不查旷课，回答一次问题就给满分，风趣幽默亲民，我愿称之为曲阜在逃张雪峰</p><blockquote><p>苏西</p></blockquote><p>老师超级好，上课好玩，给分高等等  反正巨好</p><blockquote><p>Luu_(2023 年)</p></blockquote><h4 id="🎈🎈赵开开"><a href="#🎈🎈赵开开" class="headerlink" title="🎈🎈赵开开"></a>🎈🎈赵开开</h4><p>上课比较水，很温柔的男老师，不提问，也不怎么管玩手机睡觉(只说让交但是不交也不管)，偶尔点个名下来看一圈。给分很高，上了两次都是 90。多。旷课会扣平时分。</p><blockquote><p>忒忒</p></blockquote><h4 id="🎈🎈孙宁"><a href="#🎈🎈孙宁" class="headerlink" title="🎈🎈孙宁"></a>🎈🎈孙宁</h4><p>孙宁老师超级无敌好！不交手机，很少点名，给分很高！</p><blockquote><p>33</p></blockquote><h4 id="🎈🎈石倩"><a href="#🎈🎈石倩" class="headerlink" title="🎈🎈石倩"></a>🎈🎈石倩</h4><p>疫情期间线下课少，为数不多的几次上课很水，不要求交手机，期末雨课堂给 PPT，最后照着写论文就行，给分高，90+</p><blockquote><p>栗子(2022 年)</p></blockquote><h4 id="🎈🎈冯德浩"><a href="#🎈🎈冯德浩" class="headerlink" title="🎈🎈冯德浩"></a>🎈🎈冯德浩</h4><p>冯德浩是我辅导员，人很好特别好，讲话很幽默，但是我没上过他的课不知道他点不点名</p><blockquote><p>夜雨听风(2023</p></blockquote><h3 id="————日照————-4"><a href="#————日照————-4" class="headerlink" title="————日照————"></a>————日照————</h3><h4 id="🎈🎈张林"><a href="#🎈🎈张林" class="headerlink" title="🎈🎈张林"></a>🎈🎈张林</h4><p>考勤严，课堂轻松，给分高</p><blockquote><p>juzihaiii(2023 年</p></blockquote><h2 id="大学-IT"><a href="#大学-IT" class="headerlink" title="大学 IT"></a>大学 IT</h2><h3 id="————曲阜————-14"><a href="#————曲阜————-14" class="headerlink" title="————曲阜————"></a>————曲阜————</h3><h4 id="🎈🎈袁莎莎"><a href="#🎈🎈袁莎莎" class="headerlink" title="🎈🎈袁莎莎"></a>🎈🎈袁莎莎</h4><p>给分应该就是实事求是，看自己水平了(其实个人感觉题不难，而且有题库，平时每周就能练完)；上课很水，不管说话睡觉，不收手机，不点名，说实话老师声音很小坐后面也听不太轻；没有作业</p><blockquote><p>忒忒</p></blockquote><h4 id="🎈🎈王宇"><a href="#🎈🎈王宇" class="headerlink" title="🎈🎈王宇"></a>🎈🎈王宇</h4><p>平均分 80 左右。</p><blockquote><p>大爱无疆</p></blockquote><h4 id="🎈🎈齐苏敏"><a href="#🎈🎈齐苏敏" class="headerlink" title="🎈🎈齐苏敏"></a>🎈🎈齐苏敏</h4><p>人很好会手把手教你，有问题也可以 QQ 问他，非常耐心，有问必答，给分比较高</p><blockquote><p>糖浆 SoarFay</p></blockquote><h2 id="网络空间安全导论"><a href="#网络空间安全导论" class="headerlink" title="网络空间安全导论"></a>网络空间安全导论</h2><h3 id="————曲阜————-15"><a href="#————曲阜————-15" class="headerlink" title="————曲阜————"></a>————曲阜————</h3><h4 id="🎈🎈胡晓依"><a href="#🎈🎈胡晓依" class="headerlink" title="🎈🎈胡晓依"></a>🎈🎈胡晓依</h4><p>老师很友好，基本都是提前下课，不耗时间，不收手机，期中考试也很水, 比较推荐。</p><blockquote><p>Luu_(2023 年)</p></blockquote><h2 id="C-语言程序设计"><a href="#C-语言程序设计" class="headerlink" title="C 语言程序设计"></a>C 语言程序设计</h2><h3 id="————曲阜————-16"><a href="#————曲阜————-16" class="headerlink" title="————曲阜————"></a>————曲阜————</h3><h4 id="🎈🎈张景虎"><a href="#🎈🎈张景虎" class="headerlink" title="🎈🎈张景虎"></a>🎈🎈张景虎</h4><p>上课很水，不收手机，基本靠念课件。</p><blockquote><p>Luu_(2023 年)</p></blockquote><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="————曲阜————-17"><a href="#————曲阜————-17" class="headerlink" title="————曲阜————"></a>————曲阜————</h3><h4 id="🎈🎈齐苏敏-1"><a href="#🎈🎈齐苏敏-1" class="headerlink" title="🎈🎈齐苏敏"></a>🎈🎈齐苏敏</h4><p>要求比较严，每节课都要做题，给分比较高</p><blockquote><p>steven(2022 年)</p></blockquote><h2 id="健身休闲养生"><a href="#健身休闲养生" class="headerlink" title="健身休闲养生"></a>健身休闲养生</h2><h3 id="————曲阜————-18"><a href="#————曲阜————-18" class="headerlink" title="————曲阜————"></a>————曲阜————</h3><h4 id="🎈🎈谢逸飞"><a href="#🎈🎈谢逸飞" class="headerlink" title="🎈🎈谢逸飞"></a>🎈🎈谢逸飞</h4><p>很有趣，给分也挺高</p><blockquote><p>幸运的小羊羔</p></blockquote><h2 id="中国体育故事"><a href="#中国体育故事" class="headerlink" title="中国体育故事"></a>中国体育故事</h2><h3 id="————曲阜————-19"><a href="#————曲阜————-19" class="headerlink" title="————曲阜————"></a>————曲阜————</h3><h4 id="🎈🎈周芳"><a href="#🎈🎈周芳" class="headerlink" title="🎈🎈周芳"></a>🎈🎈周芳</h4><p>社恐不推荐，但是很水，随便玩手机，所有同学都需要轮流上台讲自制 ppt</p><blockquote><p> 半岛饭盒</p></blockquote><h2 id="大学生心理健康教育-大心健"><a href="#大学生心理健康教育-大心健" class="headerlink" title="大学生心理健康教育, 大心健"></a>大学生心理健康教育, 大心健</h2><h3 id="————曲阜————-20"><a href="#————曲阜————-20" class="headerlink" title="————曲阜————"></a>————曲阜————</h3><h4 id="🎈🎈丹拥军"><a href="#🎈🎈丹拥军" class="headerlink" title="🎈🎈丹拥军"></a>🎈🎈丹拥军</h4><p>老师上课会谈论一些与课堂无关的观点，有时会与意见相左的同学开展辨论，建议闭麦，去辩论要慎重，啥也别说啥也别问，一些观点当没听见就行，你说了也改变不了什么。上课玩手机被抓后果严重！！不要与老师发生冲突。除了这些都还行，有时上课会突然发布作业要求下课提交，过时不候除非有假条。所以尽量别逃。正常上课给分很高。</p><blockquote><p>韩小姐(2023 年)</p></blockquote><h4 id="🎈🎈王涛"><a href="#🎈🎈王涛" class="headerlink" title="🎈🎈王涛"></a>🎈🎈王涛</h4><p>老师上课经常讲自己故事哈哈，给予人生建议，氛围比较轻松，没有心理剧等形式主义，比较推荐。</p><blockquote><p>Luu_(2023 年)</p></blockquote><h3 id="————日照————-5"><a href="#————日照————-5" class="headerlink" title="————日照————"></a>————日照————</h3><h4 id="🎈🎈宋其安"><a href="#🎈🎈宋其安" class="headerlink" title="🎈🎈宋其安"></a>🎈🎈宋其安</h4><p>老师很有个性，中间会让交论文，上课交手机会查谁没交，但是期末给分真的超高。</p><blockquote><p>奋斗着</p></blockquote><p>其实这个课有的学院是植入的，但是还是想说下。上课会点名，频率挺高，查手机袋，写小纸条他挨个收或者直接对着名册抽点；查手机，设了每个人的手机袋序号。上课会提问，特别是旷过课的概率高，基本是需要随机发挥的，一般是分享自己的理解或经历(好像是这样?)，不允许做别科作业，但是不管睡觉。请假需要有假条什么。不怎么需要课本。说实话老师脾气有点古怪(还没上课就听说需要避雷)。作业的话有两三份好像，一个是在课上写的写完收，中间是一个论文，期末是课上写论文(给未来的自己好像，最好穿插讲过的知识点)。但是最后给分意外的还挺高，90+(仅代表我们宿舍)</p><blockquote><p>忒忒</p></blockquote><p>老师上课不定时点名查考勤 提问一般会重点挑旷过课的 所以建议是不要旷课 但是上课氛围蛮好考试给分也高 (注: 部分学院这门课应该是强制植入的 所以记住不要旷课就行)</p><blockquote><p>无敌暴龙战士(op 版(2022 年)</p></blockquote><h4 id="🎈🎈柳加仁"><a href="#🎈🎈柳加仁" class="headerlink" title="🎈🎈柳加仁"></a>🎈🎈柳加仁</h4><p>省流：上课比较难受，分挺好</p><p>他的课如果认真听，会越听越生气，当你抱着听笑话的心态去，勉强能上下去，当我大二还忍辱负重选他的课的原因只是给分比较高，用分数弥补我受了一学期摧残的心灵。</p><blockquote><p>Rita</p></blockquote><h2 id="四史教育"><a href="#四史教育" class="headerlink" title="四史教育"></a>四史教育</h2><h3 id="————曲阜————-21"><a href="#————曲阜————-21" class="headerlink" title="————曲阜————"></a>————曲阜————</h3><h4 id="🎈🎈李壮"><a href="#🎈🎈李壮" class="headerlink" title="🎈🎈李壮"></a>🎈🎈李壮</h4><p>老师上课不点名也不收手机，知识渊博，讲话很幽默，跟着老师能学到很多东西，上课会随机点前排同学回答问题，回答不上来也没有问题，想好好学的和想水课的都可以选他</p><blockquote><p>饮月君，你无处可逃</p></blockquote><h2 id="应用语言学概论"><a href="#应用语言学概论" class="headerlink" title="应用语言学概论"></a>应用语言学概论</h2><h3 id="————曲阜————-22"><a href="#————曲阜————-22" class="headerlink" title="————曲阜————"></a>————曲阜————</h3><h4 id="🎈🎈桑哲"><a href="#🎈🎈桑哲" class="headerlink" title="🎈🎈桑哲"></a>🎈🎈桑哲</h4><p>上课比较严格，作业多手写</p><blockquote><p>真的背不动了</p></blockquote><h2 id="儒家元典与人生智慧"><a href="#儒家元典与人生智慧" class="headerlink" title="儒家元典与人生智慧"></a>儒家元典与人生智慧</h2><h3 id="————曲阜————-23"><a href="#————曲阜————-23" class="headerlink" title="————曲阜————"></a>————曲阜————</h3><h4 id="🎈🎈巩宝平"><a href="#🎈🎈巩宝平" class="headerlink" title="🎈🎈巩宝平"></a>🎈🎈巩宝平</h4><p>按等级给分优良及格，大部分是良 85 分这样。(对我来说有点拖绩点所以不推荐)但是上课不收手机，点名但好像也没什么影响。老师脾气挺好的，在他眼皮子底下玩最多只是凑过来说两句(不痛不痒)。没啥人听他的课，是个有点可怜的小老头🤔</p><blockquote><p>鱼籽       </p></blockquote><h2 id="简明教育史"><a href="#简明教育史" class="headerlink" title="简明教育史"></a>简明教育史</h2><h3 id="————曲阜————-24"><a href="#————曲阜————-24" class="headerlink" title="————曲阜————"></a>————曲阜————</h3><h4 id="🎈🎈秦发盈"><a href="#🎈🎈秦发盈" class="headerlink" title="🎈🎈秦发盈"></a>🎈🎈秦发盈</h4><p>完全不提问，上课也是发散性思考，想听的会启迪你，不想听玩手机干啥都行，会咨询学生意见，亲民和善</p><blockquote><p>会飞的大野驴</p></blockquote><h2 id="植物与生活"><a href="#植物与生活" class="headerlink" title="植物与生活"></a>植物与生活</h2><h3 id="————曲阜————-25"><a href="#————曲阜————-25" class="headerlink" title="————曲阜————"></a>————曲阜————</h3><h4 id="🎈🎈彭向永"><a href="#🎈🎈彭向永" class="headerlink" title="🎈🎈彭向永"></a>🎈🎈彭向永</h4><p>五千字论文，会让人讲 ppt</p><blockquote><p>小熊威宁</p></blockquote><h2 id="无处不在的地理魅力"><a href="#无处不在的地理魅力" class="headerlink" title="无处不在的地理魅力"></a>无处不在的地理魅力</h2><h3 id="————曲阜————-26"><a href="#————曲阜————-26" class="headerlink" title="————曲阜————"></a>————曲阜————</h3><h4 id="🎈🎈苏庆华"><a href="#🎈🎈苏庆华" class="headerlink" title="🎈🎈苏庆华"></a>🎈🎈苏庆华</h4><p>不建议</p><h2 id="中国文学传统"><a href="#中国文学传统" class="headerlink" title="中国文学传统"></a>中国文学传统</h2><h3 id="————曲阜————-27"><a href="#————曲阜————-27" class="headerlink" title="————曲阜————"></a>————曲阜————</h3><h4 id="🎈🎈王汝虎"><a href="#🎈🎈王汝虎" class="headerlink" title="🎈🎈王汝虎"></a>🎈🎈王汝虎</h4><p>老师和善，讲课内容通俗易懂，期末考试回答问题简单，不点名不收手机等设备</p><blockquote><p>堇安</p></blockquote><h2 id="政治经济学-经济学院"><a href="#政治经济学-经济学院" class="headerlink" title="政治经济学(经济学院)"></a>政治经济学(经济学院)</h2><h4 id="🎈🎈李亚男"><a href="#🎈🎈李亚男" class="headerlink" title="🎈🎈李亚男"></a>🎈🎈李亚男</h4><p>给分高，会捞；讲课超级好，很温柔，一般不怎么提问；一般会布置思考题课下做，但是也不会检查提问什么</p><blockquote><p>忒忒</p></blockquote><h2 id="计算机那些事儿-在线课"><a href="#计算机那些事儿-在线课" class="headerlink" title="计算机那些事儿(在线课)"></a>计算机那些事儿(在线课)</h2><h4 id="🎈🎈刘文娟"><a href="#🎈🎈刘文娟" class="headerlink" title="🎈🎈刘文娟"></a>🎈🎈刘文娟</h4><p>网课，只要刷视频答题就行，晚上有答案。考试线上考，直接搜题。拿满分特别轻松</p><blockquote><p>鲨鱼</p></blockquote><h2 id="教育学基础"><a href="#教育学基础" class="headerlink" title="教育学基础"></a>教育学基础</h2><h3 id="————曲阜————-28"><a href="#————曲阜————-28" class="headerlink" title="————曲阜————"></a>————曲阜————</h3><h4 id="🎈🎈窦春玲"><a href="#🎈🎈窦春玲" class="headerlink" title="🎈🎈窦春玲"></a>🎈🎈窦春玲</h4><p>给分一般！上课不管人，但是会突击布置作业当场交，当场没交就有大概率挂</p><blockquote><p>啥也不是</p></blockquote><h2 id="世界通史讲座"><a href="#世界通史讲座" class="headerlink" title="世界通史讲座"></a>世界通史讲座</h2><h3 id="————曲阜————-29"><a href="#————曲阜————-29" class="headerlink" title="————曲阜————"></a>————曲阜————</h3><h4 id="🎈🎈丹拥军-1"><a href="#🎈🎈丹拥军-1" class="headerlink" title="🎈🎈丹拥军"></a>🎈🎈丹拥军</h4><p>给分正常，上课不让玩手机不让学别的，看见你学别的就把书从楼上扔下去(上学期亲眼所见)，在美国读博，上课讲的东西有点亲美</p><blockquote><p> 半岛饭盒</p></blockquote><h2 id="——————体育——————"><a href="#——————体育——————" class="headerlink" title="——————体育——————"></a>——————体育——————</h2><h2 id="体育-体适能"><a href="#体育-体适能" class="headerlink" title="体育-体适能"></a>体育-体适能</h2><h3 id="————曲阜————-30"><a href="#————曲阜————-30" class="headerlink" title="————曲阜————"></a>————曲阜————</h3><h4 id="🎈🎈经纶"><a href="#🎈🎈经纶" class="headerlink" title="🎈🎈经纶"></a>🎈🎈经纶</h4><p>看个人，体适能这个课平时比较累，但是期末考试简单，只考 50 米，100 米，和扔球(忘记叫啥球了)，经纶经常出差，平时上课经常让师哥师姐带，体测不好糊弄，想轻轻松松上体育课的不推荐，而且经纶老师平时不回 QQ，根本联系不上，以后选了他，建议去新生群问他的电话号码</p><blockquote><p>热带雨林</p></blockquote><h4 id="🎈🎈郭新宇"><a href="#🎈🎈郭新宇" class="headerlink" title="🎈🎈郭新宇"></a>🎈🎈郭新宇</h4><p>老师挺好的，上课轻松，适合表现积极的同学选，重视给分情况的同学谨慎选择</p><blockquote><p>fabxj</p></blockquote><h2 id="体育-街舞"><a href="#体育-街舞" class="headerlink" title="体育-街舞"></a>体育-街舞</h2><h3 id="————曲阜————-31"><a href="#————曲阜————-31" class="headerlink" title="————曲阜————"></a>————曲阜————</h3><h4 id="🎈🎈葛瑞春"><a href="#🎈🎈葛瑞春" class="headerlink" title="🎈🎈葛瑞春"></a>🎈🎈葛瑞春</h4><p>人很好很公正的一个老师，上课要穿运动服。节奏感可以，动作能记住得分就都在五星以上(六星满分)。喜欢街舞的他也会支持你自己编舞然后高分。总之看自己情况。</p><blockquote><p>翎信音(2023 年)</p></blockquote><h2 id="体育-健美操"><a href="#体育-健美操" class="headerlink" title="体育-健美操"></a>体育-健美操</h2><h3 id="————曲阜————-32"><a href="#————曲阜————-32" class="headerlink" title="————曲阜————"></a>————曲阜————</h3><h4 id="🎈🎈李思民"><a href="#🎈🎈李思民" class="headerlink" title="🎈🎈李思民"></a>🎈🎈李思民</h4><p>老师人非常好，是个很随和的小老头，体测也比较水，除了 800 其他都可以水一水，但是健美操比较难，如果想选健美操的话，推荐去 B 站先搜一下大众一级二级健美操。认真跳的话总会学会的，感觉老师给分不错，至少我两次都是 90+</p><blockquote><p>｡◕‿◕｡</p></blockquote><p>老师平易近人，笑眯眯的样子，脾气极好，对于请假或健习方面放的很宽，给分也蛮可以。真的很好很好！</p><blockquote><p>DAWN</p></blockquote><h4 id="🎈🎈许红霞"><a href="#🎈🎈许红霞" class="headerlink" title="🎈🎈许红霞"></a>🎈🎈许红霞</h4><p>感觉她跳舞很好看，上课一般是跑步(速度很慢相当于走，老师也不会亲自看着)、拉伸、跳舞，老师带着过完后一般就是大家自己跟着音乐练习了，偶尔会指导。感觉体测会捞(可能是错觉？别人都没有感觉到但是我的八百米确实感觉被捞上去的)，给分应该不低(大家都这样说，但是我体测太垃被拉分了)。还有就是请假或旷课都会扣平时分，20 分的平时分旷课一次扣 5 分，请假也会扣，大家慎重！！！</p><blockquote><p>忒忒</p></blockquote><h4 id="🎈🎈葛瑞春-1"><a href="#🎈🎈葛瑞春-1" class="headerlink" title="🎈🎈葛瑞春"></a>🎈🎈葛瑞春</h4><p>给分基本在 85+，上课认真负责，会点名，体测很严格，仰卧起坐如果虚报被他听到会全体重做。教得很好，健美操也很简单。上课要穿运动服。</p><blockquote><p>鱼籽</p></blockquote><h2 id="体育-武术"><a href="#体育-武术" class="headerlink" title="体育-武术"></a>体育-武术</h2><h3 id="————曲阜————-33"><a href="#————曲阜————-33" class="headerlink" title="————曲阜————"></a>————曲阜————</h3><h4 id="🎈🎈张文娟"><a href="#🎈🎈张文娟" class="headerlink" title="🎈🎈张文娟"></a>🎈🎈张文娟</h4><p>老师人嘎嘎好，风趣幽默，给分还不错的，但是，体测该多少就是多少，大概不会给放水，武术期末考试小组考核，一般都不错，体育轻松 90</p><blockquote><p>魈宝贝(2023 年)</p></blockquote><h2 id="体育-瑜伽"><a href="#体育-瑜伽" class="headerlink" title="体育-瑜伽"></a>体育-瑜伽</h2><h3 id="————曲阜————-34"><a href="#————曲阜————-34" class="headerlink" title="————曲阜————"></a>————曲阜————</h3><h4 id="🎈🎈宋琳琳"><a href="#🎈🎈宋琳琳" class="headerlink" title="🎈🎈宋琳琳"></a>🎈🎈宋琳琳</h4><p>老师给分跟公正，上课会讲八卦。体测比较严</p><blockquote><p>NZM</p></blockquote><p>老师很温柔 平时上课可以很水 会提前一到半个小时下课 在瑜伽教室上课 不需要自备瑜伽垫 期末临时记一下瑜伽动作和名称就行 老师给分是比较公平的那种 </p><blockquote><p>π</p></blockquote><p>老师性格脾气超好，期末不会挂人，可以自备瑜伽垫也可以用教室的</p><blockquote><p>🥀</p></blockquote><p>冲就行了</p><blockquote><p>梆梆</p></blockquote><h4 id="🎈🎈宋婷婷"><a href="#🎈🎈宋婷婷" class="headerlink" title="🎈🎈宋婷婷"></a>🎈🎈宋婷婷</h4><p>老师上课很认真，一点也不水，性格好，但是考试体测也不会放水。老师会在第一节体育课说以后上课的教学内容，大概什么时候体测什么时候考试，面对面 Q 群，安排班长，安排每次上课前轮流去干什么(篮球拿班上课用的篮球，瑜伽拖洗瑜伽室，基本 2min 的事)，完事了解散。考试的时候只要不是特别差，基本都有八十多分。</p><blockquote><p>河梦</p></blockquote><h4 id="🎈🎈许金枝"><a href="#🎈🎈许金枝" class="headerlink" title="🎈🎈许金枝"></a>🎈🎈许金枝</h4><p>上课很佛，有的时候会讲很长时间理论课，坐在垫子上发呆数手指扣垫子偷偷扒拉手机都可以，临下课会让睡觉(冥想)，当然垫子有点薄了而且没枕头有点睡不着。给分超高，捞的让人有点不知所措。</p><blockquote><p>ergo</p></blockquote><h3 id="————日照————-6"><a href="#————日照————-6" class="headerlink" title="————日照————"></a>————日照————</h3><h4 id="🎈🎈曹萍"><a href="#🎈🎈曹萍" class="headerlink" title="🎈🎈曹萍"></a>🎈🎈曹萍</h4><p>曹萍老师人很好，上课很轻松，考试也比较简单，就是考课上学的瑜伽动作，不需要自己准备瑜伽垫，教室里有，给分也挺好的(但如果你的身体极度僵硬，比如坐位体前屈碰不到自己脚的话，还是要慎重考虑)</p><blockquote><p>33</p></blockquote><h4 id="🎈🎈杨弢"><a href="#🎈🎈杨弢" class="headerlink" title="🎈🎈杨弢"></a>🎈🎈杨弢</h4><p>老师人很随和上课也相对轻松 上课地点在教授花园沿街的瑜伽教室注意不要跑到操场去()考试要求不严 给分中上 经常外出开会所以偶尔会停课或者拜托其他老师在操场上课 考试动作需要有一定柔韧性且瑜伽选课是两个学期都要选 身体柔软度不高慎重选择</p><blockquote><p>无敌暴龙战士(op 版(2022 年)</p></blockquote><h2 id="体育-太极拳"><a href="#体育-太极拳" class="headerlink" title="体育-太极拳"></a>体育-太极拳</h2><h3 id="————曲阜————-35"><a href="#————曲阜————-35" class="headerlink" title="————曲阜————"></a>————曲阜————</h3><h4 id="🎈🎈费发洲"><a href="#🎈🎈费发洲" class="headerlink" title="🎈🎈费发洲"></a>🎈🎈费发洲</h4><p>褒贬不一两极分化很明显，请各位仔细甄别</p><p>给分严格 公正 不是上课严格 上课身体不舒服是可以坐在一边的，运动量不大甚至可以说少 不需要热身跑步，能劈腿可以加分 但不是说加不上这个分就分低 主要还是看太极打的是否完整流畅，压腿没有产生身体接触 就是让大家自己压腿 老师的意思是 每节课压一压 到了考试的时候 原本压不下腿的同学可能就能压下去了。给分最低 80+</p><p>以往的雷点就是上课过程中老师喜欢聊天 更多是和女孩子聊 确实 因为男孩子都在一边玩手机 不太聊天，对女生比较过分关心</p><blockquote><p>致敬各位参与考证的贡献人</p><p>正义人士，华灯，幸运的小羊羔，我正在看三体，沙拉，小屈，Dlemnaminor</p></blockquote><p>给分偏低，在周围朋友 90 分左右时，我 80 分左右</p><blockquote><p>23yuee(2023 年)</p></blockquote><h2 id="体育—跳绳"><a href="#体育—跳绳" class="headerlink" title="体育—跳绳"></a>体育—跳绳</h2><h3 id="————曲阜————-36"><a href="#————曲阜————-36" class="headerlink" title="————曲阜————"></a>————曲阜————</h3><h4 id="🎈🎈伊士礼"><a href="#🎈🎈伊士礼" class="headerlink" title="🎈🎈伊士礼"></a>🎈🎈伊士礼</h4><p>老师平时上课的时候很平和，但是考试和体测的时候非常严格。会抓体测替考的人，考试是给你动作视频，小组一起跳。</p><blockquote><p>文文</p></blockquote><p>上课挺水的，每节课老师先教几个动作，然后让大家自由练习一下，就可以自由聊天了，然后还提前半个小时下课</p><blockquote><p>all at sea</p></blockquote><h2 id="体育-排球"><a href="#体育-排球" class="headerlink" title="体育-排球"></a>体育-排球</h2><h3 id="————日照————-7"><a href="#————日照————-7" class="headerlink" title="————日照————"></a>————日照————</h3><h4 id="🎈🎈桑勇"><a href="#🎈🎈桑勇" class="headerlink" title="🎈🎈桑勇"></a>🎈🎈桑勇</h4><p>上课不严，有事可以请假，身体不舒服也可以见习休息，老师非常好，八十分以上没问题，上课很轻松</p><blockquote><p>rule</p></blockquote><h2 id="体育-篮球"><a href="#体育-篮球" class="headerlink" title="体育-篮球"></a>体育-篮球</h2><h3 id="————曲阜————-37"><a href="#————曲阜————-37" class="headerlink" title="————曲阜————"></a>————曲阜————</h3><h4 id="🎈🎈宋琳琳-1"><a href="#🎈🎈宋琳琳-1" class="headerlink" title="🎈🎈宋琳琳"></a>🎈🎈宋琳琳</h4><p>给分高，人美心善，上课很细心，教学也很有耐心，上课教完就自由训练，脾气好。期末考试会捞一捞，体测也不算严，真强推！！！</p><blockquote><p>懵懂</p></blockquote><p>冲就行了</p><blockquote><p>梆梆</p></blockquote><p>体测很严，跳远一米三，一米四几一点不捞，50 米也是不捞，体育考试比较松，最后一般都让过了</p><blockquote><p>怨偶天成(2023 年)</p></blockquote><h4 id="🎈🎈盛峰"><a href="#🎈🎈盛峰" class="headerlink" title="🎈🎈盛峰"></a>🎈🎈盛峰</h4><p>给分标准，请假不超过五次不扣平时分，老师上课有趣，体测不是很严，期末投篮多次机会取最高值，一般好好上课分 70 ➕</p><blockquote><p>lqs</p></blockquote><h4 id="🎈🎈宋婷婷-1"><a href="#🎈🎈宋婷婷-1" class="headerlink" title="🎈🎈宋婷婷"></a>🎈🎈宋婷婷</h4><p>老师上课很认真，一点也不水，性格好，但是考试体测也不会放水。老师会在第一节体育课说以后上课的教学内容，大概什么时候体测什么时候考试，面对面 Q 群，安排班长，安排每次上课前轮流去干什么(篮球拿班上课用的篮球，瑜伽拖洗瑜伽室，基本 2min 的事)，完事了解散。考试的时候只要不是特别差，基本都有八十多分。</p><blockquote><p>河梦</p></blockquote><h4 id="🎈🎈李大新"><a href="#🎈🎈李大新" class="headerlink" title="🎈🎈李大新"></a>🎈🎈李大新</h4><p>给分高，上课水，老师超级友善就像朋友一样，基础课期末考试的时候一分钟投篮如果不及格会给你再一次机会直到及格为止，课前随便热身一下，课上挺水的；不需要自备什么东西，球用的是老师的有一筐</p><blockquote><p> 苏西</p></blockquote><p>无脑选就行了，特别特别特别好。老师特别有趣，体测不会让你不及格的，平时也挺轻松的，给分也挺高。</p><blockquote><p>比格大魔王</p></blockquote><p>老师很好，上课挺轻松，给分也不错期末考试如果投球及格不了会一直让你继续投直到及格为止</p><blockquote><p>Fafaaaaaaaaaaaaa</p></blockquote><h4 id="🎈🎈张丙伟"><a href="#🎈🎈张丙伟" class="headerlink" title="🎈🎈张丙伟"></a>🎈🎈张丙伟</h4><p>给分比较严谨，严格按照考试结果打分，不过分数是自己算出来然后上报，上课气氛很轻松，不过上课前需要跑八百米热情(想偷懒的慎重考虑)，很好请假，不舒服也可以见习，老师人很好哦</p><blockquote><p>懒惰的猫猫</p></blockquote><p>老师超好，很幽默，并且给分虽然会按照评分固定标准，但是会放放水，还会给你两次机会测同一个项目</p><blockquote><p>妍(2023 年)</p></blockquote><h2 id="体育-乒乓球"><a href="#体育-乒乓球" class="headerlink" title="体育-乒乓球"></a>体育-乒乓球</h2><h3 id="————曲阜————-38"><a href="#————曲阜————-38" class="headerlink" title="————曲阜————"></a>————曲阜————</h3><h4 id="🎈🎈翟连林"><a href="#🎈🎈翟连林" class="headerlink" title="🎈🎈翟连林"></a>🎈🎈翟连林</h4><p>给分很高，老师脾气也超好，很和蔼可亲。体测也比较松，给分挺高的，而且上课很少查人，期末考试内容也简单，很容易就能过</p><blockquote><p>清风半夜鸣蝉</p></blockquote><h4 id="🎈🎈刘成"><a href="#🎈🎈刘成" class="headerlink" title="🎈🎈刘成"></a>🎈🎈刘成</h4><p>给分挺好，跟老师说两句好话能给高一点；老师脾气也好不生气，很少点名；上课自己打乒乓球，水水的很安心；期末一般考发球和对打一定的来回；上课最好买球拍</p><blockquote><p>崔崔</p></blockquote><h3 id="————日照————-8"><a href="#————日照————-8" class="headerlink" title="————日照————"></a>————日照————</h3><h4 id="🎈🎈陈德平"><a href="#🎈🎈陈德平" class="headerlink" title="🎈🎈陈德平"></a>🎈🎈陈德平</h4><p>上课不用跑操！脾气很好，指导的很耐心，没有乒乓球拍的可以在课上买，期末考试第一学期考发球，第二学期考对打</p><blockquote><p>dating (2023 年</p></blockquote><h2 id="体育-散打"><a href="#体育-散打" class="headerlink" title="体育-散打"></a>体育-散打</h2><h3 id="————曲阜————-39"><a href="#————曲阜————-39" class="headerlink" title="————曲阜————"></a>————曲阜————</h3><h4 id="🎈🎈张文娟-1"><a href="#🎈🎈张文娟-1" class="headerlink" title="🎈🎈张文娟"></a>🎈🎈张文娟</h4><p>老师好，给分认真，你练的好分就高，练不好也会适当捞一下应该不会让你挂；上课不水，非线下课时会让你跑步三公里打卡；需要自己买拳套，但老师第一节课会讲买拳套的要求和一些其他的注意事项，所以不需要急着买，从师哥师姐那收二手的会比较划算</p><blockquote><p> 苏西</p></blockquote><p>老师是曲阜校区唯一一位散打老师，是一位可可爱爱的女老师。上课需要自备全套，所学都是基本的拳腿组合，只要认认真真分数什么都是 85+，但是态度一定要好，一定要认真！！</p><blockquote><p>拜托小叮</p></blockquote><p>老师人很好，但课程强度很大，后期练到腿法需要拉腿，开始会很疼，柔韧性差和体能差的同学慎选。课程一点也不水，能学到很多是用的东西，但是真的很累。体测不捞，期末捞，狠狠捞。每节课都点名，最后需要提交视频作业，上课需自备拳套。</p><blockquote><p>韩小姐(2023 年)</p></blockquote><h2 id="体育-羽毛球"><a href="#体育-羽毛球" class="headerlink" title="体育-羽毛球"></a>体育-羽毛球</h2><h3 id="————曲阜————-40"><a href="#————曲阜————-40" class="headerlink" title="————曲阜————"></a>————曲阜————</h3><h4 id="🎈🎈李剑"><a href="#🎈🎈李剑" class="headerlink" title="🎈🎈李剑"></a>🎈🎈李剑</h4><p>尚不明确，请慎重</p><blockquote><p>曲江江</p></blockquote><p>天天上课跑步，然后各种热身(超级多且累)，准时提前 20 分钟下课。</p><blockquote><p>木冉(2023 年</p></blockquote><h3 id="————日照————-9"><a href="#————日照————-9" class="headerlink" title="————日照————"></a>————日照————</h3><h4 id="🎈🎈王东星"><a href="#🎈🎈王东星" class="headerlink" title="🎈🎈王东星"></a>🎈🎈王东星</h4><p>男老师巨温柔！但是有一点就是，王东星老师的课前热身活动量比较大，老师的目的是让大家的运动量达标！</p><blockquote><p>匿名(2022)</p></blockquote><h2 id="体育-网球"><a href="#体育-网球" class="headerlink" title="体育-网球"></a>体育-网球</h2><h3 id="————曲阜————-41"><a href="#————曲阜————-41" class="headerlink" title="————曲阜————"></a>————曲阜————</h3><h4 id="🎈🎈朱腾旗"><a href="#🎈🎈朱腾旗" class="headerlink" title="🎈🎈朱腾旗"></a>🎈🎈朱腾旗</h4><p>期末给分较高，一次 90+，一次 80+，给补考机会，一般不会挂人，但提高课考对打，需要四个人配合。老师很佛系，体测也比较松，生病了很好请假，脾气大部分情况下很好，偶尔暴躁</p><blockquote><p> 。。。</p></blockquote><p>老师人性格很好，偶尔暴躁，上课松弛，做完热身活动后就分组练习，有很多偷懒的空间。这门课就是我追求的养老课程，属于那种想摆可以摆，想学网球可以学，大家都会很舒服的课。想学网球的话不要害羞，积极提问请教，老师还是很乐意传授网球要领的。期末老师专门承诺会捞人，给分标准超级宽松，朱老师赛高！！！</p><blockquote><p>王富贵(2023 年)</p></blockquote><h3 id="————日照————-10"><a href="#————日照————-10" class="headerlink" title="————日照————"></a>————日照————</h3><h4 id="🎈🎈闫允潞"><a href="#🎈🎈闫允潞" class="headerlink" title="🎈🎈闫允潞"></a>🎈🎈闫允潞</h4><p>老师给分比较高，只要你八百米合格，几个项目测试都及格，就是 90 左右(网球普通是考触球折返跑，对墙打，提高班考比赛对打，发球)态度端正一点，肯练就行，因为大家都是网球零基础，如果你能比别人好一点点，那你肯定 90 以上。老师脾气不是非常好，有点傲娇，但是人很好，我请过三星期假还给我 89</p><blockquote><p>忙 ten</p></blockquote><h2 id="体育-飞镖"><a href="#体育-飞镖" class="headerlink" title="体育-飞镖"></a>体育-飞镖</h2><h3 id="————曲阜————-42"><a href="#————曲阜————-42" class="headerlink" title="————曲阜————"></a>————曲阜————</h3><h4 id="🎈🎈李大新-1"><a href="#🎈🎈李大新-1" class="headerlink" title="🎈🎈李大新"></a>🎈🎈李大新</h4><p>挺有意思，但是给分不高，我代表飞镖社赛前展示，这种水平都才 85</p><blockquote><p>幸运的小羊羔</p></blockquote><p>无脑选就行了，特别特别特别好。老师特别有趣，体测不会让你不及格的，平时也挺轻松的，给分也挺高。</p><blockquote><p>比格大魔王</p></blockquote><h2 id="体育-排舞"><a href="#体育-排舞" class="headerlink" title="体育-排舞"></a>体育-排舞</h2><h3 id="————曲阜————-43"><a href="#————曲阜————-43" class="headerlink" title="————曲阜————"></a>————曲阜————</h3><h4 id="🎈🎈刘影"><a href="#🎈🎈刘影" class="headerlink" title="🎈🎈刘影"></a>🎈🎈刘影</h4><p>上课负责，能拿高分，体测很体贴，有一点舞蹈基础的可以通杀，推荐。只是上课要注意穿运动服装</p><blockquote><p> 学校选课系统你麻薯了</p></blockquote><h4 id="🎈🎈许红霞-1"><a href="#🎈🎈许红霞-1" class="headerlink" title="🎈🎈许红霞"></a>🎈🎈许红霞</h4><p>老师脾气超好很温柔，跳舞很好看，注重体测，八百米占分比例高，每节课都跑步，体测的时候不满意可以申请重测，体测时强度也不算大，可以休息，给分还行，不会很放水，也不会给很低，可以冲。</p><blockquote><p>奋斗着</p></blockquote><h2 id="体育-网球基础课"><a href="#体育-网球基础课" class="headerlink" title="体育-网球基础课"></a>体育-网球基础课</h2><h3 id="————曲阜————-44"><a href="#————曲阜————-44" class="headerlink" title="————曲阜————"></a>————曲阜————</h3><h4 id="🎈🎈刘影-1"><a href="#🎈🎈刘影-1" class="headerlink" title="🎈🎈刘影"></a>🎈🎈刘影</h4><p>上课练习内容简单，不用到操场跑圈，只用在网球场上热热身，关键是老师巨好，说话幽默 开朗阳光 教的也好 基础课考试内容挺简单的 给分也不错 当时我们人均 90+吧好像</p><blockquote><p> 多喝水</p></blockquote><p>给分较公平，有基础给分会高些，无基础好好学也可以 80 左右，体测肺活量身高体重可以水</p><blockquote><p>曦</p></blockquote><h2 id="体育-定向运动"><a href="#体育-定向运动" class="headerlink" title="体育-定向运动"></a>体育-定向运动</h2><h3 id="————曲阜————-45"><a href="#————曲阜————-45" class="headerlink" title="————曲阜————"></a>————曲阜————</h3><h4 id="🎈🎈李大新-2"><a href="#🎈🎈李大新-2" class="headerlink" title="🎈🎈李大新"></a>🎈🎈李大新</h4><p>李大新老师人特别好！上课也挺轻松的非常推荐</p><blockquote><p>神之爱</p></blockquote><p>无脑选就行了，特别特别特别好。老师特别有趣，体测不会让你不及格的，平时也挺轻松的，给分也挺高。</p><blockquote><p>比格大魔王</p></blockquote><h2 id="体育-体育舞蹈-摩登"><a href="#体育-体育舞蹈-摩登" class="headerlink" title="体育-体育舞蹈(摩登)"></a>体育-体育舞蹈(摩登)</h2><h3 id="————曲阜————-46"><a href="#————曲阜————-46" class="headerlink" title="————曲阜————"></a>————曲阜————</h3><h4 id="🎈🎈许金芝"><a href="#🎈🎈许金芝" class="headerlink" title="🎈🎈许金芝"></a>🎈🎈许金芝</h4><p>很严格，如果你出了什么问题找她会感到她真的很恐怖……但是老师很公平</p><blockquote><p>fabxj</p></blockquote><p>第一节课上课可能会有一丝凶看起来，但是后边上课玩也不管，纯看最后考试发挥，不好也给最低 80 多吧，动作平时要求挺多但是最后给分高高高高高，整个非常轻松上课没出过汗，除非空调热的</p><blockquote><p>橙又青(2023 年)</p></blockquote><h2 id="体育-体育舞蹈-摩登-1"><a href="#体育-体育舞蹈-摩登-1" class="headerlink" title="体育-体育舞蹈(摩登)"></a>体育-体育舞蹈(摩登)</h2><h3 id="————曲阜————-47"><a href="#————曲阜————-47" class="headerlink" title="————曲阜————"></a>————曲阜————</h3><h4 id="🎈🎈许金芝-1"><a href="#🎈🎈许金芝-1" class="headerlink" title="🎈🎈许金芝"></a>🎈🎈许金芝</h4><p>个人觉得给分可以，大多数都在80以上（体测也占比，一定要努力）。老师属于那种严厉公平公正类型的，上课很认真。（感觉考试老师会浅捞一下）。期末考试是跳两套伦巴舞的一套，会在刚开始上课的时候分小组。我觉得零基础的话也不用太担心，多练练基本没问题的，有基础更好。总之这门课还不错ᐇ我学的时候挺紧张但是我挺喜欢的</p><blockquote><p>twig.（2023年）</p></blockquote><hr><h1 id="2023-新生选课指南教务处相关文件"><a href="#2023-新生选课指南教务处相关文件" class="headerlink" title="2023 新生选课指南教务处相关文件"></a>2023 新生选课指南教务处相关文件</h1><blockquote><p>数据贡献：23 级文院走路捡到两块钱，22 级网安 400</p></blockquote><h4 id="🎈🎈2023-教务处官方文件-关于组织开展-2023-级新生选课的通知"><a href="#🎈🎈2023-教务处官方文件-关于组织开展-2023-级新生选课的通知" class="headerlink" title="🎈🎈2023 教务处官方文件 关于组织开展 2023 级新生选课的通知"></a>🎈🎈2023 教务处官方文件 <a href="https://jwc.qfnu.edu.cn/info/1103/6728.htm">关于组织开展 2023 级新生选课的通知</a></h4><ul><li>附件【<a href="https://jwc.qfnu.edu.cn/system/_content/download.jsp?urltype=news.DownloadAttachUrl&owner=1485250630&wbfileid=12142754">附件 1：新生选课指南.pptx</a>】</li><li>附件【<a href="https://jwc.qfnu.edu.cn/system/_content/download.jsp?urltype=news.DownloadAttachUrl&owner=1485250630&wbfileid=12142753">附件 2：学校统一身份认证账号激活说明.docx</a>】</li></ul><h1 id="关于选课设备的建议"><a href="#关于选课设备的建议" class="headerlink" title="关于选课设备的建议"></a>关于选课设备的建议</h1><p>电脑大于平板大于手机</p><p>电脑屏大方便操作，手机屏小，操作不便，影响抢课速度</p><p>关于网速没有设备直接谁快谁慢这一说，看运气，系统卡了不要随便刷新</p><h1 id="全部贡献者名单-以提交顺序为准-："><a href="#全部贡献者名单-以提交顺序为准-：" class="headerlink" title="全部贡献者名单(以提交顺序为准)："></a>全部贡献者名单(以提交顺序为准)：</h1><table><thead><tr><th>序号</th><th>ID</th><th>序号</th><th>ID</th><th>序号</th><th>ID</th><th>序号</th><th>ID</th><th>序号</th><th>ID</th></tr></thead><tbody><tr><td>1</td><td><font color=red> W </font> <font color=yellow> 1 </font> <font color=orange> n </font> <font color=green> d </font> <font color=blue> y </font> <font color=00FF00> s </font>（博客作者）</td><td>11</td><td>小菠</td><td>21</td><td>NZM</td><td>31</td><td>lqs</td><td>41</td><td>河梦</td></tr><tr><td>2</td><td>鲨鱼</td><td>12</td><td>温歌</td><td>22</td><td>。。。</td><td>32</td><td>Delta</td><td>42</td><td>华灯</td></tr><tr><td>3</td><td>多喝水</td><td>13</td><td><font color=red> 苏西 </font></td><td>23</td><td>｡◕‿◕｡</td><td>33</td><td>文文</td><td>43</td><td>懒惰的猫猫</td></tr><tr><td>4</td><td>xm</td><td>14</td><td>➕呗</td><td>24</td><td>π</td><td>34</td><td>fabxj</td><td>44</td><td>曦</td></tr><tr><td>5</td><td>半岛饭盒</td><td>15</td><td>学校选课系统你麻薯了</td><td>25</td><td>拜托小叮</td><td>35</td><td>Y.🏅️(宣传渠道)</td><td>45</td><td><font color=red> 忒忒 </font></td></tr><tr><td>6</td><td>小废物 333</td><td>16</td><td>路人甲</td><td>26</td><td>清风半夜鸣蝉</td><td>36</td><td><font color=blue> 懵懂 </font></td><td>46</td><td>null</td></tr><tr><td>7</td><td><font color='orange'> juzihaiii </font></td><td>17</td><td>抵制坏蛋</td><td>27</td><td>青山可乐</td><td>37</td><td>真的背不动了</td><td>47</td><td>10086</td></tr><tr><td>8</td><td>楠方</td><td>18</td><td>求改善校园网</td><td>28</td><td>乌拉拉</td><td>38</td><td>ergo</td><td>48</td><td>little  monkey</td></tr><tr><td>9</td><td>神奇的火龙果一枚</td><td>19</td><td>正义人士</td><td>29</td><td>稀粥</td><td>39</td><td><font color='blue'> 沙拉 </font></td><td>49</td><td>rule</td></tr><tr><td>10</td><td>综英去死</td><td>20</td><td>热带雨林</td><td>30</td><td>期末不挂科</td><td>40</td><td>W</td><td>50</td><td><font color=red> 奋斗者 </font></td></tr></tbody></table><table><thead><tr><th>序号</th><th>ID</th><th>序号</th><th>ID</th><th>序号</th><th>ID</th><th>序号</th><th>ID</th><th>序号</th><th>ID</th></tr></thead><tbody><tr><td>51</td><td>崔崔</td><td>61</td><td><font color=red> 饮月君，你无处可逃 </font></td><td>71</td><td>ergo</td><td>81</td><td>hhh</td><td>91</td><td><font color='blue'> 凌晨一点半 </font></td></tr><tr><td>52</td><td>🥀</td><td>62</td><td>咕咕</td><td>72</td><td><font color='red'> 我正在看 </font> <font color='blue'> 三体 </font></td><td>82</td><td>大爱无疆</td><td>92</td><td><font color='blue'> 荷包蛋 </font></td></tr><tr><td>53</td><td>和古烧骨汤麻辣烫</td><td>63</td><td><font color=00ff00> V*t(微信)</font></td><td>73</td><td><font color=blue> 雩风 </font></td><td>83</td><td>鱼籽</td><td>93</td><td><font color='blue'> biu </font></td></tr><tr><td>54</td><td><font color=blue> crazywood </font></td><td>64</td><td>在下熬夜冠军</td><td>74</td><td>啥也不是</td><td>84</td><td>会飞的大野驴</td><td>94</td><td><font color='blue'> 小张 </font></td></tr><tr><td>55</td><td><font color=blue> 尔康康康康 </font></td><td>65</td><td><font color=00ff00> crazywood(微信)</font></td><td>75</td><td>脆脆爆米花</td><td>85</td><td><font color=blue> 无念 </font></td><td>95</td><td><font color='blue'> 小心闪光.</font></td></tr><tr><td>56</td><td>烦烦帆</td><td>66</td><td>曲江江</td><td>76</td><td>豆橛子大王</td><td>86</td><td><font color='blue'> Ed-Ryan </font></td><td>96</td><td><font color='blue'>-啵啵✨ </font></td></tr><tr><td>57</td><td>all  at sea</td><td>67</td><td>沙拉</td><td>77</td><td>堇安</td><td>87</td><td><font color='blue'> 400 </font></td><td>97</td><td><font color='blue'> 离离原上谱 </font></td></tr><tr><td>58</td><td>梆梆</td><td>68</td><td>小屈</td><td>78</td><td>忙 ten</td><td>88</td><td><font color='blue'> 向子逸 </font></td><td>98</td><td><font color='blue'> 藤原拓海_</font></td></tr><tr><td>59</td><td>雷锋</td><td>69</td><td>Dlemnaminor</td><td>79</td><td>恦.</td><td>89</td><td><font color='blue'> Helium </font></td><td>99</td><td><font color='blue'> 短笛魔王喵帕斯 </font></td></tr><tr><td>60</td><td>神之爱</td><td>70</td><td><font color=red> 幸运的小羊羔 </font></td><td>80</td><td>小熊威宁</td><td>90</td><td><font color='blue'> 呱 </font></td><td>100</td><td><font color='blue'>‘◡’</font></td></tr></tbody></table><table><thead><tr><th>序号</th><th>ID</th><th>序号</th><th>ID</th><th>序号</th><th>ID</th><th>序号</th><th>ID</th><th>序号</th><th>ID</th></tr></thead><tbody><tr><td>101</td><td><font color='blue'> 小楠不难.</font></td><td>111</td><td>雾眠气泡水</td><td>121</td><td><font color='blue'> 无敌暴龙战士（op 版 </font></td><td>131</td><td>怨偶天成</td><td></td><td></td></tr><tr><td>102</td><td><font color='00ff00'>*蛙(微信)</font></td><td>112</td><td>热心市民</td><td>122</td><td>栗子</td><td>132</td><td>flower</td><td></td><td></td></tr><tr><td>103</td><td>南风知我意</td><td>113</td><td>进击的小王</td><td>123</td><td>韩小姐</td><td>133</td><td><span style="color:blue;"> Luu_</span></td><td></td><td></td></tr><tr><td>104</td><td>DAWN</td><td>114</td><td>颜珞</td><td>124</td><td>西城</td><td>134</td><td>妍</td><td></td><td></td></tr><tr><td>105</td><td>ying</td><td>115</td><td>蔼</td><td>125</td><td>王富贵</td><td>135</td><td>无名氏</td><td></td><td></td></tr><tr><td>106</td><td><font color='blue'> 多吃菜 </font></td><td>116</td><td>木冉</td><td>126</td><td>23yuee</td><td>136</td><td>默颜</td><td></td><td></td></tr><tr><td>107</td><td>小明</td><td>117</td><td>dating</td><td>127</td><td>111</td><td>137</td><td>橙又青</td><td></td><td></td></tr><tr><td>108</td><td>Fafaaaaaaaaaaaaaaaa</td><td>118</td><td>十口月</td><td>128</td><td>孤独的🐺</td><td>138</td><td>，，</td><td></td><td></td></tr><tr><td>109</td><td>33</td><td>119</td><td>热心网友</td><td>129</td><td>翎信音</td><td>139</td><td>。</td><td></td><td></td></tr><tr><td>110</td><td>阿米娜</td><td>120</td><td>匿名</td><td>130</td><td>魈宝贝</td><td>140</td><td>twig.</td><td></td><td></td></tr></tbody></table><p>备注：名单 <font color=blue> 蓝色 </font> 表示 <font color=blue> 特殊贡献 </font>，<font color=red> 红色 </font> 表示 <font color=red> 提供 5 条及以上数据 </font>，<font color=00ff00> 绿色 </font> 表示 <font color=00ff00> 打赏 </font>，彩色是博主本人，其他色是特殊贡献定制色</p><hr><h1 id="关于我为什么要做这个平台？"><a href="#关于我为什么要做这个平台？" class="headerlink" title="关于我为什么要做这个平台？"></a>关于我为什么要做这个平台？</h1><p>答：有很多同学问到过我这个问题。这个网站的整体架构是我选课的前一天花了一天完成的，本来的话我就是只想美化美化用来发表自己的博客，记录自己的学习。</p><p>到第二天，临近选课了，看到群里还有很多很多的人问这个这个老师怎么样，那个那个老师给分高吗，我脑海里突然想到一个想法，既然我已经做出这个公开博客了，我为什么不开个文章把学校老师的上课风格收集起来，让同学们都了解到自己合适的老师呢，其实灵感也有一部分是来自程序员鱼皮设计的网站“框框大学”，受这个平台的启发，这个网站是一个学长学姐分享经验的平台，就觉得很好</p><p>友情链接：<a href="https://www.kkdaxue.com/">kkdaxue.com</a></p><p>所以我也想做一个小项目来帮助大家，当然，希望能帮到大家吧，毕竟数据是靠大家共建起来的，我不可能做到了解每一位老师(目前数据虽然不少但对于全部的数据量来说还是远远不够)。</p><p>END</p><h1 id="关于本平台的荣誉"><a href="#关于本平台的荣誉" class="headerlink" title="关于本平台的荣誉"></a>关于本平台的荣誉</h1><p>2023 年 8 月 31 日 22 点，贡献者已达到 50 以上，本项目正式开启运行！</p><p>2023 年 9 月 10 日 18 点，贡献者已达到 100 以上，十分感谢所有贡献者的支持！</p><p>2023 年 9 月 20 日 15 点，本站浏览量已破万，很荣幸能够为大家服务！</p><p>2023 年 9 月 21 日 18 点，本站浏览量已破 2 万，很荣幸能够为大家服务！</p><h1 id="想赞助我？"><a href="#想赞助我？" class="headerlink" title="想赞助我？"></a>想赞助我？</h1><p>随意赞助，不绑架，打多少都行</p><p><span style="color:#FFFF00;"> 想打赏的意思意思就行了，别搞太多，大家都是学生 </span></p><p><img src="/img/%E9%80%89%E8%AF%BE/%E6%94%B6%E6%AC%BE%E7%A0%81.jpg" srcset="/img/loading.gif" lazyload></p><h1 id="用户协议"><a href="#用户协议" class="headerlink" title="用户协议"></a>用户协议</h1><p><font size=2> 为使曲阜师范大学同学都能了解每位老师的教学风格，W1ndys 联合本人 blog 运行项目，收集全校同学意见，统计整合信息刊登，<u> 无偿分享 </u> 给全校同学，烦请占用您 1 分钟的时间填一下本问卷，内容审核后将全部刊登到博客，本项目 <u> 无收益无偿奉献个人运营无团队 </u>，我谨代表本项目所有受益者向您致谢 </font></p><hr><p>使用【曲阜师范大学选课指北项目】(以下简称“本项目”)前请仔细阅读本用户协议。</p><p>免责声明：<font color='red'> 平台数据仅供参考，若出现任何不符情况，请立刻向管理员反馈修改，本平台数据全部来自问卷收集，与本人无关。</font></p><p>一、服务协议的确定<br>依照本协议以下条款使用本项目的会员(以下简称“用户”)，并 <font color='red'> 同意以下服务条款，方有资格查阅本项目内容，并受本协议条款的约束，使用即代表您同意本协议。</font></p><p>二、内容所有权</p><p>用户只有在获得本项目或其他相关权利人的授权之后才能使用这些内容，而不能擅自复制、再造这些内容、或创造与内容有关的派生产品。 </p><p>本项目提供的网络服务内容可能包括：文字、软件、声音、图片、录象、图表等。所有这些内容受版权、商标和其它财产所有权法律的保护。 </p><p>三、用户信息的提供</p><p>为保障用户的合法权益，避免在服务时因用户查阅资料与真实情况不符而发生纠纷，请用户填写时务必按照真实、全面、准确的原则填写。对因用户自身原因而造成的突发情况，本项目概不负责。如果项目提供的资料包含有不正确的信息，请立刻与本项目博主联系。</p><p>本项目数据由大家共同建立，受大家监督，对大家负责</p><p>四、项目自身的危险性</p><p>本项目本着尽可能描述真实情况的原则，对任课老师的授课风格进行描述公开，但在语言上无法做到对所有避雷点一比一还原，请用户仔细甄别，如有情况不符，责任归项目浏览者</p><p>五、项目的时效性</p><p>本项目的全部数据均来自全校同学的问卷提供，数据具有一定的时效性，请访客发现错误时及时纠正。</p><p>六、项目的实质</p><p>本项目作者 W1ndys 享有最终解释权，本项目无任何收益，无偿汇总相关数据信息免费公开提供服务，且无运营团队</p><p>七、项目数据的适应性</p><p><font color='red'> 本项目数据原则上只客观描述上课风格，对于每一种情况，每一种同学的评价也不相同，数据来自全校同学并追加署名，无法做到完全符合实际情况，请仔细甄别 </font></p><p><font color='red'> 原因有二：其一刻板印象，同学们对某老师的描述偏刻板，语言描述比较极端。其二，老师教学风格变化 </font></p><hr><p><font color='blue'> 博主 W1ndys 享有最终解释权 </font></p>]]></content>
    
    
    <categories>
      
      <category>QFNU</category>
      
    </categories>
    
    
    <tags>
      
      <tag>QFNU</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用在线计算工具</title>
    <link href="/2023/08/30/%E5%A4%A7%E4%BA%8C%E8%AF%BE%E7%A8%8B%E5%B8%B8%E7%94%A8%E8%AE%A1%E7%AE%97%E5%B7%A5%E5%85%B7/"/>
    <url>/2023/08/30/%E5%A4%A7%E4%BA%8C%E8%AF%BE%E7%A8%8B%E5%B8%B8%E7%94%A8%E8%AE%A1%E7%AE%97%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<h1 id="概率论与数理统计"><a href="#概率论与数理统计" class="headerlink" title="概率论与数理统计"></a>概率论与数理统计</h1><p><a href="https://www.23bei.com/tool/147.html">排列组合在线计算器 (23bei.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>在线计算工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>未完成的计划清单</title>
    <link href="/2023/08/27/%E6%9C%AA%E5%AE%8C%E6%88%90%E7%9A%84%E8%AE%A1%E5%88%92%E6%B8%85%E5%8D%95/"/>
    <url>/2023/08/27/%E6%9C%AA%E5%AE%8C%E6%88%90%E7%9A%84%E8%AE%A1%E5%88%92%E6%B8%85%E5%8D%95/</url>
    
    <content type="html"><![CDATA[<ul><li><input disabled="" type="checkbox"> 回到顶部</li><li><input checked="" disabled="" type="checkbox"> 评论区美化</li><li><input disabled="" type="checkbox"> <del>结束标记</del></li><li><input disabled="" type="checkbox"> 音乐</li><li><input checked="" disabled="" type="checkbox"> 换背景API</li><li><input checked="" disabled="" type="checkbox"> live2d bug</li><li><input disabled="" type="checkbox"> <del>域名备案</del></li><li><input checked="" disabled="" type="checkbox"> 背景动态线条</li><li><input disabled="" type="checkbox"> 完善[曲阜师范大学选课指北]<ul><li><input checked="" disabled="" type="checkbox"> 课程分类整理</li><li><input disabled="" type="checkbox"> <del>课程推荐标签<span class="label label-success">推荐</span></del></li></ul></li><li><input disabled="" type="checkbox"> 完善[曲阜师范大学生存手册]</li><li><input disabled="" type="checkbox"> hexo注入器</li><li><input disabled="" type="checkbox"> 正则表达式</li><li><input disabled="" type="checkbox"> js  css</li><li><input disabled="" type="checkbox"> 文章过长特效为什么会变慢？？？没搞明白</li><li><input disabled="" type="checkbox"> Python</li><li><input disabled="" type="checkbox"> C++类</li></ul>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>攻防世界-Reverse-666writeup</title>
    <link href="/2023/08/26/CTF_writeup_adworld.xctf_Reverse_666/"/>
    <url>/2023/08/26/CTF_writeup_adworld.xctf_Reverse_666/</url>
    
    <content type="html"><![CDATA[<h1 id="查壳"><a href="#查壳" class="headerlink" title="查壳"></a>查壳</h1><p>丢进去查壳</p><p><img src="https://img1.imgtp.com/2023/08/26/gAGTtvBK.png" srcset="/img/loading.gif" lazyload alt="1.png"></p><p>无壳</p><h1 id="进入IDA"><a href="#进入IDA" class="headerlink" title="进入IDA"></a>进入IDA</h1><p>直接拉进ida</p><p> 首先看到一个比较醒目的flag</p><p><img src="https://img1.imgtp.com/2023/08/26/GF6BzP2T.png" srcset="/img/loading.gif" lazyload alt="2.png"></p><p>但是这怎么可能就是答案呢</p><h1 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h1><p>看一下主函数</p><p><img src="https://img1.imgtp.com/2023/08/26/HaTlGnfa.png" srcset="/img/loading.gif" lazyload alt="3.png"></p><p>双击enflag看一下<img src="https://img1.imgtp.com/2023/08/26/7RilNm8M.png" srcset="/img/loading.gif" lazyload alt="4.png"></p><p> 发现enflag是izwhroz””w”v.K”.Ni</p><p>转化为十进制<a href="https://www.rapidtables.org/zh-CN/convert/number/ascii-hex-bin-dec-converter.html">ASCII文本，十六进制，二进制，十进制，Base64转换器 (rapidtables.org)</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">[<span class="hljs-number">105</span>,<span class="hljs-number">122</span>,<span class="hljs-number">119</span>,<span class="hljs-number">104</span>,<span class="hljs-number">114</span>,<span class="hljs-number">111</span>,<span class="hljs-number">122</span>,<span class="hljs-number">34</span>,<span class="hljs-number">34</span>,<span class="hljs-number">119</span>,<span class="hljs-number">34</span>,<span class="hljs-number">118</span>,<span class="hljs-number">46</span>,<span class="hljs-number">75</span>,<span class="hljs-number">34</span>,<span class="hljs-number">46</span>,<span class="hljs-number">78</span>,<span class="hljs-number">105</span>]<br></code></pre></td></tr></table></figure><p>key的长度是12h（注意是16进制），转换成十进制应该是10</p><h1 id="encode函数"><a href="#encode函数" class="headerlink" title="encode函数"></a>encode函数</h1><p>返回主函数看一下encode是干啥的</p><p><img src="https://img1.imgtp.com/2023/08/26/axSEUavG.png" srcset="/img/loading.gif" lazyload alt="5.png"></p><p> 根据三行重点计算过程，写一下逆向代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string v3=<span class="hljs-string">&quot;&quot;</span>; <span class="hljs-comment">// [rsp+10h] [rbp-70h]</span><br>    <span class="hljs-type">int</span> v4; <span class="hljs-comment">// [rsp+78h] [rbp-8h]</span><br>    <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+7Ch] [rbp-4h]</span><br>    i = <span class="hljs-number">0</span>;<br>    v4 = <span class="hljs-number">0</span>;<br>    vector&lt;<span class="hljs-type">int</span>&gt; enflag = &#123; <span class="hljs-number">105</span>,<span class="hljs-number">122</span>,<span class="hljs-number">119</span>,<span class="hljs-number">104</span>,<span class="hljs-number">114</span>,<span class="hljs-number">111</span>,<span class="hljs-number">122</span>,<span class="hljs-number">34</span>,<span class="hljs-number">34</span>,<span class="hljs-number">119</span>,<span class="hljs-number">34</span>,<span class="hljs-number">118</span>,<span class="hljs-number">46</span>,<span class="hljs-number">75</span>,<span class="hljs-number">34</span>,<span class="hljs-number">46</span>,<span class="hljs-number">78</span>,<span class="hljs-number">105</span>,<span class="hljs-number">0</span> &#125;;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">18</span>; i += <span class="hljs-number">3</span>)<br>    &#123;<br>        v3 += <span class="hljs-built_in">char</span>((<span class="hljs-number">18</span> ^ enflag[i]) - <span class="hljs-number">6</span>);<br>        v3 += <span class="hljs-built_in">char</span>((<span class="hljs-number">18</span> ^ enflag[i + <span class="hljs-number">1</span>]) + <span class="hljs-number">6</span>);<br>        v3 += <span class="hljs-built_in">char</span>(<span class="hljs-number">18</span> ^ enflag[i + <span class="hljs-number">2</span>] ^ <span class="hljs-number">6</span>);<br>    &#125;<br>    cout &lt;&lt; v3 &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></td></tr></table></figure><p>unctf{b66_6b6_66b}</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>WP</category>
      
      <category>RE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用C++调用MIDI演奏曲阜师范大学校歌</title>
    <link href="/2023/08/25/C++_MIDI_QFNU_music/"/>
    <url>/2023/08/25/C++_MIDI_QFNU_music/</url>
    
    <content type="html"><![CDATA[<h1 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h1><p>有一天在B站上看到有大佬用c++演奏音乐，一开始还不知道是调用MIDI函数，后来百度，查CSDN才知道是用函数调用，我直接转手写一个自己学校的校歌</p><h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><p>首先准备好校歌的键盘，想必大家通知书上都有吧</p><p>然后是c++编译器，我用Visual Studio 2022</p><p>然后是一些乐理知识，由于我是一个纯工科生，对乐理知识了解程度为0，只能大体看音调，不认识节拍，无奈只能去群里找懂行的人，很巧就有一个19的师姐还一个22的同学解答了我的疑惑</p><h1 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h1><p>Scale函数</p><p>这个函数是一个简谱对照表，相当于base64编码的编码表</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Scale</span><br><br>&#123;<br><br>    Rest = <span class="hljs-number">0</span>, C8 = <span class="hljs-number">108</span>, B7 = <span class="hljs-number">107</span>, A7s = <span class="hljs-number">106</span>, A7 = <span class="hljs-number">105</span>, G7s = <span class="hljs-number">104</span>, G7 = <span class="hljs-number">103</span>, F7s = <span class="hljs-number">102</span>, F7 = <span class="hljs-number">101</span>, E7 = <span class="hljs-number">100</span>,<br><br>    D7s = <span class="hljs-number">99</span>, D7 = <span class="hljs-number">98</span>, C7s = <span class="hljs-number">97</span>, C7 = <span class="hljs-number">96</span>, B6 = <span class="hljs-number">95</span>, A6s = <span class="hljs-number">94</span>, A6 = <span class="hljs-number">93</span>, G6s = <span class="hljs-number">92</span>, G6 = <span class="hljs-number">91</span>, F6s = <span class="hljs-number">90</span>, F6 = <span class="hljs-number">89</span>,<br><br>    E6 = <span class="hljs-number">88</span>, D6s = <span class="hljs-number">87</span>, D6 = <span class="hljs-number">86</span>, C6s = <span class="hljs-number">85</span>, C6 = <span class="hljs-number">84</span>, B5 = <span class="hljs-number">83</span>, A5s = <span class="hljs-number">82</span>, A5 = <span class="hljs-number">81</span>, G5s = <span class="hljs-number">80</span>, G5 = <span class="hljs-number">79</span>, F5s = <span class="hljs-number">78</span>,<br><br>    F5 = <span class="hljs-number">77</span>, E5 = <span class="hljs-number">76</span>, D5s = <span class="hljs-number">75</span>, D5 = <span class="hljs-number">74</span>, C5s = <span class="hljs-number">73</span>, C5 = <span class="hljs-number">72</span>, B4 = <span class="hljs-number">71</span>, A4s = <span class="hljs-number">70</span>, A4 = <span class="hljs-number">69</span>, G4s = <span class="hljs-number">68</span>, G4 = <span class="hljs-number">67</span>,<br><br>    F4s = <span class="hljs-number">66</span>, F4 = <span class="hljs-number">65</span>, E4 = <span class="hljs-number">64</span>, D4s = <span class="hljs-number">63</span>, D4 = <span class="hljs-number">62</span>, C4s = <span class="hljs-number">61</span>, C4 = <span class="hljs-number">60</span>, B3 = <span class="hljs-number">59</span>, A3s = <span class="hljs-number">58</span>, A3 = <span class="hljs-number">57</span>, G3s = <span class="hljs-number">56</span>,<br><br>    G3 = <span class="hljs-number">55</span>, F3s = <span class="hljs-number">54</span>, F3 = <span class="hljs-number">53</span>, E3 = <span class="hljs-number">52</span>, D3s = <span class="hljs-number">51</span>, D3 = <span class="hljs-number">50</span>, C3s = <span class="hljs-number">49</span>, C3 = <span class="hljs-number">48</span>, B2 = <span class="hljs-number">47</span>, A2s = <span class="hljs-number">46</span>, A2 = <span class="hljs-number">45</span>,<br><br>    G2s = <span class="hljs-number">44</span>, G2 = <span class="hljs-number">43</span>, F2s = <span class="hljs-number">42</span>, F2 = <span class="hljs-number">41</span>, E2 = <span class="hljs-number">40</span>, D2s = <span class="hljs-number">39</span>, D2 = <span class="hljs-number">38</span>, C2s = <span class="hljs-number">37</span>, C2 = <span class="hljs-number">36</span>, B1 = <span class="hljs-number">35</span>, A1s = <span class="hljs-number">34</span>,<br><br>    A1 = <span class="hljs-number">33</span>, G1s = <span class="hljs-number">32</span>, G1 = <span class="hljs-number">31</span>, F1s = <span class="hljs-number">30</span>, F1 = <span class="hljs-number">29</span>, E1 = <span class="hljs-number">28</span>, D1s = <span class="hljs-number">27</span>, D1 = <span class="hljs-number">26</span>, C1s = <span class="hljs-number">25</span>, C1 = <span class="hljs-number">24</span>, B0 = <span class="hljs-number">23</span>,<br><br>    A0s = <span class="hljs-number">22</span>, A0 = <span class="hljs-number">21</span><br><br>&#125;;<br></code></pre></td></tr></table></figure><p>然后是Voice函数，这个是控制声音的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Voice</span><br><br>&#123;<br><br>    X1 = C2, X2 = D2, X3 = E2, X4 = F2, X5 = G2, X6 = A2, X7 = B2,<br><br>    L1 = C3, L2 = D3, L3 = E3, L4 = F3, L5 = G3, L6 = A3, L7 = B3,<br><br>    M1 = C4, M2 = D4, M3 = E4, M4 = F4, M5 = G4, M6 = A4, M7 = B4,<br><br>    H1 = C5, H2 = D5, H3 = E5, H4 = F5, H5 = G5, H6 = A5, H7 = B5,<br><br>    LOW_SPEED = <span class="hljs-number">500</span>, MIDDLE_SPEED = <span class="hljs-number">400</span>, HIGH_SPEED = <span class="hljs-number">300</span>,<br><br>    _ = <span class="hljs-number">0XFF</span><br><br>&#125;;<br></code></pre></td></tr></table></figure><p>然后就到最核心的了，就是编谱，把简谱翻译成代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span>   <span class="hljs-title">QFNU</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    HMIDIOUT handle;<br>    <span class="hljs-built_in">midiOutOpen</span>(&amp;handle, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, CALLBACK_NULL);<br>    <span class="hljs-type">int</span> volume = <span class="hljs-number">0x7f</span>;<br>    <span class="hljs-type">int</span> voice = <span class="hljs-number">0x0</span>;<br>    <span class="hljs-type">int</span> sleep = <span class="hljs-number">300</span>;<br>    <span class="hljs-type">int</span> QFNU[] =<br>    &#123;<br>         M1,_,M1,_,M1,_,M2,_,<br>        M3,_,M5,_,M5,_,_,_,<br>        M6,_,M6,_,M5,_,M3,_,<br>        M1,_,M2,M3,M2,_,_,_,<br>        M3,_,M3,_,M5,_,M5,_,<br>        M3,_,M2,_,M1,_,L6,_,<br>        L5,L6,M1,M2,M3,_,M5,_,<br>        M2,_,_,_,_,_,<br>        M1,_,M1,_,M1,_,M2,_,<br>        M3,_,M5,_,M5,_,_,<br>        M6,_,M6,_,M5,_,M3,_,<br>        M1,_,M2,M3,M2,_,_,<br>        M3,_,M3,_,M5,_,M5,_,<br>        M3,_,M2,_,M1,_,L6,_,<br>        L5,L6,M1,M2,M3,_,M2,_,<br>        M1,_,_,_,_,<br>        H1,_,H1,_,H1,_,_,_,<br>        M3,_,M5,M6,M5,_,_,_,<br>        M6,_,M5,_,M4,_,M1,_,<br>        M7,_,M6,M7,M5,_,_,_,<br>        M6,_,H1,_,H1,_,H1,_,<br>        M3,_,M5,M6,M6,_,M6,_,<br>        M6,M5,M4,M4,M4,_,_,_,<br>        M2,M2,M2,M3,_,M2,_,_,_,<br>        H1,_,H1,_,H1,_,_,_,<br>        M3,_,M5,M6,M5,_,_,_,<br>        M6,_,M5,_,M4,_,M1,_,<br>        M7,_,M6,M7,M5,_,_,_,<br>        M6,_,H1,_,H1,_,H1,_,<br>        M3,M3,M5,M6,M6,_,_,_,<br>        M2,M3,M5,M5,M5,M5,M5,M5,_,<br>        H2,_,H2,_,M6,_,M7,_,<br>        H1,H1,H1,H1,H1,H1,<br>    &#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i : QFNU)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (i == LOW_SPEED || i == HIGH_SPEED || i == MIDDLE_SPEED)<br>        &#123;<br>            sleep = i;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span>) &#123; sleep = <span class="hljs-number">150</span>; <span class="hljs-keyword">continue</span>; &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">700</span>) &#123; <span class="hljs-built_in">Sleep</span>(<span class="hljs-number">150</span>); <span class="hljs-keyword">continue</span>; &#125;<br>        <span class="hljs-keyword">if</span> (i == _)<br>        &#123;<br>            <span class="hljs-built_in">Sleep</span>(<span class="hljs-number">300</span>);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        voice = (volume &lt;&lt; <span class="hljs-number">16</span>) + ((i) &lt;&lt; <span class="hljs-number">8</span>) + <span class="hljs-number">0x90</span>;<br>        <span class="hljs-built_in">midiOutShortMsg</span>(handle, voice);<br>        cout &lt;&lt; voice &lt;&lt; endl;<br>        <span class="hljs-built_in">Sleep</span>(sleep);<br>    &#125;<br>    <span class="hljs-built_in">midiOutClose</span>(handle);<br>&#125;<br></code></pre></td></tr></table></figure><p>最后用int main主函数调用就可以</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">QFNU</span>();<span class="hljs-comment">//犁牛之子</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> comment(lib,<span class="hljs-string">&quot;winmm.lib&quot;</span>)</span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Scale</span><br><br>&#123;<br><br>    Rest = <span class="hljs-number">0</span>, C8 = <span class="hljs-number">108</span>, B7 = <span class="hljs-number">107</span>, A7s = <span class="hljs-number">106</span>, A7 = <span class="hljs-number">105</span>, G7s = <span class="hljs-number">104</span>, G7 = <span class="hljs-number">103</span>, F7s = <span class="hljs-number">102</span>, F7 = <span class="hljs-number">101</span>, E7 = <span class="hljs-number">100</span>,<br><br>    D7s = <span class="hljs-number">99</span>, D7 = <span class="hljs-number">98</span>, C7s = <span class="hljs-number">97</span>, C7 = <span class="hljs-number">96</span>, B6 = <span class="hljs-number">95</span>, A6s = <span class="hljs-number">94</span>, A6 = <span class="hljs-number">93</span>, G6s = <span class="hljs-number">92</span>, G6 = <span class="hljs-number">91</span>, F6s = <span class="hljs-number">90</span>, F6 = <span class="hljs-number">89</span>,<br><br>    E6 = <span class="hljs-number">88</span>, D6s = <span class="hljs-number">87</span>, D6 = <span class="hljs-number">86</span>, C6s = <span class="hljs-number">85</span>, C6 = <span class="hljs-number">84</span>, B5 = <span class="hljs-number">83</span>, A5s = <span class="hljs-number">82</span>, A5 = <span class="hljs-number">81</span>, G5s = <span class="hljs-number">80</span>, G5 = <span class="hljs-number">79</span>, F5s = <span class="hljs-number">78</span>,<br><br>    F5 = <span class="hljs-number">77</span>, E5 = <span class="hljs-number">76</span>, D5s = <span class="hljs-number">75</span>, D5 = <span class="hljs-number">74</span>, C5s = <span class="hljs-number">73</span>, C5 = <span class="hljs-number">72</span>, B4 = <span class="hljs-number">71</span>, A4s = <span class="hljs-number">70</span>, A4 = <span class="hljs-number">69</span>, G4s = <span class="hljs-number">68</span>, G4 = <span class="hljs-number">67</span>,<br><br>    F4s = <span class="hljs-number">66</span>, F4 = <span class="hljs-number">65</span>, E4 = <span class="hljs-number">64</span>, D4s = <span class="hljs-number">63</span>, D4 = <span class="hljs-number">62</span>, C4s = <span class="hljs-number">61</span>, C4 = <span class="hljs-number">60</span>, B3 = <span class="hljs-number">59</span>, A3s = <span class="hljs-number">58</span>, A3 = <span class="hljs-number">57</span>, G3s = <span class="hljs-number">56</span>,<br><br>    G3 = <span class="hljs-number">55</span>, F3s = <span class="hljs-number">54</span>, F3 = <span class="hljs-number">53</span>, E3 = <span class="hljs-number">52</span>, D3s = <span class="hljs-number">51</span>, D3 = <span class="hljs-number">50</span>, C3s = <span class="hljs-number">49</span>, C3 = <span class="hljs-number">48</span>, B2 = <span class="hljs-number">47</span>, A2s = <span class="hljs-number">46</span>, A2 = <span class="hljs-number">45</span>,<br><br>    G2s = <span class="hljs-number">44</span>, G2 = <span class="hljs-number">43</span>, F2s = <span class="hljs-number">42</span>, F2 = <span class="hljs-number">41</span>, E2 = <span class="hljs-number">40</span>, D2s = <span class="hljs-number">39</span>, D2 = <span class="hljs-number">38</span>, C2s = <span class="hljs-number">37</span>, C2 = <span class="hljs-number">36</span>, B1 = <span class="hljs-number">35</span>, A1s = <span class="hljs-number">34</span>,<br><br>    A1 = <span class="hljs-number">33</span>, G1s = <span class="hljs-number">32</span>, G1 = <span class="hljs-number">31</span>, F1s = <span class="hljs-number">30</span>, F1 = <span class="hljs-number">29</span>, E1 = <span class="hljs-number">28</span>, D1s = <span class="hljs-number">27</span>, D1 = <span class="hljs-number">26</span>, C1s = <span class="hljs-number">25</span>, C1 = <span class="hljs-number">24</span>, B0 = <span class="hljs-number">23</span>,<br><br>    A0s = <span class="hljs-number">22</span>, A0 = <span class="hljs-number">21</span><br><br>&#125;;<br><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Voice</span><br><br>&#123;<br><br>    X1 = C2, X2 = D2, X3 = E2, X4 = F2, X5 = G2, X6 = A2, X7 = B2,<br><br>    L1 = C3, L2 = D3, L3 = E3, L4 = F3, L5 = G3, L6 = A3, L7 = B3,<br><br>    M1 = C4, M2 = D4, M3 = E4, M4 = F4, M5 = G4, M6 = A4, M7 = B4,<br><br>    H1 = C5, H2 = D5, H3 = E5, H4 = F5, H5 = G5, H6 = A5, H7 = B5,<br><br>    LOW_SPEED = <span class="hljs-number">500</span>, MIDDLE_SPEED = <span class="hljs-number">400</span>, HIGH_SPEED = <span class="hljs-number">300</span>,<br><br>    _ = <span class="hljs-number">0XFF</span><br><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span>   <span class="hljs-title">QFNU</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    HMIDIOUT handle;<br>    <span class="hljs-built_in">midiOutOpen</span>(&amp;handle, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, CALLBACK_NULL);<br>    <span class="hljs-type">int</span> volume = <span class="hljs-number">0x7f</span>;<br>    <span class="hljs-type">int</span> voice = <span class="hljs-number">0x0</span>;<br>    <span class="hljs-type">int</span> sleep = <span class="hljs-number">300</span>;<br>    <span class="hljs-type">int</span> QFNU[] =<br>    &#123;<br>         M1,_,M1,_,M1,_,M2,_,<br>        M3,_,M5,_,M5,_,_,_,<br>        M6,_,M6,_,M5,_,M3,_,<br>        M1,_,M2,M3,M2,_,_,_,<br>        M3,_,M3,_,M5,_,M5,_,<br>        M3,_,M2,_,M1,_,L6,_,<br>        L5,L6,M1,M2,M3,_,M5,_,<br>        M2,_,_,_,_,_,<br>        M1,_,M1,_,M1,_,M2,_,<br>        M3,_,M5,_,M5,_,_,<br>        M6,_,M6,_,M5,_,M3,_,<br>        M1,_,M2,M3,M2,_,_,<br>        M3,_,M3,_,M5,_,M5,_,<br>        M3,_,M2,_,M1,_,L6,_,<br>        L5,L6,M1,M2,M3,_,M2,_,<br>        M1,_,_,_,_,<br>        H1,_,H1,_,H1,_,_,_,<br>        M3,_,M5,M6,M5,_,_,_,<br>        M6,_,M5,_,M4,_,M1,_,<br>        M7,_,M6,M7,M5,_,_,_,<br>        M6,_,H1,_,H1,_,H1,_,<br>        M3,_,M5,M6,M6,_,M6,_,<br>        M6,M5,M4,M4,M4,_,_,_,<br>        M2,M2,M2,M3,_,M2,_,_,_,<br>        H1,_,H1,_,H1,_,_,_,<br>        M3,_,M5,M6,M5,_,_,_,<br>        M6,_,M5,_,M4,_,M1,_,<br>        M7,_,M6,M7,M5,_,_,_,<br>        M6,_,H1,_,H1,_,H1,_,<br>        M3,M3,M5,M6,M6,_,_,_,<br>        M2,M3,M5,M5,M5,M5,M5,M5,_,<br>        H2,_,H2,_,M6,_,M7,_,<br>        H1,H1,H1,H1,H1,H1,<br>    &#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i : QFNU)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (i == LOW_SPEED || i == HIGH_SPEED || i == MIDDLE_SPEED)<br>        &#123;<br>            sleep = i;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span>) &#123; sleep = <span class="hljs-number">150</span>; <span class="hljs-keyword">continue</span>; &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">700</span>) &#123; <span class="hljs-built_in">Sleep</span>(<span class="hljs-number">150</span>); <span class="hljs-keyword">continue</span>; &#125;<br>        <span class="hljs-keyword">if</span> (i == _)<br>        &#123;<br>            <span class="hljs-built_in">Sleep</span>(<span class="hljs-number">300</span>);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        voice = (volume &lt;&lt; <span class="hljs-number">16</span>) + ((i) &lt;&lt; <span class="hljs-number">8</span>) + <span class="hljs-number">0x90</span>;<br>        <span class="hljs-built_in">midiOutShortMsg</span>(handle, voice);<br>        cout &lt;&lt; voice &lt;&lt; endl;<br>        <span class="hljs-built_in">Sleep</span>(sleep);<br>    &#125;<br>    <span class="hljs-built_in">midiOutClose</span>(handle);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">QFNU</span>();<span class="hljs-comment">//犁牛之子</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="后期处理"><a href="#后期处理" class="headerlink" title="后期处理"></a>后期处理</h1><p>简单做个视频剪辑一下</p><p>被曲阜师范大学官方抖音号发表咯！~</p><p>复制口令戳下面代码块左上角↓</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-number">7.94</span> SYm:/ 简单用代码做个音乐，一起看看美好的曲园！# 曲阜师范大学 # 代码 # 编程 # 我在大学等你  https:<span class="hljs-comment">//v.douyin.com/iJnnEGjb/ 复制此链接，打开Dou音搜索，直接观看视频！</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>QFNU</category>
      
    </categories>
    
    
    <tags>
      
      <tag>QFNU</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CTF常用刷题平台</title>
    <link href="/2023/08/25/CTF%E5%B8%B8%E7%94%A8%E5%88%B7%E9%A2%98%E5%B9%B3%E5%8F%B0/"/>
    <url>/2023/08/25/CTF%E5%B8%B8%E7%94%A8%E5%88%B7%E9%A2%98%E5%B9%B3%E5%8F%B0/</url>
    
    <content type="html"><![CDATA[<p>1.NSSCTF，适合新手</p><p><a href="https://www.nssctf.cn/index">主页 | NSSCTF</a></p><p>2.攻防世界，适合新手</p><p><a href="https://adworld.xctf.org.cn/home/index">攻防世界 (xctf.org.cn)</a></p><p>3.CTFshow，可以进阶</p><p><a href="https://ctf.show/">ctf.show</a></p><p>4.buuctf，新手进阶都可以</p><p><a href="https://buuoj.cn/">BUUCTF在线评测 (buuoj.cn)</a></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>平台</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>曲阜师范大学日常问题汇总</title>
    <link href="/2023/08/25/QFNU_Survival_Handbook/"/>
    <url>/2023/08/25/QFNU_Survival_Handbook/</url>
    
    <content type="html"><![CDATA[<p>正在编辑……预计一学年完成</p><p>ps: 请大家看一下这个项目 <a href="https://w1ndys.top/2023/09/01/QFNU_Course_Selection_Guide_North/">曲阜师范大学选课指北项目 - hi！这里是 W1ndys 的小站</a></p><hr><p>喜报！《曲阜师范大学生存手册》得到 17 级师哥的支持，同意授权《曲阜师范大学曲阜校区常见问题》使用和修改，极大加快项目的进度</p><p>本文基于 <a href="https://share.weiyun.com/qcUYtvjq">17 物理 nnnn《曲阜师范大学曲阜校区常见问题》编写</a></p><p>喜报！本项目得到 22 文院吉祥物鼠鼠的支持，提供更多数据</p><p>喜报！本项目得到 22 化院匿名同学的支持，提供更多数据</p><hr><p>有任何想征求的信息&#x2F;想补充的信息可以填这个问卷收集：<a href="https://wj.qq.com/s2/13050410/11e8/">https://wj.qq.com/s2/13050410/11e8/</a></p><hr><h1 id="关于称呼"><a href="#关于称呼" class="headerlink" title="关于称呼"></a>关于称呼</h1><p>一般在曲师大是以 <strong>“师哥师姐师弟师妹”</strong> 相称而不是 <strong>“学长学姐学弟学妹”</strong>，可能因为毕竟是师范大学嘛 23333，即使现在不习惯，入学之后也会慢慢这么改口的。</p><p>第一，这也就意味着如果有人自称学长&#x2F;学姐主动加好友 or 向你搭讪，那么请警惕一些，他有七成可能不是曲师大本校的，并且是想向你推销笔&#x2F;清洁剂等乱七八糟的东西；剩下三成即使称呼正确(暗号对上了)，他也有可能是校园卡代理，想让你办卡他拿提成；或者更严重一点，人家看你好看馋你身子……</p><p>第二，这些称呼只是为了礼貌起见，本身就是叫了更熟络、不叫也没事的——但如果有不熟的人发表类似“来叫个师哥我听听”“你见了我连师哥&#x2F;师姐也不叫，真的很不礼貌”这种很认真、并非开玩笑的言论的，只能说这种助长官僚作风的同学还是不要再进一步相处了，快跑！</p><h1 id="军训问题"><a href="#军训问题" class="headerlink" title="军训问题"></a>军训问题</h1><h2 id="1、军训什么时候开始？能不参加嘛？"><a href="#1、军训什么时候开始？能不参加嘛？" class="headerlink" title="1、军训什么时候开始？能不参加嘛？"></a>1、军训什么时候开始？能不参加嘛？</h2><p>预计今年新生入学时间是 9 月 10 日、11 日，不出意外的话军训会在 12 号开始。很多人问关于军训能否不去的问题……sadly, 军训可以说是你在大学里要修的第一个学分：通识实践教学模块、必修课程、1 学分，所以如果没有意外情况的话所有同学都是要参加军训的。</p><p>意外情况包括但不局限于：</p><p>因身体疾病等无法军训新生入学体检会在军训期间进行，如果检查出影响运动的问题学院会让你见习；同时如果你身体有不适合军训的疾病或不适，如先天心脏病、骨折等，需出示病例向辅导员和教官告明请假。</p><p>因天气原因无法进行军训：仅限于暴雨天气以及突发自然灾害（这个一般不会有）等，毕竟以前小雨天也是会进行军训的。</p><h2 id="2、军训多长时间？"><a href="#2、军训多长时间？" class="headerlink" title="2、军训多长时间？"></a>2、军训多长时间？</h2><p>军训时间跨度一般为两周左右（实际可能不到两周）</p><h2 id="3、军训都干些啥啊？"><a href="#3、军训都干些啥啊？" class="headerlink" title="3、军训都干些啥啊？"></a>3、军训都干些啥啊？</h2><p>​    首先，军训不需要自带枪支！在分连队之前一般是同学院&#x2F;专业的在一起军训，这期间的训练内容一般是站军姿、一些常用口号、以及军体拳。后期会分成表演方队和检阅方队：表演方队是按照擒敌拳、棍、齐步跑步、内务等不同的种类划分并训练，划分标准得看个人表现以及你们教官啦，军训汇演的时候自己是什么表演方队就表演啥——我至今无法忘怀总教官一声令下，内务连一大群人抱着铺盖卷跑上去表演叠被子的场面；检阅方队相对咸鱼一点，继续训练站军姿啥的，到时候军训汇演就是站在那里喊口号并接受检阅的。</p><p>​军训期间的晚上一般是集合在一起唱红歌，期间可能会有部分社团、学生会部门去进班宣传。</p><h2 id="4、军训要准备啥？"><a href="#4、军训要准备啥？" class="headerlink" title="4、军训要准备啥？"></a>4、军训要准备啥？</h2><p>​准备好脑子！虽然军训教官看起来都很严厉，但是他们其实对自己连队都很温柔的，体罚之类的事情很少很少，但前提是你别干不该干的事！</p><p>​然后是防晒，男生女生如果不想在很长一段时间内丧失择偶权的话建议还是准备好防晒！由于军训的时候要把头发扎起来，所以据女同志建议，涂防晒的时候包括耳朵也要涂到！</p><p>​水杯，军训的时候天气很热，并且不是中学体育课那种想去喝水就去喝水，而是你们教官会规定时间按秩序去喝水……建议搞一个大点的保温杯之类，接凉水放在那也不至于被太阳晒温。水可以自带，学院学生会也会提供饮用水供休息间歇接取饮用。</p><h2 id="5、军训需要统一着装嘛？"><a href="#5、军训需要统一着装嘛？" class="headerlink" title="5、军训需要统一着装嘛？"></a>5、军训需要统一着装嘛？</h2><p>​那必然需要统一着装。从头到脚甚至到袜子都要统一。</p><p>​袜子的话可以提前准备好两到三双，一般是黑色、可以包住脚踝的长袜（具体颜色到时候会通知），包住脚踝一是为了防晒，二是为了防止扭伤，但是一般要求全部穿黑色长袜</p><p>​女生要用黑色头绳把头发扎起来，染了色的最好藏在帽子里不要露出来。</p><p>​军训服装是统一订购的，包括内衬、外套、帽子、鞋子以及军训时使用的马扎，具体订购方式以及价格见随通知书发放的入学须知。</p><p>​鞋子，鞋底很硬，建议不管是男生还是女生都要准备好鞋垫。以前有买卫生巾垫在里边的，吸汗且软效果很好，但是一定要好好粘住不要掉出来，不然就尴尬了简直社死现场。</p><h2 id="6、军训期间会查宿舍嘛？"><a href="#6、军训期间会查宿舍嘛？" class="headerlink" title="6、军训期间会查宿舍嘛？"></a>6、军训期间会查宿舍嘛？</h2><p>​    军训期间会查宿舍的，而且很严，一般查完军训期间就不是很严了，到了大二会变得更松，因为内务也算是军训的一部分，被子要叠豆腐块，床上用品也需要统一（这种时候不统一订购被褥的可能就比较难过了）。</p><h2 id="7、还有没有其他需要注意的？"><a href="#7、还有没有其他需要注意的？" class="headerlink" title="7、还有没有其他需要注意的？"></a>7、还有没有其他需要注意的？</h2><p>​军训最好不要带手机，带了也没法玩嘛毕竟。军训服是没有口袋的，装袖子里一不小心还会摔坏。当然为了买饭方便带了也没事，在训练开始之前交给自己教官代为保管就好。</p><p>​    女生不要化妆，别美甲，别戴饰品。有那种化了眉去军训，被教官搓掉一条，顶着剩下的一条眉毛军训的先例 23333；男生不必非得留特别短的头发，留长发的话能戴的下帽子就可以。</p><p>​    每天军训出门的时候最好等你的舍友一起，也是增进感情和理解的好机会。别忘了带好宿舍钥匙饭卡啥的，如果没带手机，那甚至还可以揣点现金方便买饭。军训解散了还需要排队回去，中途不能随意离队哦。</p><h1 id="宿舍问题"><a href="#宿舍问题" class="headerlink" title="宿舍问题"></a>宿舍问题</h1><p>目前（2023 年 9 月 12 日）学校宿舍有新校区 1-8 号楼八座，西公寓 1-6 六座楼，校三校八校九，校一校二</p><h2 id="1、被褥可以自带嘛？"><a href="#1、被褥可以自带嘛？" class="headerlink" title="1、被褥可以自带嘛？"></a>1、被褥可以自带嘛？</h2><p>原则上说可以自带，但是推荐跟学校统一订购，一是为了到时候来学校方便，二是军训时候检查内务需要被褥什么的一致。学校订购的包括夏凉被、厚棉被、薄被子各一床，床单两张，褥子两床，枕巾两条，枕头一个，枕套一个，还有一个蚊帐。默认是统一订购的，具体价格以及取消订购方式具体见新生入学须知。</p><h2 id="2、宿舍有无线网络-校园网嘛？"><a href="#2、宿舍有无线网络-校园网嘛？" class="headerlink" title="2、宿舍有无线网络&#x2F;校园网嘛？"></a>2、宿舍有无线网络&#x2F;校园网嘛？</h2><p>很遗憾，无线网络以及网线并不是宿舍标配，建议和舍友商量好是否要扯网线后去校内移动营业厅咨询相关费用。（自北公寓搬到新校区以后，目前来看校内已不允许拉网线）如果使用学校配发的手机卡的话，还可以去校内移动营业厅办理校园网业务，手机可以直连校园网。另外关于校园网，没有选课必须用的说法(如果必须用校园网才能选课的话那 22 级疫情延期开学在家里选课怎么解释)，目前来看一学期一两次的心理测试是需要校园网的，其余无限制，借一个就行，不想欠情分去群里找个人一两块租一个也行。办不办校园网还是看个人所需</p><blockquote><p><span style="color:#FF0000;"> 应国家网络安全法规定，使用校园网等公共网络时为了做安全追踪，禁止开热点，禁止使用路由器、模拟机、虚拟器、VPN、万能钥匙、360WiFi、猎豹 WiFi、手游助手、游戏加速器、信号桥等软件；手机上双 WiFi 加速和 WiFi+功能不要开启。黑名单两个小时后自动解除，请自觉遵守相关法律法规，文明上网。</span></p></blockquote><p><img src="https://s1.ax1x.com/2023/09/12/pPg5jP0.md.jpg" srcset="/img/loading.gif" lazyload alt="关于校园网设备_图源: 22 文院吉祥物鼠鼠"></p><h2 id="3、宿舍收水电费嘛？"><a href="#3、宿舍收水电费嘛？" class="headerlink" title="3、宿舍收水电费嘛？"></a>3、宿舍收水电费嘛？</h2><p>每个宿舍不一样，新校区是统一用蔚来校园的系统</p><h2 id="4、宿舍床位是怎么分的？"><a href="#4、宿舍床位是怎么分的？" class="headerlink" title="4、宿舍床位是怎么分的？"></a>4、宿舍床位是怎么分的？</h2><p>已知宿舍房间是学院分好的，而床位则是先到先得——先去报道并到达宿舍的可以自己挑空着的铺。</p><h2 id="5、宿舍可以用吹风机嘛？"><a href="#5、宿舍可以用吹风机嘛？" class="headerlink" title="5、宿舍可以用吹风机嘛？"></a>5、宿舍可以用吹风机嘛？</h2><p>学生宿舍内不可以使用大功率违规电器如卷发棒吹风机电热毯等，由于部分宿舍电路老化，使用大功率电器很有可能造成跳闸等事故。建议入学后仔细阅读相关材料。</p><h2 id="6、宿舍里不能用吹风机的话，洗完头该怎么吹干呢？"><a href="#6、宿舍里不能用吹风机的话，洗完头该怎么吹干呢？" class="headerlink" title="6、宿舍里不能用吹风机的话，洗完头该怎么吹干呢？"></a>6、宿舍里不能用吹风机的话，洗完头该怎么吹干呢？</h2><p>宿舍楼基本是每层楼有一个或两个公共洗刷间，配备一台投币式&#x2F;扫码用吹风机（系统不同收费不同</p><h2 id="7、有关于检查宿舍卫生-宿舍会检查卫生嘛？"><a href="#7、有关于检查宿舍卫生-宿舍会检查卫生嘛？" class="headerlink" title="7、有关于检查宿舍卫生&#x2F;宿舍会检查卫生嘛？"></a>7、有关于检查宿舍卫生&#x2F;宿舍会检查卫生嘛？</h2><p>一般是每周三查宿舍，大一大二大三都查，只不过严格程度不同而已。具体要求入学后会告知。</p><h2 id="8、宿舍会查晚归吗？"><a href="#8、宿舍会查晚归吗？" class="headerlink" title="8、宿舍会查晚归吗？"></a>8、宿舍会查晚归吗？</h2><p>宿舍不定期查晚归，夜不归宿会扣除一定综合素质分，这个分数只与评奖评优挂钩，不担心奖学金的话可以无视。同时图书馆等校内设施是有关闭时间的，不要想着晚上在学校里某个地方通宵学习……</p><h2 id="9、宿舍里可以挂床帘嘛？"><a href="#9、宿舍里可以挂床帘嘛？" class="headerlink" title="9、宿舍里可以挂床帘嘛？"></a>9、宿舍里可以挂床帘嘛？</h2><p>可以挂床帘，但大一最好别挂，挂了的话检查卫生需要拆下来，过于麻烦。</p><h2 id="10、洗澡都是大澡堂嘛？"><a href="#10、洗澡都是大澡堂嘛？" class="headerlink" title="10、洗澡都是大澡堂嘛？"></a>10、洗澡都是大澡堂嘛？</h2><p>因宿舍而异。新校区独卫独浴，其他宿舍暂时不知道</p><h1 id="常用快递站营业时间及收件类型-包含打印社，摆渡车等时间"><a href="#常用快递站营业时间及收件类型-包含打印社，摆渡车等时间" class="headerlink" title="常用快递站营业时间及收件类型(包含打印社，摆渡车等时间)"></a>常用快递站营业时间及收件类型(包含打印社，摆渡车等时间)</h1><blockquote><p>特别致谢：本项数据由 22 文院吉祥物鼠鼠独立整理</p></blockquote><p>编者的话：第一次编辑时间 2023.9.10（快递站时间都是去店里问的，初步奠定雏形。）</p><p>第二次编辑时间 2023.9.15（添加了收件种类），（打印店涨价到 0.15 一张了）</p><h2 id="北门校外快递："><a href="#北门校外快递：" class="headerlink" title="北门校外快递："></a>北门校外快递：</h2><h3 id="曲师大北路菜鸟驿站-教授花园菜鸟驿站【北门左边】："><a href="#曲师大北路菜鸟驿站-教授花园菜鸟驿站【北门左边】：" class="headerlink" title="曲师大北路菜鸟驿站&#x2F;教授花园菜鸟驿站【北门左边】："></a>曲师大北路菜鸟驿站&#x2F;教授花园菜鸟驿站【北门左边】：</h3><p>营业时间：8: 30 → 19: 30 <strong><font color='red'>（最新时间 8：00 → 20：00）</font></strong></p><p>联系电话：13563727610</p><p>收件：只收申通快递</p><h3 id="曲师大北门菜鸟驿站【北门右边】："><a href="#曲师大北门菜鸟驿站【北门右边】：" class="headerlink" title="曲师大北门菜鸟驿站【北门右边】："></a>曲师大北门菜鸟驿站【北门右边】：</h3><p>营业时间：早上 9: 00 →晚上 8: 00 点</p><p>收件：中通，邮政</p><h3 id="北门西侧京东快递："><a href="#北门西侧京东快递：" class="headerlink" title="北门西侧京东快递："></a>北门西侧京东快递：</h3><p>早上 9: 00 →晚上 7：00【寄件电话：17865718685】</p><h2 id="曲师大东门邮政："><a href="#曲师大东门邮政：" class="headerlink" title="曲师大东门邮政："></a>曲师大东门邮政：</h2><h3 id="东门邮政快递"><a href="#东门邮政快递" class="headerlink" title="东门邮政快递"></a>东门邮政快递</h3><p>8: 00 → 12: 00；14: 00 → 17: 00</p><p>Tips：如果寄邮政快递【寄快递带好身份证】【纺织袋或者盒子（没有的话纺织带四块钱一个)】</p><p><strong>！邮政银行：周天不上班。营业时间：8: 30-17: 00（大部分业务 17: 00 左右下班）</strong></p><h2 id="曲师大百意超市快递："><a href="#曲师大百意超市快递：" class="headerlink" title="曲师大百意超市快递："></a>曲师大百意超市快递：</h2><h3 id="百意里菜鸟驿站"><a href="#百意里菜鸟驿站" class="headerlink" title="百意里菜鸟驿站"></a>百意里菜鸟驿站</h3><p>营业时间：8：30 → 17：30 </p><p>！<strong>【忙的时候也会开到晚上 8，9 点】</strong></p><p>收件：圆通、申通、韵达、极兔</p><p>联系方式：13345197333；投诉热线：9519666】</p><h3 id="百意超市右边顺丰快递："><a href="#百意超市右边顺丰快递：" class="headerlink" title="百意超市右边顺丰快递："></a>百意超市右边顺丰快递：</h3><p>营业时间：早上 9: 00 → 18: 00</p><p>联系电话：17753796345</p><h2 id="曲师大西公寓快递："><a href="#曲师大西公寓快递：" class="headerlink" title="曲师大西公寓快递："></a>曲师大西公寓快递：</h2><h3 id="开水房熊猫快收（西公寓-1-号楼，开水房对面）"><a href="#开水房熊猫快收（西公寓-1-号楼，开水房对面）" class="headerlink" title="开水房熊猫快收（西公寓 1 号楼，开水房对面）;"></a>开水房熊猫快收（<strong>西公寓 1 号楼，开水房对面</strong>）;</h3><p>营业时间：早上 9: 00 → 21: 30</p><p>寄快递：韵达</p><p>收快递：邮政（普通） </p><p>自取点：多多买菜、美团买菜、淘菜菜</p><h3 id="西公寓老菜鸟驿站-西公寓-2-号楼菜鸟驿站"><a href="#西公寓老菜鸟驿站-西公寓-2-号楼菜鸟驿站" class="headerlink" title="西公寓老菜鸟驿站&#x2F;西公寓 2 号楼菜鸟驿站"></a>西公寓老菜鸟驿站&#x2F;西公寓 2 号楼菜鸟驿站</h3><p>营业时间：9: 00 → 19: 00</p><p>联系方式：13853741217&#x2F;&#x2F;联系方式：13853711358</p><p>收件：京东、德邦</p><p>【图二第 7 条，指送货上楼】</p><h3 id="西公寓浴池旁顺丰快递"><a href="#西公寓浴池旁顺丰快递" class="headerlink" title="西公寓浴池旁顺丰快递"></a>西公寓浴池旁顺丰快递</h3><p>营业时间：9: 00 → 18: 30</p><p>联系电话：18954083793</p><h3 id="西公寓西南门菜鸟驿站："><a href="#西公寓西南门菜鸟驿站：" class="headerlink" title="西公寓西南门菜鸟驿站："></a>西公寓西南门菜鸟驿站：</h3><p>营业时间：早上 8: 30 →晚上 8 点前</p><p>收件：申通，圆通，中通，韵达【邮政、顺丰不收】</p><p>PS：【门口告示写的是到晚上 6；30，阿姨说不会那么早关门】</p><h2 id="其他："><a href="#其他：" class="headerlink" title="其他："></a>其他：</h2><p>(1)摆渡车：早上 7：00 →晚上 10：00</p><p>(2)瑞幸咖啡：7：30 → 20：30</p><p>(3)中国移动营业厅【大活旁边】：8：00 → 17：30</p><p>(4)西公寓友好打印社：</p><p>营业时间早上 6: 30-晚上 11 点前（10: 40&#x2F;10: 50）</p><p>联系电话：15563718990</p><p>(5)西公寓浴池旁，友谊打印：</p><p>营业时间：6: 30-晚上 11：00</p><p>联系电话：15689763591</p><p>(5)生活区北门雅迪：13853775048</p><p><a href="https://z1.ax1x.com/2023/09/16/pPfu08e.png">查看原图</a></p><h1 id="北门药店营业时间"><a href="#北门药店营业时间" class="headerlink" title="北门药店营业时间"></a>北门药店营业时间</h1><blockquote><p>特别致谢：本项数据由 22 文院吉祥物鼠鼠独立整理</p></blockquote><ol><li><p>同志药店：7: 30-22: 00</p></li><li><p>师大北卫生所 7: 30-21: 00【中午一直都有人】</p></li><li><p>教授花园诊所：7: 30-21: 30</p></li><li><p>广圣堂大药店：7: 30-21: 30</p></li><li><p>漱玉平民大药房：7: 30-22: 00</p></li><li><p>仁和堂药店：7: 30-21: 30</p></li><li><p>生活区北门同志大药店：7: 30-22: 00 <strong>【联系电话：15864131314】</strong></p></li></ol><p> <a href="https://z1.ax1x.com/2023/09/16/pPfuwCD.png">查看原图</a></p><h1 id="曲阜师范大学作息时间表"><a href="#曲阜师范大学作息时间表" class="headerlink" title="曲阜师范大学作息时间表"></a>曲阜师范大学作息时间表</h1><p><img src="https://s1.ax1x.com/2023/09/12/pPgy0O0.md.jpg" srcset="/img/loading.gif" lazyload alt="图源_22 文院吉祥物鼠鼠"></p><h1 id="校区地图"><a href="#校区地图" class="headerlink" title="校区地图"></a>校区地图</h1><center>    <img src="https://s1.ax1x.com/2023/09/12/pPgsjdU.jpg" srcset="/img/loading.gif" lazyload alt="曲阜老校区地图1" style="zoom:25%;" />    <img src="https://s1.ax1x.com/2023/09/12/pPgsvoF.jpg" srcset="/img/loading.gif" lazyload alt="曲阜老校区地图2" style="zoom:25%;" />    <img src="https://s1.ax1x.com/2023/09/12/pPgszi4.jpg" srcset="/img/loading.gif" lazyload alt="曲阜新校区地图1" style="zoom:25%;" />    <img src="https://s1.ax1x.com/2023/09/12/pPgsXZT.jpg" srcset="/img/loading.gif" lazyload alt="曲阜新校区地图2_图源:22文院吉祥物鼠鼠" style="zoom:25%;" />    <img src="https://s1.ax1x.com/2023/09/12/pPgsLLV.jpg" srcset="/img/loading.gif" lazyload alt="日照校区地图_图源:颜珞" style="zoom:25%;" /></center><h1 id="曲阜师范大学相关链接"><a href="#曲阜师范大学相关链接" class="headerlink" title="曲阜师范大学相关链接"></a>曲阜师范大学相关链接</h1><p>1.曲阜师范大学官网：<a href="https://www.qfnu.edu.cn/">https://www.qfnu.edu.cn/</a></p><p>2.曲阜师范大学本科招生网：<a href="https://zsb.qfnu.edu.cn/static/front/qfnu/basic/html_cms/">https://zsb.qfnu.edu.cn/static/front/qfnu/basic/html_cms/</a></p><p>3.曲阜师范大学研究生招生网：<a href="https://yjs.qfnu.edu.cn/zsgz.htm">https://yjs.qfnu.edu.cn/zsgz.htm</a></p><p>4.曲阜师范大学中国教师博物馆：<a href="https://tchmuseum.qfnu.edu.cn/">https://tchmuseum.qfnu.edu.cn/</a></p><p>5.edusrc_qfnu：<a href="https://src.sjtu.edu.cn/list/firm/4425">https://src.sjtu.edu.cn/list/firm/4425</a></p><p>6.曲阜师范大学教务登陆 <a href="http://zhjw.qfnu.edu.cn/sso.jsp">http://zhjw.qfnu.edu.cn/sso.jsp</a></p><p>7.曲阜师范大学教务处 <a href="https://jwc.qfnu.edu.cn/">https://jwc.qfnu.edu.cn/</a></p><p>8.曲阜师范大学新生网上报道系统 <a href="http://xuegong.qfnu.edu.cn/">http://xuegong.qfnu.edu.cn</a>: 8081&#x2F;</p><p>9.曲阜师范大学微博 <a href="https://www.weibo.com/qfnu1955">https://www.weibo.com/qfnu1955</a></p><p>10.曲阜师范大学抖音 <a href="https://www.douyin.com/user/MS4wLjABAAAAdMEnRhop5iHeGRtvxqG0KtTwpDXBjT1hbNwB7NyF6Do">https://www.douyin.com/user/MS4wLjABAAAAdMEnRhop5iHeGRtvxqG0KtTwpDXBjT1hbNwB7NyF6Do</a></p><p>11.曲阜师范大学沈秀清主任抖音 <a href="https://www.douyin.com/user/MS4wLjABAAAAlISK1oQ28Va76u1RJsM6qNxbCaxQbUvYNc4sULrE4n4">https://www.douyin.com/user/MS4wLjABAAAAlISK1oQ28Va76u1RJsM6qNxbCaxQbUvYNc4sULrE4n4</a></p><p>12.曲阜师范大学西校区实拍 <a href="https://www.douyin.com/video/7139723100697988366">https://www.douyin.com/video/7139723100697988366</a></p><p>13.曲阜师范大学高考历年分数线 <a href="https://zsb.qfnu.edu.cn/static/front/qfnu/basic/html_web/lnfs.html">https://zsb.qfnu.edu.cn/static/front/qfnu/basic/html_web/lnfs.html</a></p><h1 id="曲阜师范大学培养方案讲解"><a href="#曲阜师范大学培养方案讲解" class="headerlink" title="曲阜师范大学培养方案讲解"></a>曲阜师范大学培养方案讲解</h1><blockquote><p>本项由 22 化院夜雨听风独立完成，特别致谢 </p></blockquote><h2 id="曲阜师范大学培养方案讲解一"><a href="#曲阜师范大学培养方案讲解一" class="headerlink" title="曲阜师范大学培养方案讲解一"></a>曲阜师范大学培养方案讲解一</h2><p><a href="https://www.bilibili.com/video/BV1Sw411i7iP/?share_source=copy_web&vd_source=e8bb8e95b575ec9b96265a5fb293b364">曲阜师范大学培养方案讲解一_哔哩哔哩_bilibili</a></p><h2 id="曲阜师范大学培养方案讲解二"><a href="#曲阜师范大学培养方案讲解二" class="headerlink" title="曲阜师范大学培养方案讲解二"></a>曲阜师范大学培养方案讲解二</h2><p><a href="https://www.bilibili.com/video/BV19P411t7T2/?spm_id_from=333.788.recommend_more_video.-1&vd_source=e8bb8e95b575ec9b96265a5fb293b364">曲阜师范大学培养方案讲解二_哔哩哔哩_bilibili</a></p><h2 id="曲阜师范大学培养方案讲解（横版）"><a href="#曲阜师范大学培养方案讲解（横版）" class="headerlink" title="曲阜师范大学培养方案讲解（横版）"></a>曲阜师范大学培养方案讲解（横版）</h2><p>[曲阜师范大学培养方案讲解（横版）_哔哩哔哩_bilibili](<a href="https://www.bilibili.com/video/BV1CK4y1c7QQ/?spm_id_from">https://www.bilibili.com/video/BV1CK4y1c7QQ/?spm_id_from</a> &#x3D; 333.999.0.0&amp;vd_source &#x3D; e8bb8e95b575ec9b96265a5fb293b364)</p><h1 id="曲阜师范大学数学科学学院速通指南"><a href="#曲阜师范大学数学科学学院速通指南" class="headerlink" title="曲阜师范大学数学科学学院速通指南"></a>曲阜师范大学数学科学学院速通指南</h1><blockquote><p>本项由     独立完成，特别致谢</p></blockquote><p>在此我们重申，本指南旨在为想学基础数学的同学提供本科阶段的引导，包括但不限于：</p><p>1. 本科阶段基础课程的学习建议；</p><p>2. 进阶课程与向前沿对接的学习建议；</p><p>3. 数学资源的合理运用。</p><p>以上三点的第一点，旨在让同学们尽快从中学的思维过渡到真正学数学的思维，少走弯路，并谢绝成为 “名词党”。</p><p>第二点，进阶课程阶段才是加速学习的开始，此时同学们可能会对各种各样的知识都有兴趣，容易迷失方向，陷入东一榔头西一棒子的困境。结合第三点，我们希望本指南最后能做到拓宽同学们的学术眼界，培养学生的学术交流与鉴赏能力。</p><p>我们欢迎各方的批评指正。若您对本指南有改进的意见和建议，您可以 QQ&#x2F;微信告诉本指南的作者，或者发邮件到 657608788@qq。com. 若您有想要补充的内容，请您以 word 文档或 TeX 文 件等常用格式发到该邮箱。最后，祝各位读者同学们学业有成，事事顺心。</p><p>值此新春佳节之际，胡志安投资研究中心出品的基础数学修课指南也迎来了新版大放送！</p><p>当然我们必须强调：科学上网的同时谢绝一切冲塔行为！！！</p><p>前言</p><p>众所周知，曲阜师范大学数学科学学院官网上的基础数学方向培养计划每年更新，而课程学习上的具体困难、重点内容、选课建议没有明确列在培养计划中。在一些同学的倡议与组织下，胡志安山顶洞投资研究 中心认为有必要编写一套适用于中曲师大同学的基础数学课程学习指南。</p><p>这份学习指南旨在为中国科学技术大学想学习基础数学的同学们提供一些课程学习上的建议，包括但不仅限于：课程修读顺序、课程主要内容、教材与参考书的选取、课程的拓展方向以 及前沿知识简介。我们没有邀请任何老师参与编写这份指南。</p><p>（一）本指南的内容提要与精神纲领：</p><p><strong>1.</strong> 难度设置合理，谢绝拔苗助长</p><p>本学习指南只讲到 “本研贯通” 的水平为止，再往后同学们各有自己的研究兴趣方向，因此没有必要再进行指导。同时我们有必要声明，这份指南面向的是任何一个对基础数学感兴趣，并且在学习上愿意稳扎稳打而不好高骛远的曲师大同学，并不</p><p>是仅仅面向那些成绩非常好的大佬们（不是小子，你跟天才抬啥杠？人家一学期能学五门专业课，你能吗？）。指南中参考书的选取、课程内容的介绍均是按合理的课程难度给出建议或叙述。</p><p><strong>2.</strong> 理清学习顺序，合理运用资源</p><p>指南的第一部分给出了基于曲师大培养计划和课程设置的修课流程图。当然，这个流程图只是大致列了一下曲师大常年开设课程的修读顺序，所以也没必要完全按照流程来走，更没必要也没时间每个方向都学一遍。</p><p>第二部分则是介绍了网络上数学资源的合理运用方法，包括数学社区 MSE&#x2F;MO 的使用指南、学术资源的搜索、以及强调常用工具（例如 LaTeX）的重要性。</p><p><strong>3.</strong> 打牢基础知识，切勿一味图快</p><p>指南的第三部分介绍的是数学分析、高等代数这两大最基本、也是最重要的基础课。负责这两部分的作者在撰写学习建议时非常谨慎，因为这是数院任何一个学生（包括非基础数学方向）都必须迈过去的坎。我们不主张一开始就学得太难（你有那水平嘛，确实有一边学高代，一边学无穷维泛函的，但讲真话量力而行），也不建议过于重复性地大量刷题，更不建议一开始就强调过多的奇技淫巧。相反，我们认为积累实例、记忆并理解数分、线代的基本语言、 具体计算和证明方法是更加重要的。我们也不赞成在数学分析、线性代数的学习中就加入过多的实分析、泛函分析、拓扑学、微分流形的初步知识：它们可以作为阅读材料与拓展知识出现，但并不适合给大多数同学在初学阶段学习。与其蜻蜓点水地介绍这些所谓的 “升级知识”，不如先让同学们打好数分线代基本功之后直接去系统地学习深入知识。</p><p>Ps：本指南不包括 “解析几何”、”代数学基础” 两门课。</p><p><strong>4.</strong> 建立知识架构，形成自我理解</p><p>指南的第四部分介绍的是本科二、三年级的（必修）课程。相比数分高代而言，同学们会在这个阶段感到非常明显的难度提升。指南的这一部分主要是理清知识脉络，这样同学们在进行理解、计算、证明的时候就有了动机。同学们在学习这些课的时候，更重要的还是形成自己的理解，消化证明的技术并积累实例、建立知识架构，为后继学习做好准备。我们不建议在此阶段大量做题(当然完成作业题是基本)，参考书集中精力看 1-2 本，切勿囫囵吞枣（会有大批的学生在学完高代后不能理解特征值）。</p><p><strong>5.</strong> 摸索兴趣方向，迎来厚积薄发</p><p>指南的第五部分介绍的是本硕贯通课程，适合正常进度下大三、大四或是研究生低年级修读。我们着重强调，这一阶段才是真正适合加速学习的阶段：因为此时大家已经对那些基础知识产生了较好的理解，即将在知识层面迎来厚积薄发。此时，同学们应当根据自己的兴趣，结合培养计划要求进行学习。我们认为本硕贯通课理应快速承接本科课程，并且为同学们将来阅读文献专著、做问题提供必需的公共基础知识。本科生请抛下对 GPA 的执念（不是彻底抛弃的含义哈，GPA 太低毕不了业的呦），并开始考虑自己对什么方向感兴趣、具体感兴趣的点在哪里、以后可能进入什么领域。与此同时，也可以试着思考这些学科的 “核心问题” 是什么——数学家从来不会平白无故研究一个学科，每个学科发展的背后必有它的 leading problem.</p><p>（二）数学学习上需要注意的地方：</p><p><strong>1.</strong> 落实核心思想：不要跟风学习，学会独立思考</p><p>任何人、任何建议（包括这个指南）都有局限性。同学们在低年级尚未形成自己的兴趣的时候，请切记：不要看见别人（尤其某些巨佬）学了什么就觉得自己也该学这个东西。大部分同学心中可能的确有一个 “榜样” 存在其或多或少会影响到自己的选择，但不要把 “榜样” 奉为圭臬。 接触新的数学的过程中一定要有自己的思考，并通过不断的学习形成自己的理解，从而判断出自己的兴趣点到底在哪里。</p><p><strong>2.</strong> 初步学习之一：不要轻易放弃，学会自寻帮助</p><p>同学们不要因为学习遇到困难而气馁，更不要因为自己感觉问题过于 <strong>trivial</strong> 而害怕发问。近代数学家们一两百年的心血凝聚为同学们一两年的学习，说不难那是不可能的。不理解证明方法、做不出具体计算是数学学习过程中再正常不过的现象。遇到困难，你可以请教同学，也可以查阅书籍（例如一些有答案的书籍、其它参考书等）或者网络（例如谷歌, math stackexchange, math overflow 等等），切勿一味闷着头想！</p><p><strong>3.</strong> 初步学习之二：注重核心知识，谢绝奇技淫巧</p><p>同学们在学习数分线代时会在某些几十年前出版的习题集（包括全国大学生数学竞赛题）中遇到一些非常技巧化的题目。这些内容有相当一部分早已和数学发展脱节，纯粹就是把人故意考倒，同学们对此可以置之不理。同学们在学习基础课的时候不要让这些奇淫技巧掩盖真正核心的思想与方法。有时间琢磨这些无用之物，不如多去读一些拓展书籍。切记，沉迷于数分线代的奇技淫巧会对你未来眼界格局的塑造产生负面的影响！</p><p><strong>4.</strong> 初步学习之三：注重日常积累，不要做 “名词党”</p><p>同学们在学习基础知识的过程中往往学到的都是光鲜亮丽的优美结论，并时不时能见到一些极为巧妙的证明；但在欣赏 “数学之美” 的同时切勿陷入其中，切勿认为数学工作不应该有那些无比复杂的证明或是繁琐冗长的计算。事实上，前人们从零开始到最终证明这些漂亮的结论或是构建一个理论体系，背后 “堆积” 的默默无闻的 dirty work 的数量和复杂程度往往是难以想象的。以后打算从事研究的同学切记：干净利落的结论往往只是一个结果，而证明它背后需要的 dirty work 才是常态，同学们开始阅读一些比较新的文献之后就会对此有所体会。</p><p>同样，你会从这份指南上学到很多看上去 “高大上” 的名词。这并不是坏事，但更重要的是在本科前中期打下坚实的基本功，不要沦为一个只会说名词却对基本技术都一无所知的 “名词党”。有了扎实的基本功、足够的积累，到高年级或是博士生阶段，你才能够去真正体会与理解那些前沿的内容。基础不牢，地动山摇！（很多人，抽象代数学不明白都是高等代数欠下的风流债）</p><p><strong>5.</strong> 进阶学习之二：切勿囿于课本，探索核心问题</p><p>表面上看数学是根据所使用的方法分类的：分析、代数、几何、概率等等。但是在实际的数学研究中，你面对的是一个个未知的问题。一般来说，大部分的问题都来自于物理（化学、生物等）、几何、概率、信息、数论等领域，只不过解决他们的手段多种多样，衍生出了形形色色的数学理论。然而再抽象的数学，再复杂的定义，都必有引入这个对象的动机或者核心问题。因此学习过程中一定要去试图去了解 “源头所在”。下面罗列的这些就是很好的例子。</p><p>泛函分析：初学无一例外地都会觉得抽象和不知所云，然而很多技术实际上来自于对偏微分方程的研究。相似的结论总结出来便成了泛函分析的理论体系。</p><p>调和分析：奇异积分 C-Z 理论实际上来自于椭圆方程的 W 2; p 估计，非卷积奇异积分则来自于 Lipschitz domain 上的椭圆方程以及拟微分算子的研究，震荡积分理论则直接是(自由)色散方程的解，自然地又与傅立叶限制性估计问题产生联系。</p><p>纤维丛的联络：实质上来自于平行移动的概念，最早可以追溯到 Cartan 的活动标架法（别忘了 Cartan 可是李群大师）。</p><p>群上同调：实质上是来自于 Hopf 发现某一类特殊的空间，其同调由其基本群所完全决定（比如黎曼面（P 1 除外））。</p><p>举这些例子，实际上就想提醒大家：所有能留下名字的数学都起源于对具体且重要问题的研 究；不知道任何动机和例子的抽象学习，极度的容易遗忘。另一方面，若能挖掘出一个理论背后的动机或者核心问题，学习起来也会相对的愉悦轻松。学数学不是单纯地死记硬背与抄书，更需要你的直觉与判断力。</p><p><strong>6.</strong> 进阶学习之三：切勿局限 “方向”，本科只有 “倾向”</p><p>实际上几乎所有的老师也都持有这个观点。现实地讲，同学们以后做的方向很大程度上取决于你最后去深造的学校与想跟的导师，并非百分之百如你所愿。而从数学本身出发来看，不同的领域之间都是密切交织着的，很有可能将来就会碰到其它领域的知识点。例如：一个做几何拓扑的人很可能要去学习很深的代数几何知识来解决拓扑问题，(环面上)薛定谔方程的研究会用到解析数论的结果，流体力学中某些问题的研究工具来自于广义相对论的数学理论，调和分析中的震荡积分&#x2F;傅立叶限制性估计与几何测度论、解析数论甚至组合数学这种看上去毫不相关的领域有着非常紧密的联系。因此，本科期间切勿认为我就是学 <strong>XX</strong> 方向的，然后从不关心其他方向乃至下意识反感。这对未来的发展都会埋下隐患。</p><p><strong>7.</strong> 走向研究之一：前沿飞速发展，时刻跟进学习</p><p>信息时代的潮流下，学术界发展越来越快。如今具有发展前景的方向，其核心问题也许就在几年后被解决。所以同学们走向研究之后要时刻保持跟进学术界的发展并不断学习新知识，莫妄想学一套技术吃一辈子。</p><p><strong>9.</strong> 走向研究之二：正确选取课题，谨慎寻找导师</p><p>好的研究课题种类很多，但一定不是你自己瞎编条件造出来的问题，也一定不是照葫芦画瓢就能做出来的边角杂碎。而导师的重要性更不必多说：初期能在背后为你撑腰的人只有你的导师（可能还有你的同门前辈）。导师是否负责（这个不能强求，每个人最适合的导师类型也不一样），是否能给合适的课题与必要的引导，是否愿意为学生在找教职时帮一把，本身是否具有足够的能量，都是需要考量的因素。PhD+一站博士后至少是八年，因此同学们的眼光一定要放长远一些：在学习研究的过程中一定要不断地思考、探索，以便敏锐地察觉到哪些方向可能即将迎来蓬勃的发展。一旦意识到这是个可以开拓但尚未开拓的方向，就要果断地投入时间和精力，而不要原地踏步浪费青春。</p><p><strong>10.</strong> 走向研究之三：导师不是保姆，学会独立研究</p><p>导师是给你学术建议、导引的人，而不是你的监护人。从来不是 “导师说什么我就非得去做什么”，从来不是 “导师给的题目就是我要考虑的全部”。实际上导师的任务并不是给你布置作业，更不是天天指手画脚，而是随时准备解答你的具体问题，而最终的研究课题是要由你自己去完成的。你对某个课题有想法，可以咨询并参考（不是非要采纳）导师的意见，也可以自己先试试看，实在不行了再说。读一个 PhD 下来，要慢慢从导师眼中的 “学生” 上升为 “合作者” 平起平坐地交流，而不是导师对你已知单方面输出。这个过程对培养你自己的独立思考能力、研究课题选取能力乃至独立研究能力至关重要。</p><p>（三）数学学习之外需要注意的地方：</p><p>结合科情科况，我们提醒大家，一些数学之外的因素同样非常重要。</p><p><strong>1.</strong> 英语学好，勿忘中文，走遍天下</p><p>无论你在哪国读数学，英语都是你在数学世界里面用于交流的共同语言（当然和中国人交流肯定说中文了）：写论文、听报告、讲报告、开会学术交流等等场合，你的遣词造句能力、表达与人际交流能力都是非常重要的。</p><p><strong>2.</strong> 谢绝绩点洗澡，选课量力而行</p><p>低年级有很多非数学课（最傻逼的大物实验和普物&#x2F;政治&#x2F;体育&#x2F;公选&#x2F;英语）也占用时间，同学们选课需要安排好，专业课的超前学习需要兼顾基础课的正常学习，不要出现基础课&#x2F;非专业课考一堆六七十分甚至不及格的尴尬，否则对你未来只有坏处没有好处。在这些非专业课上花一点时间不会太耽误你学数学，例如 “科学选课”、”点名不要缺课”，实验报告、课堂展示还是要花点心思完成。我们并不提倡 GPA 洗澡学，但 GPA 的确是你走向深造必需的硬性指标！</p><p><strong>3.</strong> 锻炼信息搜索，注意眼界塑造</p><p>信息时代早已来临，当下一味的闭门造车大概率是没有前途的。同学们（尤其是中高年级的同学们）的眼光不要只局限于 “现在学了什么以后就得做与之相关的东西”。本科生的阅历比较单薄，获取信息的渠道也十分匮乏，因此想在各方面独立地做出有远见的判断是很难的。同学们若对某方面有感兴趣，可以去查阅那些经典的文献，或是咨询从事这方面研究的老师与前辈们以获取更多更广泛的信息。这些不经意间培养的信息搜索能力与眼界格局的塑造，往往会在关键时候助你 “逢凶化吉”。</p><p><strong>4.</strong> 切勿盲目跟风，要有自我规划</p><p>人云亦云很容易演化成 “东施效颦”，因此同学们在本科期间找到适合自己的出路是非常重要的事情，这需要通过你不断地学习新知识，攫取新信息，并加以自己理性的判断。同学们请切记各个领域方向本无高低贵贱之分，不要陷入某些固化思维，不要被网络上一些 “所谓的大（s）V（b）” 忽悠得人云亦云，更不要有 “万般皆下品，唯有 <strong>XX</strong> 高” 的错误思维！可以看见，走学术道路有很多因素都需要你去斟酌，也需要不少运气成分。要做到这些很难，但机会往往只给那些有准备的人。这些建议大多都来自于我们或者其它同学们曾经走过的弯路，我们希望后辈们不要再浪费时间在这上面。如果哪天你踩了我们踩过的坑之后能想起来我们在指南中提到过这一点，那这份指南也算是尽其所能。我们欢迎各方的批评指正，本指南也会不定期地继续更新，希望各位老师和同学们都能多多支持。</p><p>一切的根基：数学分析、线性代数</p><p><strong>3.1</strong></p><p>数学分析</p><p>建议教材：常庚哲、史济怀：数学分析教程（第三版），中国科学技术大学出版社。</p><p>注：此教材正文的讲解非常详细，可读性也较好，另一套讲得很好的中文教材张筑生的《数学分析新讲》可作为参考书。同学们可以在学习一段时间之后阅读一些拓展知识，见识并计算一些有趣、有用的例子，比较好的选材主要来自于傅立叶分析、微分方程和微分几何等。</p><p>主要参考书：</p><p>[1] 谢惠民、钱定边、易法槐、恽自求：数学分析习题课讲义（上册）（的部分例题）；</p><p>[2] 裴礼文《数学分析中的典型问题与方法》</p><p>[3] 梅加强《数学分析讲义》</p><p>[4] 张筑生的《数学分析新讲》</p><p>[5] 汪林：数学分析中的问题与反例；</p><p>[6] Walter Rudin: 数学分析原理；</p><p>[7] Spivak: 流形上的微积分，齐民友、路见可（译）。</p><p>[8] 齐民友：重温微积分。（学完之后可以回顾一下，加深对知识的认识）。</p><p>查找一些较难、较技巧化的习题答案，可以参考周民强的《数学分析习题课演练》或者裴礼文的大板砖，但仅限于查答案。</p><p>学习建议：</p><p>裴礼文《数学分析中的典型问题与方法》</p><p>对于考研来说是不错的参考书，你如果有毅力有恒心，刷完三遍，山大层级随便选。书中选取了大量的考研真题作为例题和习题，共一千一百余页，认认真真刷完或许可以成为一个考研高手，最起码混个数学竞赛一等奖，应该不啥大事。有不少题目是非常有韵味的，谢惠民从中摘取了一些题目。也有独特的板块，例如上半连续，等度连续讲的比其他参考书细。缺点是缺乏深度和广度，仅仅是为应试诞生的，不利于真正地学懂和打穿数学分析，做完的感受往往做完就忘，看见原题非常眼熟记得思路但写不下来过程，同样题型换条件结论就没有思路，以我举例好几个章节我刷了三四遍了，照样写不下了，也能是我比较随性的缘故。书的外形上令人比较反感，纸小书厚，不利于翻阅，像砖块，俗称 “裴砖”。</p><p>李傅山《数学分析中的问题与方法》</p><p>前者与裴礼文差不多，都是考研读物，一元微积分中有些内容是相当不错的，可以作为谢惠民的补充，基本上考曲师大人手一本，李傅山也是曲师大著名教授</p><p>3. 梅加强《数学分析讲义》</p><p>多元微分积分学强烈推荐，书中含有作者比较独特的思想和内容 (在连续函数部分讲了定积分的定义和性质），升级内容（如余面积公式, Riemman-Stiltjes 积分，微分形式的 Stokes 公式)，内容流畅，挖坑必填。建议看出版后的书，(比未出版前的网传 pdf 版本厚了一倍)。</p><p>4.张筑生《数学分析新讲》</p><p>作者花了很大心思安排内容的叙写，很有想法，条理非常清晰，通俗易懂容易学习，适合精读，是我个人认为相当适合作为教材的一本。多元部分比较好，微分几何引入的比较全面，在其中（比如在向量值函数板块）看到了不少 Rudin 的影子（应该是借鉴了 Rudin)。比较印象深刻的是在隐函数部分讲的二维 Brouwer 不动点定理。最大的缺点是没有习题。</p><p>5. Rudin《数学分析原理》</p><p>比较升级的书，俗称 Baby Rudin, 汲取了很多精华，Rudin 三部曲都很有必要细读。（不适合没天赋的初学者，言辞精炼，思想观点相当不易理解）据说如果不读 Rudin 会难以 get 到大佬的槽点，讨论话题，介绍了不少高级的概念（如隐函数板块的秩定理, 这也是黎曼几何的预备知识）。印象比较深刻的是 Rudin 上介绍了换序逐项求导的加强命题，弱化了条件 (即不再需要导函数一致收敛）, 大多数的书籍不讲这个命题。</p><ol start="7"><li><p>菲赫金哥尔茨《微积分学教程》：读过，买过，看不下去一点，买了就留着吃灰的。</p></li><li><p>吉米多维奇《吉米多维奇数学分析习题集》争议较大的书籍。虚假的数学分析习题集, 其实应该是微积分习题集。包含了大量的计算题, 而且多为繁琐 (典型的俄罗斯风味), 非常复杂的数据使得读者没有做下去的欲望。</p></li></ol><p>9. 陶哲轩《陶哲轩实分析》</p><p>名字虽取实分析, 实际上还是在讲数学分析。初学比较好的教科书, 能够跟随作者体会到分析的乐趣, 感受到数学的整体化, 搭建积木般构建数学的框架。很早就加入的度量空间等泛函分析中的概念, 但是文风亲民, 对后继课程有一定引导作用。兴趣类读物, 读完可能不太会做题。</p><p>10.楼红卫《微积分进阶》《数学分析要点难点与拓展》《数学分析技巧选讲》</p><p>复旦内部讲义, “楼分析” 的教材, 思想独特的一套书, 亮点在于函数的逼近, 利用逼近的思想使得许多题目变得尤为简单, 但是这些技巧不适于写在答卷上, 从某种意义上这些奇 淫技巧并不是很有作用, 但可以开阔眼界。</p><p>11. 汪林《数学分析中的问题与反例》</p><p>最好的查找反例的书籍 (工具书)。作者还编写了《实分析中的反例》等等一系列关于反例的书籍。平等的满足每一个想抬杠的娃娃，平等的赛上每一个人物数分证明没用的新生的嘴。</p><p><strong>3.2</strong></p><p>线性代数</p><p>建议教材与参考书：</p><p>[1] 丘维声《高等代数-大学高代代数课程创新教材》《高等代数学习指导书》</p><p>[2] 姚慕生. 谢启鸿《高等代数学》(绿皮)+《高等代数》(白皮)</p><p>[3]  Sheldon Axler《线性代数应该这样学》</p><p>次要与进阶参考书：</p><p>[4] 柯斯特利金《代数学引论》；</p><h1 id="5-李文威教授的《代数学方法》；"><a href="#5-李文威教授的《代数学方法》；" class="headerlink" title="[5] 李文威教授的《代数学方法》；"></a>[5] 李文威教授的《代数学方法》；</h1><p>[6] R.戈德蒙特《代数学教材》；</p><p>学习建议：</p><p><strong>1.</strong> 总体建议：这门课是数学系课程中最为基础的一门课之一。整体难度并不是很大，但是由于：</p><p>（1）线性代数与大学之前的数学课和数学分析有一定区别，从这里开始，我们将慢慢进入抽象的数学；</p><p>（2）Jordan 标准型理论和有一定的难度，可能需要花一番功夫。因此不论同学们接下来要学什么方向，希望在学习这门课程时不要太松懈。接下来是这门课的一些学习心得和建议。首先，建议补一点集合论的知识，比如要熟悉单射，满射，双射，一一对应，可逆映射，映射的原像集这些说法，这将对今后的学习大有裨益。</p><p>推荐的话，尤承业的《基础拓扑学讲义》引言部分后半段 3 页的内容足矣，这部分希望能够牢牢掌握，都是最基础的集合知识与运算。（或者部分年的代数学基础课程会讲，但不保证）</p><p><strong>2.</strong> 学习动机：</p><p>（1）解线性方程组：线性方程组是数学中最简单的一类方程组，并且我们有完整的算法可以求出它的解，即线性代数课程最开始要学的 “高斯消元法”。但是线性方程组的问题还没有彻底解决：如何不解方程组直接依靠系数判断方程解的存在性？对于某些特殊的线性方程组，有没有公式表达它的解？最简阶梯形中的非零行个数是否唯一？……还有许多类似这样的问题，为此会引入线性空间，矩阵，行列式的概念与方法。使用这些工具，在解决关于线性方程组的一些理论问题时，会轻松不少。而反过来，发展线性空间，矩阵的理论时又离不开解线性方程组。可以</p><p>说，线性方程组的理论与空间，矩阵的理论相辅相成，共同构造出了线性代数的主干。</p><p>（2）解析几何的高维推广：在大一的解析几何课上学过学过三维欧式空间的解析几何，用的方法是点变换&#x2F;坐标变换等，那么自然会提出一些问题：有没有高维的空间？在高维的空间研究几何能不能用类似的方法？实际上，高维的空间在数学上可以形式地构造出来，并且研究其中的一切的根基：数学分析、线性代数 “几何” 也确实能够用解析几何中坐标变换的想法（并且是核心想法），而且能够用统一的语言去描述这种 “操作”，这就为研究高维的几何带来了极大的便利。</p><p>（3）数学对象的抽象化：在高中和大一上的时候已经学过了不少数学对象（集合与元素）以及一些运算操作（映射）。在学习的过程中，可能会发现它们冥冥之中的一些共性：</p><p><strong>3.</strong> 学习内容：</p><p>工具性内容：线性方程组理论、矩阵与行列式理论；</p><p>核心内容：线性空间理论、线性变换理论、双线型理论；</p><p>工具与核心内容的联系：学习线性代数切勿孤立地去学某一项理论，下面列出几点重要联系：</p><p>(1)用矩阵表示线性方程组，系数矩阵与增广矩阵的定义；</p><p>(2)初等方阵与矩阵的乘法、初等变换的关系；</p><p>(3)给定一组基下，可逆方阵与线性空间所有基的关系；</p><p>(4)给定两组基，矩阵与线性空间之间的线性映射的关系；</p><p>(5)矩阵的相抵与线性映射在不同基下的方阵；</p><p>(6)给定一组基，方阵与线性空间的线性变换的关系；</p><p>(7)方阵的相似与线性变换在不同基下的方阵；</p><p>(8)给定一组基，方阵与线性空间的双线性型的关系；</p><p>(9)方阵的相合与双线性型在不同基下的方阵。</p><p><strong>4.</strong> 学习方法</p><p>(1)线性方程组要熟练，少出错，它是线性代数大部分计算的核心；</p><p>(2)注重定义和概念的理解，尤其是不同理论中均会涉及的概念，比如矩阵的秩，培养多角度看问题的习惯；</p><p>(3)可以尝试自己梳理线代的脉络与思路，包括证明，除去个别繁琐的证明（分块乘法合理性，Binet-Cauchy 公式，Jordan 标准型理论中关于幂零方阵的 Jordan 标准型等），大部分证明都能够自己证出，理解后并不是很难。如若一时不太清楚定义，命题的表述和证明，可以先记住，然后多与老师同学探讨，并在之后的学习中联系其他的理论思考。</p><p><strong>5.</strong> 延伸与拓展阅读：</p><p>在学习完教材的基础内容后，可以参考如下内容。当然部分内容可以与线性代数同步学习。</p><p>(1)多重线性代数：这是线性代数中的重要一环，即张量。张量在线性代数中可以用多重线性代数的观点来较为简单的定义，而在模论中则主要会用到泛性质。科大的线代大纲里是不包含张量的，但是到了学微分几何、微分流形、黎曼几何等课程的时候却会大量运用，老师也只会草草讲过。</p><p>(3)教材[3] 可以用于了解群、环、域的定义：群、环都是现代数学中最为基本的代数定义，它 们跟线性空间一样，是对已有事物的抽象化；域则是一种特殊的环。学习群、环不仅是为近世代数做准备，还能深化已经学过的线性代数的理解。如果学过了群环域的基本定义，可以思考如下几个问题：</p><p>_x000F_ 线性代数中的数域跟一般域的区别与联系，线性代数的所有结论能否推广到一般域上。（注意这里有两个概念，一个是域的特征，一个是代数闭域）</p><p>线性空间的定义中，数域可以换为域，如果换为环呢？特别地，如果换成整数环，我们得到什么？换作域上的一元多项式环，我们又会得到什么？后者与我们学的线性变换有何联系？</p><p>线性代数中存在大量群的例子，是哪些？</p><p>(3)另外如果又有对矩阵技巧感兴趣的同学，可以参考方保镕的《矩阵论》。</p><p>(4)后续课程有李代数、群的线性表示理论、同调代数、微分流形、泛函分析等，计算方向则有数值代数。</p><p>书籍品鉴</p><p>1，丘维声《高等代数-大学高代代数课程创新教材》《高等代数学习指导书》</p><p>最全面的教科书之一，涵盖了大量的例题习题，考研重点参考书。上册不是很难，读起来比较流畅，下册思想深邃 (会涉及一些抽象代数李代数的内容)，会有一定阅读障碍。指导书和创新教材几乎内容一致，只需要创新教材就可以了。最精华的部分在于多项式和 Jordan 标准型，例题丰常丰富，介绍很详细, 但是也正是因为详细, 使得书十分厚重 (尤其下册)，需要四个月才能读完一遍，下册有许多内容牵涉过多后续课程 (大多会打星号), 初学者可以跳过这些内容(你不跳过你大概率也看不懂)。上册虽然浅显, 但是题目典型, 面貌清晰; 下册深邃，阅读难度大，需要毅力。</p><p>2. 姚慕生. 谢启鸿《高等代数学》(绿皮)+《高等代数》(白皮)</p><p>绿皮是教材，指导书俗称白皮书，复旦经典流行教科书。较薄易读, 总体难度适中, 没有丘砖难, 可以看作丘维声的浓缩版，但是 “麻雀虽小，五脏俱全”，内容介绍也非常全面，不乏经典的技巧, 每章配置了训练题供巩固提高。书中视矩阵为代数, 视线性映射为几何, 揭示了矩阵与线性映射的共性与不同。如果时间紧张可以选择姚慕生是一个不错的选择, 性价比较高。谢启鸿每周一题是白皮书的强化版 (可在谢启鸿博客上找到), 许多题目非常具有韵味, 选材许多来自于诸如代数几何之类的后续课程, 需要依赖到白皮书上的一些结论。最重要的是在 B 站有配套谢启鸿独家视频讲解（我好大面子哎，能听到复旦的课堂！）</p><p>进阶版</p><p>拉倒吧，如果你真有实力看完一本，基本上大学数学你横着走，真的，横！着！走！0 你可以试试李文威的那一本，你看看你能看几页？</p>]]></content>
    
    
    <categories>
      
      <category>QFNU</category>
      
    </categories>
    
    
    <tags>
      
      <tag>QFNU</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>

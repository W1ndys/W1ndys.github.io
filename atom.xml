<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>W1ndysの小屋</title>
  <icon>https://www.gravatar.com/avatar/74eee4f57896af8716ce7a206f8bde90</icon>
  <subtitle>W1ndysの小屋</subtitle>
  <link href="https://w1ndys.github.io/atom.xml" rel="self"/>
  
  <link href="https://w1ndys.github.io/"/>
  <updated>2024-01-14T08:22:37.851Z</updated>
  <id>https://w1ndys.github.io/</id>
  
  <author>
    <name>W1ndys</name>
    <email>w1ndys@outlook.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>“卷卷”W1ndys_bot使用手册</title>
    <link href="https://w1ndys.github.io/posts/bc040c54"/>
    <id>https://w1ndys.github.io/posts/bc040c54</id>
    <published>2024-01-14T11:06:36.953Z</published>
    <updated>2024-01-14T08:22:37.851Z</updated>
    
    <content type="html"><![CDATA[<h1 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h1><p>卷卷目前的功能主要有：<br><a href="#%E5%85%B3%E9%94%AE%E8%AF%8D%E5%9B%9E%E5%A4%8D">关键词回复</a>      <a href="#%E5%BF%AB%E6%8D%B7%E7%BE%A4%E7%AE%A1%E7%90%86">快捷群管理</a>     <a href="#%E8%BF%9D%E7%A6%81%E8%AF%8D%E7%9B%91%E6%8E%A7">违禁词监控</a>    <a href="#%E5%AE%9A%E6%97%B6%E5%99%A8">定时器</a>     <a href="#%E5%A5%87%E6%80%AA%E5%9B%BE%E7%89%87%E7%94%9F%E6%88%90">奇怪图片生成</a>     <a href="#%E7%82%B9%E6%AD%8C">点歌</a>   <a href="#%E7%8C%9C%E7%BE%A4%E5%8F%8B">猜群友小游戏</a></p><p><a href="https://w1ndys.top/2023/12/13/bot_ChatLearning/#/">ChatLearning————学群友说话使用手册</a></p><p><a href="https://w1ndys.top/2023/11/20/bot_Mirai_Administrator/">Mirai Administrator使用手册</a></p><p><a href="https://w1ndys.top/2023/11/17/bot_HuYanSession2/">HuYanSession2——壶言会话2使用手册</a></p><p><a href="https://w1ndys.top/2023/12/06/bot_MuteGames/">MuteGames使用手册</a></p><h1 id="关键词回复"><a href="#关键词回复" class="headerlink" title="关键词回复"></a>关键词回复</h1><p>相关指令<a href="https://w1ndys.top/2023/11/17/bot_HuYanSession2#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9B%9E%E5%A4%8D">请看这里</a></p><h1 id="快捷群管理"><a href="#快捷群管理" class="headerlink" title="快捷群管理"></a>快捷群管理</h1><p>相关指令<a href="https://w1ndys.top/2023/11/17/bot_HuYanSession2/#%E7%BE%A4%E7%AE%A1%E7%90%86">请看这里</a></p><h1 id="违禁词监控"><a href="#违禁词监控" class="headerlink" title="违禁词监控"></a>违禁词监控</h1><p>相关指令<a href="https://w1ndys.top/2023/11/17/bot_HuYanSession2/#%E8%BF%9D%E7%A6%81%E8%AF%8D">请看这里</a></p><h1 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h1><p>相关指令<a href="https://w1ndys.top/2023/11/17/bot_HuYanSession2/#%E5%AE%9A%E6%97%B6%E5%99%A8">请看这里</a></p><h1 id="奇怪图片生成"><a href="#奇怪图片生成" class="headerlink" title="奇怪图片生成"></a>奇怪图片生成</h1><p>发送<code>pet</code>可以查看具体指令</p><p>根据提示操作即可</p><h1 id="点歌"><a href="#点歌" class="headerlink" title="点歌"></a>点歌</h1><h2 id="“-音乐-关键词”"><a href="#“-音乐-关键词”" class="headerlink" title="“#音乐 关键词”"></a>“#音乐 关键词”</h2><p>自动搜索所有源以找出来找最佳音频来源</p><h2 id="“-语音-关键词”"><a href="#“-语音-关键词”" class="headerlink" title="“#语音 关键词”"></a>“#语音 关键词”</h2><p>自动搜索所有源，以语音信息的形式发出</p><h2 id="“-外链-关键词”"><a href="#“-外链-关键词”" class="headerlink" title="“#外链 关键词”"></a>“#外链 关键词”</h2><p>自动搜索所有源，以外链信息的形式发出</p><h2 id="“-QQ-关键词”"><a href="#“-QQ-关键词”" class="headerlink" title="“#QQ 关键词”"></a>“#QQ 关键词”</h2><p>搜索QQ音乐</p><h2 id="“-网易-关键词”"><a href="#“-网易-关键词”" class="headerlink" title="“#网易 关键词”"></a>“#网易 关键词”</h2><p>搜索网易云音乐</p><h2 id="“-网易电台-关键词”"><a href="#“-网易电台-关键词”" class="headerlink" title="“#网易电台 关键词”"></a>“#网易电台 关键词”</h2><p>搜索网易云电台，一般来说是直接选择找到的第一个节目，但是关键词可以以 “电台名称|节目名称”的格式指定电台节目</p><h2 id="“-酷狗-关键词”"><a href="#“-酷狗-关键词”" class="headerlink" title="“#酷狗 关键词”"></a>“#酷狗 关键词”</h2><p>搜索酷狗音乐</p><h2 id="“-千千-关键词”"><a href="#“-千千-关键词”" class="headerlink" title="“#千千 关键词”"></a>“#千千 关键词”</h2><p>搜索千千音乐（百度音乐）</p><h1 id="猜群友"><a href="#猜群友" class="headerlink" title="猜群友"></a>猜群友</h1><p>命令：</p><p><code>#猜群友 开始</code>或者<code>#猜群友 paly</code>（因为开发者打错字了所以不是play）</p><p><code>#猜群友 guess@</code>或者<code>#猜群友 猜@</code></p><h1 id="MuteGames"><a href="#MuteGames" class="headerlink" title="MuteGames"></a>MuteGames</h1><p>一个以 <a href="https://github.com/mamoe/mirai">Mirai_Console</a> 为基础开发并为了满足群友PVP需求和抖M需求开发的禁言游戏集合</p><h1 id="群词云生成器"><a href="#群词云生成器" class="headerlink" title="群词云生成器"></a><a href="https://mirai.mamoe.net/topic/959/wordcloudplugin_%E7%BE%A4%E8%AF%8D%E4%BA%91%E7%94%9F%E6%88%90%E5%99%A8">群词云生成器</a></h1><p>使用方法:在群内发送 <code>本日词云</code>&#x2F;<code>昨日词云</code>&#x2F;<code>获取词云 </code>来使用<br>也可以发送 <code>用户本日词云</code>&#x2F;<code>用户昨日词云</code>&#x2F;<code>获取用户词云</code> +<code>&lt;用户名称&gt;</code> 来获取指定用户的词云<br>在config下timer文件可以配置定时任务<br>更多功能可查看配置文件</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;主要功能&quot;&gt;&lt;a href=&quot;#主要功能&quot; class=&quot;headerlink&quot; title=&quot;主要功能&quot;&gt;&lt;/a&gt;主要功能&lt;/h1&gt;&lt;p&gt;卷卷目前的功能主要有：&lt;br&gt;&lt;a href=&quot;#%E5%85%B3%E9%94%AE%E8%AF%8D%E5%9B%9E%</summary>
      
    
    
    
    <category term="QQbot" scheme="https://w1ndys.github.io/categories/QQbot/"/>
    
    
    <category term="QQbot" scheme="https://w1ndys.github.io/tags/QQbot/"/>
    
  </entry>
  
  <entry>
    <title>中华人民共和国网络安全法</title>
    <link href="https://w1ndys.github.io/posts/b81fa239"/>
    <id>https://w1ndys.github.io/posts/b81fa239</id>
    <published>2024-01-14T11:06:36.951Z</published>
    <updated>2024-01-14T08:22:37.819Z</updated>
    
    <content type="html"><![CDATA[<h1 id="中华人民共和国网络安全法"><a href="#中华人民共和国网络安全法" class="headerlink" title="中华人民共和国网络安全法"></a>中华人民共和国网络安全法</h1><p>​（2016年11月7日第十二届全国人民代表大会常务委员会第二十四次会议通过）</p><p>来源： 中国人大网 2016年11月7日 17:31:34</p><p>目  录</p><p>  [第一章  总  则](#第一章  总  则)</p><p>  [第二章  网络安全支持与促进](#第二章  网络安全支持与促进)</p><p>  <a href="#%E7%AC%AC%E4%B8%89%E7%AB%A0-%E7%BD%91%E7%BB%9C%E8%BF%90%E8%A1%8C%E5%AE%89%E5%85%A8">第三章  网络运行安全</a></p><p>​          <a href="#%E7%AC%AC%E4%B8%80%E8%8A%82-%E4%B8%80%E8%88%AC%E8%A7%84%E5%AE%9A">第一节 一般规定</a></p><p>​          <a href="#%E7%AC%AC%E4%BA%8C%E8%8A%82-%E5%85%B3%E9%94%AE%E4%BF%A1%E6%81%AF%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E7%9A%84%E8%BF%90%E8%A1%8C%E5%AE%89%E5%85%A8">第二节 关键信息基础设施的运行安全</a></p><p>  <a href="#%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8">第四章  网络信息安全</a></p><p>  <a href="#%E7%AC%AC%E4%BA%94%E7%AB%A0-%E7%9B%91%E6%B5%8B%E9%A2%84%E8%AD%A6%E4%B8%8E%E5%BA%94%E6%80%A5%E5%A4%84%E7%BD%AE">第五章 监测预警与应急处置</a></p><p>  [第六章 法律责任](#第六章 法律责任)</p><p>  [第七章 附  则](#第七章 附  则)</p><h2 id="第一章-总-则"><a href="#第一章-总-则" class="headerlink" title="第一章  总  则"></a>第一章  总  则</h2><p><strong>第一条</strong> 为了保障网络安全，维护网络空间主权和国家安全、社会公共利益，保护公民、法人和其他组织的合法权益，促进经济社会信息化健康发展，制定本法。</p><p><strong>第二条</strong> 在中华人民共和国境内建设、运营、维护和使用网络，以及网络安全的监督管理，适用本法。</p><p><strong>第三条</strong> 国家坚持网络安全与信息化发展并重，遵循积极利用、科学发展、依法管理、确保安全的方针，推进网络基础设施建设和互联互通，鼓励网络技术创新和应用，支持培养网络安全人才，建立健全网络安全保障体系，提高网络安全保护能力。</p><p><strong>第四条</strong> 国家制定并不断完善网络安全战略，明确保障网络安全的基本要求和主要目标，提出重点领域的网络安全政策、工作任务和措施。</p><p><strong>第五条</strong> 国家采取措施，监测、防御、处置来源于中华人民共和国境内外的网络安全风险和威胁，保护关键信息基础设施免受攻击、侵入、干扰和破坏，依法惩治网络违法犯罪活动，维护网络空间安全和秩序。</p><p><strong>第六条</strong> 国家倡导诚实守信、健康文明的网络行为，推动传播社会主义核心价值观，采取措施提高全社会的网络安全意识和水平，形成全社会共同参与促进网络安全的良好环境。</p><p><strong>第七条</strong> 国家积极开展网络空间治理、网络技术研发和标准制定、打击网络违法犯罪等方面的国际交流与合作，推动构建和平、安全、开放、合作的网络空间，建立多边、民主、透明的网络治理体系。</p><p><strong>第八条</strong> 国家网信部门负责统筹协调网络安全工作和相关监督管理工作。国务院电信主管部门、公安部门和其他有关机关依照本法和有关法律、行政法规的规定，在各自职责范围内负责网络安全保护和监督管理工作。</p><p>县级以上地方人民政府有关部门的网络安全保护和监督管理职责，按照国家有关规定确定。</p><p><strong>第九条</strong> 网络运营者开展经营和服务活动，必须遵守法律、行政法规，尊重社会公德，遵守商业道德，诚实信用，履行网络安全保护义务，接受政府和社会的监督，承担社会责任。</p><p><strong>第十条</strong> 建设、运营网络或者通过网络提供服务，应当依照法律、行政法规的规定和国家标准的强制性要求，采取技术措施和其他必要措施，保障网络安全、稳定运行，有效应对网络安全事件，防范网络违法犯罪活动，维护网络数据的完整性、保密性和可用性。</p><p><strong>第十一条</strong> 网络相关行业组织按照章程，加强行业自律，制定网络安全行为规范，指导会员加强网络安全保护，提高网络安全保护水平，促进行业健康发展。</p><p><strong>第十二条</strong> 国家保护公民、法人和其他组织依法使用网络的权利，促进网络接入普及，提升网络服务水平，为社会提供安全、便利的网络服务，保障网络信息依法有序自由流动。</p><p>任何个人和组织使用网络应当遵守宪法法律，遵守公共秩序，尊重社会公德，不得危害网络安全，不得利用网络从事危害国家安全、荣誉和利益，煽动颠覆国家政权、推翻社会主义制度，煽动分裂国家、破坏国家统一，宣扬恐怖主义、极端主义，宣扬民族仇恨、民族歧视，传播暴力、淫秽色情信息，编造、传播虚假信息扰乱经济秩序和社会秩序，以及侵害他人名誉、隐私、知识产权和其他合法权益等活动。</p><p><strong>第十三条</strong> 国家支持研究开发有利于未成年人健康成长的网络产品和服务，依法惩治利用网络从事危害未成年人身心健康的活动，为未成年人提供安全、健康的网络环境。</p><p><strong>第十四条</strong> 任何个人和组织有权对危害网络安全的行为向网信、电信、公安等部门举报。收到举报的部门应当及时依法作出处理；不属于本部门职责的，应当及时移送有权处理的部门。</p><p>有关部门应当对举报人的相关信息予以保密，保护举报人的合法权益。</p><h2 id="第二章-网络安全支持与促进"><a href="#第二章-网络安全支持与促进" class="headerlink" title="第二章  网络安全支持与促进"></a>第二章  网络安全支持与促进</h2><p><strong>第十五条</strong> 国家建立和完善网络安全标准体系。国务院标准化行政主管部门和国务院其他有关部门根据各自的职责，组织制定并适时修订有关网络安全管理以及网络产品、服务和运行安全的国家标准、行业标准。</p><p>国家支持企业、研究机构、高等学校、网络相关行业组织参与网络安全国家标准、行业标准的制定。</p><p><strong>第十六条</strong> 国务院和省、自治区、直辖市人民政府应当统筹规划，加大投入，扶持重点网络安全技术产业和项目，支持网络安全技术的研究开发和应用，推广安全可信的网络产品和服务，保护网络技术知识产权，支持企业、研究机构和高等学校等参与国家网络安全技术创新项目。</p><p><strong>第十七条</strong> 国家推进网络安全社会化服务体系建设，鼓励有关企业、机构开展网络安全认证、检测和风险评估等安全服务。</p><p><strong>第十八条</strong> 国家鼓励开发网络数据安全保护和利用技术，促进公共数据资源开放，推动技术创新和经济社会发展。</p><p>国家支持创新网络安全管理方式，运用网络新技术，提升网络安全保护水平。</p><p><strong>第十九条</strong> 各级人民政府及其有关部门应当组织开展经常性的网络安全宣传教育，并指导、督促有关单位做好网络安全宣传教育工作。</p><p>大众传播媒介应当有针对性地面向社会进行网络安全宣传教育。</p><p><strong>第二十条</strong> 国家支持企业和高等学校、职业学校等教育培训机构开展网络安全相关教育与培训，采取多种方式培养网络安全人才，促进网络安全人才交流。</p><h2 id="第三章-网络运行安全"><a href="#第三章-网络运行安全" class="headerlink" title="第三章 网络运行安全"></a>第三章 网络运行安全</h2><h3 id="第一节-一般规定"><a href="#第一节-一般规定" class="headerlink" title="第一节 一般规定"></a>第一节 一般规定</h3><p><strong>第二十一条</strong> 国家实行网络安全等级保护制度。网络运营者应当按照网络安全等级保护制度的要求，履行下列安全保护义务，保障网络免受干扰、破坏或者未经授权的访问，防止网络数据泄露或者被窃取、篡改：</p><p>（一）制定内部安全管理制度和操作规程，确定网络安全负责人，落实网络安全保护责任；</p><p>（二）采取防范计算机病毒和网络攻击、网络侵入等危害网络安全行为的技术措施；</p><p>（三）采取监测、记录网络运行状态、网络安全事件的技术措施，并按照规定留存相关的网络日志不少于六个月；</p><p>（四）采取数据分类、重要数据备份和加密等措施；</p><p>（五）法律、行政法规规定的其他义务。</p><p><strong>第二十二条</strong> 网络产品、服务应当符合相关国家标准的强制性要求。网络产品、服务的提供者不得设置恶意程序；发现其网络产品、服务存在安全缺陷、漏洞等风险时，应当立即采取补救措施，按照规定及时告知用户并向有关主管部门报告。</p><p>网络产品、服务的提供者应当为其产品、服务持续提供安全维护；在规定或者当事人约定的期限内，不得终止提供安全维护。</p><p>网络产品、服务具有收集用户信息功能的，其提供者应当向用户明示并取得同意；涉及用户个人信息的，还应当遵守本法和有关法律、行政法规关于个人信息保护的规定。</p><p><strong>第二十三条</strong> 网络关键设备和网络安全专用产品应当按照相关国家标准的强制性要求，由具备资格的机构安全认证合格或者安全检测符合要求后，方可销售或者提供。国家网信部门会同国务院有关部门制定、公布网络关键设备和网络安全专用产品目录，并推动安全认证和安全检测结果互认，避免重复认证、检测。</p><p><strong>第二十四条</strong> 网络运营者为用户办理网络接入、域名注册服务，办理固定电话、移动电话等入网手续，或者为用户提供信息发布、即时通讯等服务，在与用户签订协议或者确认提供服务时，应当要求用户提供真实身份信息。用户不提供真实身份信息的，网络运营者不得为其提供相关服务。</p><p>国家实施网络可信身份战略，支持研究开发安全、方便的电子身份认证技术，推动不同电子身份认证之间的互认。</p><p><strong>第二十五条</strong> 网络运营者应当制定网络安全事件应急预案，及时处置系统漏洞、计算机病毒、网络攻击、网络侵入等安全风险；在发生危害网络安全的事件时，立即启动应急预案，采取相应的补救措施，并按照规定向有关主管部门报告。</p><p><strong>第二十六条</strong> 开展网络安全认证、检测、风险评估等活动，向社会发布系统漏洞、计算机病毒、网络攻击、网络侵入等网络安全信息，应当遵守国家有关规定。</p><p><strong>第二十七条</strong> 任何个人和组织不得从事非法侵入他人网络、干扰他人网络正常功能、窃取网络数据等危害网络安全的活动；不得提供专门用于从事侵入网络、干扰网络正常功能及防护措施、窃取网络数据等危害网络安全活动的程序、工具；明知他人从事危害网络安全的活动的，不得为其提供技术支持、广告推广、支付结算等帮助。</p><p><strong>第二十八条</strong> 网络运营者应当为公安机关、国家安全机关依法维护国家安全和侦查犯罪的活动提供技术支持和协助。</p><p><strong>第二十九条</strong> 国家支持网络运营者之间在网络安全信息收集、分析、通报和应急处置等方面进行合作，提高网络运营者的安全保障能力。</p><p>有关行业组织建立健全本行业的网络安全保护规范和协作机制，加强对网络安全风险的分析评估，定期向会员进行风险警示，支持、协助会员应对网络安全风险。</p><p><strong>第三十条</strong> 网信部门和有关部门在履行网络安全保护职责中获取的信息，只能用于维护网络安全的需要，不得用于其他用途。</p><h3 id="第二节-关键信息基础设施的运行安全"><a href="#第二节-关键信息基础设施的运行安全" class="headerlink" title="第二节 关键信息基础设施的运行安全"></a>第二节 关键信息基础设施的运行安全</h3><p><strong>第三十一条</strong> 国家对公共通信和信息服务、能源、交通、水利、金融、公共服务、电子政务等重要行业和领域，以及其他一旦遭到破坏、丧失功能或者数据泄露，可能严重危害国家安全、国计民生、公共利益的关键信息基础设施，在网络安全等级保护制度的基础上，实行重点保护。关键信息基础设施的具体范围和安全保护办法由国务院制定。</p><p>国家鼓励关键信息基础设施以外的网络运营者自愿参与关键信息基础设施保护体系。</p><p><strong>第三十二条</strong> 按照国务院规定的职责分工，负责关键信息基础设施安全保护工作的部门分别编制并组织实施本行业、本领域的关键信息基础设施安全规划，指导和监督关键信息基础设施运行安全保护工作。</p><p><strong>第三十三条</strong> 建设关键信息基础设施应当确保其具有支持业务稳定、持续运行的性能，并保证安全技术措施同步规划、同步建设、同步使用。</p><p><strong>第三十四条</strong> 除本法第二十一条的规定外，关键信息基础设施的运营者还应当履行下列安全保护义务：</p><p>（一）设置专门安全管理机构和安全管理负责人，并对该负责人和关键岗位的人员进行安全背景审查；</p><p>（二）定期对从业人员进行网络安全教育、技术培训和技能考核；</p><p>（三）对重要系统和数据库进行容灾备份；</p><p>（四）制定网络安全事件应急预案，并定期进行演练；</p><p>（五）法律、行政法规规定的其他义务。</p><p><strong>第三十五条</strong> 关键信息基础设施的运营者采购网络产品和服务，可能影响国家安全的，应当通过国家网信部门会同国务院有关部门组织的国家安全审查。</p><p><strong>第三十六条</strong> 关键信息基础设施的运营者采购网络产品和服务，应当按照规定与提供者签订安全保密协议，明确安全和保密义务与责任。</p><p><strong>第三十七条</strong> 关键信息基础设施的运营者在中华人民共和国境内运营中收集和产生的个人信息和重要数据应当在境内存储。因业务需要，确需向境外提供的，应当按照国家网信部门会同国务院有关部门制定的办法进行安全评估；法律、行政法规另有规定的，依照其规定。</p><p><strong>第三十八条</strong> 关键信息基础设施的运营者应当自行或者委托网络安全服务机构对其网络的安全性和可能存在的风险每年至少进行一次检测评估，并将检测评估情况和改进措施报送相关负责关键信息基础设施安全保护工作的部门。</p><p><strong>第三十九条</strong> 国家网信部门应当统筹协调有关部门对关键信息基础设施的安全保护采取下列措施：</p><p>（一）对关键信息基础设施的安全风险进行抽查检测，提出改进措施，必要时可以委托网络安全服务机构对网络存在的安全风险进行检测评估；</p><p>（二）定期组织关键信息基础设施的运营者进行网络安全应急演练，提高应对网络安全事件的水平和协同配合能力；</p><p>（三）促进有关部门、关键信息基础设施的运营者以及有关研究机构、网络安全服务机构等之间的网络安全信息共享；</p><p>（四）对网络安全事件的应急处置与网络功能的恢复等，提供技术支持和协助。</p><h2 id="第四章-网络信息安全"><a href="#第四章-网络信息安全" class="headerlink" title="第四章 网络信息安全"></a>第四章 网络信息安全</h2><p><strong>第四十条</strong> 网络运营者应当对其收集的用户信息严格保密，并建立健全用户信息保护制度。</p><p><strong>第四十一条</strong> 网络运营者收集、使用个人信息，应当遵循合法、正当、必要的原则，公开收集、使用规则，明示收集、使用信息的目的、方式和范围，并经被收集者同意。</p><p>网络运营者不得收集与其提供的服务无关的个人信息，不得违反法律、行政法规的规定和双方的约定收集、使用个人信息，并应当依照法律、行政法规的规定和与用户的约定，处理其保存的个人信息。</p><p><strong>第四十二条</strong> 网络运营者不得泄露、篡改、毁损其收集的个人信息；未经被收集者同意，不得向他人提供个人信息。但是，经过处理无法识别特定个人且不能复原的除外。</p><p>网络运营者应当采取技术措施和其他必要措施，确保其收集的个人信息安全，防止信息泄露、毁损、丢失。在发生或者可能发生个人信息泄露、毁损、丢失的情况时，应当立即采取补救措施，按照规定及时告知用户并向有关主管部门报告。</p><p><strong>第四十三条</strong> 个人发现网络运营者违反法律、行政法规的规定或者双方的约定收集、使用其个人信息的，有权要求网络运营者删除其个人信息；发现网络运营者收集、存储的其个人信息有错误的，有权要求网络运营者予以更正。网络运营者应当采取措施予以删除或者更正。</p><p><strong>第四十四条</strong> 任何个人和组织不得窃取或者以其他非法方式获取个人信息，不得非法出售或者非法向他人提供个人信息。</p><p><strong>第四十五条</strong> 依法负有网络安全监督管理职责的部门及其工作人员，必须对在履行职责中知悉的个人信息、隐私和商业秘密严格保密，不得泄露、出售或者非法向他人提供。</p><p><strong>第四十六条</strong> 任何个人和组织应当对其使用网络的行为负责，不得设立用于实施诈骗，传授犯罪方法，制作或者销售违禁物品、管制物品等违法犯罪活动的网站、通讯群组，不得利用网络发布涉及实施诈骗，制作或者销售违禁物品、管制物品以及其他违法犯罪活动的信息。</p><p><strong>第四十七条</strong> 网络运营者应当加强对其用户发布的信息的管理，发现法律、行政法规禁止发布或者传输的信息的，应当立即停止传输该信息，采取消除等处置措施，防止信息扩散，保存有关记录，并向有关主管部门报告。</p><p><strong>第四十八条</strong> 任何个人和组织发送的电子信息、提供的应用软件，不得设置恶意程序，不得含有法律、行政法规禁止发布或者传输的信息。</p><p>电子信息发送服务提供者和应用软件下载服务提供者，应当履行安全管理义务，知道其用户有前款规定行为的，应当停止提供服务，采取消除等处置措施，保存有关记录，并向有关主管部门报告。</p><p><strong>第四十九条</strong> 网络运营者应当建立网络信息安全投诉、举报制度，公布投诉、举报方式等信息，及时受理并处理有关网络信息安全的投诉和举报。</p><p>网络运营者对网信部门和有关部门依法实施的监督检查，应当予以配合。</p><p><strong>第五十条</strong> 国家网信部门和有关部门依法履行网络信息安全监督管理职责，发现法律、行政法规禁止发布或者传输的信息的，应当要求网络运营者停止传输，采取消除等处置措施，保存有关记录；对来源于中华人民共和国境外的上述信息，应当通知有关机构采取技术措施和其他必要措施阻断传播。</p><h2 id="第五章-监测预警与应急处置"><a href="#第五章-监测预警与应急处置" class="headerlink" title="第五章 监测预警与应急处置"></a>第五章 监测预警与应急处置</h2><p><strong>第五十一条</strong> 国家建立网络安全监测预警和信息通报制度。国家网信部门应当统筹协调有关部门加强网络安全信息收集、分析和通报工作，按照规定统一发布网络安全监测预警信息。</p><p><strong>第五十二条</strong> 负责关键信息基础设施安全保护工作的部门，应当建立健全本行业、本领域的网络安全监测预警和信息通报制度，并按照规定报送网络安全监测预警信息。</p><p><strong>第五十三条</strong> 国家网信部门协调有关部门建立健全网络安全风险评估和应急工作机制，制定网络安全事件应急预案，并定期组织演练。</p><p>负责关键信息基础设施安全保护工作的部门应当制定本行业、本领域的网络安全事件应急预案，并定期组织演练。</p><p>网络安全事件应急预案应当按照事件发生后的危害程度、影响范围等因素对网络安全事件进行分级，并规定相应的应急处置措施。</p><p><strong>第五十四条</strong> 网络安全事件发生的风险增大时，省级以上人民政府有关部门应当按照规定的权限和程序，并根据网络安全风险的特点和可能造成的危害，采取下列措施：</p><p>（一）要求有关部门、机构和人员及时收集、报告有关信息，加强对网络安全风险的监测；</p><p>（二）组织有关部门、机构和专业人员，对网络安全风险信息进行分析评估，预测事件发生的可能性、影响范围和危害程度；</p><p>（三）向社会发布网络安全风险预警，发布避免、减轻危害的措施。</p><p><strong>第五十五条</strong> 发生网络安全事件，应当立即启动网络安全事件应急预案，对网络安全事件进行调查和评估，要求网络运营者采取技术措施和其他必要措施，消除安全隐患，防止危害扩大，并及时向社会发布与公众有关的警示信息。</p><p><strong>第五十六条</strong> 省级以上人民政府有关部门在履行网络安全监督管理职责中，发现网络存在较大安全风险或者发生安全事件的，可以按照规定的权限和程序对该网络的运营者的法定代表人或者主要负责人进行约谈。网络运营者应当按照要求采取措施，进行整改，消除隐患。</p><p><strong>第五十七条</strong> 因网络安全事件，发生突发事件或者生产安全事故的，应当依照《中华人民共和国突发事件应对法》、《中华人民共和国安全生产法》等有关法律、行政法规的规定处置。</p><p><strong>第五十八条</strong> 因维护国家安全和社会公共秩序，处置重大突发社会安全事件的需要，经国务院决定或者批准，可以在特定区域对网络通信采取限制等临时措施。</p><h2 id="第六章-法律责任"><a href="#第六章-法律责任" class="headerlink" title="第六章 法律责任"></a>第六章 法律责任</h2><p><strong>第五十九条</strong> 网络运营者不履行本法第二十一条、第二十五条规定的网络安全保护义务的，由有关主管部门责令改正，给予警告；拒不改正或者导致危害网络安全等后果的，处一万元以上十万元以下罚款，对直接负责的主管人员处五千元以上五万元以下罚款。</p><p>关键信息基础设施的运营者不履行本法第三十三条、第三十四条、第三十六条、第三十八条规定的网络安全保护义务的，由有关主管部门责令改正，给予警告；拒不改正或者导致危害网络安全等后果的，处十万元以上一百万元以下罚款，对直接负责的主管人员处一万元以上十万元以下罚款。</p><p><strong>第六十条</strong> 违反本法第二十二条第一款、第二款和第四十八条第一款规定，有下列行为之一的，由有关主管部门责令改正，给予警告；拒不改正或者导致危害网络安全等后果的，处五万元以上五十万元以下罚款，对直接负责的主管人员处一万元以上十万元以下罚款：</p><p>（一）设置恶意程序的；</p><p>（二）对其产品、服务存在的安全缺陷、漏洞等风险未立即采取补救措施，或者未按照规定及时告知用户并向有关主管部门报告的；</p><p>（三）擅自终止为其产品、服务提供安全维护的。</p><p><strong>第六十一条</strong> 网络运营者违反本法第二十四条第一款规定，未要求用户提供真实身份信息，或者对不提供真实身份信息的用户提供相关服务的，由有关主管部门责令改正；拒不改正或者情节严重的，处五万元以上五十万元以下罚款，并可以由有关主管部门责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照，对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款。</p><p><strong>第六十二条</strong> 违反本法第二十六条规定，开展网络安全认证、检测、风险评估等活动，或者向社会发布系统漏洞、计算机病毒、网络攻击、网络侵入等网络安全信息的，由有关主管部门责令改正，给予警告；拒不改正或者情节严重的，处一万元以上十万元以下罚款，并可以由有关主管部门责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照，对直接负责的主管人员和其他直接责任人员处五千元以上五万元以下罚款。</p><p><strong>第六十三条</strong> 违反本法第二十七条规定，从事危害网络安全的活动，或者提供专门用于从事危害网络安全活动的程序、工具，或者为他人从事危害网络安全的活动提供技术支持、广告推广、支付结算等帮助，尚不构成犯罪的，由公安机关没收违法所得，处五日以下拘留，可以并处五万元以上五十万元以下罚款；情节较重的，处五日以上十五日以下拘留，可以并处十万元以上一百万元以下罚款。</p><p>单位有前款行为的，由公安机关没收违法所得，处十万元以上一百万元以下罚款，并对直接负责的主管人员和其他直接责任人员依照前款规定处罚。</p><p>违反本法第二十七条规定，受到治安管理处罚的人员，五年内不得从事网络安全管理和网络运营关键岗位的工作；受到刑事处罚的人员，终身不得从事网络安全管理和网络运营关键岗位的工作。</p><p><strong>第六十四条</strong> 网络运营者、网络产品或者服务的提供者违反本法第二十二条第三款、第四十一条至第四十三条规定，侵害个人信息依法得到保护的权利的，由有关主管部门责令改正，可以根据情节单处或者并处警告、没收违法所得、处违法所得一倍以上十倍以下罚款，没有违法所得的，处一百万元以下罚款，对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款；情节严重的，并可以责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照。</p><p>违反本法第四十四条规定，窃取或者以其他非法方式获取、非法出售或者非法向他人提供个人信息，尚不构成犯罪的，由公安机关没收违法所得，并处违法所得一倍以上十倍以下罚款，没有违法所得的，处一百万元以下罚款。</p><p><strong>第六十五条</strong> 关键信息基础设施的运营者违反本法第三十五条规定，使用未经安全审查或者安全审查未通过的网络产品或者服务的，由有关主管部门责令停止使用，处采购金额一倍以上十倍以下罚款；对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款。</p><p><strong>第六十六条</strong> 关键信息基础设施的运营者违反本法第三十七条规定，在境外存储网络数据，或者向境外提供网络数据的，由有关主管部门责令改正，给予警告，没收违法所得，处五万元以上五十万元以下罚款，并可以责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照；对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款。</p><p><strong>第六十七条</strong> 违反本法第四十六条规定，设立用于实施违法犯罪活动的网站、通讯群组，或者利用网络发布涉及实施违法犯罪活动的信息，尚不构成犯罪的，由公安机关处五日以下拘留，可以并处一万元以上十万元以下罚款；情节较重的，处五日以上十五日以下拘留，可以并处五万元以上五十万元以下罚款。关闭用于实施违法犯罪活动的网站、通讯群组。</p><p>单位有前款行为的，由公安机关处十万元以上五十万元以下罚款，并对直接负责的主管人员和其他直接责任人员依照前款规定处罚。</p><p><strong>第六十八条</strong> 网络运营者违反本法第四十七条规定，对法律、行政法规禁止发布或者传输的信息未停止传输、采取消除等处置措施、保存有关记录的，由有关主管部门责令改正，给予警告，没收违法所得；拒不改正或者情节严重的，处十万元以上五十万元以下罚款，并可以责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照，对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款。</p><p>电子信息发送服务提供者、应用软件下载服务提供者，不履行本法第四十八条第二款规定的安全管理义务的，依照前款规定处罚。</p><p><strong>第六十九条</strong> 网络运营者违反本法规定，有下列行为之一的，由有关主管部门责令改正；拒不改正或者情节严重的，处五万元以上五十万元以下罚款，对直接负责的主管人员和其他直接责任人员，处一万元以上十万元以下罚款：</p><p>（一）不按照有关部门的要求对法律、行政法规禁止发布或者传输的信息，采取停止传输、消除等处置措施的；</p><p>（二）拒绝、阻碍有关部门依法实施的监督检查的；</p><p>（三）拒不向公安机关、国家安全机关提供技术支持和协助的。</p><p><strong>第七十条</strong> 发布或者传输本法第十二条第二款和其他法律、行政法规禁止发布或者传输的信息的，依照有关法律、行政法规的规定处罚。</p><p><strong>第七十一条</strong> 有本法规定的违法行为的，依照有关法律、行政法规的规定记入信用档案，并予以公示。</p><p><strong>第七十二条</strong> 国家机关政务网络的运营者不履行本法规定的网络安全保护义务的，由其上级机关或者有关机关责令改正；对直接负责的主管人员和其他直接责任人员依法给予处分。</p><p><strong>第七十三条</strong> 网信部门和有关部门违反本法第三十条规定，将在履行网络安全保护职责中获取的信息用于其他用途的，对直接负责的主管人员和其他直接责任人员依法给予处分。</p><p>网信部门和有关部门的工作人员玩忽职守、滥用职权、徇私舞弊，尚不构成犯罪的，依法给予处分。</p><p><strong>第七十四条</strong> 违反本法规定，给他人造成损害的，依法承担民事责任。</p><p>违反本法规定，构成违反治安管理行为的，依法给予治安管理处罚；构成犯罪的，依法追究刑事责任。</p><p><strong>第七十五条</strong> 境外的机构、组织、个人从事攻击、侵入、干扰、破坏等危害中华人民共和国的关键信息基础设施的活动，造成严重后果的，依法追究法律责任；国务院公安部门和有关部门并可以决定对该机构、组织、个人采取冻结财产或者其他必要的制裁措施。</p><h2 id="第七章-附-则"><a href="#第七章-附-则" class="headerlink" title="第七章 附  则"></a>第七章 附  则</h2><p><strong>第七十六条</strong> 本法下列用语的含义：</p><p>（一）网络，是指由计算机或者其他信息终端及相关设备组成的按照一定的规则和程序对信息进行收集、存储、传输、交换、处理的系统。</p><p>（二）网络安全，是指通过采取必要措施，防范对网络的攻击、侵入、干扰、破坏和非法使用以及意外事故，使网络处于稳定可靠运行的状态，以及保障网络数据的完整性、保密性、可用性的能力。</p><p>（三）网络运营者，是指网络的所有者、管理者和网络服务提供者。</p><p>（四）网络数据，是指通过网络收集、存储、传输、处理和产生的各种电子数据。</p><p>（五）个人信息，是指以电子或者其他方式记录的能够单独或者与其他信息结合识别自然人个人身份的各种信息，包括但不限于自然人的姓名、出生日期、身份证件号码、个人生物识别信息、住址、电话号码等。</p><p><strong>第七十七条</strong> 存储、处理涉及国家秘密信息的网络的运行安全保护，除应当遵守本法外，还应当遵守保密法律、行政法规的规定。</p><p><strong>第七十八条</strong> 军事网络的安全保护，由中央军事委员会另行规定。</p><p><strong>第七十九条</strong> 本法自2017年6月1日起施行。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;中华人民共和国网络安全法&quot;&gt;&lt;a href=&quot;#中华人民共和国网络安全法&quot; class=&quot;headerlink&quot; title=&quot;中华人民共和国网络安全法&quot;&gt;&lt;/a&gt;中华人民共和国网络安全法&lt;/h1&gt;&lt;p&gt;​		（2016年11月7日第十二届全国人民代表大会常务委员</summary>
      
    
    
    
    <category term="法律" scheme="https://w1ndys.github.io/categories/%E6%B3%95%E5%BE%8B/"/>
    
    <category term="网络安全法" scheme="https://w1ndys.github.io/categories/%E6%B3%95%E5%BE%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%B3%95/"/>
    
    
    <category term="文" scheme="https://w1ndys.github.io/tags/%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>智慧树/知到/刷课脚本安装教程</title>
    <link href="https://w1ndys.github.io/posts/3af6ecf8"/>
    <id>https://w1ndys.github.io/posts/3af6ecf8</id>
    <published>2024-01-14T11:06:36.948Z</published>
    <updated>2024-01-14T08:22:37.866Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言：使用本工具请自觉遵守国家法律法规，下载后请24小时之内删除，本教程来自<a href="http://www.w1ndys.top/">www.w1ndys.top</a></p><p><u>使用</u>本教程即代表用户同意本教程<a href="#%E7%94%A8%E6%88%B7%E5%8D%8F%E8%AE%AE">用户协议</a>，使用本教程造成的<font color='red'>一切后果由个人承担</font>，<u>作者</u><font color='red'>概不负责</font></p><p><font color='red'>请注意：本教程所涉及脚本工具开发者并不是博主本人，内涵涉及收费的内容，请酌情考虑</font></p><p>本教程编写于2023年11月3日，距离时间过长可能脚本已失效，请铭记</p><p>本教程旨在节省大家时间，让大家去做更有意义的事情，请勿用于违法用途，请勿倒卖，否则将追究法律责任</p></blockquote><p>本教程编写耗时<font color='red'>180分钟</font>且浏览完全免费，且看且珍惜</p><p>前期步骤基本和超星学习通的教程差不多</p><h1 id="作者建议"><a href="#作者建议" class="headerlink" title="作者建议"></a>作者建议</h1><p>建议在阳间的时间刷课，后台可以看到浏览时间的</p><h1 id="工具准备"><a href="#工具准备" class="headerlink" title="工具准备"></a>工具准备</h1><ol><li><p>一台能上网的电脑</p></li><li><p>Google Chrome（推荐）</p><p>没有Google的可以用Windows自带的Edge浏览器（</p></li><li><p>脚本猫（用篡改猴也行，本教程以脚本猫为例</p><p>详情：<a href="https://docs.scriptcat.org/docs/use/#/">脚本猫使用文档</a></p></li><li><p>一个魔法工具（梯子）</p><p><font color="#3333FF">需要特别注意的是，使用本工具有一定的流量计费，3.8-38.8 不等，根据自己需要选择</font>，此费用也不是我本人收取，而是流量的提供方收取，特别注意这点<font color="#FF0000" size=5>如果你介意此费用，你可以关闭此页面退出阅读了。</font>具体注意事项下面会提到</p></li><li><p>OCS客户端</p></li><li><p>一个懂的百度的大脑（不是</p></li><li><p>一双灵敏的眼睛（不是</p></li><li><p>一个耐心看教程的好习惯（不是</p></li><li><p>一颗真诚的心和<font color='red'>良好的态度</font>，有问题<a href="https://qm.qq.com/q/9n506oZ8Ri&personal_qrcode_source=4">联系博主</a></p><p>（实在懒得弄可以找我低价代刷</p></li></ol><h1 id="开始操作"><a href="#开始操作" class="headerlink" title="开始操作"></a>开始操作</h1><p>有了这个工具，你不只是能进ai，还可以高速浏览GitHub等网站，以及…………</p><h2 id="爬墙工具的介绍和安装使用"><a href="#爬墙工具的介绍和安装使用" class="headerlink" title="爬墙工具的介绍和安装使用"></a>爬墙工具的介绍和安装使用</h2><h3 id="工具介绍"><a href="#工具介绍" class="headerlink" title="工具介绍"></a>工具介绍</h3><p><font color="#FF3333">这些你都不需要记，看看就行</font></p><p>​虚拟专用网络(Virtual Private Network，VPN)是专用网络的延伸，它包含了类似Internet的共享或公共网络链接。通过VPN可以以模拟点对点专用链接的方式通过共享或公共网络在两台计算机之间发送数据。</p><p>　　如果说得再通俗一点，VPN实际上是”线路中的线路”，类型于城市大道上的”公交专用线”，所不同的是，由VPN组成的”线路”并不是物理存在的，而是通过技术手段模拟出来，即是”虚拟”的。不过，这种虚拟的专用网络技术却可以在一条公用线路中为两台计算机建立一个逻辑上的专用”通道”，它具有良好的保密和不受干扰性，使双方能进行自由而安全的点对点连接，因此被网络管理员们非常广泛地关注着。</p><p>　　通过虚拟专用网，我们在家就可以轻松安全的登录到公司的内部网络上，这样可以实现我们在家办公的梦想了。</p><h3 id="账号注册"><a href="#账号注册" class="headerlink" title="账号注册"></a>账号注册</h3><p>微信搜索公众号关注：  <code>W1ndys_Official</code>  点击下方菜单GPT可获取注册地址</p><p><img src="/img/VPN/wx.png" srcset="/img/loading.gif" lazyload alt="注册"></p><p>输入邮箱密码注册账号，注册完成后登陆</p><p><img src="/img/VPN/%E6%B3%A8%E5%86%8C%E8%B4%A6%E5%8F%B7.png" srcset="/img/loading.gif" lazyload alt="注册"></p><p>然后点击左侧购买订阅</p><p><img src="/img/VPN/%E8%AE%A2%E9%98%85.png" srcset="/img/loading.gif" lazyload alt="订阅"></p><p>根据需求选择你合适的方案，如果你只是想尝鲜的话，毫无疑问，选最便宜的，能用就行</p><p><img src="/img/VPN/%E8%B4%AD%E4%B9%B0%E8%AE%A2%E9%98%85.png" srcset="/img/loading.gif" lazyload alt="购买订阅"></p><p>我本人用的是<font color="#FF0000">38.8巨量不限时，推荐这个</font>，大约可以用2年左右，平均下来大约0.6&#x2F;天</p><blockquote><p>因为我不只有这一个需求，另外还有使用<font color="#FF0000">ChatGPT，bingai</font>等的需求，所以这个是最划算的。</p></blockquote><p>另外关于如何使用ChatGPT的教程以后有时间我会写，OpenAI官方的ChatGPT</p><p>买完之后点击左上方仪表盘可以看到你的已订阅</p><p><img src="/img/VPN/%E4%BB%AA%E8%A1%A8%E7%9B%98.png" srcset="/img/loading.gif" lazyload alt="仪表盘"></p><p>然后点击仪表盘下方的使用文档</p><p><img src="/img/VPN/%E5%AE%A2%E6%88%B7%E7%AB%AF.png" srcset="/img/loading.gif" lazyload alt="客户端安装"></p><p>选择你的系统安装客户端</p><p>安装完之后登陆客户端就可以看到这样</p><p><img src="/img/VPN/%E5%AE%89%E8%A3%85%E5%AE%8C%E6%88%90.png" srcset="/img/loading.gif" lazyload alt="安装完成"></p><h3 id="连接节点"><a href="#连接节点" class="headerlink" title="连接节点"></a>连接节点</h3><p>目前为止已经基本结束了，点击连接，点进去选个绿色的节点，点全局，<font color="#FF0000">如果后续出现连接失败就换个节点</font></p><p><img src="/img/VPN/%E8%8A%82%E7%82%B9.png" srcset="/img/loading.gif" lazyload alt="节点"></p><h2 id="脚本安装"><a href="#脚本安装" class="headerlink" title="脚本安装"></a>脚本安装</h2><p>首先安装脚本猫，点击进入<a href="https://docs.scriptcat.org/docs/use/#/">脚本猫使用文档</a></p><p><img src="/img/xxt-ScriptCat/1.jpg" srcset="/img/loading.gif" lazyload alt="安装脚本猫"></p><p>根据自己浏览器选择安装，这里以Google Chrome为例</p><p>（如果长时间进不去则需要<font color='red'>科学上网</font>，由于种种原因这里不过多赘述）</p><p><img src="/img/xxt-ScriptCat/2.jpg" srcset="/img/loading.gif" lazyload alt="安装脚本猫"></p><p>进来之后点击图示右上角安装（由于我已经安装过了所以图示是remove）</p><p><img src="/img/xxt-ScriptCat/3.jpg" srcset="/img/loading.gif" lazyload alt="启用脚本猫"></p><p>然后进入浏览器扩展中心可以看到已经安装好了，启用该扩展</p><p>然后<a href="https://docs.ocsjs.com/docs/app#%E8%BD%AF%E4%BB%B6%E4%B8%8B%E8%BD%BD%E5%88%97%E8%A1%A8">进入OCS使用文档</a>下载OCS客户端</p><p>（进去可能会让你下载视频，那个是操作教程，可看可不看，我会在后面写教程）</p><p><img src="/img/ocs/1.jpg" srcset="/img/loading.gif" lazyload alt="下载OCS客户端"></p><p>下载之后安装，直接双击exe文件就行，没啥别的要动的</p><p>下载完之后在桌面应该可以看到图标，双击图标打开</p><ol><li>进入软件后，一键初始化软件，选择浏览器，脚本管理器和脚本，点击安装。</li><li>新建浏览器， 点击右侧蓝色按钮启动</li><li>等待“OCS导航页”页面加载完成后（可能会卡死，可重启或者直接刷新页面）进入任意网课平台即可，等待期间请勿操作浏览器。</li></ol><p>（更具体的教程和使用须知可以看软件内部自带的教程）</p><p><img src="/img/ocs/2.jpg" srcset="/img/loading.gif" lazyload alt="新建浏览器"></p><p>点击新建浏览器，然后点击创建之后浏览器之后的小三角</p><p>之后等待操作自动完成，可以看到可以刷题的网站</p><p><img src="/img/ocs/3.jpg" srcset="/img/loading.gif" lazyload alt="初始化完成"></p><p>然后点击智慧树知到（如果是刷学习通的话点学习通，这里不过多赘述）</p><p>然后登录上自己的账号（其实不登录也行，主要是要配置题库）</p><p>找到下面这个东西</p><p><img src="/img/ocs/4.jpg" srcset="/img/loading.gif" lazyload alt="ocs配置"></p><p>点击通用，点击全局设置</p><p>根据自己需要进行下面配置</p><p><img src="/img/ocs/5.jpg" srcset="/img/loading.gif" lazyload alt="题库配置"></p><p><a href="https://tk.enncy.cn/">点击进入题库管理平台</a></p><h2 id="ocs题库设置"><a href="#ocs题库设置" class="headerlink" title="ocs题库设置"></a>ocs题库设置</h2><h3 id="第一步：注册题库账号"><a href="#第一步：注册题库账号" class="headerlink" title="第一步：注册题库账号"></a>第一步：注册题库账号</h3><p>右上角注册，具体这个就不说了，只能用邮箱注册，之前用爱发电登录的请使用其他登录 <code>爱发电授权登录</code> 。</p><h3 id="第二步：登录题库，复制题库凭证"><a href="#第二步：登录题库，复制题库凭证" class="headerlink" title="第二步：登录题库，复制题库凭证"></a>第二步：登录题库，复制题库凭证</h3><p>登录后将会自动跳转到个人中心，每个人新注册账号可以获得100次免费搜题次数，找到 <strong>题库配置</strong> , 最后点击复制。</p><p><img src="https://tk.enncy.cn/image/details.png" srcset="/img/loading.gif" lazyload alt="login"></p><h3 id="第三步：配置脚本题库"><a href="#第三步：配置脚本题库" class="headerlink" title="第三步：配置脚本题库"></a>第三步：配置脚本题库</h3><p>在浏览器中打开你的网课， 进入学习，作业，考试页面，然后按照以下步骤配置：</p><p><img src="https://tk.enncy.cn/image/new-tkpz.png" srcset="/img/loading.gif" lazyload alt="login"></p><h3 id="最后一步：刷新页面"><a href="#最后一步：刷新页面" class="headerlink" title="最后一步：刷新页面"></a>最后一步：刷新页面</h3><p>等待运行到自动答题章节后，查看搜题结果，如果搜索到了则为配置成功！</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul><li>如果次数使用完毕，进入个人中心购买次数即可</li><li>收费项目归平台所有，与本人无关，酌情选择</li><li>平台收费价格为1元&#x2F;100次，3元&#x2F;2000次，10元&#x2F;10000次，50元&#x2F;十万次</li></ul><h2 id="刷课配置"><a href="#刷课配置" class="headerlink" title="刷课配置"></a>刷课配置</h2><p>由于智慧树知到有习惯分，脚本提供了习惯刷课功能</p><p><img src="/img/ocs/7.jpg" srcset="/img/loading.gif" lazyload alt="习惯分"></p><p>点击右上角<strong>知到智慧树</strong>，点击<strong>学习脚本</strong></p><p><img src="/img/ocs/8.jpg" srcset="/img/loading.gif" lazyload alt="习惯分"></p><p>根据喜好进行刷课即可，建议每天半小时，有习惯分</p><h1 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h1><p>由于我这学期没有智慧树平台的相关课程，各位自己偷偷刷吧</p><h1 id="用户协议"><a href="#用户协议" class="headerlink" title="用户协议"></a>用户协议</h1><ol><li>使用本教程即代表同意此用户协议</li><li>使用本教程所带来的后果均由用户个人承担</li><li>本教程所涉及的消费均与本人无关</li><li>本教程未经本人允许禁止转载</li><li>不要跟我杠，杠就是你对</li><li>我本人有<strong>抑郁症</strong>病史，玩过小红书，若本人遭受任何形式的网络暴力 (包括但不限于发送淫 &#x2F; 秽血 &#x2F; 腥图片，问候我家人), 并出现极端行为。一切都是<strong>本人的错</strong>和大家无关</li><li>本教程旨在节省大家时间，让大家去做更有意义的事情，请勿用于违法用途，请勿倒卖，否则将追究法律责任</li><li><font color='blue'>博主W1ndys享有最终解释权</font></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;前言：使用本工具请自觉遵守国家法律法规，下载后请24小时之内删除，本教程来自&lt;a href=&quot;http://www.w1ndys.top/&quot;&gt;www.w1ndys.top&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;u&gt;使用&lt;/u&gt;本教程即代表用户同意本教程&lt;a hr</summary>
      
    
    
    
    <category term="线上课答案" scheme="https://w1ndys.github.io/categories/%E7%BA%BF%E4%B8%8A%E8%AF%BE%E7%AD%94%E6%A1%88/"/>
    
    <category term="智慧树知到" scheme="https://w1ndys.github.io/categories/%E7%BA%BF%E4%B8%8A%E8%AF%BE%E7%AD%94%E6%A1%88/%E6%99%BA%E6%85%A7%E6%A0%91%E7%9F%A5%E5%88%B0/"/>
    
    <category term="刷课脚本" scheme="https://w1ndys.github.io/categories/%E7%BA%BF%E4%B8%8A%E8%AF%BE%E7%AD%94%E6%A1%88/%E6%99%BA%E6%85%A7%E6%A0%91%E7%9F%A5%E5%88%B0/%E5%88%B7%E8%AF%BE%E8%84%9A%E6%9C%AC/"/>
    
    
    <category term="线上课答案库" scheme="https://w1ndys.github.io/tags/%E7%BA%BF%E4%B8%8A%E8%AF%BE%E7%AD%94%E6%A1%88%E5%BA%93/"/>
    
    <category term="智慧树知到" scheme="https://w1ndys.github.io/tags/%E6%99%BA%E6%85%A7%E6%A0%91%E7%9F%A5%E5%88%B0/"/>
    
    <category term="刷课脚本" scheme="https://w1ndys.github.io/tags/%E5%88%B7%E8%AF%BE%E8%84%9A%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>用C++调用MIDI演奏曲阜师范大学校歌</title>
    <link href="https://w1ndys.github.io/posts/e0155dca"/>
    <id>https://w1ndys.github.io/posts/e0155dca</id>
    <published>2024-01-14T11:06:36.947Z</published>
    <updated>2024-01-14T08:22:37.791Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h1><p>有一天在B站上看到有大佬用c++演奏音乐，一开始还不知道是调用MIDI函数，后来百度，查CSDN才知道是用函数调用，我直接转手写一个自己学校的校歌</p><h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><p>首先准备好校歌的键盘，想必大家通知书上都有吧</p><p>然后是c++编译器，我用Visual Studio 2022</p><p>然后是一些乐理知识，由于我是一个纯工科生，对乐理知识了解程度为0，只能大体看音调，不认识节拍，无奈只能去群里找懂行的人，很巧就有一个19的师姐还一个22的同学解答了我的疑惑</p><h1 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h1><p>Scale函数</p><p>这个函数是一个简谱对照表，相当于base64编码的编码表</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Scale</span><br><br>&#123;<br><br>    Rest = <span class="hljs-number">0</span>, C8 = <span class="hljs-number">108</span>, B7 = <span class="hljs-number">107</span>, A7s = <span class="hljs-number">106</span>, A7 = <span class="hljs-number">105</span>, G7s = <span class="hljs-number">104</span>, G7 = <span class="hljs-number">103</span>, F7s = <span class="hljs-number">102</span>, F7 = <span class="hljs-number">101</span>, E7 = <span class="hljs-number">100</span>,<br><br>    D7s = <span class="hljs-number">99</span>, D7 = <span class="hljs-number">98</span>, C7s = <span class="hljs-number">97</span>, C7 = <span class="hljs-number">96</span>, B6 = <span class="hljs-number">95</span>, A6s = <span class="hljs-number">94</span>, A6 = <span class="hljs-number">93</span>, G6s = <span class="hljs-number">92</span>, G6 = <span class="hljs-number">91</span>, F6s = <span class="hljs-number">90</span>, F6 = <span class="hljs-number">89</span>,<br><br>    E6 = <span class="hljs-number">88</span>, D6s = <span class="hljs-number">87</span>, D6 = <span class="hljs-number">86</span>, C6s = <span class="hljs-number">85</span>, C6 = <span class="hljs-number">84</span>, B5 = <span class="hljs-number">83</span>, A5s = <span class="hljs-number">82</span>, A5 = <span class="hljs-number">81</span>, G5s = <span class="hljs-number">80</span>, G5 = <span class="hljs-number">79</span>, F5s = <span class="hljs-number">78</span>,<br><br>    F5 = <span class="hljs-number">77</span>, E5 = <span class="hljs-number">76</span>, D5s = <span class="hljs-number">75</span>, D5 = <span class="hljs-number">74</span>, C5s = <span class="hljs-number">73</span>, C5 = <span class="hljs-number">72</span>, B4 = <span class="hljs-number">71</span>, A4s = <span class="hljs-number">70</span>, A4 = <span class="hljs-number">69</span>, G4s = <span class="hljs-number">68</span>, G4 = <span class="hljs-number">67</span>,<br><br>    F4s = <span class="hljs-number">66</span>, F4 = <span class="hljs-number">65</span>, E4 = <span class="hljs-number">64</span>, D4s = <span class="hljs-number">63</span>, D4 = <span class="hljs-number">62</span>, C4s = <span class="hljs-number">61</span>, C4 = <span class="hljs-number">60</span>, B3 = <span class="hljs-number">59</span>, A3s = <span class="hljs-number">58</span>, A3 = <span class="hljs-number">57</span>, G3s = <span class="hljs-number">56</span>,<br><br>    G3 = <span class="hljs-number">55</span>, F3s = <span class="hljs-number">54</span>, F3 = <span class="hljs-number">53</span>, E3 = <span class="hljs-number">52</span>, D3s = <span class="hljs-number">51</span>, D3 = <span class="hljs-number">50</span>, C3s = <span class="hljs-number">49</span>, C3 = <span class="hljs-number">48</span>, B2 = <span class="hljs-number">47</span>, A2s = <span class="hljs-number">46</span>, A2 = <span class="hljs-number">45</span>,<br><br>    G2s = <span class="hljs-number">44</span>, G2 = <span class="hljs-number">43</span>, F2s = <span class="hljs-number">42</span>, F2 = <span class="hljs-number">41</span>, E2 = <span class="hljs-number">40</span>, D2s = <span class="hljs-number">39</span>, D2 = <span class="hljs-number">38</span>, C2s = <span class="hljs-number">37</span>, C2 = <span class="hljs-number">36</span>, B1 = <span class="hljs-number">35</span>, A1s = <span class="hljs-number">34</span>,<br><br>    A1 = <span class="hljs-number">33</span>, G1s = <span class="hljs-number">32</span>, G1 = <span class="hljs-number">31</span>, F1s = <span class="hljs-number">30</span>, F1 = <span class="hljs-number">29</span>, E1 = <span class="hljs-number">28</span>, D1s = <span class="hljs-number">27</span>, D1 = <span class="hljs-number">26</span>, C1s = <span class="hljs-number">25</span>, C1 = <span class="hljs-number">24</span>, B0 = <span class="hljs-number">23</span>,<br><br>    A0s = <span class="hljs-number">22</span>, A0 = <span class="hljs-number">21</span><br><br>&#125;;<br></code></pre></td></tr></table></figure><p>然后是Voice函数，这个是控制声音的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Voice</span><br><br>&#123;<br><br>    X1 = C2, X2 = D2, X3 = E2, X4 = F2, X5 = G2, X6 = A2, X7 = B2,<br><br>    L1 = C3, L2 = D3, L3 = E3, L4 = F3, L5 = G3, L6 = A3, L7 = B3,<br><br>    M1 = C4, M2 = D4, M3 = E4, M4 = F4, M5 = G4, M6 = A4, M7 = B4,<br><br>    H1 = C5, H2 = D5, H3 = E5, H4 = F5, H5 = G5, H6 = A5, H7 = B5,<br><br>    LOW_SPEED = <span class="hljs-number">500</span>, MIDDLE_SPEED = <span class="hljs-number">400</span>, HIGH_SPEED = <span class="hljs-number">300</span>,<br><br>    _ = <span class="hljs-number">0XFF</span><br><br>&#125;;<br></code></pre></td></tr></table></figure><p>然后就到最核心的了，就是编谱，把简谱翻译成代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span>   <span class="hljs-title">QFNU</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    HMIDIOUT handle;<br>    <span class="hljs-built_in">midiOutOpen</span>(&amp;handle, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, CALLBACK_NULL);<br>    <span class="hljs-type">int</span> volume = <span class="hljs-number">0x7f</span>;<br>    <span class="hljs-type">int</span> voice = <span class="hljs-number">0x0</span>;<br>    <span class="hljs-type">int</span> sleep = <span class="hljs-number">300</span>;<br>    <span class="hljs-type">int</span> QFNU[] =<br>    &#123;<br>         M1,_,M1,_,M1,_,M2,_,<br>        M3,_,M5,_,M5,_,_,_,<br>        M6,_,M6,_,M5,_,M3,_,<br>        M1,_,M2,M3,M2,_,_,_,<br>        M3,_,M3,_,M5,_,M5,_,<br>        M3,_,M2,_,M1,_,L6,_,<br>        L5,L6,M1,M2,M3,_,M5,_,<br>        M2,_,_,_,_,_,<br>        M1,_,M1,_,M1,_,M2,_,<br>        M3,_,M5,_,M5,_,_,<br>        M6,_,M6,_,M5,_,M3,_,<br>        M1,_,M2,M3,M2,_,_,<br>        M3,_,M3,_,M5,_,M5,_,<br>        M3,_,M2,_,M1,_,L6,_,<br>        L5,L6,M1,M2,M3,_,M2,_,<br>        M1,_,_,_,_,<br>        H1,_,H1,_,H1,_,_,_,<br>        M3,_,M5,M6,M5,_,_,_,<br>        M6,_,M5,_,M4,_,M1,_,<br>        M7,_,M6,M7,M5,_,_,_,<br>        M6,_,H1,_,H1,_,H1,_,<br>        M3,_,M5,M6,M6,_,M6,_,<br>        M6,M5,M4,M4,M4,_,_,_,<br>        M2,M2,M2,M3,_,M2,_,_,_,<br>        H1,_,H1,_,H1,_,_,_,<br>        M3,_,M5,M6,M5,_,_,_,<br>        M6,_,M5,_,M4,_,M1,_,<br>        M7,_,M6,M7,M5,_,_,_,<br>        M6,_,H1,_,H1,_,H1,_,<br>        M3,M3,M5,M6,M6,_,_,_,<br>        M2,M3,M5,M5,M5,M5,M5,M5,_,<br>        H2,_,H2,_,M6,_,M7,_,<br>        H1,H1,H1,H1,H1,H1,<br>    &#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i : QFNU)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (i == LOW_SPEED || i == HIGH_SPEED || i == MIDDLE_SPEED)<br>        &#123;<br>            sleep = i;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span>) &#123; sleep = <span class="hljs-number">150</span>; <span class="hljs-keyword">continue</span>; &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">700</span>) &#123; <span class="hljs-built_in">Sleep</span>(<span class="hljs-number">150</span>); <span class="hljs-keyword">continue</span>; &#125;<br>        <span class="hljs-keyword">if</span> (i == _)<br>        &#123;<br>            <span class="hljs-built_in">Sleep</span>(<span class="hljs-number">300</span>);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        voice = (volume &lt;&lt; <span class="hljs-number">16</span>) + ((i) &lt;&lt; <span class="hljs-number">8</span>) + <span class="hljs-number">0x90</span>;<br>        <span class="hljs-built_in">midiOutShortMsg</span>(handle, voice);<br>        cout &lt;&lt; voice &lt;&lt; endl;<br>        <span class="hljs-built_in">Sleep</span>(sleep);<br>    &#125;<br>    <span class="hljs-built_in">midiOutClose</span>(handle);<br>&#125;<br></code></pre></td></tr></table></figure><p>最后用int main主函数调用就可以</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">QFNU</span>();<span class="hljs-comment">//犁牛之子</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> comment(lib,<span class="hljs-string">&quot;winmm.lib&quot;</span>)</span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Scale</span><br><br>&#123;<br><br>    Rest = <span class="hljs-number">0</span>, C8 = <span class="hljs-number">108</span>, B7 = <span class="hljs-number">107</span>, A7s = <span class="hljs-number">106</span>, A7 = <span class="hljs-number">105</span>, G7s = <span class="hljs-number">104</span>, G7 = <span class="hljs-number">103</span>, F7s = <span class="hljs-number">102</span>, F7 = <span class="hljs-number">101</span>, E7 = <span class="hljs-number">100</span>,<br><br>    D7s = <span class="hljs-number">99</span>, D7 = <span class="hljs-number">98</span>, C7s = <span class="hljs-number">97</span>, C7 = <span class="hljs-number">96</span>, B6 = <span class="hljs-number">95</span>, A6s = <span class="hljs-number">94</span>, A6 = <span class="hljs-number">93</span>, G6s = <span class="hljs-number">92</span>, G6 = <span class="hljs-number">91</span>, F6s = <span class="hljs-number">90</span>, F6 = <span class="hljs-number">89</span>,<br><br>    E6 = <span class="hljs-number">88</span>, D6s = <span class="hljs-number">87</span>, D6 = <span class="hljs-number">86</span>, C6s = <span class="hljs-number">85</span>, C6 = <span class="hljs-number">84</span>, B5 = <span class="hljs-number">83</span>, A5s = <span class="hljs-number">82</span>, A5 = <span class="hljs-number">81</span>, G5s = <span class="hljs-number">80</span>, G5 = <span class="hljs-number">79</span>, F5s = <span class="hljs-number">78</span>,<br><br>    F5 = <span class="hljs-number">77</span>, E5 = <span class="hljs-number">76</span>, D5s = <span class="hljs-number">75</span>, D5 = <span class="hljs-number">74</span>, C5s = <span class="hljs-number">73</span>, C5 = <span class="hljs-number">72</span>, B4 = <span class="hljs-number">71</span>, A4s = <span class="hljs-number">70</span>, A4 = <span class="hljs-number">69</span>, G4s = <span class="hljs-number">68</span>, G4 = <span class="hljs-number">67</span>,<br><br>    F4s = <span class="hljs-number">66</span>, F4 = <span class="hljs-number">65</span>, E4 = <span class="hljs-number">64</span>, D4s = <span class="hljs-number">63</span>, D4 = <span class="hljs-number">62</span>, C4s = <span class="hljs-number">61</span>, C4 = <span class="hljs-number">60</span>, B3 = <span class="hljs-number">59</span>, A3s = <span class="hljs-number">58</span>, A3 = <span class="hljs-number">57</span>, G3s = <span class="hljs-number">56</span>,<br><br>    G3 = <span class="hljs-number">55</span>, F3s = <span class="hljs-number">54</span>, F3 = <span class="hljs-number">53</span>, E3 = <span class="hljs-number">52</span>, D3s = <span class="hljs-number">51</span>, D3 = <span class="hljs-number">50</span>, C3s = <span class="hljs-number">49</span>, C3 = <span class="hljs-number">48</span>, B2 = <span class="hljs-number">47</span>, A2s = <span class="hljs-number">46</span>, A2 = <span class="hljs-number">45</span>,<br><br>    G2s = <span class="hljs-number">44</span>, G2 = <span class="hljs-number">43</span>, F2s = <span class="hljs-number">42</span>, F2 = <span class="hljs-number">41</span>, E2 = <span class="hljs-number">40</span>, D2s = <span class="hljs-number">39</span>, D2 = <span class="hljs-number">38</span>, C2s = <span class="hljs-number">37</span>, C2 = <span class="hljs-number">36</span>, B1 = <span class="hljs-number">35</span>, A1s = <span class="hljs-number">34</span>,<br><br>    A1 = <span class="hljs-number">33</span>, G1s = <span class="hljs-number">32</span>, G1 = <span class="hljs-number">31</span>, F1s = <span class="hljs-number">30</span>, F1 = <span class="hljs-number">29</span>, E1 = <span class="hljs-number">28</span>, D1s = <span class="hljs-number">27</span>, D1 = <span class="hljs-number">26</span>, C1s = <span class="hljs-number">25</span>, C1 = <span class="hljs-number">24</span>, B0 = <span class="hljs-number">23</span>,<br><br>    A0s = <span class="hljs-number">22</span>, A0 = <span class="hljs-number">21</span><br><br>&#125;;<br><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Voice</span><br><br>&#123;<br><br>    X1 = C2, X2 = D2, X3 = E2, X4 = F2, X5 = G2, X6 = A2, X7 = B2,<br><br>    L1 = C3, L2 = D3, L3 = E3, L4 = F3, L5 = G3, L6 = A3, L7 = B3,<br><br>    M1 = C4, M2 = D4, M3 = E4, M4 = F4, M5 = G4, M6 = A4, M7 = B4,<br><br>    H1 = C5, H2 = D5, H3 = E5, H4 = F5, H5 = G5, H6 = A5, H7 = B5,<br><br>    LOW_SPEED = <span class="hljs-number">500</span>, MIDDLE_SPEED = <span class="hljs-number">400</span>, HIGH_SPEED = <span class="hljs-number">300</span>,<br><br>    _ = <span class="hljs-number">0XFF</span><br><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span>   <span class="hljs-title">QFNU</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    HMIDIOUT handle;<br>    <span class="hljs-built_in">midiOutOpen</span>(&amp;handle, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, CALLBACK_NULL);<br>    <span class="hljs-type">int</span> volume = <span class="hljs-number">0x7f</span>;<br>    <span class="hljs-type">int</span> voice = <span class="hljs-number">0x0</span>;<br>    <span class="hljs-type">int</span> sleep = <span class="hljs-number">300</span>;<br>    <span class="hljs-type">int</span> QFNU[] =<br>    &#123;<br>         M1,_,M1,_,M1,_,M2,_,<br>        M3,_,M5,_,M5,_,_,_,<br>        M6,_,M6,_,M5,_,M3,_,<br>        M1,_,M2,M3,M2,_,_,_,<br>        M3,_,M3,_,M5,_,M5,_,<br>        M3,_,M2,_,M1,_,L6,_,<br>        L5,L6,M1,M2,M3,_,M5,_,<br>        M2,_,_,_,_,_,<br>        M1,_,M1,_,M1,_,M2,_,<br>        M3,_,M5,_,M5,_,_,<br>        M6,_,M6,_,M5,_,M3,_,<br>        M1,_,M2,M3,M2,_,_,<br>        M3,_,M3,_,M5,_,M5,_,<br>        M3,_,M2,_,M1,_,L6,_,<br>        L5,L6,M1,M2,M3,_,M2,_,<br>        M1,_,_,_,_,<br>        H1,_,H1,_,H1,_,_,_,<br>        M3,_,M5,M6,M5,_,_,_,<br>        M6,_,M5,_,M4,_,M1,_,<br>        M7,_,M6,M7,M5,_,_,_,<br>        M6,_,H1,_,H1,_,H1,_,<br>        M3,_,M5,M6,M6,_,M6,_,<br>        M6,M5,M4,M4,M4,_,_,_,<br>        M2,M2,M2,M3,_,M2,_,_,_,<br>        H1,_,H1,_,H1,_,_,_,<br>        M3,_,M5,M6,M5,_,_,_,<br>        M6,_,M5,_,M4,_,M1,_,<br>        M7,_,M6,M7,M5,_,_,_,<br>        M6,_,H1,_,H1,_,H1,_,<br>        M3,M3,M5,M6,M6,_,_,_,<br>        M2,M3,M5,M5,M5,M5,M5,M5,_,<br>        H2,_,H2,_,M6,_,M7,_,<br>        H1,H1,H1,H1,H1,H1,<br>    &#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i : QFNU)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (i == LOW_SPEED || i == HIGH_SPEED || i == MIDDLE_SPEED)<br>        &#123;<br>            sleep = i;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span>) &#123; sleep = <span class="hljs-number">150</span>; <span class="hljs-keyword">continue</span>; &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">700</span>) &#123; <span class="hljs-built_in">Sleep</span>(<span class="hljs-number">150</span>); <span class="hljs-keyword">continue</span>; &#125;<br>        <span class="hljs-keyword">if</span> (i == _)<br>        &#123;<br>            <span class="hljs-built_in">Sleep</span>(<span class="hljs-number">300</span>);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        voice = (volume &lt;&lt; <span class="hljs-number">16</span>) + ((i) &lt;&lt; <span class="hljs-number">8</span>) + <span class="hljs-number">0x90</span>;<br>        <span class="hljs-built_in">midiOutShortMsg</span>(handle, voice);<br>        cout &lt;&lt; voice &lt;&lt; endl;<br>        <span class="hljs-built_in">Sleep</span>(sleep);<br>    &#125;<br>    <span class="hljs-built_in">midiOutClose</span>(handle);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">QFNU</span>();<span class="hljs-comment">//犁牛之子</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="后期处理"><a href="#后期处理" class="headerlink" title="后期处理"></a>后期处理</h1><p>简单做个视频剪辑一下</p><p>被曲阜师范大学官方抖音号发表咯！~</p><p>复制口令戳下面代码块左上角↓</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-number">7.94</span> SYm:/ 简单用代码做个音乐，一起看看美好的曲园！# 曲阜师范大学 # 代码 # 编程 # 我在大学等你  https:<span class="hljs-comment">//v.douyin.com/iJnnEGjb/ 复制此链接，打开Dou音搜索，直接观看视频！</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;背景介绍&quot;&gt;&lt;a href=&quot;#背景介绍&quot; class=&quot;headerlink&quot; title=&quot;背景介绍&quot;&gt;&lt;/a&gt;背景介绍&lt;/h1&gt;&lt;p&gt;有一天在B站上看到有大佬用c++演奏音乐，一开始还不知道是调用MIDI函数，后来百度，查CSDN才知道是用函数调用，我直接转</summary>
      
    
    
    
    <category term="QFNU" scheme="https://w1ndys.github.io/categories/QFNU/"/>
    
    
    <category term="QFNU" scheme="https://w1ndys.github.io/tags/QFNU/"/>
    
  </entry>
  
  <entry>
    <title>新标准大学英语（第二版）综合教程 第一册 Unit3-Unit4 U校园</title>
    <link href="https://w1ndys.github.io/posts/95e69ff"/>
    <id>https://w1ndys.github.io/posts/95e69ff</id>
    <published>2024-01-14T11:06:36.945Z</published>
    <updated>2024-01-14T08:22:37.835Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>搬运自微信公众号：必修宝答案</p><p>由于公众号频繁跳转，所以我直接搬过来了，方便查阅</p></blockquote><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/nu5tyQWftroo6HfUshCict32ibUibSKRpqxUNl1fhVIRqaWZaRyn8Wnoz76bhyj4AzOWZ13KDtYSzYbp4krMJP5Hg/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1&tp=wxpic" srcset="/img/loading.gif" lazyload alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/nu5tyQWftroo6HfUshCict32ibUibSKRpqxqcjPcHb8wthXs202y9k6pJ0TdwK6Ofq6VRGUql16rZufR7URQxpvFw/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1&tp=wxpic" srcset="/img/loading.gif" lazyload alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/YGgMmXKsXeibCyrDDU52YZuUJ80nVy8iaYtnB2RwJaTTTQvNF1xOPxQ7Jc2tjSibOuia84O9RtrXzOCFhDlZFTBf4Q/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1&tp=wxpic" srcset="/img/loading.gif" lazyload alt="图片"></p><blockquote><blockquote><p><strong>Unit 3</strong></p></blockquote></blockquote><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/nu5tyQWftroo6HfUshCict32ibUibSKRpqxvraILjPEtqFuuVYyKE4CmiaL3oF4xsJNRy0s95GWg2kJb8ibMu2via1nQ/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1&tp=wxpic" srcset="/img/loading.gif" lazyload alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/nu5tyQWftroo6HfUshCict32ibUibSKRpqx3MDJjSS4tlJT5fRDRPNzLJYCDF3Sbno4xKnibJIPclnszhmczwDsNGw/640?wx_fmt=jpeg&tp=wxpic&wxfrom=5&wx_lazy=1&wx_co=1" srcset="/img/loading.gif" lazyload alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/nu5tyQWftroo6HfUshCict32ibUibSKRpqx7Ga5Ll9q8FBnnGKOCsqITiahGAiardBmA4AeICZ3qmNJyJYYb5616sTQ/640?wx_fmt=jpeg&tp=wxpic&wxfrom=5&wx_lazy=1&wx_co=1" srcset="/img/loading.gif" lazyload alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/nu5tyQWftroo6HfUshCict32ibUibSKRpqxxQJfjtDrdvIwIkQ5Ld5UAaaO0xuk95QPic8wcsERCcj4dJQ65icFa2xw/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1&tp=wxpic" srcset="/img/loading.gif" lazyload alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/nu5tyQWftroo6HfUshCict32ibUibSKRpqxT8ia8lZrBsNKicm6ww9dmw5nWcFD1gDndiauf3J806ptTxoiaFps07IgDg/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1&tp=wxpic" srcset="/img/loading.gif" lazyload alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/nu5tyQWftroo6HfUshCict32ibUibSKRpqxJ5A0hV4EVIdicXHxWia4ZJTjOakedeLtzbZOHtSJ9hXr6ziaza84KQaZg/640?wx_fmt=jpeg&tp=wxpic&wxfrom=5&wx_lazy=1&wx_co=1" srcset="/img/loading.gif" lazyload alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/nu5tyQWftroo6HfUshCict32ibUibSKRpqxC6ZzEQl2DaA1PhicdHvNp1P0u3GSeTjjViaz8l1Dl53sufBH2gzXLVpw/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1&tp=wxpic" srcset="/img/loading.gif" lazyload alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/nu5tyQWftroo6HfUshCict32ibUibSKRpqxd059c7JYic6Fux4y99T5tYxostfFuuNIibPQFLrS2lPIWIVW6n5gw79g/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1&tp=wxpic" srcset="/img/loading.gif" lazyload alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/nu5tyQWftroo6HfUshCict32ibUibSKRpqx9N8wSUOEyiaibibgCaeXAKTuyfC2MLQCecVNRsqpU8iaOatB1WKvP0XHNA/640?wx_fmt=jpeg&tp=wxpic&wxfrom=5&wx_lazy=1&wx_co=1" srcset="/img/loading.gif" lazyload alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/nu5tyQWftroo6HfUshCict32ibUibSKRpqxTwKGLgfiaxam2QZP8sHP9nCQgibIM3hAG5zuyFn8IWfhsETYXwo9aqtg/640?wx_fmt=jpeg&tp=wxpic&wxfrom=5&wx_lazy=1&wx_co=1" srcset="/img/loading.gif" lazyload alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/nu5tyQWftroo6HfUshCict32ibUibSKRpqxev1YcJicu3aV44oicG8VialhVyttWluDzzGZzt9CI8pvFDROLBzdpDqxQ/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1&tp=wxpic" srcset="/img/loading.gif" lazyload alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/nu5tyQWftroo6HfUshCict32ibUibSKRpqxWiclVjJQVYxRh4MXGd29CbUXzthl7icX7wWjJpaicjZqXnnf1ykXJquJQ/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1&tp=wxpic" srcset="/img/loading.gif" lazyload alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/nu5tyQWftroo6HfUshCict32ibUibSKRpqxibl0XWib87zKMJyC3ibsEiahfoF0cpaWPiatHtR51V1RXxs3Pd2nw0zthbA/640?wx_fmt=jpeg&tp=wxpic&wxfrom=5&wx_lazy=1&wx_co=1" srcset="/img/loading.gif" lazyload alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/nu5tyQWftroo6HfUshCict32ibUibSKRpqxOVnhibsoCF0xp9cvkgVEZyfjrHXuDhJkecZ2twJjztc2V8xYh0SQia2Q/640?wx_fmt=jpeg&tp=wxpic&wxfrom=5&wx_lazy=1&wx_co=1" srcset="/img/loading.gif" lazyload alt="图片"></p><blockquote><blockquote><p><strong>unit 4</strong></p></blockquote></blockquote><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/nu5tyQWftroo6HfUshCict32ibUibSKRpqxJAqfYicMwd5VPdic4o5x96TiaLzXHN496FnYw4LNJp12ydrvwftB3RdiaQ/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1&tp=wxpic" srcset="/img/loading.gif" lazyload alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/nu5tyQWftroo6HfUshCict32ibUibSKRpqxtWCOouSbA6XxGyloBApeyXCaicZTadQibibicWFEqZq9fudJC5cYxBxfmQ/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1&tp=wxpic" srcset="/img/loading.gif" lazyload alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/nu5tyQWftroo6HfUshCict32ibUibSKRpqx0peqWyUxzCic4dJtG7b6g52TJ9HApBrA5Mt44BYB6UzfiaxCZmpN55Kg/640?wx_fmt=jpeg&tp=wxpic&wxfrom=5&wx_lazy=1&wx_co=1" srcset="/img/loading.gif" lazyload alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/nu5tyQWftroo6HfUshCict32ibUibSKRpqxbVoHAh7f33gk9c6gKatomLhQ8XxUIxz4ib2BtzwpVGicrUqjzTjvYxuA/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1&tp=wxpic" srcset="/img/loading.gif" lazyload alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/nu5tyQWftroo6HfUshCict32ibUibSKRpqxDhf4ROWfMg3pCAhZNz7mN5CSY0WmpMcWib4nF8DO29fwicIHzag3Yv6w/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1&tp=wxpic" srcset="/img/loading.gif" lazyload alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/nu5tyQWftroo6HfUshCict32ibUibSKRpqxmVckQ6HoZFvic58ewfhEM8coxEn7VicmQI6YtQCia0AdMNibbfXXIR3jLQ/640?wx_fmt=jpeg&tp=wxpic&wxfrom=5&wx_lazy=1&wx_co=1" srcset="/img/loading.gif" lazyload alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/nu5tyQWftroo6HfUshCict32ibUibSKRpqxDNaph1QKVZ7oPFRicoZghoIQcntvAlEj3AlaLemAibV105icApbg9BDlw/640?wx_fmt=jpeg&tp=wxpic&wxfrom=5&wx_lazy=1&wx_co=1" srcset="/img/loading.gif" lazyload alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/nu5tyQWftroo6HfUshCict32ibUibSKRpqxLCBicJwdVSzFttTJhChRDIndeyd6sF0v4msH80gU3rQ9iaAaicZHIkqPg/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1&tp=wxpic" srcset="/img/loading.gif" lazyload alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/nu5tyQWftroo6HfUshCict32ibUibSKRpqxDib4ak5PHFHOfYArZIkYGBpawH1AaUCb1bD7xPYiboTEFN48SpfoSKHA/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1&tp=wxpic" srcset="/img/loading.gif" lazyload alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/nu5tyQWftroo6HfUshCict32ibUibSKRpqxeImTYnKe6ATdkcnwUDWMKCgOBH76rHHdmo9wKYZfGbLuTkzJk6S4hQ/640?wx_fmt=jpeg&tp=wxpic&wxfrom=5&wx_lazy=1&wx_co=1" srcset="/img/loading.gif" lazyload alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/nu5tyQWftroo6HfUshCict32ibUibSKRpqxAyibCmpnmoxRKuyOUsulNaQsHVFSqmsasajQPBOFCr5ldSyOc4qXEWQ/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1&tp=wxpic" srcset="/img/loading.gif" lazyload alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/QFR1hXsarqFvL8eWwicvr82Aon5hkojbaiakQqa921aROBuarXQFwfIFYMnFvNk3T5KkGHg3okYpIu5qVpGtxw3A/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1&tp=wxpic" srcset="/img/loading.gif" lazyload alt="图片"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;搬运自微信公众号：必修宝答案&lt;/p&gt;
&lt;p&gt;由于公众号频繁跳转，所以我直接搬过来了，方便查阅&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nu5tyQWftroo6H</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://w1ndys.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="英语答案" scheme="https://w1ndys.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD%E7%AD%94%E6%A1%88/"/>
    
    <category term="u校园答案" scheme="https://w1ndys.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD%E7%AD%94%E6%A1%88/u%E6%A0%A1%E5%9B%AD%E7%AD%94%E6%A1%88/"/>
    
    
    <category term="英语" scheme="https://w1ndys.github.io/tags/%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>新标准大学英语（第二版）综合教程 第一册 Unit1 U校园</title>
    <link href="https://w1ndys.github.io/posts/9707eb54"/>
    <id>https://w1ndys.github.io/posts/9707eb54</id>
    <published>2024-01-14T11:06:36.944Z</published>
    <updated>2024-01-14T08:22:37.834Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>搬运自微信公众号：必修宝答案</p><p>由于公众号频繁跳转，所以我直接搬过来了，方便查阅</p></blockquote><p><img src="/img/English/uschool1/1.png" srcset="/img/loading.gif" lazyload alt="1"><br><img src="/img/English/uschool1/2.png" srcset="/img/loading.gif" lazyload alt="2"><br><img src="/img/English/uschool1/3.png" srcset="/img/loading.gif" lazyload alt="3"><br><img src="/img/English/uschool1/4.png" srcset="/img/loading.gif" lazyload alt="4"><br><img src="/img/English/uschool1/5.png" srcset="/img/loading.gif" lazyload alt="5"><br><img src="/img/English/uschool1/6.png" srcset="/img/loading.gif" lazyload alt="6"><br><img src="/img/English/uschool1/7.png" srcset="/img/loading.gif" lazyload alt="7"><br><img src="/img/English/uschool1/8.png" srcset="/img/loading.gif" lazyload alt="8"><br><img src="/img/English/uschool1/9.png" srcset="/img/loading.gif" lazyload alt="9"><br><img src="/img/English/uschool1/10.png" srcset="/img/loading.gif" lazyload alt="10"><br><img src="/img/English/uschool1/11.png" srcset="/img/loading.gif" lazyload alt="11"><br><img src="/img/English/uschool1/12.png" srcset="/img/loading.gif" lazyload alt="12"><br><img src="/img/English/uschool1/13.png" srcset="/img/loading.gif" lazyload alt="13"><br><img src="/img/English/uschool1/14.png" srcset="/img/loading.gif" lazyload alt="14"><br><img src="/img/English/uschool1/15.png" srcset="/img/loading.gif" lazyload alt="15"><br><img src="/img/English/uschool1/16.png" srcset="/img/loading.gif" lazyload alt="16"><br><img src="/img/English/uschool1/17.png" srcset="/img/loading.gif" lazyload alt="17"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;搬运自微信公众号：必修宝答案&lt;/p&gt;
&lt;p&gt;由于公众号频繁跳转，所以我直接搬过来了，方便查阅&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/img/English/uschool1/1.png&quot; srcset=&quot;/img/load</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://w1ndys.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="英语答案" scheme="https://w1ndys.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD%E7%AD%94%E6%A1%88/"/>
    
    <category term="u校园答案" scheme="https://w1ndys.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%8B%B1%E8%AF%AD%E7%AD%94%E6%A1%88/u%E6%A0%A1%E5%9B%AD%E7%AD%94%E6%A1%88/"/>
    
    
    <category term="英语" scheme="https://w1ndys.github.io/tags/%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>网络服务扫描实验</title>
    <link href="https://w1ndys.github.io/posts/98c41922"/>
    <id>https://w1ndys.github.io/posts/98c41922</id>
    <published>2024-01-14T11:06:36.942Z</published>
    <updated>2024-01-14T08:22:37.838Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>老师发了个ppt复现一下，顺便发在博客上了</p></blockquote><h1 id="网络服务扫描实验"><a href="#网络服务扫描实验" class="headerlink" title="网络服务扫描实验"></a>网络服务扫描实验</h1><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p>Metasploit工具                        1套</p><p>PC机（win10）                        1台</p><h2 id="预习要求"><a href="#预习要求" class="headerlink" title="预习要求"></a>预习要求</h2><p>做好实验预习，复习网络服务有关内容。</p><p>熟悉实验过程和基本操作流程。</p><p>做好预习报告。</p><h2 id="实验任务"><a href="#实验任务" class="headerlink" title="实验任务"></a>实验任务</h2><p>扫描当前机器的网络服务</p><h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><p>一台安装了Metasploit的计算机。</p><h2 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h2><p>1.Telnet服务相关知识</p><p>2.SSH服务相关知识</p><p>3.数据库相关知识</p><h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h2><h3 id="1-Telnet-version模块"><a href="#1-Telnet-version模块" class="headerlink" title="1.Telnet_version模块"></a>1.Telnet_version模块</h3><h4 id="（1）使用use命令使用telnet-version模块。"><a href="#（1）使用use命令使用telnet-version模块。" class="headerlink" title="（1）使用use命令使用telnet_version模块。"></a>（1）使用use命令使用telnet_version模块。</h4><p> msf &gt; use auxiliary&#x2F;scanner&#x2F;telnet&#x2F;telnet_version</p><p><img src="/img/Metasploit-review/ppp-20231128184410056.png" srcset="/img/loading.gif" lazyload alt="ppp-20231128184410056"></p><h4 id="（2）通过show命令查看模块的设置选项。"><a href="#（2）通过show命令查看模块的设置选项。" class="headerlink" title="（2）通过show命令查看模块的设置选项。"></a>（2）通过show命令查看模块的设置选项。</h4><p> msf auxiliary(telnet_version) &gt; show options</p><p><img src="/img/Metasploit-review/ppp-20231128184439505.png" srcset="/img/loading.gif" lazyload alt="ppp-20231128184439505"></p><blockquote><p>其中Name表示的是需要设置的选项的名称，Current表示的是该选项目前默认的设置值，Setting表示是否进行了设置，Required则表示的是该选项是否必须设置，yes表示必须进行设置，而no则表示可以设置也可以不进行设置。Description则表示的是对选项的介绍。最重要的选项是RHOSTS，即目标地址范围或CIDR标识符。也就是要扫描的地址范围设置。</p></blockquote><h4 id="（3）使用set命令设置目标地址范围。"><a href="#（3）使用set命令设置目标地址范围。" class="headerlink" title="（3）使用set命令设置目标地址范围。"></a>（3）使用set命令设置目标地址范围。</h4><p> msf auxiliary(telnet_version) &gt; set rhosts 10.10.10.0&#x2F;24</p><p>设置后的界面显示如下所示：</p><p><img src="/img/Metasploit-review/ppp-20231128184617822.png" srcset="/img/loading.gif" lazyload alt="ppp-20231128184617822"></p><h4 id="（4）使用set命令设置并发线程的数量。"><a href="#（4）使用set命令设置并发线程的数量。" class="headerlink" title="（4）使用set命令设置并发线程的数量。"></a>（4）使用set命令设置并发线程的数量。</h4><p> msf auxiliary(telnet_version) &gt; set threads 100</p><p>设置后的界面显示如下所示：</p><p><img src="/img/Metasploit-review/ppp-20231128184648890.png" srcset="/img/loading.gif" lazyload alt="ppp-20231128184648890"></p><h4 id="（5）使用run命令来执行扫描。"><a href="#（5）使用run命令来执行扫描。" class="headerlink" title="（5）使用run命令来执行扫描。"></a>（5）使用run命令来执行扫描。</h4><p> msf auxiliary(telnet_version) &gt; run</p><p><img src="/img/Metasploit-review/ppp-20231128184714570.png" srcset="/img/loading.gif" lazyload alt="ppp-20231128184714570"></p><p><img src="/img/Metasploit-review/ppp-20231128184737533.png" srcset="/img/loading.gif" lazyload alt="ppp-20231128184737533"></p><h3 id="2-SSH-version模块"><a href="#2-SSH-version模块" class="headerlink" title="2.SSH_version模块"></a>2.SSH_version模块</h3><h4 id="（1）使用use命令使用ssh-version模块。"><a href="#（1）使用use命令使用ssh-version模块。" class="headerlink" title="（1）使用use命令使用ssh_version模块。"></a>（1）使用use命令使用ssh_version模块。</h4><p> msf &gt; use auxiliary&#x2F;scanner&#x2F;ssh&#x2F;ssh_version</p><p><img src="/img/Metasploit-review/ppp-20231128185532984.png" srcset="/img/loading.gif" lazyload alt="ppp-20231128185532984"></p><h4 id="（2）通过show命令查看模块的设置选项。-1"><a href="#（2）通过show命令查看模块的设置选项。-1" class="headerlink" title="（2）通过show命令查看模块的设置选项。"></a>（2）通过show命令查看模块的设置选项。</h4><p><img src="/img/Metasploit-review/ppp-20231128185622700.png" srcset="/img/loading.gif" lazyload alt="ppp-20231128185622700"></p><blockquote><p>同telnet_version模块相同，ssh_version扫描模块的设置选项也包括Name、Current、Setting、Required和Description五部分，所表示的含义也相同。</p></blockquote><h4 id="（3）使用set命令设置目标地址范围。-1"><a href="#（3）使用set命令设置目标地址范围。-1" class="headerlink" title="（3）使用set命令设置目标地址范围。"></a>（3）使用set命令设置目标地址范围。</h4><p> msf auxiliary(ssh_version) &gt; set rhosts 10.10.10.0&#x2F;24</p><p><img src="/img/Metasploit-review/ppp-20231128190444297.png" srcset="/img/loading.gif" lazyload alt="ppp-20231128190444297"></p><h4 id="（4）使用set命令设置并发线程的数量。-1"><a href="#（4）使用set命令设置并发线程的数量。-1" class="headerlink" title="（4）使用set命令设置并发线程的数量。"></a>（4）使用set命令设置并发线程的数量。</h4><p> msf auxiliary(ssh_version) &gt; set threads 100</p><p><img src="/img/Metasploit-review/ppp-20231128190503895.png" srcset="/img/loading.gif" lazyload alt="ppp-20231128190503895"></p><h4 id="（5）使用run命令来执行扫描。-1"><a href="#（5）使用run命令来执行扫描。-1" class="headerlink" title="（5）使用run命令来执行扫描。"></a>（5）使用run命令来执行扫描。</h4><p> msf auxiliary(ssh_version) &gt; run</p><p><img src="/img/Metasploit-review/ppp-20231128190518744.png" srcset="/img/loading.gif" lazyload alt="ppp-20231128190518744"></p><h3 id="3-SSH-login模块"><a href="#3-SSH-login模块" class="headerlink" title="3.SSH_login模块"></a>3.SSH_login模块</h3><h4 id="（1）使用use命令使用ssh-login模块。"><a href="#（1）使用use命令使用ssh-login模块。" class="headerlink" title="（1）使用use命令使用ssh_login模块。"></a>（1）使用use命令使用ssh_login模块。</h4><p> msf &gt; use auxiliary&#x2F;scanner&#x2F;ssh&#x2F;ssh_login</p><p><img src="/img/Metasploit-review/ppp-20231128191323632.png" srcset="/img/loading.gif" lazyload alt="ppp-20231128191323632"></p><h4 id="（2）通过show命令查看模块的设置选项。-2"><a href="#（2）通过show命令查看模块的设置选项。-2" class="headerlink" title="（2）通过show命令查看模块的设置选项。"></a>（2）通过show命令查看模块的设置选项。</h4><p> msf auxiliary(ssh_login) &gt; show options</p><p><img src="/img/Metasploit-review/ppp-20231128191341256.png" srcset="/img/loading.gif" lazyload alt="ppp-20231128191341256"></p><blockquote><p>与前面相比，ssh_login模块用到的设置项多了很多。下面进行简单的介绍：</p><p>BLANK_PASSWORDS，也就是空白密码的意思，即前面讲到的会先默认对空白密码进行验证。</p><p>BRUTEFORCE_SPEED，暴力破解的速度，从0到5可选。</p><p>PASSWORD，即准备暴力破解使用的密码，虽然不是必须的，但是没有进行暴力破解的密码，模块在验证完空密码后就停止了，因此这个其实是必须设置的。</p><p>PASS_FILE，即准备暴力破解使用的密码文件，PASSWORD是指定单个的密码，而PASS_FILE则是将密码字典放到一个文件里，并且每行只能放置一个密码。</p><p>STOP_ON_SUCCESS，即如果得到主机正在工作的消息，则停止试探密码，一般是设为false的。</p><p>USERNAME，同PASSWORD一样，虽然要求不是必须，但是在实际使用中是需要指定的。</p><p>USERPASS_FILE，是同时存储了密码和用户名的口令字典文件。每行包括一个用户名和对应的一个密码，中间用一个空格分隔开。</p><p>USER_AS_PASS，将所用用户名作为它的密码进行猜测。这在实际使用中很有用，因为经常有些安全意识薄弱的管理员这样设置密码。</p><p>USER_FILE，存储试探用户名的文件，同样每行一个用户名。</p><p>VERBOSE，是否在窗口输出所有的尝试情况，默认是输出的。</p></blockquote><p>在口令猜测时明显需要设置的项或者说可以设置的项变的多了很多，这就需要根据实际情况来进行设置。下面，写一个简单的例子：</p><p>根据上次实验的结果，选取10.10.10.254</p><h4 id="（3）使用set命令设置目标地址范围。-2"><a href="#（3）使用set命令设置目标地址范围。-2" class="headerlink" title="（3）使用set命令设置目标地址范围。"></a>（3）使用set命令设置目标地址范围。</h4><p> msf auxiliary(ssh_login) &gt; set rhosts 10.10.10.254</p><p><img src="/img/Metasploit-review/ppp-20231128191448663.png" srcset="/img/loading.gif" lazyload alt="ppp-20231128191448663"></p><h4 id="（4）使用set命令设置参数username的值。"><a href="#（4）使用set命令设置参数username的值。" class="headerlink" title="（4）使用set命令设置参数username的值。"></a>（4）使用set命令设置参数username的值。</h4><p>在这里仅尝试用户名为root的情况，因此代码如下：</p><p> msf auxiliary(ssh_login) &gt; set username root</p><p><img src="/img/Metasploit-review/ppp-20231128191528700.png" srcset="/img/loading.gif" lazyload alt="ppp-20231128191528700"></p><h4 id="（5）使用set命令设置参数pass-file的值。"><a href="#（5）使用set命令设置参数pass-file的值。" class="headerlink" title="（5）使用set命令设置参数pass_file的值。"></a>（5）使用set命令设置参数pass_file的值。</h4><p>将名称为words.txt的密码字典放在了桌面，因此代码如下：</p><p> msf auxiliary(ssh_login) &gt; set pass_file &#x2F;root&#x2F;Desktop&#x2F;words.txt</p><p><img src="/img/Metasploit-review/ppp-20231128191551676.png" srcset="/img/loading.gif" lazyload alt="ppp-20231128191551676"></p><h4 id="（6）使用set命令设置并发线程的数量。"><a href="#（6）使用set命令设置并发线程的数量。" class="headerlink" title="（6）使用set命令设置并发线程的数量。"></a>（6）使用set命令设置并发线程的数量。</h4><p> msf auxiliary(ssh_login) &gt; set threads 100</p><p><img src="/img/Metasploit-review/ppp-20231128191604997.png" srcset="/img/loading.gif" lazyload alt="ppp-20231128191604997"></p><h4 id="（7）使用run命令来执行扫描。"><a href="#（7）使用run命令来执行扫描。" class="headerlink" title="（7）使用run命令来执行扫描。"></a>（7）使用run命令来执行扫描。</h4><p> msf auxiliary(ssh_login) &gt; run</p><p><img src="/img/Metasploit-review/ppp-20231128192402211.png" srcset="/img/loading.gif" lazyload alt="ppp-20231128192402211"></p><h3 id="4-Mssql-ping模块"><a href="#4-Mssql-ping模块" class="headerlink" title="4.Mssql_ping模块"></a>4.Mssql_ping模块</h3><h4 id="（1）使用use命令使用mssql-ping模块。"><a href="#（1）使用use命令使用mssql-ping模块。" class="headerlink" title="（1）使用use命令使用mssql_ping模块。"></a>（1）使用use命令使用mssql_ping模块。</h4><p> msf &gt; use auxiliary&#x2F;scanner&#x2F;mssql&#x2F;mssql_ping </p><p><img src="/img/Metasploit-review/ppp-20231128192510859.png" srcset="/img/loading.gif" lazyload alt="ppp-20231128192510859"></p><h4 id="（2）通过show命令查看模块的设置选项。-3"><a href="#（2）通过show命令查看模块的设置选项。-3" class="headerlink" title="（2）通过show命令查看模块的设置选项。"></a>（2）通过show命令查看模块的设置选项。</h4><p> msf auxiliary(mssql_ping) &gt; show options</p><p><img src="/img/Metasploit-review/ppp-20231128192529233.png" srcset="/img/loading.gif" lazyload alt="ppp-20231128192529233"></p><blockquote><p>与前面不同的是在mssql_ping模块用到了USERNAME设置项，这起始与Microsoft SQL Server安装时候的一个默认设置有关。在初次安装服务器的时候，会默认创建sa或系统管理员用户。因此，这里USERNAME设置项的默认设置是sa，在这里也不准备进行更改。</p></blockquote><h4 id="（3）使用set命令设置目标地址范围。-3"><a href="#（3）使用set命令设置目标地址范围。-3" class="headerlink" title="（3）使用set命令设置目标地址范围。"></a>（3）使用set命令设置目标地址范围。</h4><p> msf auxiliary(mssql_ping) &gt; set RHOSTS 202.118.176.0&#x2F;24</p><p><img src="/img/Metasploit-review/ppp-20231128192652684.png" srcset="/img/loading.gif" lazyload alt="ppp-20231128192652684"></p><h4 id="（4）使用set命令设置并发线程的数量。-2"><a href="#（4）使用set命令设置并发线程的数量。-2" class="headerlink" title="（4）使用set命令设置并发线程的数量。"></a>（4）使用set命令设置并发线程的数量。</h4><p> msf auxiliary(mssql_ping) &gt; set THREADS 50</p><p><img src="/img/Metasploit-review/ppp-20231128192713890.png" srcset="/img/loading.gif" lazyload alt="ppp-20231128192713890"></p><h4 id="（5）使用run命令来执行扫描。-2"><a href="#（5）使用run命令来执行扫描。-2" class="headerlink" title="（5）使用run命令来执行扫描。"></a>（5）使用run命令来执行扫描。</h4><p> msf auxiliary(mssql_ping) &gt; run</p><p><img src="/img/Metasploit-review/ppp-20231128192801766.png" srcset="/img/loading.gif" lazyload alt="ppp-20231128192801766"></p><h3 id="5-Tnslsnr-version模块"><a href="#5-Tnslsnr-version模块" class="headerlink" title="5.Tnslsnr_version模块"></a>5.Tnslsnr_version模块</h3><h4 id="（1）使用use命令使用tnslsnr-version模块。"><a href="#（1）使用use命令使用tnslsnr-version模块。" class="headerlink" title="（1）使用use命令使用tnslsnr_version模块。"></a>（1）使用use命令使用tnslsnr_version模块。</h4><p> msf &gt; use auxiliary&#x2F;scanner&#x2F;oracle&#x2F;tnslsnr_version </p><p><img src="/img/Metasploit-review/ppp-20231128192902843.png" srcset="/img/loading.gif" lazyload alt="ppp-20231128192902843"></p><h4 id="（2）通过show命令查看模块的设置选项。-4"><a href="#（2）通过show命令查看模块的设置选项。-4" class="headerlink" title="（2）通过show命令查看模块的设置选项。"></a>（2）通过show命令查看模块的设置选项。</h4><p> msf auxiliary(tnslsnr_version) &gt; show options</p><p><img src="/img/Metasploit-review/ppp-20231128192919281.png" srcset="/img/loading.gif" lazyload alt="ppp-20231128192919281"></p><h4 id="（3）使用set命令设置目标地址范围。-4"><a href="#（3）使用set命令设置目标地址范围。-4" class="headerlink" title="（3）使用set命令设置目标地址范围。"></a>（3）使用set命令设置目标地址范围。</h4><p> msf auxiliary(tnslsnr_version)&gt; set RHOSTS 10.10.10.0&#x2F;24</p><p><img src="/img/Metasploit-review/ppp-20231128192949628.png" srcset="/img/loading.gif" lazyload alt="ppp-20231128192949628"></p><h4 id="（4）使用set命令设置并发线程的数量。-3"><a href="#（4）使用set命令设置并发线程的数量。-3" class="headerlink" title="（4）使用set命令设置并发线程的数量。"></a>（4）使用set命令设置并发线程的数量。</h4><p> msf auxiliary(tnslsnr_version) &gt; set THREADS 50</p><p><img src="/img/Metasploit-review/ppp-20231128193004063.png" srcset="/img/loading.gif" lazyload alt="image-20231128193004063"></p><h4 id="（5）使用run命令来执行扫描。-3"><a href="#（5）使用run命令来执行扫描。-3" class="headerlink" title="（5）使用run命令来执行扫描。"></a>（5）使用run命令来执行扫描。</h4><p> msf auxiliary(tnslsnr_version) &gt; run</p><p><img src="/img/Metasploit-review/ppp-20231128193019150.png" srcset="/img/loading.gif" lazyload alt="ppp-20231128193019150"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;老师发了个ppt复现一下，顺便发在博客上了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;网络服务扫描实验&quot;&gt;&lt;a href=&quot;#网络服务扫描实验&quot; class=&quot;headerlink&quot; title=&quot;网络服务扫描实验&quot;&gt;&lt;/a&gt;网络服务扫描</summary>
      
    
    
    
    <category term="网络安全" scheme="https://w1ndys.github.io/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    <category term="网络服务扫描实验" scheme="https://w1ndys.github.io/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E7%BD%91%E7%BB%9C%E6%9C%8D%E5%8A%A1%E6%89%AB%E6%8F%8F%E5%AE%9E%E9%AA%8C/"/>
    
    
    <category term="网络安全" scheme="https://w1ndys.github.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    <category term="网络服务扫描实验" scheme="https://w1ndys.github.io/tags/%E7%BD%91%E7%BB%9C%E6%9C%8D%E5%8A%A1%E6%89%AB%E6%8F%8F%E5%AE%9E%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>通过 Hexo 5 注入器为主题添加新功能</title>
    <link href="https://w1ndys.github.io/posts/de3182ad"/>
    <id>https://w1ndys.github.io/posts/de3182ad</id>
    <published>2024-01-14T11:06:36.940Z</published>
    <updated>2024-01-14T08:22:37.854Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hexo-注入器"><a href="#Hexo-注入器" class="headerlink" title="Hexo 注入器"></a>Hexo 注入器</h2><p><a href="https://hexo.io/zh-cn/api/injector.html">Hexo 注入器</a>是 Hexo 5 版本自身加入的一项新功能，所以在所有 Hexo 主题都是支持这个功能的。</p><p>该注入器可以将 HTML 片段注入生成页面的 <code>&lt;head&gt;</code> 和 <code>&lt;body&gt;</code> 节点中。</p><p>编写注入代码，需要在博客的根目录下创建 <code>scripts</code> 文件夹，然后在里面任意命名创建一个 js 文件即可。</p><p>例如创建一个 <code>/blog/scripts/example.js</code>，内容为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml">hexo.extend.injector.register(&#x27;body_end&#x27;, &#x27;<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/jquery.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>&#x27;, &#x27;default&#x27;);<br><br>JAVASCRIPT<br></code></pre></td></tr></table></figure><p>上述代码会在生成的页面 <code>&lt;/body&gt;</code> 注入加载 <code>jquery.js</code> 的代码。</p><p><code>register</code> 函数可接受三个参数，第一个参数是代码片段注入的位置，接受以下值：<br>- <code>head_begin</code>: 注入在 <code>&lt;head&gt;</code> 之后（默认）<br>- <code>head_end</code>: 注入在 <code>&lt;/head&gt;</code> 之前<br>- <code>body_begin</code>: 注入在 <code>&lt;body&gt;</code> 之后<br>- <code>body_end</code>: 注入在 <code>&lt;/body&gt;</code> 之前</p><p>第二个参数是注入的片段，可以是字符串，也可以是一个返回值为字符串的函数。</p><p>第三个参数是注入的页面类型，接受以下值：<br>- <code>default</code>: 注入到每个页面（默认值）<br>- <code>home</code>: 只注入到主页（<code>is_home()</code> 为 <code>true</code> 的页面）<br>- <code>post</code>: 只注入到文章页面（<code>is_post()</code> 为 <code>true</code> 的页面）<br>- <code>page</code>: 只注入到独立页面（<code>is_page()</code> 为 <code>true</code> 的页面）<br>- <code>archive</code>: 只注入到归档页面（<code>is_archive()</code> 为 <code>true</code> 的页面）<br>- <code>category</code>: 只注入到分类页面（<code>is_category()</code> 为 <code>true</code> 的页面）<br>- <code>tag</code>: 只注入到标签页面（<code>is_tag()</code> 为 <code>true</code> 的页面）<br>- 或是其他自定义 layout 名称，例如在Fluid 主题中 <code>about</code> 对应关于页、<code>links</code> 对应友联页</p><h2 id="实际案例"><a href="#实际案例" class="headerlink" title="实际案例"></a>实际案例</h2><p>在实际使用中，建议将 js 代码独立成为 js 文件，存放在博客的 <code>source</code> 目录下，然后在 <code>scripts</code> 里通过一个包含 injector 的 js 文件统一引入。</p><p>例如创建一个 <code>/source/js/custom.js</code>，里面包含初始化的代码，然后在 <code>/scripts/injector.js</code> 里写入：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">hexo<span class="hljs-selector-class">.extend</span><span class="hljs-selector-class">.injector</span><span class="hljs-selector-class">.register</span>(<span class="hljs-string">&#x27;body_end&#x27;</span>, `<br>  &lt;script <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;/js/custom.js&quot;</span>&gt;&lt;/script&gt;<br>`)<br><br>JAVASCRIPT<br></code></pre></td></tr></table></figure><p>以下案例都采用类似的形式，不再赘述。</p><h3 id="APlayer-音乐播放器"><a href="#APlayer-音乐播放器" class="headerlink" title="APlayer 音乐播放器"></a>APlayer 音乐播放器</h3><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs xquery">hexo.extend.injector.register(<span class="hljs-string">&#x27;body_end&#x27;</span>, `<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;aplayer&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  &lt;link defer rel=<span class="hljs-string">&quot;stylesheet&quot;</span> href=<span class="hljs-string">&quot;https://cdn.staticfile.org/aplayer/1.10.1/APlayer.min.css&quot;</span> /&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.staticfile.org/aplayer/1.10.1/APlayer.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>  &lt;script defer src=<span class="hljs-string">&quot;/js/aplayer.js&quot;</span>&gt;&lt;/script&gt;<br>`);<br><br>JAVASCRIPT<br>!(<span class="hljs-keyword">function</span>() &#123;<br>  var oldLoadAp = <span class="hljs-keyword">window</span>.onload;<br>  <span class="hljs-keyword">window</span>.onload = <span class="hljs-keyword">function</span> () &#123;<br>    oldLoadAp &amp;&amp; oldLoadAp();<br><br>    new APlayer(&#123;<br>      container:<span class="hljs-built_in"> document</span>.getElementById(<span class="hljs-string">&#x27;aplayer&#x27;</span>),<br>      fixed:<span class="hljs-built_in"> true</span>,<br>      autoplay:<span class="hljs-built_in"> false</span>,<br>      loop: <span class="hljs-string">&#x27;all&#x27;</span>,<br>      order: <span class="hljs-string">&#x27;random&#x27;</span>,<br>      theme: <span class="hljs-string">&#x27;#b7daff&#x27;</span>,<br>      preload: <span class="hljs-string">&#x27;none&#x27;</span>,<br>      audio: [<br>        &#123;<br>         <span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;song1&#x27;</span>,<br>          artist: <span class="hljs-string">&#x27;artist1&#x27;</span>,<br>          url: <span class="hljs-string">&#x27;/songs/song1.mp3&#x27;</span>,<br>          cover: <span class="hljs-string">&#x27;/img/cover.jpg&#x27;</span><br>        &#125;<br>      ]<br>    &#125;);<br>  &#125;<br>&#125;)();<br><br>JAVASCRIPT<br></code></pre></td></tr></table></figure><p>更多参数详见 <a href="https://aplayer.js.org/#/zh-Hans/?id=%E5%8F%82%E6%95%B0">Aplayer 文档</a>。</p><h3 id="DaoVoice-聊天插件"><a href="#DaoVoice-聊天插件" class="headerlink" title="DaoVoice 聊天插件"></a>DaoVoice 聊天插件</h3><p>先在 <a href="https://daovoice.io/">https://daovoice.io</a> 注册一个账号，按其中的引导获得 appId，然后添加如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs javascript">hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">injector</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;body_end&#x27;</span>, <span class="hljs-string">`</span><br><span class="hljs-string">  &lt;script defer src=&quot;/js/daovoice.js&quot;&gt;&lt;/script&gt;</span><br><span class="hljs-string">`</span>);<br><br><span class="hljs-variable constant_">XML</span><br>!(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> appId = <span class="hljs-string">&#x27;这里填上注册后账号的 appId&#x27;</span>;<br><br>  (<span class="hljs-keyword">function</span> (<span class="hljs-params">i, s, o, g, r, a, m</span>) &#123;  <br>    i[<span class="hljs-string">&#x27;DaoVoiceObject&#x27;</span>] = r;<br>    i[r] = i[r] ||<br>      <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        (i[r].<span class="hljs-property">q</span> = i[r].<span class="hljs-property">q</span> || []).<span class="hljs-title function_">push</span>(<span class="hljs-variable language_">arguments</span>);<br>      &#125;;<br>    i[r].<span class="hljs-property">l</span> = <span class="hljs-number">1</span> * <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>    a = s.<span class="hljs-title function_">createElement</span>(o);<br>    m = s.<span class="hljs-title function_">getElementsByTagName</span>(o)[<span class="hljs-number">0</span>];<br>    a.<span class="hljs-property">async</span> = <span class="hljs-number">1</span>;<br>    a.<span class="hljs-property">src</span> = g;<br>    a.<span class="hljs-property">charset</span> = <span class="hljs-string">&#x27;utf-8&#x27;</span>;<br>    m.<span class="hljs-property">parentNode</span>.<span class="hljs-title function_">insertBefore</span>(a, m);<br>  &#125;)(<span class="hljs-variable language_">window</span>, <span class="hljs-variable language_">document</span>, <span class="hljs-string">&#x27;script&#x27;</span>, (<span class="hljs-string">&#x27;https:&#x27;</span> === <span class="hljs-variable language_">document</span>.<span class="hljs-property">location</span>.<span class="hljs-property">protocol</span> ? <span class="hljs-string">&#x27;https:&#x27;</span> : <span class="hljs-string">&#x27;http:&#x27;</span>) + <span class="hljs-string">&#x27;//widget.daovoice.io/widget/&#x27;</span> + appId + <span class="hljs-string">&#x27;.js&#x27;</span>, <span class="hljs-string">&#x27;daovoice&#x27;</span>);<br>  <span class="hljs-title function_">daovoice</span>(<span class="hljs-string">&#x27;init&#x27;</span>, &#123;<br>    <span class="hljs-attr">app_id</span>: appId,<br>  &#125;);<br>  <span class="hljs-title function_">daovoice</span>(<span class="hljs-string">&#x27;update&#x27;</span>);<br>&#125;)();<br><br><span class="hljs-variable constant_">JAVASCRIPT</span><br></code></pre></td></tr></table></figure><h3 id="文章时效性提示"><a href="#文章时效性提示" class="headerlink" title="文章时效性提示"></a>文章时效性提示</h3><p>技术性文章往往存在时效性的问题，比如某些文章会介绍一些临时解决方案，但随着时间推移可能已经失效了。我们可以通过判断发布时间（即文章设置的 <code>date</code>）与当前时间的间隔，来为文章开头插入一条提示。</p><p>代码效果如下所示：</p><p>文章时效性提示</p><p>这是一篇发布于 263 天前的文章，部分信息可能已发生改变，请注意甄别。</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs scheme">(<span class="hljs-name">function</span>() &#123;<br>  var times = document.getElementsByTagName(<span class="hljs-symbol">&#x27;time</span>&#x27;)<span class="hljs-comment">;</span><br>  if (<span class="hljs-name">times.length</span> === <span class="hljs-number">0</span>) &#123; return<span class="hljs-comment">; &#125;</span><br>  var posts = document.getElementsByClassName(<span class="hljs-symbol">&#x27;post-content</span>&#x27;)<span class="hljs-comment">;</span><br>  if (<span class="hljs-name">posts.length</span> === <span class="hljs-number">0</span>) &#123; return<span class="hljs-comment">; &#125;</span><br><br>  var pubTime = new Date(<span class="hljs-name">times</span>[<span class="hljs-name">0</span>].dateTime)<span class="hljs-comment">;  /* 文章发布时间戳 */</span><br>  var now = Date.now()  /* 当前时间戳 */<br>  var interval = parseInt(<span class="hljs-name">now</span> - pubTime)<br>  /* 发布时间超过指定时间（毫秒） */<br>  if (<span class="hljs-name">interval</span> &gt; <span class="hljs-number">3600</span>*24*30*1000)&#123;<br>    var days = parseInt(<span class="hljs-name">interval</span> / <span class="hljs-number">86400000</span>)<br>    posts[<span class="hljs-name">0</span>].innerHTML = <span class="hljs-symbol">&#x27;&lt;div</span> class=<span class="hljs-string">&quot;note note-warning&quot;</span> style=<span class="hljs-string">&quot;font-size:0.9rem&quot;</span>&gt;&lt;p&gt;&#x27; +<br>      <span class="hljs-symbol">&#x27;&lt;div</span> class=<span class="hljs-string">&quot;h6&quot;</span>&gt;文章时效性提示&lt;/div&gt;&lt;p&gt;这是一篇发布于 &#x27; + days + &#x27; 天前的文章，部分信息可能已发生改变，请注意甄别。&#x27; +<br>      <span class="hljs-symbol">&#x27;&lt;/p&gt;&lt;/p&gt;&lt;/div&gt;</span>&#x27; + posts[<span class="hljs-name">0</span>].innerHTML<span class="hljs-comment">;</span><br>  &#125;<br>&#125;)()<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Hexo-注入器&quot;&gt;&lt;a href=&quot;#Hexo-注入器&quot; class=&quot;headerlink&quot; title=&quot;Hexo 注入器&quot;&gt;&lt;/a&gt;Hexo 注入器&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://hexo.io/zh-cn/api/injector.ht</summary>
      
    
    
    
    <category term="hexo" scheme="https://w1ndys.github.io/categories/hexo/"/>
    
    <category term="用法" scheme="https://w1ndys.github.io/categories/hexo/%E7%94%A8%E6%B3%95/"/>
    
    
    <category term="hexo" scheme="https://w1ndys.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>提问的智慧</title>
    <link href="https://w1ndys.github.io/posts/fb3832f5"/>
    <id>https://w1ndys.github.io/posts/fb3832f5</id>
    <published>2024-01-14T11:06:36.939Z</published>
    <updated>2024-01-14T08:22:37.857Z</updated>
    
    <content type="html"><![CDATA[<h1 id="提问的智慧"><a href="#提问的智慧" class="headerlink" title="提问的智慧"></a>提问的智慧</h1><p>How To Ask Questions The Smart Way</p><p>Copyright © 2001,2006,2014 Eric S. Raymond, Rick Moen 本指南英文版版权为 Eric S. Raymond, Rick Moen 所有。</p><p>原文网址:<a href="http://www.catb.org/~esr/faqs/smart-questions.html">http://www.catb.org/~esr/faqs/smart-questions.html</a></p><p>Copyleft 2001 by D.H.Grand(nOBODY&#x2F;Ginux), 2010 by Gasolin, 2015 by Ryan Wu 本中文指南是基于原文 3.10 版以及 2010 年由 <a href="https://github.com/gasolin">Gasolin </a>所翻译版本的最新翻译；协助指出翻译问题，<strong>请</strong><a href="https://github.com/ryanhanwu/smartquestions/issues/new">发Issue</a><strong>，或直接</strong><a href="https://github.com/ryanhanwu/smartquestions/compare/">发Pull Request</a><strong>给我。</strong></p><p>本文另有简体中文版: <a href="https://github.com/FredWe/How-To-Ask-Questions-The-Smart-Way/blob/master/README-zh_CN.mdWay/blob/master/README-zh_CN.md">https://github.com/FredWe/How-To-Ask-Questions-The-Smart-Way/blob/master/README-zh_CN.mdWay/blob/master/README-zh_CN.md</a></p><p><font size=5><a href="https://github.com/ryanhanwu/smartquestions/blob/master/history.md">原文版本历史</a></font></p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><p><a href="#%E5%A3%B0%E6%98%8E"> 声明</a></p></li><li><p><a href="#%E7%AE%80%E4%BB%8B"> 简介</a></p></li><li><p><a href="#%E5%9C%A8%E6%8F%90%E9%97%AE%E4%B9%8B%E5%89%8D"> 在提问之前</a></p></li><li><p><a href="#%E5%BD%93%E4%BD%A0%E6%8F%90%E9%97%AE%E6%97%B6"> 当你提问时</a></p><ul><li><p><a href="#%E6%85%8E%E9%80%89%E6%8F%90%E9%97%AE%E7%9A%84%E8%AE%BA%E5%9D%9B"> 慎选提问的论坛</a></p></li><li><p><a href="#%E7%BD%91%E7%AB%99%E5%92%8CIRC%E8%AE%BA%E5%9D%9B"> 网站和IRC论坛</a></p></li><li><p><a href="#%E7%AC%AC%E4%BA%8C%E6%AD%A5%EF%BC%8C%E4%BD%BF%E7%94%A8%E9%A1%B9%E7%9B%AE%E9%82%AE%E4%BB%B6%E5%88%97%E8%A1%A8"> 第二步，使用项目邮件列表</a></p></li><li><p><a href="#%E4%BD%BF%E7%94%A8%E6%9C%89%E6%84%8F%E4%B9%89%E4%B8%94%E6%8F%8F%E8%BF%B0%E6%98%8E%E7%A1%AE%E7%9A%84%E6%A0%87%E9%A2%98"> 使用有意义且描述明确的标题</a></p></li><li><p><a href="#%E4%BD%BF%E9%97%AE%E9%A2%98%E5%AE%B9%E6%98%93%E5%9B%9E%E5%A4%8D"> 使问题容易回复</a></p></li><li><p><a href="#%E7%94%A8%E6%B8%85%E6%99%B0%E3%80%81%E6%AD%A3%E7%A1%AE%E3%80%81%E7%B2%BE%E5%87%86%E5%B9%B6%E5%90%88%E6%B3%95%E8%AF%AD%E6%B3%95%E7%9A%84%E8%AF%AD%E5%8F%A5">用清晰、正确、精准并合法语法的语句</a></p></li><li><p><a href="#%E4%BD%BF%E7%94%A8%E6%98%93%E4%BA%8E%E8%AF%BB%E5%8F%96%E4%B8%94%E6%A0%87%E5%87%86%E7%9A%84%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E5%8F%91%E9%80%81%E9%97%AE%E9%A2%98"> 使用易于读取且标准的文件格式发送问题</a></p></li><li><p><a href="#%E7%B2%BE%E7%A1%AE%E7%9A%84%E6%8F%8F%E8%BF%B0%E9%97%AE%E9%A2%98%E5%B9%B6%E8%A8%80%E4%B9%8B%E6%9C%89%E7%89%A9"> 精确的描述问题并言之有物</a></p></li><li><p><a href="#%E8%AF%9D%E4%B8%8D%E5%9C%A8%E5%A4%9A%E8%80%8C%E5%9C%A8%E7%B2%BE"> 话不在多而在精</a></p></li><li><p><a href="#%E5%88%AB%E5%8A%A8%E8%BE%84%E5%A3%B0%E7%A7%B0%E6%89%BE%E5%88%B0Bug"> 别动辄声称找到Bug</a></p></li><li><p><a href="#%E5%8F%AF%E4%BB%A5%E4%BD%8E%E5%A3%B0%E4%B8%8B%E6%B0%94%EF%BC%8C%E4%BD%86%E8%BF%98%E6%98%AF%E8%A6%81%E5%85%88%E5%81%9A%E5%8A%9F%E8%AF%BE"> 可以低声下气，但还是要先做功课</a></p></li><li><p><a href="#%E6%8F%8F%E8%BF%B0%E9%97%AE%E9%A2%98%E7%97%87%E7%8A%B6%E8%80%8C%E9%9D%9E%E7%8C%9C%E6%B5%8B"> 描述问题症状而非猜测</a></p></li><li><p><a href="#%E6%8C%89%E5%8F%91%E7%94%9F%E6%97%B6%E9%97%B4%E5%85%88%E5%90%8E%E5%88%97%E5%87%BA%E9%97%AE%E9%A2%98%E7%97%87%E7%8A%B6"> 按发生时间先后列出问题症状</a></p></li><li><p><a href="#%E6%8F%8F%E8%BF%B0%E7%9B%AE%E6%A0%87%E8%80%8C%E4%B8%8D%E6%98%AF%E8%BF%87%E7%A8%8B"> 描述目标而不是过程</a></p></li><li><p><a href="#%E5%88%AB%E8%A6%81%E6%B1%82%E4%BD%BF%E7%94%A8%E7%A7%81%E4%BA%BA%E7%94%B5%E9%82%AE%E5%9B%9E%E5%A4%8D"> 别要求使用私人电邮回复</a></p></li><li><p><a href="#%E6%B8%85%E6%A5%9A%E6%98%8E%E7%A1%AE%E7%9A%84%E8%A1%A8%E8%BE%BE%E4%BD%A0%E7%9A%84%E9%97%AE%E9%A2%98%E4%BB%A5%E5%8F%8A%E9%9C%80%E6%B1%82"> 清楚明确的表达你的问题以及需求</a></p></li><li><p><a href="#%E8%AF%A2%E9%97%AE%E6%9C%89%E5%85%B3%E4%BB%A3%E7%A0%81%E7%9A%84%E9%97%AE%E9%A2%98%E6%97%B6"> 询问有关代码的问题时</a></p></li><li><p><a href="#%E5%88%AB%E6%8A%8A%E8%87%AA%E5%B7%B1%E5%AE%B6%E5%BA%AD%E4%BD%9C%E4%B8%9A%E7%9A%84%E9%97%AE%E9%A2%98%E8%B4%B4%E4%B8%8A%E6%9D%A5"> 别把自己家庭作业的问题贴上来</a></p></li><li><p><a href="#%E5%8E%BB%E6%8E%89%E6%97%A0%E6%84%8F%E4%B9%89%E7%9A%84%E6%8F%90%E9%97%AE%E5%8F%A5"> 去掉无意义的提问句</a></p></li><li><p><a href="#%E5%8D%B3%E4%BD%BF%E4%BD%A0%E5%BE%88%E6%80%A5%E4%B9%9F%E4%B8%8D%E8%A6%81%E5%9C%A8%E6%A0%87%E9%A2%98%E5%86%99%E7%B4%A7%E6%80%A5"> 即使你很急也不要在标题写紧急</a></p></li><li><p><a href="#%E7%A4%BC%E5%A4%9A%E4%BA%BA%E4%B8%8D%E6%80%AA%EF%BC%8C%E8%80%8C%E4%B8%94%E6%9C%89%E6%97%B6%E8%BF%98%E5%BE%88%E6%9C%89%E5%B8%AE%E5%8A%A9"> 礼多人不怪，而且有时还很有帮助</a></p></li><li><p><a href="#%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E5%90%8E%EF%BC%8C%E5%8A%A0%E4%B8%AA%E7%AE%80%E7%9F%AD%E7%9A%84%E8%A1%A5%E5%85%85%E8%AF%B4%E6%98%8E"> 问题解决后，加个简短的补充说明</a></p></li></ul></li><li><p><a href="#%E5%A6%82%E4%BD%95%E8%A7%A3%E8%AF%BB%E7%AD%94%E6%A1%88"> 如何解读答案</a></p><ul><li><p><a href="#RTFM%E5%92%8CSTFW%EF%BC%9A%E5%A6%82%E4%BD%95%E7%9F%A5%E9%81%93%E4%BD%A0%E5%B7%B2%E5%AE%8C%E5%85%A8%E6%90%9E%E7%A0%B8%E4%BA%86"> RTFM和STFW：如何知道你已完全搞砸了</a></p></li><li><p><a href="#%E5%A6%82%E6%9E%9C%E8%BF%98%E6%98%AF%E6%90%9E%E4%B8%8D%E6%87%82"> 如果还是搞不懂</a></p></li><li><p><a href="#%E5%A4%84%E7%90%86%E6%97%A0%E7%A4%BC%E7%9A%84%E5%9B%9E%E5%BA%94"> 处理无礼的回应</a></p></li></ul></li><li><p><a href="#%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E6%89%AE%E6%BC%94%E5%A4%B1%E8%B4%A5%E8%80%85"> 如何避免扮演失败者</a></p></li><li><p><a href="#%E4%B8%8D%E8%AF%A5%E9%97%AE%E7%9A%84%E9%97%AE%E9%A2%98"> 不该问的问题</a></p></li><li><p><a href="#%E5%A5%BD%E9%97%AE%E9%A2%98%E4%B8%8E%E8%A0%A2%E9%97%AE%E9%A2%98"> 好问题与蠢问题</a></p></li><li><p><a href="#%E5%A6%82%E6%9E%9C%E5%BE%97%E4%B8%8D%E5%88%B0%E5%9B%9E%E7%AD%94"> 如果得不到回答</a></p></li><li><p><a href="#%E5%A6%82%E4%BD%95%E6%9B%B4%E5%A5%BD%E5%9C%B0%E5%9B%9E%E7%AD%94%E9%97%AE%E9%A2%98"> 如何更好地回答问题</a></p></li><li><p><a href="#%E7%9B%B8%E5%85%B3%E8%B5%84%E6%BA%90"> 相关资源</a></p></li><li><p><a href="#%E9%B8%A3%E8%B0%A2"> 鸣谢</a></p></li></ul><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>许多项目在他们的使用协助&#x2F;说明网页中链接了本指南，这么做很好，我们也鼓励大家都这么做。但如果你是负责管理这个项目网页的人，请在超链接附近的显着位置上注明：</p><p><strong>本指南不提供此项目的实际支持服务！</strong></p><p>我们已经深刻领教到少了上述声明所带来的痛苦。因为少了这点声明，我们不停地被一些白痴纠缠。这些白痴认为既然我们发布了这本指南，那么我们就有责任解决世上所有的技术问题。</p><p>如果你是因为需要某些协助而正在阅读这本指南，并且最后离开是因为发现从本指南作者们身上得不到直接的协助，那么你就是我们所说的那些白痴之一。别问我们问题，我们只会忽略你。我们在这本指南中是教你如何从那些真正懂得你所遇到软件或硬件问题的人取得协助，而99%的情况下那不会是我们。除非你确定本指南的作者之一刚好是你所遇到的问题领域的专家，否则请不要打扰我们，这样大家都会开心一点。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在<a href="http://www.catb.org/~esr/faqs/hacker-howto.html">黑客</a>的世界里，当你拋出一个技术问题时，最终是否能得到有用的回答，往往取决于你所提问和追问的方式。本指南将教你如何正确的提问以获得你满意的答案。</p><p>不只是黑客，现在开放源代码（Open Source）软件已经相当盛行，你常常也可以由其他有经验的使用者身上得到好答案，这是件<em><strong>好事</strong></em> ；使用者比起黑客来，往往对那些新手常遇到的问题更宽容一些。然而，将有经验的使用者视为黑客，并采用本指南所提的方法与他们沟通，同样也是能从他们身上得到满意回答的最有效方式。</p><p>首先你应该明白，黑客们喜爱有挑战性的问题，或者能激发我们思维的好问题。如果我们并非如此，那我们也不会成为你想询问的对象。如果你给了我们一个值得反复咀嚼玩味的好问题，我们自会对你感激不尽。好问题是激励，是厚礼。好问题可以提高我们的理解力，而且通常会暴露我们以前从没意识到或者思考过的问题。对黑客而言，”好问题！”是诚挚的大力称赞。</p><p>尽管如此，黑客们有着蔑视或傲慢面对简单问题的坏名声，这有时让我们看起来对新手、无知者似乎较有敌意，但其实不是那样的。</p><p>我们不讳言我们对那些不愿思考、或者在发问前不做他们该做的事的人的蔑视。那些人是时间杀手 -– 他们只想索取，从不付出，消耗我们可用在更有趣的问题或更值得回答的人身上的时间。我们称这样的人为 <code>失败者（撸瑟）</code> （由于历史原因，我们有时把它拼作 <code>lusers</code> ）。</p><p>我们意识到许多人只是想使用我们写的软件，他们对学习技术细节没有兴趣。对大多数人而言，电脑只是种工具，是种达到目的的手段而已。他们有自己的生活并且有更要紧的事要做。我们了解这点，也从不指望每个人都对这些让我们着迷的技术问题感兴趣。尽管如此，我们回答问题的风格是指向那些真正对此有兴趣并愿意主动参与解决问题的人，这一点不会变，也不该变。如果连这都变了，我们就是在降低做自己最擅长的事情上的效率。</p><p>我们（在很大程度上）是自愿的，从繁忙的生活中抽出时间来解答疑惑，而且时常被提问淹没。所以我们无情的滤掉一些话题，特别是拋弃那些看起来像失败者的家伙，以便更高效的利用时间来回答<code>赢家（winner）</code>的问题。</p><p>如果你厌恶我们的态度，高高在上，或过于傲慢，不妨也设身处地想想。我们并没有要求你向我们屈服 -</p><p>- 事实上，我们大多数人非常乐意与你平等地交流，只要你付出小小努力来满足基本要求，我们就会欢迎你加入我们的文化。但让我们帮助那些不愿意帮助自己的人是没有效率的。无知没有关系，但装白痴就是不行。</p><p>所以，你不必在技术上很在行才能吸引我们的注意，但你必须表现出能引导你变得在行的特质 – 机敏、有想法、善于观察、乐于主动参与解决问题。如果你做不到这些使你与众不同的事情，我们建议你花点钱找家商业公司签个技术支持服务合同，而不是要求黑客个人无偿地帮助你。</p><p>如果你决定向我们求助，当然你也不希望被视为失败者，更不愿成为失败者中的一员。能立刻得到快速并有效答案的最好方法，就是像赢家那样提问 – 聪明、自信、有解决问题的思路，只是偶尔在特定的问题上需要获得一点帮助。</p><p>（欢迎对本指南提出改进意见。你可以 email 你的建议至 <a href="mailto:&#101;&#115;&#x72;&#64;&#116;&#104;&#121;&#114;&#x73;&#x75;&#x73;&#x2e;&#99;&#x6f;&#x6d;">&#101;&#115;&#x72;&#64;&#116;&#104;&#121;&#114;&#x73;&#x75;&#x73;&#x2e;&#99;&#x6f;&#x6d;</a> 或<a href="mailto:&#114;&#x65;&#115;&#112;&#111;&#x6e;&#x64;&#x2d;&#97;&#117;&#116;&#111;&#x40;&#x6c;&#105;&#x6e;&#x75;&#120;&#x6d;&#97;&#x66;&#105;&#x61;&#x2e;&#x63;&#111;&#109;">&#114;&#x65;&#115;&#112;&#111;&#x6e;&#x64;&#x2d;&#97;&#117;&#116;&#111;&#x40;&#x6c;&#105;&#x6e;&#x75;&#120;&#x6d;&#97;&#x66;&#105;&#x61;&#x2e;&#x63;&#111;&#109;</a>。然而请注意，本文并非<a href="http://www.ietf.org/rfc/rfc1855.txt">网络礼节</a>的通用指南，而我们通常会拒绝无助于在技术论坛得到有用答案的建议。）</p><h2 id="在提问之前"><a href="#在提问之前" class="headerlink" title="在提问之前"></a>在提问之前</h2><p>在你准备要通过电子邮件、新闻群组或者聊天室提出技术问题前，请先做到以下事情：</p><ol><li><p>   尝试在你准备提问的论坛的旧文章中搜索答案。</p></li><li><p>   尝试上网搜索以找到答案。</p></li><li><p>   尝试阅读手册以找到答案。</p></li><li><p>   尝试阅读常见问题文件（FAQ）以找到答案。</p></li><li><p>   尝试自己检查或试验以找到答案</p></li><li><p>   向你身边的强者朋友打听以找到答案。</p></li><li><p>   如果你是程序开发者，请尝试阅读源代码以找到答案</p></li></ol><p>当你提出问题的时候，请先表明你已经做了上述的努力；这将有助于树立你并不是一个不劳而获且浪费别人的时间的提问者。如果你能一并表达在做了上述努力的过程中所学到的东西会更好，因为我们更乐于回答那些表现出能从答案中学习的人的问题。</p><p>运用某些策略，比如先用Google搜索你所遇到的各种错误信息（既搜索<a href="http://groups.google.com/">Google论坛</a>，也搜索网页），这样很可能直接就找到了能解决问题的文件或邮件列表线索。即使没有结果，在邮件列表或新闻组寻求帮助时加上一句<code>我在Google中搜过下列句子但没有找到什么有用的东西 </code>也是件好事，即使它只是表明了搜索引擎不能提供哪些帮助。这么做（加上搜索过的字串）也让遇到相似问题的其他人能被搜索引擎引导到你的提问来。</p><p>别着急，不要指望几秒钟的Google搜索就能解决一个复杂的问题。在向专家求助之前，再阅读一下常见问题文件（FAQ）、放轻松、坐舒服一些，再花点时间思考一下这个问题。相信我们，他们能从你的提问看出你做了多少阅读与思考，如果你是有备而来，将更有可能得到解答。不要将所有问题一股脑拋出，只因你的第一次搜索没有找到答案（或者找到太多答案）。</p><p>准备好你的问题，再将问题仔细的思考过一遍，因为草率的发问只能得到草率的回答，或者根本得不到任何答案。越是能表现出在寻求帮助前你为解决问题所付出的努力，你越有可能得到实质性的帮助。</p><p>小心别问错了问题。如果你的问题基于错误的假设，某个普通黑客（J. Random Hacker）多半会一边在心里想着<code>蠢问题… </code>， 一边用无意义的字面解释来答复你，希望着你会从问题的回答（而非你想得到的答案）中汲取教训。</p><p>绝不要自以为<em><strong>够格</strong></em>得到答案，你没有；你并没有。毕竟你没有为这种服务支付任何报酬。你将会是自己去<em><strong>挣到</strong></em>一个答案，靠提出有内涵的、有趣的、有思维激励作用的问题 –一个有潜力能贡献社区经验的问题，而不仅仅是被动的从他人处索取知识。</p><p>另一方面，表明你愿意在找答案的过程中做点什么是一个非常好的开端。 <code>谁能给点提示？</code> 、 <code>我的这个例子里缺了什么？</code> 以及<code>我应该检查什么地方</code>比<code>请把我需要的确切的过程贴出来</code>更容易得到答复。因为你表现出只要有人能指个正确方向，你就有完成它的能力和决心。</p><h2 id="当你提问时"><a href="#当你提问时" class="headerlink" title="当你提问时"></a>当你提问时</h2><h3 id="慎选提问的论坛"><a href="#慎选提问的论坛" class="headerlink" title="慎选提问的论坛"></a>慎选提问的论坛</h3><p>小心选择你要提问的场合。如果你做了下述的事情，你很可能被忽略掉或者被看作失败者：</p><ul><li><p>在与主题不合的论坛上贴出你的问题</p></li><li><p>在探讨进阶技术问题的论坛张贴非常初级的问题；反之亦然</p></li><li><p>在太多的不同新闻群组上重复转贴同样的问题（cross-post）</p></li><li><p>向既非熟人也没有义务解决你问题的人发送私人电邮</p></li></ul><p>黑客会剔除掉那些搞错场合的问题，以保护他们沟通的渠道不被无关的东西淹没。你不会想让这种事发 生在自己身上的。</p><p>因此，第一步是找到对的论坛。再说一次，Google和其它搜索引擎还是你的朋友，用它们来找到与你遭 遇到困难的软硬件问题最相关的网站。通常那儿都有常见问题（FAQ）、邮件列表及相关说明文件的链 接。如果你的努力（包括<em><strong>阅读</strong></em>FAQ）都没有结果，网站上也许还有报告Bug（Bug-reporting）的流程或 链接，如果是这样，连过去看看。</p><p>向陌生的人或论坛发送邮件最可能是风险最大的事情。举例来说，别假设一个提供丰富内容的网页的作 者会想充当你的免费顾问。不要对你的问题是否会受到欢迎做太乐观的估计 – 如果你不确定，那就向别 处发送，或者压根别发。</p><p>在选择论坛、新闻群组或邮件列表时，别太相信名字，先看看FAQ或者许可书以弄清楚你的问题是否切 题。发文前先翻翻已有的话题，这样可以让你感受一下那里的文化。事实上，事先在新闻组或邮件列表 的历史记录中搜索与你问题相关的关键词是个极好的主意，也许这样就找到答案了。即使没有，也能帮 助你归纳出更好的问题。</p><p>别像机关枪似的一次”扫射”所有的帮助渠道，这就像大喊大叫一样会使人不快。要一个一个地来。 </p><p>搞清楚你的主题！最典型的错误之一是在某种致力于跨平台可移植的语言、套件或工具的论坛中提关于 Unix或Windows操作系统程序界面的问题。如果你不明白为什么这是大错，最好在搞清楚这之间差异之 前什么也别问。</p><p>一般来说，在仔细挑选的公共论坛中提问，会比在私有论坛中提同样的问题更容易得到有用的回答。有 几个理由可以支持这点，一是看潜在的回复者有多少，二是看观众有多少。黑客较愿意回答那些能帮助 到许多人的问题。</p><p>可以理解的是，老练的黑客和一些热门软件的作者正在接受过多的错发信息。就像那根最后压垮骆驼背 的稻草一样，你的加入也有可能使情况走向极端 – 已经好几次了，一些热门软件的作者从自己软件的支 持中抽身出来，因为伴随而来涌入其私人邮箱的无用邮件变得无法忍受。</p><h2 id="Stack-Overflow"><a href="#Stack-Overflow" class="headerlink" title="Stack Overflow"></a>Stack Overflow</h2><p>搜索，<em><strong>然后</strong></em> 在 Stack Exchange 问。</p><p>近年来，Stack Exchange community 社区已经成为回答技术及其他问题的主要渠道，尤其是那些开放 源码的项目。</p><p>因为 Google 索引是即时的，在看 Stack Exchange 之前先在 Google 搜索。有很高的机率某人已经问了 一个类似的问题，而且 Stack Exchange 网站们往往会是搜索结果中最前面几个。如果你在 Google 上没 有找到任何答案，你再到特定相关主题的网站去找。用标签（Tag）搜索能让你更缩小你的搜索结果。</p><p>Stack Exchange 已经成长到<a href="http://stackexchange.com/sites">超过一百个网站</a>，以下是最常用的几个站：</p><ul><li><p>Super User 是问一些通用的电脑问题，如果你的问题跟代码或是写程序无关，只是一些网络连线 之类的，请到这里。 </p></li><li><p>Stack Overflow 是问写程序有关的问题。 </p></li><li><p>Server Fault 是问服务器和网管相关的问题。</p></li></ul><h2 id="网站和IRC论坛"><a href="#网站和IRC论坛" class="headerlink" title="网站和IRC论坛"></a>网站和IRC论坛</h2><p>本地的使用者群组（user group），或者你所用的 Linux 发行版本也许正在宣传他们的网页论坛或 IRC 频道，并提供新手帮助（在一些非英语国家，新手论坛很可能还是邮件列表）， 这些地方是开始提问的 好首选，特别是当你觉得遇到的也许只是相对简单或者很普通的问题时。经过宣传的 IRC 频道是公开欢 迎提问的地方，通常可以即时得到回应。</p><p>事实上，如果程序出的问题只发生在特定 Linux 发行版提供的版本（这很常见），最好先去该发行版的 论坛或邮件列表中提问，再到程序本身的论坛或邮件列表提问。（否则）该项目的黑客可能仅仅回复 “用<em><strong>我们的</strong></em>版本”。</p><p>在任何论坛发文以前，先确认一下有没有搜索功能。如果有，就试着搜索一下问题的几个关键词，也许 这会有帮助。如果在此之前你已做过通用的网页搜索（你也该这样做），还是再搜索一下论坛，搜索引 擎有可能没来得及索引此论坛的全部内容。</p><p>通过论坛或 IRC 频道来提供使用者支持服务有增长的趋势，电子邮件则大多为项目开发者间的交流而保 留。所以最好先在论坛或 IRC 中寻求与该项目相关的协助。</p><h2 id="第二步，使用项目邮件列表"><a href="#第二步，使用项目邮件列表" class="headerlink" title="第二步，使用项目邮件列表"></a>第二步，使用项目邮件列表</h2><p>当某个项目提供开发者邮件列表时，要向列表而不是其中的个别成员提问，即使你确信他能最好地回答 你的问题。查一查项目的文件和首页，找到项目的邮件列表并使用它。有几个很好的理由支持我们采用 这种办法：</p><ul><li><p>任何好到需要向个别开发者提出的问题，也将对整个项目群组有益。反之，如果你认为自己的问题 对整个项目群组来说太愚蠢，也不能成为骚扰个别开发者的理由。</p></li><li><p>向列表提问可以分散开发者的负担，个别开发者（尤其是项目领导人）也许太忙以至于没法回答你的问题。</p></li><li><p>大多数邮件列表都会被存档，那些被存档的内容将被搜索引擎索引。如果你向列表提问并得到解答，将来其它人可以通过网页搜索找到你的问题和答案，也就不用再次发问了。</p></li><li><p>如果某些问题经常被问到，开发者可以利用此信息来改进说明文件或软件本身，以使其更清楚。如果只是私下提问，就没有人能看到最常见问题的完整场景。</p></li></ul><p>如果一个项目既有”使用者” 也有”开发者”（或”黑客”）邮件列表或论坛，而你又不会动到那些源代码，那么就向”使用者”列表或论坛提问。不要假设自己会在开发者列表中受到欢迎，那些人多半会将你的提问视为干扰他们开发的噪音。</p><p>然而，如果你<em><strong>确信</strong></em>你的问题很特别，而且在”使用者” 列表或论坛中几天都没有回复，可以试试前往”开发 者”列表或论坛发问。建议你在张贴前最好先暗地里观察几天以了解那里的行事方式（事实上这是参与任 何私有或半私有列表的好主意）</p><p>如果你找不到一个项目的邮件列表，而只能查到项目维护者的电子邮件地址，尽管向他发信。即使是在 这种情况下，也别假设（项目）邮件列表不存在。在你的电子邮件中，请陈述你已经试过但没有找到合 适的邮件列表，也提及你不反对将自己的邮件转发给他人（许多人认为，即使没什么秘密，私人电子邮 件也不应该被公开。通过允许将你的电子邮件转发他人，你给了相应人员处置你邮件的选择）。</p><h2 id="使用有意义且描述明确的标题"><a href="#使用有意义且描述明确的标题" class="headerlink" title="使用有意义且描述明确的标题"></a>使用有意义且描述明确的标题</h2><p>在邮件列表、新闻群组或论坛中，大约50字以内的标题是抓住资深专家注意力的好机会。别用喋喋不休的<code>帮帮忙</code>、<code>跪求</code> 、<code>急</code> （更别说<code>救命啊！！！！</code>这样让人反感的话，用这种标题会被条件反射式地忽略） 来浪费这个机会。不要妄想用你的痛苦程度来打动我们，而是在这点空间中使用极简单扼要的描述方式 来提出问题。</p><p>一个好标题范例是<code>目标 -- 差异</code>式的描述，许多技术支持组织就是这样做的。在<code>目标</code>部分指出是哪一个 或哪一组东西有问题，在<code>差异</code>部分则描述与期望的行为不一致的地方。</p><blockquote><p>蠢问题：救命啊！我的笔电不能正常显示了！ </p></blockquote><blockquote><p>聪明问题：X.org 6.8.1的鼠标游标会变形，某牌显卡 MV1005 芯片组。</p></blockquote><blockquote><p> 更聪明问题：X.org 6.8.1的鼠标游标，在某牌显卡 MV1005 芯片组环境下 - 会变形。</p></blockquote><p>编写<code>目标 -- 差异</code>式描述的过程有助于你组织对问题的细緻思考。是什么被影响了？ 仅仅是鼠标游标或 者还有其它图形？只在 X.org 的 X 版中出现？或只是出现在6.8.1版中？ 是针对某牌显卡芯片组？或者只 是其中的 MV1005 型号？ 一个黑客只需瞄一眼就能够立即明白你的环境<em><strong>和</strong></em>你遇到的问题。</p><p>总而言之，请想像一下你正在一个只显示标题的存档讨论串（Thread）索引中查寻。让你的标题更好地 反映问题，可使下一个搜索类似问题的人能够关注这个讨论串，而不用再次提问相同的问题。</p><p>如果你想在回复中提出问题，记得要修改内容标题，以表明你是在问一个问题， 一个看起来像<code>Re: 测试</code>或者<code>Re: 新bug</code>的标题很难引起足够重视。另外，在不影响连贯性之下，适当引用并删减前文的内 容，能给新来的读者留下线索。</p><p>对于讨论串，不要直接点击回复来开始一个全新的讨论串，这将限制你的观众。因为有些邮件阅读程 序，比如 mutt ，允许使用者按讨论串排序并通过折叠讨论串来隐藏消息，这样做的人永远看不到你发 的消息。</p><p>仅仅改变标题还不够。mutt 和其它一些邮件阅读程序还会检查邮件标题以外的其它信息，以便为其指定 讨论串。所以宁可发一个全新的邮件。</p><p>在网页论坛上，好的提问方式稍有不同，因为讨论串与特定的信息紧密结合，并且通常在讨论串外就看 不到里面的内容，故通过回复提问，而非改变标题是可接受的。不是所有论坛都允许在回复中出现分离 的标题，而且这样做了基本上没有人会去看。不过，通过回复提问，这本身就是暧昧的做法，因为它们 只会被正在查看该标题的人读到。所以，除非你<em><strong>只想</strong></em>在该讨论串当前活跃的人群中提问，不然还是另起炉灶比较好。</p><h2 id="使问题容易回复"><a href="#使问题容易回复" class="headerlink" title="使问题容易回复"></a>使问题容易回复</h2><p>以<code>**请将你的回复寄到**……</code> 来结束你的问题多半会使你得不到回答。如果你觉得花几秒钟在邮件客户端设置一下回复地址都麻烦，我们也觉得花几秒钟思考你的问题更麻烦。如果你的邮件程序不支持这样做，<a href="http://linuxmafia.com/faq/Mail/muas.html">换个好点的</a>；如果是操作系统不支持这种邮件程序，也换个好点的。</p><p>在论坛，要求通过电子邮件回复是非常无礼的，除非你相信回复的信息可能比较敏感（而且有人会为了某些未知的原因，只让你而不是整个论坛知道答案）。如果你只是想在有人回复讨论串时得到电子邮件提醒，可以要求网页论坛发送给你。几乎所有论坛都支持诸如<code>追踪此讨论串</code>、<code>有回复时发送邮件提醒</code>等功能。</p><h2 id="用清晰、正确、精准并语法正确的语句"><a href="#用清晰、正确、精准并语法正确的语句" class="headerlink" title="用清晰、正确、精准并语法正确的语句"></a>用清晰、正确、精准并语法正确的语句</h2><p>我们从经验中发现，粗心的提问者通常也会粗心的写程序与思考（我敢打包票）。回答粗心大意者的问 题很不值得，我们宁愿把时间耗在别处。</p><p>正确的拼字、标点符号和大小写是很重要的。一般来说，如果你觉得这样做很麻烦，不想在乎这些，那 我们也觉得麻烦，不想在乎你的提问。花点额外的精力斟酌一下字句，用不着太僵硬与正式 – 事实上， 黑客文化很看重能准确地使用非正式、俚语和幽默的语句。但它<em><strong>必须很</strong></em>准确，而且有迹象表明你是在思 考和关注问题。</p><p>正确地拼写、使用标点和大小写，不要将 <code>its</code> 混淆为 <code>it&#39;s </code>，<code>loose</code>搞成<code>lose</code>或者将 <code>discrete</code> 弄成 <code>discreet</code> 。不要<strong>全部用大写</strong>，这会被视为无礼的大声嚷嚷（全部小写也好不到哪去，因为不易阅读。<a href="http://en.wikipedia.org/wiki/Alan_Cox">Alan Cox</a>也许可以这样做，但你不行。）</p><p>更白话的说，如果你写得像是个半文盲[译注：<a href="http://zh.wikipedia.org/zh-tw/%E5%B0%8F%E7%99%BD">小白</a>]），那多半得不到理睬。也不要使用即时通讯中的简写或<a href="http://zh.wikipedia.org/zh-tw/%E7%81%AB%E6%98%9F%E6%96%87">火星文</a>，如将<code>的</code> 简化为<code>ㄉ</code> 会使你看起来像一个为了少打几个键而省字的小白。更糟的是，如果像个小孩似地鬼画符那绝对是在找死，可以肯定没人会理你（或者最多是给你一大堆指责与挖苦）。</p><p>如果在使用非母语的论坛提问，你可以犯点拼写和语法上的小错，但决不能在思考上马虎（没错，我们 通常能弄清两者的分别）。同时，除非你知道回复者使用的语言，否则请使用英语书写。繁忙的黑客一 般会直接删除用他们看不懂语言写的消息。在网络上英语是通用语言，用英语书写可以将你的问题在尚 未被阅读就被直接删除的可能性降到最低。</p><p>如果英文是你的外语（Second language），提示潜在回复者你有潜在的语言困难是很好的： [译注：以下附上原文以供使用]</p><blockquote><p>English is not my native language; please excuse typing errors.</p></blockquote><ul><li>英文不是我的母语，请原谅我的错字或语法</li></ul><blockquote><p>If you speak $LANGUAGE, please email&#x2F;PM me; </p><p>I may need assistance translating my question.</p></blockquote><ul><li>如果你说<strong>某语言</strong>，请寄信&#x2F;私讯给我；我需要有人协助我翻译我的问题</li></ul><blockquote><p>I’ve posted my question in $LANGUAGE and English. </p><p>I’ll be glad to translate responses, if you only use one or the other.</p></blockquote><ul><li>我把我的问题用<strong>某语言</strong>和英文写出来，如果你只用一种语言回答，我会乐意将其翻译成另一种。</li></ul><h2 id="使用易于读取且标准的文件格式发送问题"><a href="#使用易于读取且标准的文件格式发送问题" class="headerlink" title="使用易于读取且标准的文件格式发送问题"></a>使用易于读取且标准的文件格式发送问题</h2><p>如果你人为地将问题搞得难以阅读，它多半会被忽略，人们更愿读易懂的问题，所以：</p><ul><li><p>使用纯文字而不是HTML (<a href="http://archive.birdhouse.org/etc/evilmail.html">关闭HTML</a>并不难）</p></li><li><p>使用MIME附件通常是可以的，前提是真正有内容（譬如附带的源代码或patch），而不仅仅是邮件 程序生成的模板（譬如只是信件内容的拷贝）。 </p></li><li><p>不要发送一段文字只是单行句子但多次断行的邮件（这使得回复部分内容非常困难）。设想你的读 者是在80个字符宽的终端机上阅读邮件，最好设置你的断行点小于80字。 </p></li><li><p>但是，也<em><strong>不要</strong></em>用任何固定断行资料（譬如日志档案拷贝或会话记录）。档案应该原样包含，让回复 者有信心他们看到的是和你看到的一样的东西。 </p></li><li><p>在英语论坛中，不要使用 <code>Quoted-Printable</code> MIME编码发送消息。这种编码对于张贴非ASCII语言 可能是必须的，但很多邮件程序并不支持这种编码。当它们分断时，那些文本中四处散布的 <code>=20</code> 符 号既难看也分散注意力，甚至有可能破坏内容的语意。 </p></li><li><p>绝对，<em><strong>永远</strong></em>不要指望黑客们阅读使用封闭格式编写的文档，像是微软公司的Word或Excel文件等。 大多数黑客对此的反应就像有人将还在冒热气的猪粪倒在你门口阶梯上时你的反应一样。即便他们 能够处理，他们也很厌恶这么做。</p></li><li><p>如果你从使用Windows的电脑发送电子邮件，关闭微软愚蠢的 <code>智能引号</code> 功能 （从[选项] &gt; [校订] &gt; [自动校正选项], 按掉 <code>智能引号</code> 单选框），以免在你的邮件中到处散布垃圾字符。</p></li><li><p>在论坛，勿滥用 <code>表情符号</code> 和 <code>HTML</code> 功能（当它们提供时）。一两个表情符号通常没有问题，但花哨 的彩色文本倾向于使人认为你是个无能之辈。过滥地使用表情符号、色彩和字体会使你看来像个傻 笑的小姑娘。这通常不是个好主意，除非你只是对sex而不是有用的回复更有兴趣。</p></li></ul><p>如果你使用图形用户界面的邮件程序（如微软公司的Outlook或者其它类似的），注意它们的默认设置 不一定满足这些要求。大多数这类程序有基于选单的 <code>查看源代码</code> 命令，用它来检查发送文件夹中的消 息，以确保发送的是没有多餘杂质的纯文本文件。</p><h2 id="精确的描述问题并言之有物"><a href="#精确的描述问题并言之有物" class="headerlink" title="精确的描述问题并言之有物"></a>精确的描述问题并言之有物</h2><ul><li><p>仔细、清楚地描述你的问题或Bug的症状。</p></li><li><p>描述问题发生的环境（机器配置、操作系统、应用程序、以及相关的信息），提供经销商的发行版 和版本号（如： <code>Fedora Core 4</code> 、 <code>Slackware 9.1</code> 等）。</p></li><li><p>描述在提问前你是怎样去研究和理解这个问题的。</p></li><li><p>描述在提问前为确定问题而采取的诊断步骤。</p></li><li><p>描述最近做过什么可能相关的硬件或软件变更。 </p></li><li><p>尽可能的提供一个可以 <code>重现这个问题的既定环境</code> 的方法</p></li></ul><p>尽量去揣测一个黑客会怎样反问你，在他提问的时候预先给他答案。</p><p>以上几点中，当你报告的是你认为可能在代码中的问题时，给黑客一个可以重现你的问题的环境尤其重 要。当你这么做时，你得到有效的回答的机会和速度都会大大的提升。</p><p><a href="http://www.chiark.greenend.org.uk/~sgtatham/">Simon Tatham</a>写过一篇名为《<a href="http://www.chiark.greenend.org.uk/~sgtatham/bugs-tw.html">如何有效的报告Bug</a>》的出色文章。强力推荐你也读一读。</p><h2 id="话不在多而在精"><a href="#话不在多而在精" class="headerlink" title="话不在多而在精"></a>话不在多而在精</h2><p>你需要提供精确有内容的信息。这并不是要求你简单的把成堆的出错代码或者资料完全转录到你的提问中。如果你有庞大而复杂的测试样例能重现程序挂掉的情境，尽量将它剪裁得越小越好。</p><p>这样做的用处至少有三点。</p><p>第一，表现出你为简化问题付出了努力，这可以使你得到回答的机会增加；</p><p>第二，简化问题使你更有可能得到<em><strong>有用</strong></em>的答案；</p><p>第三，在精炼你的bug报告的过程中，你很可能就自己找到了解决方法或权宜之计。</p><h2 id="别动辄声称找到Bug"><a href="#别动辄声称找到Bug" class="headerlink" title="别动辄声称找到Bug"></a>别动辄声称找到Bug</h2><p>当你在使用软件中遇到问题，除非你非常、<em><strong>非常</strong></em>的有根据，不要动辄声称找到了Bug。提示：除非你能 提供解决问题的源代码补丁，或者对前一版本的回归测试表现出不正确的行为，否则你都多半不够完全 确信。这同样适用在网页和文件，如果你（声称）发现了文件的 <code>Bug</code> ，你应该能提供相应位置的修正或 替代文件。</p><p>请记得，还有许多其它使用者没遇到你发现的问题，否则你在阅读文件或搜索网页时就应该发现了（你在抱怨前<a href="#page3">已经做了这些，是吧</a>？）。这也意味着很有可能是你弄错了而不是软件本身有问题。</p><p>编写软件的人总是非常辛苦地使它尽可能完美。如果你声称找到了Bug，也就是在质疑他们的能力，即 使你是对的，也有可能会冒犯到其中某部分人。这尤其严重当你在标题中嚷嚷着有 <code>Bug</code> 。</p><p>提问时，即使你私下非常确信已经发现一个真正的Bug，最好写得像是<em><strong>你</strong></em>做错了什么。如果真的有 Bug，你会在回复中看到这点。这样做的话，如果真有Bug，维护者就会向你道歉，这总比你惹恼别人 然后欠别人一个道歉要好一点。</p><h2 id="可以低声下气，但还是要先做功课"><a href="#可以低声下气，但还是要先做功课" class="headerlink" title="可以低声下气，但还是要先做功课"></a>可以低声下气，但还是要先做功课</h2><p>有些人明白他们不该粗鲁或傲慢的提问并要求得到答复，但他们选择另一个极端 – 低声下气： <code>我知道我只是个可悲的新手，一个撸瑟，但...</code> 。这既使人困扰，也没有用，尤其是伴随着与实际问题含糊不清的描 述时更令人反感。</p><p>别用原始灵长类动物的把戏来浪费你我的时间。取而代之的是，尽可能清楚地描述背景条件和你的问题 情况。这比低声下气更好地定位了你的位置。</p><p>有时网页论坛会设有专为新手提问的版面，如果你真的认为遇到了初学者的问题，到那去就是了，但一 样别那么低声下气。</p><h2 id="描述问题症状而非猜测"><a href="#描述问题症状而非猜测" class="headerlink" title="描述问题症状而非猜测"></a>描述问题症状而非猜测</h2><p>告诉黑客们你认为问题是怎样造成的并没什么帮助。（如果你的推断如此有效，还用向别人求助 吗？），因此要确信你原原本本告诉了他们问题的症状，而不是你的解释和理论；让黑客们来推测和诊 断。如果你认为陈述自己的猜测很重要，清楚地说明这只是你的猜测，并描述为什么它们不起作用。</p><p><em><strong>蠢问题</strong></em></p><blockquote><p>我在编译内核时接连遇到 SIG11 错误， </p><p>我怀疑某条飞线搭在主板的走线上了，这种情况应该怎样检查最好？</p></blockquote><p><em><strong>聪明问题</strong></em></p><blockquote><p>我的组装电脑是 FIC-PA2007 主机板搭载 AMD K6&#x2F;233 CPU（威盛 Apollo VP2芯片组）， 256MB Corsair PC133 SDRAM内存，在编译内核时，从开机20分钟以后就频频产生 SIG11 错误， </p><p>但是在头20分钟内从没发生过相同的问题。重新启动也没有用，但是关机一晚上就又能工作20分钟。</p><p>所有内存都换过了，没有效果。相关部分的标准编译记录如下…。</p></blockquote><p>由于以上这点似乎让许多人觉得难以配合，这里有句话可以提醒你： <code>所有的诊断专家都来自密苏里州</code>。 美国国务院的官方座右铭则是： <code>让我看看</code> （出自国会议员 Willard D. Vandiver 在1899年时的讲话： <code>我来自一个出产玉米，棉花，牛蒡和民主党人的国家，滔滔雄辩既不能说服我，也不会让我满意。我来自密苏里州，你必须让我看看。</code> ） 针对诊断者而言，这并不是一种怀疑，而只是一种真实而有用的需求，以便让他们看 到的是与你看到的原始证据尽可能一致的东西，而不是你的猜测与归纳的结论。所以，大方的展示给我 们看吧！</p><h2 id="按发生时间先后列出问题症状"><a href="#按发生时间先后列出问题症状" class="headerlink" title="按发生时间先后列出问题症状"></a>按发生时间先后列出问题症状</h2><p>问题发生前的一系列操作，往往就是对找出问题最有帮助的线索。因此，你的说明里应该包含你的操作 步骤，以及机器和软件的反应，直到问题发生。在命令行处理的情况下，提供一段操作记录（例如运行 脚本工具所生成的），并引用相关的若干行（如20行）记录会非常有帮助。</p><p>如果挂掉的程序有诊断选项（如 -v 的详述开关），试着选择这些能在记录中增加调试信息的选项。记住， <code>多</code> 不等于 <code>好</code> 。试着选取适当的调试级别以便提供有用的信息而不是让读者淹没在垃圾中。</p><p>如果你的说明很长（如超过四个段落），在开头简述问题，接下来再按时间顺序详述会有所帮助。这样 黑客们在读你的记录时就知道该注意哪些内容了。</p><h2 id="描述目标而不是过程"><a href="#描述目标而不是过程" class="headerlink" title="描述目标而不是过程"></a>描述目标而不是过程</h2><p>如果你想弄清楚如何做某事（而不是报告一个Bug），在开头就描述你的目标，然后才陈述重现你所卡 住的特定步骤。</p><p>经常寻求技术帮助的人在心中有个更高层次的目标，而他们在自以为能达到目标的特定道路上被卡住 了，然后跑来问该怎么走，但没有意识到这条路本身就有问题。结果要费很大的劲才能搞定。</p><p><strong>蠢问题</strong></p><blockquote><p>我怎样才能从某绘图程序的颜色选择器中取得十六进制的的RGB值？</p></blockquote><p><strong>聪明问题</strong></p><blockquote><p>我正试着用替换一幅图片的色码成自己选定的色码，我现在知道的唯一方法是编辑每个色码区块， 但却无法从某绘图程序的颜色选择器取得十六进制的的RGB值。</p></blockquote><p>第二种提问法比较聪明，你可能得到像是 <code>建议采用另一个更合适的工具</code> 的回复。</p><h2 id="别要求使用私人电邮回复"><a href="#别要求使用私人电邮回复" class="headerlink" title="别要求使用私人电邮回复"></a>别要求使用私人电邮回复</h2><p>黑客们认为问题的解决过程应该公开、透明，此过程中如果更有经验的人注意到不完整或者不当之处， 最初的回复才能够、也应该被纠正。同时，作为提供帮助者也能因为能力和学识被其它同行看到而得到 某种奖励。</p><p>当你要求私下回复时，这个过程和奖励都被中止。别这样做，让<em><strong>回复者</strong></em>来决定是否私下回答 – 如果他真 这么做了，通常是因为他认为问题编写太差或者太肤浅，以至于对其它人没有兴趣。</p><p>这条规则存在一条有限的例外，如果你确信提问可能会引来大量雷同的回复时，那么这个神奇的提问句 <code>会是向我发电邮，我将为论坛归纳这些回复</code> 。试着将邮件列表或新闻群组从洪水般的雷同回复中解救出来 是非常有礼貌的 – 但你必须信守诺言。</p><h2 id="清楚明确的表达你的问题以及需求"><a href="#清楚明确的表达你的问题以及需求" class="headerlink" title="清楚明确的表达你的问题以及需求"></a>清楚明确的表达你的问题以及需求</h2><p>漫无边际的提问近乎无休无止的时间黑洞。最有可能给你有用答案的人通常也正是最忙的人（他们忙是 因为要亲自完成大部分工作）。这样的人对无节制的时间黑洞相当厌恶，所以他们也倾向于厌恶那些漫 无边际的提问。</p><p>如果你明确表述需要回答者做什么（如提供指点、发送一段代码、检查你的补丁、或是其他等等），就 最有可能得到有用的答案。因为这会定出一个时间和精力的上限，便于回答者能集中精力来帮你。这么 做很棒。</p><p>要理解专家们所处的世界，请把专业技能想像为充裕的资源，而回复的时间则是稀缺的资源。你要求他 们奉献的时间越少，你越有可能从真正专业而且很忙的专家那里得到解答。</p><p>所以，界定一下你的问题，使专家花在辨识你的问题和回答所需要付出的时间减到最少，这技巧对你有 用答案相当有帮助 – 但这技巧通常和简化问题有所区别。因此，问 <code>我想更好的理解X，可否指点一下哪有好 一点说明？</code> 通常比问 <code>你能解释一下X吗？</code> 更好。如果你的代码不能运作，通常请别人看看哪里有问题，比 要求别人替你改正要明智得多。</p><h2 id="询问有关代码的问题时"><a href="#询问有关代码的问题时" class="headerlink" title="询问有关代码的问题时"></a>询问有关代码的问题时</h2><p>别要求他人帮你有问题的代码调试而不提示一下应该从何入手。张贴几百行的代码，然后说一声： <code>它不会动</code> 会让你完全被忽略。只贴几十行代码，然后说一句： <code>在第七行以后，我期待它显示&lt;x&gt; ，但实际出现的是&lt;y&gt;比较有可能让你得到回应</code>。</p><p>最有效描述程序问题的方法是提供最精简的Bug展示测试示例（bug-demonstrating test case）。什么是最精简的测试示例? 那是问题的缩影；一小个程序片段能<strong>刚好</strong>展示出程序的异常行为，而不包含其他令人分散注意力的内容。怎么制作最精简的测试示例？如果你知道哪一行或哪一段代码会造成异常的行为，复制下来并加入足够重现这个状况的代码（例如，足以让这段代码能被编译&#x2F;直译&#x2F;被应用程序处理）。如果你无法将问题缩减到一个特定区块，就复制一份代码并移除不影响产生问题行为的部分。总之，测试示例越小越好（查看<a href="#%E8%AF%9D%E4%B8%8D%E5%9C%A8%E5%A4%9A%E8%80%8C%E5%9C%A8%E7%B2%BE">话不在多而在精</a>一节）。</p><p>一般而言，要得到一段相当精简的测试示例并不太容易，但永远先尝试这样做的是种好习惯。这种方式可以帮助你了解如何自行解决这个问题 —- 而且即使你的尝试不成功，黑客们也会看到你在尝试取得答案的过程中付出了努力，这可以让他们更愿意与你合作。</p><p>如果你只是想让别人帮忙审查（Review）一下代码，在信的开头就要说出来，并且一定要提到你认为哪一部分特别需要关注以及为什么。</p><h2 id="别把自己家庭作业的问题贴上来"><a href="#别把自己家庭作业的问题贴上来" class="headerlink" title="别把自己家庭作业的问题贴上来"></a>别把自己家庭作业的问题贴上来</h2><p>黑客们很擅长分辨哪些问题是家庭作业式的问题；因为我们中的大多数都曾自己解决这类问题。同样， 这些问题得由<em><strong>你</strong></em>来搞定，你会从中学到东西。你可以要求给点提示，但别要求得到完整的解决方案。</p><p>如果你怀疑自己碰到了一个家庭作业式的问题，但仍然无法解决，试试在<em><strong>使用者</strong></em>群组，论坛或（最后一 招）在项目的使用者邮件列表或论坛中提问。尽管黑客们<em><strong>会</strong></em>看出来，但一些有经验的使用者也许仍会给 你一些提示。</p><h2 id="去掉无意义的提问句"><a href="#去掉无意义的提问句" class="headerlink" title="去掉无意义的提问句"></a>去掉无意义的提问句</h2><p>避免用无意义的话结束提问，例如<code>有人能帮我吗？</code> 或者<code>这有答案吗？</code> 。</p><p>首先：如果你对问题的描述不是很好，这样问更是画蛇添足。</p><p>其次：由于这样问是画蛇添足，黑客们会很厌烦你 – 而且通常会用逻辑上正确，但毫无意义的回答来表示他们的蔑视， 例如：<code>没错，有人能帮你</code> 或者<code>不，没答案</code> 。</p><p>一般来说，避免用 <code>是或否</code> 、<code>对或错</code> 、<code>有或没有</code> 类型的问句，除非你想得到<a href="http://homepage.ntlworld.com./jonathan.deboynepollard/FGA/questions-with-yes-or-no-answers.html">是或否类型的回答</a>。</p><h2 id="即使你很急也不要在标题写紧急"><a href="#即使你很急也不要在标题写紧急" class="headerlink" title="即使你很急也不要在标题写紧急"></a>即使你很急也不要在标题写<code>紧急</code></h2><p>这是你的问题，不是我们的。宣称 <code>紧急</code> 极有可能事与愿违：大多数黑客会直接删除无礼和自私地企图即 时引起关注的问题。更严重的是， <code>紧急</code> 这个字（或是其他企图引起关注的标题）通常会被垃圾信过滤器 过滤掉 – 你希望能看到你问题的人可能永远也看不到。</p><p>有半个例外的情况是，如果你是在一些很高调，会使黑客们兴奋的地方，也许值得这样去做。在这种情 况下，如果你有时间压力，也很有礼貌地提到这点，人们也许会有兴趣回答快一点。</p><p>当然，这风险很大，因为黑客们兴奋的点多半与你的不同。譬如从 NASA 国际空间站（International Space Station）发这样的标题没有问题，但用自我感觉良好的慈善行为或政治原因发肯定不行。事实 上，张贴诸如 <code>紧急：帮我救救这个毛绒绒的小海豹！</code> 肯定让你被黑客忽略或惹恼他们，即使他们认为毛绒 绒的小海豹很重要。</p><h2 id="礼多人不怪，而且有时还很有帮助"><a href="#礼多人不怪，而且有时还很有帮助" class="headerlink" title="礼多人不怪，而且有时还很有帮助"></a>礼多人不怪，而且有时还很有帮助</h2><p>彬彬有礼，多用 <code>请</code> 和 <code>谢谢您的关注</code> ，或 <code>谢谢你的关照</code> 。让大家都知道你对他们花时间免费提供帮助心存感激。</p><p>坦白说，这一点并没有比清晰、正确、精准并合法语法和避免使用专用格式重要（也不能取而代之）。 黑客们一般宁可读有点唐突但技术上鲜明的Bug报告，而不是那种有礼但含糊的报告。（如果这点让你 不解，记住我们是按问题能教我们什么来评价问题的价值的）</p><p>然而，如果你有一串的问题待解决，客气一点肯定会增加你得到有用回应的机会。</p><p> （我们注意到，自从本指南发布后，从资深黑客那里得到的唯一严重缺陷反馈，就是对预先道谢这一 条。一些黑客觉得 <code>先谢了</code> 意味着事后就不用再感谢任何人的暗示。我们的建议是要么先说 <code>先谢了</code> ，然后 事后再对回复者表示感谢，或者换种方式表达感激，譬如用 <code>谢谢你的关注</code> 或 <code>谢谢你的关照</code> 。）</p><h2 id="问题解决后，加个简短的补充说明"><a href="#问题解决后，加个简短的补充说明" class="headerlink" title="问题解决后，加个简短的补充说明"></a>问题解决后，加个简短的补充说明</h2><p>问题解决后，向所有帮助过你的人发个说明，让他们知道问题是怎样解决的，并再一次向他们表示感谢。如果问题在新闻组或者邮件列表中引起了广泛关注，应该在那里贴一个说明比较恰当。</p><p>最理想的方式是向最初提问的话题回复此消息，并在标题中包含<code>已修正</code> ，已解决 或其它同等含义的明显标记。在人来人往的邮件列表里，一个看见讨论串<code>问题 X</code> 和<code>问题的X - 已解决</code> 的潜在回复者就明白不用再浪费时间了（除非他个人觉得<code>问题 X</code> 的有趣），因此可以利用此时间去解决其它问题。</p><p>补充说明不必很长或是很深入；简单的一句你<code>好，原来是网线出了问题！谢谢大家 – Bill</code> 比什么也不说要来的好。事实上，除非结论真的很有技术含量，否则简短可爱的小结比长篇大论更好。说明问题是怎样解决的，但大可不必将解决问题的过程复述一遍。</p><p>对于有深度的问题，张贴调试记录的摘要是有帮助的。描述问题的最终状态，说明是什么解决了问题， 在此<em><strong>之后</strong></em>才指明可以避免的盲点。避免盲点的部分应放在正确的解决方案和其它总结材料之后，而不要 将此信息搞成侦探推理小说。列出那些帮助过你的名字，会让你交到更多朋友。</p><p>除了有礼貌和有内涵以外，这种类型的补充也有助于他人在邮件列表&#x2F;新闻群组&#x2F;论坛中搜索到真正解决你问题的方案，让他们也从中受益。</p><p>至少，这种补充有助于让每位参与协助的人因问题的解决而从中得到满足感。如果你自己不是技术专家或者黑客，那就相信我们，这种感觉对于那些你向他们求助的大师或者专家而言，是非常重要的。问题悬而未决会让人灰心；黑客们渴望看到问题被解决。好人有好报，满足他们的渴望，你会在下次提问时尝到甜头。</p><p>思考一下怎样才能避免他人将来也遇到类似的问题，自问写一份文件或加个常见问题（FAQ）会不会有帮助。如果是的话就将它们发给维护者。</p><p>在黑客中，这种良好的后继行动实际上比传统的礼节更为重要，也是你如何透过善待他人而赢得声誉的方式，这是非常有价值的资产。</p><h2 id="如何解读答案"><a href="#如何解读答案" class="headerlink" title="如何解读答案"></a>如何解读答案</h2><h3 id="RTFM和STFW：如何知道你已完全搞砸了"><a href="#RTFM和STFW：如何知道你已完全搞砸了" class="headerlink" title="RTFM和STFW：如何知道你已完全搞砸了"></a>RTFM和STFW：如何知道你已完全搞砸了</h3><p>有一个古老而神圣的传统：如果你收到 <code>RTFM （Read The Fucking Manual）</code> 的回应，回答者认为<strong>你应该去读他妈的手册</strong>。当然，基本上他是对的，你应该去读一读。</p><p>RTFM 有一个年轻的亲戚。如果你收到 <code>STFW（Search The Fucking Web）</code> 的回应，回答者认为你<strong>应该到他妈的网上搜索</strong>过了。那人多半也是对的，去搜索一下吧。（更温和一点的说法是<a href="http://lmgtfy.com/">Google是你的朋友</a></p><p>在论坛，你也可能被要求去爬爬论坛的旧文。事实上，有人甚至可能热心地为你提供以前解决此问题的讨论串。但不要依赖这种关照，提问前应该先搜索一下旧文。</p><p>通常，用这两句之一回答你的人会给你一份包含你需要内容的手册或者一个网址，而且他们打这些字的时候也正在读着。这些答复意味着回答者认为</p><ul><li>你需要的信息非常容易获得； </li><li>你自己去搜索这些信息比灌给你能让你学到更多。</li></ul><p>你不应该因此不爽；<strong>依照黑客的标准，他已经表示了对你一定程度的关注，而没有对你的要求视而不见</strong>。你应该对他祖母般的慈祥表示感谢。</p><h3 id="如果还是搞不懂"><a href="#如果还是搞不懂" class="headerlink" title="如果还是搞不懂"></a>如果还是搞不懂</h3><p>如果你看不懂回应，别立刻要求对方解释。像你以前试着自己解决问题时那样（利用手册，FAQ，网 络，身边的高手），先试着去搞懂他的回应。如果你真的需要对方解释，记得表现出你已经从中学到了 点什么。</p><p>比方说，如果我回答你： <code>看来似乎是 zentry 卡住了；你应该先清除它。</code> ，然后，这是一个<em><strong>很糟的</strong></em>后续问 题回应： <code>zentry是什么？</code> 好的问法应该是这样： <code>哦~~~我看过说明了但是只有 -z 和 -p 两个参数中提到了 zentries，而且还都没有清楚的解释如何清除它。你是指这两个中的哪一个吗？还是我看漏了什么？</code></p><h3 id="处理无礼的回应"><a href="#处理无礼的回应" class="headerlink" title="处理无礼的回应"></a>处理无礼的回应</h3><p>很多黑客圈子中看似无礼的行为并不是存心冒犯。相反，它是直接了当，一针见血式的交流风格，这种 风格更注重解决问题，而不是使人感觉舒服而却模模糊糊。</p><p>如果你觉得被冒犯了，试着平静地反应。如果有人真的做了出格的事，邮件列表、新闻群组或论坛中的 前辈多半会招呼他。如果这<em><strong>没有</strong></em>发生而你却发火了，那么你发火对象的言语可能在黑客社区中看起来是 正常的，而你将被视为有错的一方，这将伤害到你获取信息或帮助的机会。</p><p>另一方面，你偶而真的会碰到无礼和无聊的言行。与上述相反，对真正的冒犯者狠狠地打击，用犀利的 语言将其驳得体无完肤都是可以接受的。然而，在行事之前一定要非常非常的有根据。纠正无礼的言论 与开始一场毫无意义的口水战仅一线之隔，黑客们自己莽撞地越线的情况并不鲜见。如果你是新手或外 人，避开这种莽撞的机会并不高。如果你想得到的是信息而不是消磨时光，这时最好不要把手放在键盘 上以免冒险。</p><p>（有些人断言很多黑客都有轻度的自闭症或亚斯伯格综合症，缺少用于润滑人类社会<strong>正常</strong>交往所需的神 经。这既可能是真也可能是假的。如果你自己不是黑客，兴许你认为我们脑袋有问题还能帮助你应付我 们的古怪行为。只管这么干好了，我们不在乎。我们<strong>喜欢</strong>我们现在这个样子，并且通常对病患标记都有 站得住脚的怀疑。）</p><p>在下一节，我们会谈到另一个问题，当<em><strong>你</strong></em>行为不当时所会受到的 <code>冒犯</code> 。</p><h2 id="如何避免扮演失败者"><a href="#如何避免扮演失败者" class="headerlink" title="如何避免扮演失败者"></a>如何避免扮演失败者</h2><p>黑客社区的论坛中有那么几次你可能会搞砸 – 以本指南所描述到的或类似的方式。而你会在公开场合中被告知你是如何搞砸的，也许攻击的言语中还会带点夹七夹八的颜色。</p><p>这种事发生以后，你能做的最糟糕的事莫过于哀嚎你的遭遇、宣称被口头攻击、要求道歉、高声尖叫、憋闷气、威胁诉诸法律、向其雇主报怨、忘了关马桶盖等等。相反地，你该这么做：</p><p>熬过去，这很正常。事实上，它是有益健康且合理的。</p><p>社区的标准不会自行维持，它们是通过参与者积极而<em><strong>公开地</strong></em>执行来维持的。不要哭嚎所有的批评都应该 通过私下的邮件传送，它不是这样运作的。当有人评论你的一个说法有误或者提出不同看法时，坚持声 称受到个人攻击也毫无益处，这些都是失败者的态度。</p><p>也有其它的黑客论坛，受过高礼节要求的误导，禁止参与者张贴任何对别人帖子挑毛病的消息，并声称 <code>如果你不想帮助用户就闭嘴。</code> 结果造成有想法的参与者纷纷离开，这么做只会使它们沦为毫无意义的嘮叨 与无用的技术论坛。</p><p>夸张的讲法是：你要的是<strong>友善</strong>（以上述方式）还是有用？两个里面挑一个。</p><p>记着：当黑客说你搞砸了，并且（无论多么刺耳）告诉你别再这样做时，他正在为关心<strong>你</strong>和<strong>他的社区</strong>而行动。对他而言，不理你并将你从他的生活中滤掉更简单。如果你无法做到感谢，至少要表现地有点尊 严，别大声哀嚎，也别因为自己是个有戏剧性超级敏感的灵魂和自以为有资格的新来者，就指望别人像 对待脆弱的洋娃娃那样对你。</p><p>有时候，即使你没有搞砸（或者只是在他的想像中你搞砸了），有些人也会无缘无故地攻击你本人。在这种情况下，抱怨倒是<strong>真的</strong>会把问题搞砸。</p><p>这些来找麻烦的人要么是毫无办法但自以为是专家的不中用家伙，要么就是测试你是否真会搞砸的心理 专家。其它读者要么不理睬，要么用自己的方式对付他们。这些来找麻烦的人在给他们自己找麻烦，这 点你不用操心。</p><p>也别让自己卷入口水战，最好不要理睬大多数的口水战 – 当然，是在你检验它们只是口水战，而并未指 出你有搞砸的地方，且也没有巧妙地将问题真正的答案藏于其后（这也是有可能的）。</p><h2 id="不该问的问题"><a href="#不该问的问题" class="headerlink" title="不该问的问题"></a>不该问的问题</h2><p>以下是几个经典蠢问题，以及黑客没回答时心中所想的：</p><p>问题：<a href="#%E9%97%AE%E9%A2%98%EF%BC%9A%E6%88%91%E8%83%BD%E5%9C%A8%E5%93%AA%E6%89%BE%E5%88%B0X%E7%A8%8B%E5%BA%8F%E6%88%96X%E8%B5%84%E6%BA%90%EF%BC%9F">我能在哪找到 X 程序或 X 资源？</a></p><p>问题：<a href="#%E9%97%AE%E9%A2%98%EF%BC%9A%E6%88%91%E6%80%8E%E6%A0%B7%E7%94%A8X%E5%81%9AY%EF%BC%9F">我怎样用 X 做 Y？</a></p><p>问题：<a href="#%E9%97%AE%E9%A2%98%EF%BC%9A%E5%A6%82%E4%BD%95%E8%AE%BE%E5%AE%9A%E6%88%91%E7%9A%84shell%E6%8F%90%E7%A4%BA%EF%BC%9F">如何设定我的 shell 提示？</a></p><p>问题：<a href="#%E9%97%AE%E9%A2%98%EF%BC%9A%E6%88%91%E5%8F%AF%E4%BB%A5%E7%94%A8Bass-o-matic%E6%96%87%E4%BB%B6%E8%BD%AC%E6%8D%A2%E5%B7%A5%E5%85%B7%E5%B0%86AcmeCorp%E6%A1%A3%E6%A1%88%E8%BD%AC%E6%8D%A2%E4%B8%BATeX%E6%A0%BC%E5%BC%8F%E5%90%97%EF%BC%9F">我可以用 Bass-o-matic 文件转换工具将 AcmeCorp 档案转换为 TeX 格式吗？</a></p><p>问题：<a href="#%E9%97%AE%E9%A2%98%EF%BC%9A%E6%88%91%E7%9A%84%E7%A8%8B%E5%BA%8F%E3%80%81%E8%AE%BE%E5%AE%9A%E3%80%81SQL%E8%AF%AD%E5%8F%A5%E6%B2%A1%E6%9C%89%E7%94%A8">我的程序、设定、SQL语句没有用</a></p><p>问题：<a href="#%E9%97%AE%E9%A2%98%EF%BC%9A%E6%88%91%E7%9A%84Windows%E7%94%B5%E8%84%91%E6%9C%89%E9%97%AE%E9%A2%98%EF%BC%8C%E4%BD%A0%E8%83%BD%E5%B8%AE%E6%88%91%E5%90%97%EF%BC%9F">我的 Windows 电脑有问题，你能帮我吗？</a></p><p>问题：<a href="#%E9%97%AE%E9%A2%98%EF%BC%9A%E6%88%91%E7%9A%84%E7%A8%8B%E5%BA%8F%E4%B8%8D%E4%BC%9A%E5%8A%A8%E4%BA%86%EF%BC%8C%E6%88%91%E8%AE%A4%E4%B8%BA%E7%B3%BB%E7%BB%9F%E5%B7%A5%E5%85%B7X%E6%9C%89%E9%97%AE%E9%A2%98">我的程序不会动了，我认为系统工具 X 有问题</a></p><p>问题：<a href="#%E9%97%AE%E9%A2%98%EF%BC%9A%E6%88%91%E5%9C%A8%E5%AE%89%E8%A3%85Linux%EF%BC%88%E6%88%96%E8%80%85X%EF%BC%89%E6%97%B6%E6%9C%89%E9%97%AE%E9%A2%98%EF%BC%8C%E4%BD%A0%E8%83%BD%E5%B8%AE%E6%88%91%E5%90%97%EF%BC%9F">我在安装 Linux（或者 X ）时有问题，你能帮我吗？</a></p><p>问题：<a href="#%E9%97%AE%E9%A2%98%EF%BC%9A%E6%88%91%E6%80%8E%E4%B9%88%E6%89%8D%E8%83%BD%E7%A0%B4%E8%A7%A3root%E5%B8%90%E5%8F%B7%E3%80%81%E7%AA%83%E5%8F%96OP%E7%89%B9%E6%9D%83%E3%80%81%E8%AF%BB%E5%88%AB%E4%BA%BA%E7%9A%84%E9%82%AE%E4%BB%B6%E5%91%A2%EF%BC%9F">我怎么才能破解 root 帐号&#x2F;窃取 OP 特权&#x2F;读别人的邮件呢？</a></p><hr><blockquote><h6 id="问题：我能在哪找到X程序或X资源？"><a href="#问题：我能在哪找到X程序或X资源？" class="headerlink" title="问题：我能在哪找到X程序或X资源？"></a>问题：我能在哪找到X程序或X资源？</h6></blockquote><p>回答：就在我找到它的地方啊，白痴 – 搜索引擎的那一头。天哪！难道还有人不会用 <a href="http://www.google.com/">Google </a>吗？</p><blockquote><h6 id="问题：我怎样用X做Y？"><a href="#问题：我怎样用X做Y？" class="headerlink" title="问题：我怎样用X做Y？"></a>问题：我怎样用X做Y？</h6></blockquote><p>回答：如果你想解决的是 Y ，提问时别给出可能并不恰当的方法。这种问题说明提问者不但对 X 完全无知，也对 Y 要解决的问题糊涂，还被特定形势禁锢了思维。最好忽略这种人，等他们把问题搞清楚了再说。</p><blockquote><h6 id="问题：如何设定我的shell提示？"><a href="#问题：如何设定我的shell提示？" class="headerlink" title="问题：如何设定我的shell提示？"></a>问题：如何设定我的shell提示？</h6></blockquote><p>回答：如果你有足够的智慧提这个问题，你也该有足够的智慧去 RTFM，然后自己去找出来。</p><blockquote><h6 id="问题：我可以用Bass-o-matic文件转换工具将AcmeCorp档案转换为TeX格式吗？"><a href="#问题：我可以用Bass-o-matic文件转换工具将AcmeCorp档案转换为TeX格式吗？" class="headerlink" title="问题：我可以用Bass-o-matic文件转换工具将AcmeCorp档案转换为TeX格式吗？"></a>问题：我可以用Bass-o-matic文件转换工具将AcmeCorp档案转换为TeX格式吗？</h6></blockquote><p>回答：试试看就知道了。如果你试过，你既知道了答案，就不用浪费我的时间了。</p><blockquote><h6 id="问题：我的程序、设定、SQL语句没有用"><a href="#问题：我的程序、设定、SQL语句没有用" class="headerlink" title="问题：我的程序、设定、SQL语句没有用"></a>问题：我的程序、设定、SQL语句没有用</h6></blockquote><p>回答：这不算是问题吧，我对要我问你二十个问题才找得出你真正问题的问题没兴趣 – 我有更有意思的 事要做呢。在看到这类问题的时候，我的反应通常不外如下三种</p><ul><li>你还有什么要补充的吗？ </li><li>真糟糕，希望你能搞定。 </li><li>这关我有什么屁事？</li></ul><blockquote><h6 id="问题：我的Windows电脑有问题，你能帮我吗？"><a href="#问题：我的Windows电脑有问题，你能帮我吗？" class="headerlink" title="问题：我的Windows电脑有问题，你能帮我吗？"></a>问题：我的Windows电脑有问题，你能帮我吗？</h6></blockquote><p>回答：能啊，扔掉萎软的垃圾，换个像 Linux 或 BSD 的开放源代码操作系统吧。</p><p>注意：如果程序有官方版 Windows 或者与 Windows 有互动（如Samba），你<em><strong>可以</strong></em>问与Windows相关 的问题， 只是别对问题是由 Windows 操作系统而不是程序本身造成的回复感到惊讶， 因为 Windows 一般来说实在太烂，这种说法通常都是对的。</p><blockquote><h6 id="问题：我的程序不会动了，我认为系统工具X有问题"><a href="#问题：我的程序不会动了，我认为系统工具X有问题" class="headerlink" title="问题：我的程序不会动了，我认为系统工具X有问题"></a>问题：我的程序不会动了，我认为系统工具X有问题</h6></blockquote><p>回答：你完全有可能是第一个注意到被成千上万用户反复使用的系统调用与函数库档案有明显缺陷的 人，更有可能的是你完全没有根据。不同凡响的说法需要不同凡响的证据，当你这样声称时，你必须有 清楚而详尽的缺陷说明文件作后盾。</p><blockquote><h6 id="问题：我在安装Linux（或者X）时有问题，你能帮我吗？"><a href="#问题：我在安装Linux（或者X）时有问题，你能帮我吗？" class="headerlink" title="问题：我在安装Linux（或者X）时有问题，你能帮我吗？"></a>问题：我在安装Linux（或者X）时有问题，你能帮我吗？</h6></blockquote><p>回答：不能，我只有亲自在你的电脑上动手才能找到毛病。还是去找你当地的 Linux 使用群组者寻求实际的指导吧（你能在<a href="http://www.linux.org/groups/index.html">这儿</a>找到使用者群组的清单）。</p><p>注意：如果安装问题与某 Linux 的发行版有关，在它的邮件列表、论坛或本地使用者群组中提问也许是 恰当的。此时，应描述问题的准确细节。在此之前，先用 <code>Linux</code> 和<em><strong>所有</strong></em>被怀疑的硬件作关键词仔细搜索。</p><blockquote><h6 id="问题：我怎么才能破解root帐号、窃取OP特权、读别人的邮件呢？"><a href="#问题：我怎么才能破解root帐号、窃取OP特权、读别人的邮件呢？" class="headerlink" title="问题：我怎么才能破解root帐号、窃取OP特权、读别人的邮件呢？"></a>问题：我怎么才能破解root帐号、窃取OP特权、读别人的邮件呢？</h6></blockquote><p>回答：想要这样做，说明了你是个卑鄙小人；想找个黑客帮你，说明你是个白痴！</p><h2 id="好问题与蠢问题"><a href="#好问题与蠢问题" class="headerlink" title="好问题与蠢问题"></a>好问题与蠢问题</h2><p>最后，我将透过举一些例子，来说明怎样聪明的提问；同一个问题的两种问法被放在一起，一种是愚蠢 的，另一种才是明智的。</p><p><em><strong>蠢问题：</strong></em></p><blockquote><p>我可以在哪儿找到关于 Foonly Flurbamatic 的资料？</p></blockquote><p>这种问法无非想得到 <a href="#page12">STFW </a>这样的回答。</p><p><em><strong>聪明问题：</strong></em></p><blockquote><p>我用Google搜索过 “Foonly Flurbamatic 2600”，但是没找到有用的结果。谁知道上哪儿去找对这 种设备编程的资料？ </p></blockquote><p>这个问题已经 STFW 过了，看起来他真的遇到了麻烦。</p><p> <em><strong>蠢问题</strong></em> </p><blockquote><p>我从 foo 项目找来的源码没法编译。它怎么这么烂？ </p></blockquote><p>他觉得都是别人的错，这个傲慢自大的提问者 </p><p><em><strong>聪明问题</strong></em> </p><blockquote><p>foo 项目代码在 Nulix 6.2 版下无法编译通过。我读过了 FAQ，但里面没有提到跟 Nulix 有关的问 题。这是我编译过程的记录，我有什么做的不对的地方吗？ </p></blockquote><p>提问者已经指明了环境，也读过了FAQ，还列出了错误，并且他没有把问题的责任推到别人头上，他的 问题值得被关注。</p><p><em><strong>蠢问题</strong></em> </p><blockquote><p>我的主机板有问题了，谁来帮我？ </p></blockquote><p>某黑客对这类问题的回答通常是： <code>好的，还要帮你拍拍背和换尿布吗？</code> ，然后按下删除键。</p><p><em><strong>聪明问题</strong></em></p><blockquote><p>我在 S2464 主机板上试过了 X 、 Y 和 Z ，但没什么作用，我又试了 A 、 B 和 C 。请注意当我尝 试 C 时的奇怪现象。显然 florbish 正在 grommicking，但结果出人意料。通常在 Athlon MP 主机 板上引起 grommicking 的原因是什么？有谁知道接下来我该做些什么测试才能找出问题？</p></blockquote><p>这个家伙，从另一个角度来看，值得去回答他。他表现出了解决问题的能力，而不是坐等天上掉答案。 在最后一个问题中，注意 <code>告诉我答案</code> 和 <code>给我启示，指出我还应该做什么诊断工作</code> 之间微妙而又重要的区别。</p><p>事实上，后一个问题源自于 2001 年 8 月在 Linux 内核邮件列表（lkml）上的一个真实的提问。我 （Eric）就是那个提出问题的人。我在 Tyan S2464 主板上观察到了这种无法解释的锁定现象，列表成员 们提供了解决这一问题的重要信息。</p><p>通过我的提问方法，我给了别人可以咀嚼玩味的东西；我设法让人们很容易参与并且被吸引进来。我显 示了自己具备和他们同等的能力，并邀请他们与我共同探讨。通过告诉他们我所走过的弯路，以避免他 们再浪费时间，我也表明了对他们宝贵时间的尊重。</p><p>事后，当我向每个人表示感谢，并且讚赏这次良好的讨论经歷的时候， 一个 Linux 内核邮件列表的成员 表示，他觉得我的问题得到解决并非由于我是这个列表中的<code>名人</code>，而是因为我用了正确的方式来提问。</p><p>黑客从某种角度来说是拥有丰富知识但缺乏人情味的家伙；我相信他是对的，如果我<code>像</code>个乞讨者那样提 问，不论我是谁，一定会惹恼某些人或者被他们忽视。他建议我记下这件事，这直接导致了本指南的出 现。</p><h2 id="如果得不到回答"><a href="#如果得不到回答" class="headerlink" title="如果得不到回答"></a>如果得不到回答</h2><p>如果仍得不到回答，请不要以为我们觉得无法帮助你。有时只是看到你问题的人不知道答案罢了。没有回应不代表你被忽视，虽然不可否认这种差别很难区分。</p><p>总的来说，简单的重复张贴问题是个很糟的点子。这将被视为无意义的喧闹。有点耐心，知道你问题答案的人可能生活在不同的时区，可能正在睡觉，也有可能你的问题一开始就没有组织好。</p><p>你可以通过其他渠道获得帮助，这些渠道通常更适合初学者的需要。</p><p>有许多网上的以及本地的使用者群组，由热情的软件爱好者（即使他们可能从没亲自写过任何软件）组成。通常人们组建这样的团体来互相帮助并帮助新手。</p><p>另外，你可以向很多商业公司寻求帮助，不论公司大还是小。别为要付费才能获得帮助而感到沮丧！毕竟，假使你的汽车发动机汽缸密封圈爆掉了– 完全可能如此 –你还得把它送到修车铺，并且为维修付费。就算软件没花费你一分钱，你也不能强求技术支持总是免费的。</p><p>对像是 Linux 这种大众化的软件，每个开发者至少会对应到上万名使用者。根本不可能由一个人来处理来自上万名使用者的求助电话。要知道，即使你要为这些协助付费，和你所购买的同类软件相比，你所付出的也是微不足道的（通常封闭源代码软件的技术支持费用比开放源代码软件的要高得多，且内容也没那么丰富）。</p><h2 id="如何更好地回答问题"><a href="#如何更好地回答问题" class="headerlink" title="如何更好地回答问题"></a>如何更好地回答问题</h2><p><em><strong>态度和善一点。</strong></em>问题带来的压力常使人显得无礼或愚蠢，其实并不是这样。</p><p><em><strong>对初犯者私下回复。</strong></em>对那些坦诚犯错之人没有必要当众羞辱，一个真正的新手也许连怎么搜索或在哪找 常见问题都不知道。</p><p><em><strong>如果你不确定，一定要说出来！</strong></em>一个听起来权威的错误回复比没有还要糟，别因为听起来像个专家很好 玩，就给别人乱指路。要谦虚和诚实，给提问者与同行都树个好榜样。</p><p><em><strong>如果帮不了忙，也别妨碍他。</strong></em>不要在实际步骤上开玩笑，那样也许会毁了使用者的设置 –有些可怜的呆 瓜会把它当成真的指令。</p><p><em><strong>试探性的反问以引出更多的细节。</strong></em>如果你做得好，提问者可以学到点东西 –你也可以。试试将蠢问题转 变成好问题，别忘了我们都曾是新手。</p><p>尽管对那些懒虫抱怨一声 RTFM 是正当的，能指出文件的位置（即使只是建议个 Google 搜索关键词） 会更好。</p><p><em><strong>如果你决定回答，就请给出好的答案。</strong></em>当别人正在用错误的工具或方法时别建议笨拙的权宜之计 （wordaround），应推荐更好的工具，重新界定问题。</p><p><em><strong>正面的回答问题！</strong></em>如果这个提问者已经很深入的研究而且也表明已经试过 X 、 Y 、 Z 、 A 、 B 、 C 但 没得到结果，回答 <code>试试看 A 或是 B</code> 或者 <code>试试X 、 Y 、 Z 、 A 、 B 、 C</code> 并附上一个链接一点用都 没有。</p><p><em><strong>帮助你的社区从问题中学习。</strong></em>当回复一个好问题时，问问自己 <code>如何修改相关文件或常见问题文件以免再次解 答同样的问题？</code> ，接着再向文件维护者发一份补丁。</p><p>如果你是在研究一番后才做出的回答，<em><strong>展现你的技巧而不是直接端出结果</strong></em>。毕竟 <code>授人以鱼不如授人以渔</code> 。</p><h2 id="相关资源"><a href="#相关资源" class="headerlink" title="相关资源"></a>相关资源</h2><p>如果你需要个人电脑、Unix 系统和网络如何运作的基础知识，参阅<a href="http://en.tldp.org/HOWTO/Unix-and-Internet-Fundamentals-HOWTO/">Unix系统和网络基本原理</a>。</p><p>当你发布软件或补丁时，试着按<a href="http://en.tldp.org/HOWTO/Software-Release-Practice-HOWTO/index.html">软件发布实践</a>操作。</p><h2 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢"></a>鸣谢</h2><p>Evelyn Mitchel贡献了一些愚蠢问题例子并启发了编写 <code>如何更好地回答问题</code> 这一节， Mikhail Ramendik 贡献了一些特别有价值的建议和改进。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;提问的智慧&quot;&gt;&lt;a href=&quot;#提问的智慧&quot; class=&quot;headerlink&quot; title=&quot;提问的智慧&quot;&gt;&lt;/a&gt;提问的智慧&lt;/h1&gt;&lt;p&gt;How To Ask Questions The Smart Way&lt;/p&gt;
&lt;p&gt;Copyright © 2001</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://w1ndys.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="提问的智慧" scheme="https://w1ndys.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7/"/>
    
    
    <category term="文" scheme="https://w1ndys.github.io/tags/%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>硕神！！————一则关于“硕神”的博文/硕神的起源发展</title>
    <link href="https://w1ndys.github.io/posts/88359b18"/>
    <id>https://w1ndys.github.io/posts/88359b18</id>
    <published>2024-01-14T11:06:36.937Z</published>
    <updated>2024-01-14T08:22:37.861Z</updated>
    
    <content type="html"><![CDATA[<p>现在朋友圈里发生了一个怪象，那就是凡是认识我的都知道有人称我为硕神，似乎我已经失去我的本名</p><p>我来简单介绍一下这个名字的由来</p><p>起初，没有人意识到这场灾难（</p><h1 id="开端"><a href="#开端" class="headerlink" title="开端"></a>开端</h1><p>最开始是我几个初中同学的群里，从这个群开始传开的，其中一个群友叫我“硕神”，然后慢慢地全群的同学都叫我“硕神‘</p><h1 id="发展"><a href="#发展" class="headerlink" title="发展"></a>发展</h1><h1 id="高潮"><a href="#高潮" class="headerlink" title="高潮"></a>高潮</h1><h1 id="如今"><a href="#如今" class="headerlink" title="如今"></a>如今</h1><hr><p>未完待续………………</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;现在朋友圈里发生了一个怪象，那就是凡是认识我的都知道有人称我为硕神，似乎我已经失去我的本名&lt;/p&gt;
&lt;p&gt;我来简单介绍一下这个名字的由来&lt;/p&gt;
&lt;p&gt;起初，没有人意识到这场灾难（&lt;/p&gt;
&lt;h1 id=&quot;开端&quot;&gt;&lt;a href=&quot;#开端&quot; class=&quot;headerlin</summary>
      
    
    
    
    <category term="随笔" scheme="https://w1ndys.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="硕神" scheme="https://w1ndys.github.io/categories/%E9%9A%8F%E7%AC%94/%E7%A1%95%E7%A5%9E/"/>
    
    
    <category term="随笔" scheme="https://w1ndys.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="硕神" scheme="https://w1ndys.github.io/tags/%E7%A1%95%E7%A5%9E/"/>
    
  </entry>
  
  <entry>
    <title>数据结构期中考试wp</title>
    <link href="https://w1ndys.github.io/posts/c0eaf0d7"/>
    <id>https://w1ndys.github.io/posts/c0eaf0d7</id>
    <published>2024-01-14T11:06:36.935Z</published>
    <updated>2024-01-14T08:22:37.831Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>以下内容全部来自ChatGPT和Microsoft bing ai解答，正确率为85%左右，<font color='red'>仅参考，本人对本页答案概不负责</font></p></blockquote><h1 id="一、选择题"><a href="#一、选择题" class="headerlink" title="一、选择题"></a>一、选择题</h1><ol><li>对于数据结构的描述，下列说法中不正确的是( )。</li></ol><p><font color='red'>相同的逻辑结构对应的存储结构也必相同</font></p><p>数据结构由逻辑结构、存储结构和基本操作三方面组成</p><p>对数据结构基本操作的实现与存储结构有关</p><p>数据的存储结构是数据的逻辑结构的机内实现</p><blockquote><p>选项 <em>A</em> 是不正确的。相同的逻辑结构并不意味着存储结构也必须相同。逻辑结构是数据对象之间的抽象关系，而存储结构是这些关系在计算机内部的具体表示。例如，线性表的逻辑结构可以通过数组（顺序存储结构）或链表（链式存储结构）来实现，这两种存储结构有着不同的特性和操作复杂性。因此，即使逻辑结构相同，存储结构也可以不同。其他选项 <em>B</em>、<em>C</em> 和 <em>D</em> 都是正确的。数据结构确实由逻辑结构、存储结构和基本操作三方面组成（<em>B</em>），对数据结构基本操作的实现确实与存储结构有关（<em>C</em>），数据的存储结构是数据的逻辑结构的机内实现（<em>D</em>）。</p></blockquote><ol start="2"><li>顺序存储结构中数据元素之间的逻辑关系是由（ ）表示的。</li></ol><p>线性结构</p><p>非线性结构</p><p><font color='red'>存储位置</font></p><p>指针</p><blockquote><p>在顺序存储结构中，数据元素之间的逻辑关系是由<strong>存储位置</strong>表示的。所以正确答案是选项 <em>C</em>。在顺序存储结构中，元素之间的逻辑关系（例如线性关系）通过它们在内存中的物理位置来表示。相邻的元素在内存中也是相邻的。这与链式存储结构不同，在链式存储结构中，元素之间的逻辑关系是通过指针表示的。选项 <em>A</em> 和 <em>B</em> 描述的是数据结构的类型，而不是数据元素之间的逻辑关系如何表示。选项 <em>D</em> 是链式存储结构中数据元素之间逻辑关系的表示方式，而不是顺序存储结构。</p></blockquote><ol start="3"><li>链接存储结构中数据元素之间的逻辑关系是由( )表示的。</li></ol><p>线性结构</p><p>非线性结构</p><p>存储位置</p><p><font color='red'>指针</font></p><blockquote><p>在链接存储结构中，数据元素之间的逻辑关系是由指针表示的。指针指向了下一个数据元素的位置，从而建立了数据元素之间的联系。</p><p>因此，选项 D 是正确的。</p></blockquote><ol start="4"><li>算法指的是( )。</li></ol><p><font color='red'>对特定问题求解步骤的一种描述,是指令的有限序列</font></p><p>计算机程序</p><p>解决问题的计算方法</p><p>数据处理</p><blockquote><p>算法指的是对特定问题求解步骤的一种描述，是指令的有限序列。它是解决问题或执行任务的明确指令集合，旨在通过一系列定义明确的步骤来完成特定任务。算法通常是一系列可执行的操作，能够从初始状态转移到所需的最终状态。</p><p>因此，选项 A 是正确的。</p></blockquote><ol start="5"><li>假设时间复杂度为O（n^2）的算法在有200个元素的数组上运行需要3.1 ms，则有400个元素的数组上运行需要(   )ms。</li></ol><p>3.1</p><p>6.2</p><p><font color='red'>12.4</font></p><p>9.61</p><blockquote><p>根据时间复杂度为 O(n^2) 的算法特点，当数组元素的数量增加一倍时，运行时间将增加为原来的平方倍。因此，200 个元素变为 400 个元素，相当于增加了一倍。根据这个关系，我们可以预计运行时间将是原来的 2^2 &#x3D; 4 倍。即 3.1 ms * 4 &#x3D; 12.4 ms。</p><p>因此，有 400 个元素的数组上运行时间将是 12.4 ms。选项 C 中的 12.4 是正确的。</p></blockquote><ol start="6"><li>算法分析的两个主要方面是( )。</li></ol><p><font color='red'>空间性能和时间性能</font></p><p>正确性和简明性</p><p>可读性和文档性</p><p>数据复杂性和程序复杂性</p><blockquote><p>算法分析的两个主要方面是空间性能和时间性能。在算法设计和评估过程中，我们通常关注算法所需的内存空间以及它执行所需的时间。这些指标可以帮助我们评估算法的效率和可行性，从而选择最适合特定问题的算法。</p><p>因此，选项 A 是正确的。</p></blockquote><ol start="7"><li>下面( )不是算法所必须具备的特性。</li></ol><p>有穷性</p><p>确切性</p><p><font color='red'>高效性</font></p><p>可行性</p><blockquote><p>从定义上讲，算法必须具备“有穷性”、“确切性”和“可行性”，因为算法必须是能够在有限步骤内完成的、每个步骤都必须确切且无歧义，并且必须是可行实施的。因此，这些特性是算法的基本要求。</p><p>然而，“高效性”并非是算法必须具备的特性。尽管我们通常希望算法是高效的，但并非所有算法都需要是最高效的。因此，选项 C 中的“高效性”是不是算法所必须具备的特性。</p></blockquote><ol start="8"><li>链表不具有的特点是( )。</li></ol><p><font color='red'>可随机访问任一元素</font></p><p>插入删除不需要移动元素</p><p>不必事先估计存储空间</p><p>所需空间与线性表长度成正比</p><blockquote><p>链表不具备的特点是可随机访问任一元素。链表中的元素并非按照其在内存中的物理位置顺序存储，因此不能像数组那样通过下标直接访问特定位置的元素。如果要访问链表中的某个特定元素，需要从头节点开始遍历链表直到找到该元素。</p><p>因此，选项 A 中的“可随机访问任一元素”是链表不具备的特点。</p></blockquote><ol start="9"><li>线性表采用链接存储时，其地址( )。</li></ol><p>必须是连续的</p><p>部分地址必须是连续的</p><p>一定是不连续的</p><p><font color='red'>连续与否均可以</font></p><blockquote><p>线性表采用链接存储时，其地址可以是不连续的。在链接存储结构中，元素之间并不要求在物理内存中是连续存储的，相邻元素之间通过指针进行连接。这使得链表结构能够动态地分配和释放内存，避免了因为插入或删除操作导致的大量数据移动。</p><p>因此，选项 D 中的“连续与否均可以”是正确的。</p></blockquote><p>10.循环单链表的主要优点是( )。</p><p>不再需要头指针了</p><p>从表中任一结点出发都能扫描到整个链表</p><p>已知某个结点的位置后,能够容易找到它的直接前趋</p><p><font color='red'>在进行插入、删除操作时，能更好地保证链表不断开</font></p><blockquote><p>循环单链表的主要优点是在进行插入、删除操作时，能更好地保证链表不断开。循环单链表的尾节点指向头节点，形成一个闭环，这使得在进行插入和删除操作时更加方便，因为不需要处理头尾节点的特殊情况。</p><p>因此，选项 D 中的“在进行插入、删除操作时，能更好地保证链表不断开”是循环单链表的主要优点。</p></blockquote><p>11.若线性表中最常用的操作是在最后一个结点之后插入一个节点和删除最后一个结点，则采用( )存储方法最节省时间。</p><p>单链表</p><p><font color='red'>循环双链表</font></p><p>单循环链表</p><p>带尾指针的单循环链表</p><blockquote><p>循环单链表的主要优点是<strong>从表中任一结点出发都能扫描到整个链表</strong>。所以，正确答案是选项 <em>B</em>。在循环单链表中，最后一个元素的指针字段指向链表的第一个元素，形成一个闭环。这意味着我们可以从任何一个元素开始，通过顺序访问每个元素的指针字段，遍历整个链表。然而，循环单链表仍然需要头指针来标识链表的起始位置（选项 <em>A</em> 是错误的）。已知某个结点的位置后，找到它的直接前趋在单链表（包括循环单链表）中并不容易，因为我们只能从头开始遍历链表（选项 <em>C</em> 是错误的）。在进行插入、删除操作时，无论是单链表还是循环单链表，我们都需要确保操作后链表不会断开（选项 <em>D</em> 是错误的）。</p></blockquote><p>12.从栈顶指针为top的链栈中删除一个结点 ,用x保存被删除结点的值，则执行( )。</p><p>x&#x3D;top; top&#x3D;top-&gt; next;</p><p>x&#x3D;top-&gt; data;</p><p>top&#x3D;top-&gt; next; x&#x3D; top-&gt; data;</p><p><font color='red'>x&#x3D;top-&gt; data; top&#x3D; top-&gt; next;</font></p><blockquote><p>在从栈顶指针为top的链栈中删除一个节点时，我们首先需要保存被删除节点的值，然后更新栈顶指针。栈顶指针需要指向被删除节点的下一个节点，因为栈是先进后出的数据结构，所以删除的是栈顶元素。</p><p>因此，正确的操作是:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">x = top-&gt;data; // 保存被删除节点的值<br>top = top-&gt;next; // 更新栈顶指针<br></code></pre></td></tr></table></figure><p>所以选项是D。</p></blockquote><p>13.设计一个判别表达式中左右扩号是否配对的算法,采用( )数据结构最佳。</p><p>顺序表</p><p><font color='red'>栈</font></p><p>队列</p><p>链表</p><blockquote><p>对于判别表达式中左右括号是否配对的算法，最适合使用的数据结构是栈。栈是一种后进先出（LIFO）的数据结构，可以用来检查括号是否匹配。具体的算法可以使用栈来存储左括号，并在遇到右括号时弹出相应的左括号进行匹配。</p><p>因此，选项 B 中的栈是最佳的数据结构。</p></blockquote><p>14.将数组称为随机存取结构是因为（ ）。</p><p>数组元素是随机的</p><p><font color='red'>对数组任意元素的存取时间是相等的</font></p><p>随时可以对数组进行访问</p><p>数组的存储结构是不定的</p><blockquote><p>将数组称为随机存取结构是因为对数组任意元素的存取时间是相等的。这是因为数组在内存中是连续存储的，每个元素都可以通过偏移量直接计算出其地址，因此可以在 O(1) 的时间复杂度内访问任意索引处的元素。</p><p>因此，选项 B 中的“对数组任意元素的存取时间是相等的”是描述数组作为随机存取结构的原因。</p></blockquote><p>15.设有两个字符串p和q，求p在q中首次出现的位置的运算称作（ ）。</p><p>连接</p><p><font color='red'>模式匹配</font></p><p>求字串</p><p>求串长</p><blockquote><p>求p在q中首次出现的位置的运算称为模式匹配。模式匹配是计算机科学中的一个重要概念，用于确定一个字符串是否包含另一个字符串作为子字符串，并返回其出现的位置。在这种情况下，给定字符串p和q，我们试图找到q中第一次出现p的位置。</p><p>因此，选项 B 中的“模式匹配”是描述这种运算的术语。</p></blockquote><p>16.设栈S和队列Q的初始状态为空，元素e1，e2，e3，e4，e5，e6依次通过栈S，一个元素出栈后即进入队列Q。若6个元素出队列的顺序是e2，e4，e3，e6，e5，e1，则栈S的容量至少应该是( )。</p><p><font color='red'>6</font></p><p>4</p><p>3</p><p>2</p><blockquote><p>根据题意，元素首先通过栈 S，然后一个一个地出栈并进入队列 Q。最后出队列的元素顺序是 e2，e4，e3，e6，e5，e1。这意味着栈 S 中的元素在被进入队列 Q 之前必须按照逆序排列。</p><p>因此，栈 S 的最小容量应至少是 6，因为栈 S 需要依次容纳 e1，e5，e6，e3，e4，e2 这 6 个元素。</p><p>因此，选项 A 中的 6 是正确的。</p></blockquote><p>17.一个栈的入栈序列是1，2，3，4，5，则栈的不可能的输出序列是( )。</p><p>54321</p><p>45321</p><p><font color='red'>43512</font></p><p>12345</p><blockquote><p>对于给定的入栈序列1，2，3，4，5，栈的不可能的输出序列是 43512。这是因为在一个栈中，要取出一个元素，需要将位于栈顶的元素弹出，然后才能取出下一个元素。因此，输出序列中的第一个数字应该是栈中元素的最底部元素，然后逐渐依次向上取出。所以，顺序 4、3、5、1、2 不可能是给定入栈序列的输出序列。</p><p>其他选项中的序列都是可能的栈输出序列，但 43512 不是。</p></blockquote><ol start="18"><li>栈和队的主要区别在于（ ）。</li></ol><p>它们的逻辑结构不同</p><p>它们的存储结构不同</p><p>所包含的运算不同</p><p><font color='red'>插入、删除运算的限定不一样</font></p><blockquote><p>栈和队列的主要区别在于它们的插入和删除运算的限定不同。栈是一种后进先出（LIFO）的数据结构，只允许在一端进行插入和删除操作，而队列是一种先进先出（FIFO）的数据结构，只允许在一端插入，在另一端删除。</p><p>因此，选项 D 中的“插入、删除运算的限定不一样”是栈和队列的主要区别。</p></blockquote><ol start="19"><li>设模式T&#x3D;“abcabc”，则该模式的next值为( )。</li></ol><p>{-1，0，0，1，2，3}</p><p><font color='red'>{-1，0，0，0，1，2}</font></p><p>{-1，0，0，1，1，2}</p><p>{1，0，0，0，2，3}</p><blockquote><p>自己算算就行了，这题原本错了</p></blockquote><ol start="20"><li>若一个栈的输入序列是1，2，3，… ,n,输出序列的第一个元素是n，则第 i个输出元素是( )。</li></ol><p>不确定</p><p>n-i</p><p>n-i-1</p><p><font color='red'>n-i+1</font></p><blockquote><p>对于一个栈的输入序列是1，2，3，…，n，输出序列的第一个元素是n，则第 i 个输出元素是 n-i+1。这是因为栈是一种后进先出（LIFO）的数据结构，所以最后一个进入栈的元素会最先被弹出，倒数第二个进入栈的元素会第二个被弹出，以此类推。</p><p>因此，选项 D 中的 n-i+1 是第 i 个输出元素的正确表示。</p></blockquote><p>21.设线性表有n个元素，以下操作中,( )在顺序表上实现比在单链表上实现的效率更高。</p><p><font color='red'>输出第i(1≤i≤n)个元素值</font></p><p>交换第1个和第2个元素的值</p><p>顺序输出所有n个元素</p><p>查找与给定值x相等的元素在线性表中的序号</p><blockquote><p>在顺序表和单链表上实现的效率比较如下：</p><ul><li><strong>输出第i(1≤i≤n)个元素值</strong>：在顺序表上实现的效率更高。因为顺序表可以直接通过索引访问任何位置的元素，时间复杂度为O(1)。而在单链表中，我们需要从头开始遍历到第i个元素，时间复杂度为O(n)。</li><li><strong>交换第1个和第2个元素的值</strong>：在单链表上实现的效率更高。因为在单链表中，我们可以直接改变节点的链接，而不需要移动元素本身。而在顺序表中，我们需要移动元素本身，这可能涉及到大量的数据复制。</li><li><strong>顺序输出所有n个元素</strong>：在顺序表和单链表上实现的效率相同。因为无论是顺序表还是单链表，我们都需要遍历所有的元素，时间复杂度都是O(n)。</li><li><strong>查找与给定值x相等的元素在线性表中的序号</strong>：在顺序表和单链表上实现的效率相同。因为无论是顺序表还是单链表，我们都需要遍历所有的元素来查找给定值，时间复杂度都是O(n)。</li></ul><p>所以，在这些操作中，只有<strong>输出第i(1≤i≤n)个元素值</strong>这个操作在顺序表上实现比在单链表上实现的效率更高。</p></blockquote><p>22.对于n个元素组成的线性表,建立一个有序单链表的时间复杂度是( )。</p><blockquote><p>建立一个有序单链表的时间复杂度是<font color='red'>O(n^2)。</font></p><p>在一个有序单链表中插入一个元素需要在链表中找到合适的位置，这可能需要从头开始遍历链表，直到找到合适的位置为止。插入一个元素的平均时间复杂度为O(n)。如果要建立一个有序单链表，需要将n个元素一个个插入，因此总的时间复杂度为O(n) * O(n) &#x3D; O(n^2)。</p></blockquote><p>23.设数组S[n]作为两个栈S1和S2的存储空间，对任何一个栈只有当S[n]全满时才不能进行进栈操作。为这两个栈分配空间的最佳方案是( )。</p><p><font color='red'>S1的栈底位置为0,S2的栈底位置为n-1</font></p><p>S1的栈底位置为0,S2的栈底位置为n&#x2F;2</p><p>S1的栈底位置为0,S2的栈底位置为n</p><p>S1的栈底位置为0,S2的栈底位置为1</p><blockquote><p>为了最大限度地利用存储空间，我们应该将S1的栈底位置设置为0，将S2的栈底位置设置为n-1。这样可以使两个栈的空间分配在整个数组的两端，最大化利用数组的空间。所以最佳方案是：</p><p>S1的栈底位置为0，S2的栈底位置为n-1。</p></blockquote><p>24.一个队列的入队顺序是1、2、3和4,则队列的输出顺序是( )。</p><p>4321</p><p><font color='red'>1234</font></p><p>1432</p><p>3241</p><blockquote><p>一个队列的特点是先进先出(FIFO)，即最先进入队列的元素最先出队列。根据题目给出的入队顺序，元素1首先进入队列，然后是2、3、4。因此，出队顺序应为1234。</p><p>所以，队列的输出顺序是1234。</p></blockquote><p>25.对特殊矩阵采用压缩存储的目的主要是为了( )。</p><p>表达变得简单</p><p>对矩阵元素的存取变得简单</p><p>去掉矩阵中的多余元素</p><p><font color='red'>减少不必要的存储空间</font></p><blockquote><p>对特殊矩阵采用压缩存储的主要目的是为了<strong>减少不必要的存储空间</strong>。通过识别和利用矩阵中的特殊结构或特殊规律，可以使用更少的存储空间来表示矩阵，从而减少存储开销。这样可以节省存储空间，并降低存储和传输成本。</p></blockquote><p>26.在解决计算机主机与打印机之间速度不匹配问题时通常设置一个打印缓冲区，该缓冲区应该是一个( )结构。</p><p>栈</p><p><font color='red'>队列</font></p><p>数组</p><p>线性表</p><blockquote><p>在解决计算机主机与打印机之间速度不匹配问题时，通常设置一个打印缓冲区，该缓冲区应该是一个队列结构。</p><p>使用队列结构可以保证打印作业按照先来先服务的原则进行处理。当打印机的处理速度慢于计算机主机的传输速度时，打印缓冲区可以暂时存储待打印的作业，然后按照顺序逐一传输到打印机进行打印。</p></blockquote><p>27.若某线性表中最常用的操作是取第i个元素和找第i个元素的前驱，则采用（ ）存储方法最节省时间。</p><p><font color='red'>顺序表</font></p><p>单链表</p><p>双链表</p><p>单循环链表</p><blockquote><p>若某线性表中最常用的操作是取第 i 个元素和找第 i 个元素的前驱，采用<strong>顺序表</strong>存储方法最节省时间。顺序表可以通过下标直接访问元素，时间复杂度为 O(1)，而单链表、双链表以及单循环链表在取第 i 个元素的操作中需要遍历至第 i 个节点，时间复杂度为 O(i)。因此，在此情况下，采用顺序表存储方法可以最节省时间。</p></blockquote><ol start="28"><li>在一个单链表中，已知q所指结点是p所指结点的直接前驱，若在q和p之间插入s所指结点，则执行( )操作。</li></ol><p>s-&gt;next&#x3D;p-&gt;next; p-&gt; next&#x3D;s;</p><p><font color='red'>q-&gt;next&#x3D;s; s-&gt;next&#x3D;p;</font></p><p>p-&gt;next&#x3D;s-&gt;next; s-&gt;next&#x3D;p;</p><p>p-&gt;next&#x3D;s; s-&gt;next&#x3D;q;</p><blockquote><p>在一个单链表中，已知 q 所指结点是 p 所指结点的直接前驱，若在 q 和 p 之间插入 s 所指结点，应执行以下操作：</p><p>q-&gt;next&#x3D;s; s-&gt;next&#x3D;p;</p><p>这样可以将 s 插入到 q 和 p 之间，完成链表的插入操作。</p></blockquote><p>29.关于矩阵压缩存储，下面的说法中，不正确的是( )。</p><p>对称矩阵只需存放包括主对角线元素在内的下(或上)三角的元素即可</p><p>对角矩阵只需存放非零元素即可</p><p>稀疏矩阵中值为零的元素较多，因此可以采用三元组表方法存储</p><p><font color='red'>稀疏矩阵中大量值为零的元素分布有规律，因此可以采用三元组表方法存储</font></p><blockquote><p>关于矩阵压缩存储，不正确的说法是：</p><p>稀疏矩阵中大量值为零的元素分布有规律，因此可以采用三元组表方法存储。</p><p>虽然稀疏矩阵中大量值为零的元素可以采用三元组表方法存储，但并不一定有规律。使用三元组表方法存储的目的是为了有效地表示稀疏矩阵，并且避免存储大量无效的零元素，而不是基于元素分布的规律。</p></blockquote><p>30.关于数组，下面的说法中，不正确的是( )。</p><p>数组是一种线性结构</p><p>数组是一种定长的线性结构</p><p>除了插入与删除操作外，数组的基本操作还有存取、修改、检索和排序等</p><p><font color='red'>数组的基本操作有存取、修改、检索和排序等，没有插入与删除操作</font></p><blockquote><p>关于数组，不正确的说法是：</p><p>数组的基本操作有存取、修改、检索和排序等，没有插入与删除操作。</p><p>实际上，数组是一种定长的线性结构，长度在创建时被固定。在插入和删除元素时，需要移动其他元素以保持数组的连续性，这会导致较高的时间复杂度。因此，数组的插入和删除操作相对效率较低。</p></blockquote><h1 id="二、判断题"><a href="#二、判断题" class="headerlink" title="二、判断题"></a>二、判断题</h1><p>31.稀疏矩阵压缩存储后，必会失去随机存取功能。</p><p>正确</p><p><font color='red'>错误</font></p><blockquote><p>稀疏矩阵压缩存储后，并不一定会失去随机存取功能。虽然压缩存储可能会限制某些随机存取功能，但这取决于具体的压缩算法和数据结构。例如，使用三元组表等压缩方式仍然可以支持随机存取功能，只是在稀疏矩阵中的零元素可能不会占据存储空间。因此，这个说法是不正确的。</p></blockquote><p>32.将数组称为随机存取结构是因为随时可以对数组进行存取访问。</p><p><font color='red'>正确</font></p><p>错误</p><blockquote><p>将数组称为随机存取结构是因为可以通过下标直接随机访问数组中的元素，因此说法是正确的。数组允许按照元素的索引进行快速访问，这意味着可以通过指定元素的索引位置来直接访问或修改元素的值。这种随机访问的特性使得数组成为一种支持高效随机访问的数据结构。</p></blockquote><p>33.有n个元素依次进栈，则出栈序列有(n-1)&#x2F;2种。</p><p>正确</p><p><font color='red'>错误</font></p><blockquote><p>这个说法是错误的。出栈序列的数量不一定是 (n-1)&#x2F;2。实际上，对于给定的n个元素，有许多不同的出栈序列可能。出栈序列的数量取决于具体的排列组合情况，而不是简单地等于 (n-1)&#x2F;2。具体的出栈序列数量需要根据出栈顺序的特定限制条件进行计算。</p></blockquote><p>34.栈可以作为实现过程调用的一种数据结构。</p><p><font color='red'>正确</font></p><p>错误</p><blockquote><p>栈可以作为实现过程调用的一种数据结构，因此这个说法是正确的。在程序执行过程中，当一个过程调用另一个过程时，会将返回地址、参数和局部变量等信息存储在栈中。这些信息以堆栈的形式保存，即后调用的函数压栈，先调用的函数出栈。栈的特点使得它非常适合用于实现过程调用和递归等计算机程序中。</p></blockquote><p>35.在栈满的情况下不能做进栈操作，否则将产生“上溢”。</p><p><font color='red'>正确</font></p><p>错误</p><blockquote><p>在栈满的情况下进行进栈操作将导致栈上溢，这会导致数据丢失或程序异常终止。因此，这个说法是正确的。栈有一个容量限制，当栈已满时，无法再进行进栈操作。如果强行进行进栈操作，将导致栈上溢（stack overflow），可能会损坏其他数据或引发程序异常。因此，在实现栈时，通常需要考虑栈上溢的情况并进行相应的处理。</p></blockquote><p>36.在循环队列中，front指向队头元素的前一个位置rear指向队尾元素的位置，则队满的条件是front&#x3D;rear。</p><p>正确</p><p><font color='red'>错误</font></p><blockquote><p>在循环队列中，通常采用取模运算来实现循环。front 指向队头元素的位置，rear 指向队尾元素的下一个位置。因此，队满的条件是 <code>(rear + 1) % n == front</code>，其中 <code>n</code> 是队列的最大容量。</p><p>因此，说法是错误的。队满的条件不是 <code>front = rear</code>，而是 <code>(rear + 1) % n == front</code>。</p></blockquote><p>37.在单链表中，要取得某个元素，只要知道该元素所在结点的地址即可，因此单链表是随机存取结构。</p><p>正确</p><p><font color='red'>错误</font></p><blockquote><p>在单链表中，虽然可以通过知道该元素所在结点的地址来访问该元素，但这种访问方式并不属于随机存取，因为单链表不支持通过下标或索引直接访问元素。单链表只能通过从头结点开始逐个遍历查找的方式来找到指定位置的元素，这导致了访问的时间复杂度是 O(n)。因此，单链表并不属于随机存取结构。</p></blockquote><p>38.每种数据结构都具备三个基本操作：插入、删除和查找。</p><p>正确</p><p><font color='red'>错误</font></p><blockquote><p>这个说法是不准确的。尽管许多数据结构确实具有插入、删除和查找等基本操作，但并不是每种数据结构都具备这三种基本操作。不同类型的数据结构可能有不同的设计目标和特定的操作。有些数据结构可能只支持其中一些操作，而另一些数据结构可能具有不同的基本操作。因此，不能将每种数据结构都简单地归纳为具有这三个基本操作。</p></blockquote><p>39.线性结构的基本特征是：每个元素有且仅有一个直接前驱和一个直接后继。</p><p>正确</p><p><font color='red'>错误</font></p><blockquote><p>线性结构的基本特征是每个元素最多只有一个直接前驱和一个直接后继，而不是有且仅有一个。这意味着某些元素可以没有直接前驱或直接后继（比如第一个元素和最后一个元素）。因此，说法是错误的。</p></blockquote><p>40.算法的时间复杂度都要通过算法中的基本语句的执行次数来确定。</p><p><font color='red'>正确</font></p><p>错误</p><blockquote><p>这个说法是正确的。算法的时间复杂度是通过对算法中的基本语句执行次数的分析来确定的。基本语句通常是指算法中执行最频繁的操作，例如赋值语句、比较语句、算术运算等。通过计算基本语句执行的次数，可以得出算法的时间复杂度，从而评估算法的执行效率。</p></blockquote><h1 id="三、简答题"><a href="#三、简答题" class="headerlink" title="三、简答题"></a>三、简答题</h1><ol><li><h2 id="试解释数据结构、数据类型、抽象数据类型的概念"><a href="#试解释数据结构、数据类型、抽象数据类型的概念" class="headerlink" title="试解释数据结构、数据类型、抽象数据类型的概念"></a>试解释数据结构、数据类型、抽象数据类型的概念</h2></li></ol><ul><li><strong>数据结构</strong>：数据结构是计算机科学中一种特殊的方式，它可以使我们在计算机中更有效地存储和组织数据。例如，我们可以使用数组、链表、栈、队列、图和树等数据结构来存储和管理数据。</li><li><strong>数据类型</strong>：数据类型是编程语言中的一个概念，它定义了一组数据的值的集合和这组数据上可进行的操作。例如，整数类型（int）定义了整数的集合，我们可以对这些整数进行加法、减法、乘法和除法等操作。</li><li><strong>抽象数据类型（ADT）</strong>：抽象数据类型是一种逻辑描述，它定义了一组数据和在这组数据上可进行的操作，但并未指定这些操作的具体实现。例如，栈ADT定义了一组元素和两个基本操作：push（将元素添加到栈顶）和 pop（从栈顶移除元素）。然而，栈ADT并未指定这些操作应如何实现。我们可以使用数组或链表来实现栈ADT。</li></ul><ol start="2"><li><h2 id="以下为单链表在指定位置插入元素的-C-代码，请将划线处代码补充完整。"><a href="#以下为单链表在指定位置插入元素的-C-代码，请将划线处代码补充完整。" class="headerlink" title="以下为单链表在指定位置插入元素的 C++代码，请将划线处代码补充完整。"></a>以下为单链表在指定位置插入元素的 C++代码，请将划线处代码补充完整。</h2><p>以下是将划线处代码补充完整的 C++ 代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-type">void</span> LinkList&lt;DataType&gt;::<span class="hljs-built_in">Insert</span>(<span class="hljs-type">int</span> i, DataType x)<br>&#123;<br>    Node&lt;DataType&gt; *p = first, *s = <span class="hljs-literal">nullptr</span>;<br>    <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">nullptr</span> &amp;&amp; count &lt; i - <span class="hljs-number">1</span>) <span class="hljs-comment">// (1) 划线处</span><br>    &#123;<br>        p = p-&gt;next;<br>        count++;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (p == <span class="hljs-literal">nullptr</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-string">&quot;插入位置错误&quot;</span>;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        s = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Node</span>&lt;DataType&gt;(x);<br>        s-&gt;next = p-&gt;next; <span class="hljs-comment">// (2) 划线处</span><br>        p-&gt;next = s; <span class="hljs-comment">// (3) 划线处</span><br>        <span class="hljs-keyword">if</span> (p == last) <span class="hljs-comment">// (4) 划线处</span><br>            last = s;<br>        length++; <span class="hljs-comment">// (5) 划线处</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在这段代码中：</p><ol><li>划线处 (1) 是 while 循环的条件，用于寻找指定位置的插入点。</li><li>划线处 (2) 将新节点 s 的 next 指针指向 p 后面的节点。</li><li>划线处 (3) 将 p 的 next 指针指向新节点 s。</li><li>划线处 (4) 检查是否是在链表末尾插入，如果是，则更新 last 指针。</li><li>划线处 (5) 增加链表的长度。</li></ol></li><li><h2 id="如下为循环队列的实现代码，给出了类定义、构造函数、入队和出队函数，请-补充完整划线处代码。"><a href="#如下为循环队列的实现代码，给出了类定义、构造函数、入队和出队函数，请-补充完整划线处代码。" class="headerlink" title="如下为循环队列的实现代码，给出了类定义、构造函数、入队和出队函数，请 补充完整划线处代码。"></a>如下为循环队列的实现代码，给出了类定义、构造函数、入队和出队函数，请 补充完整划线处代码。</h2><p>以下是补充完整划线处代码的实现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> QueueSize = <span class="hljs-number">100</span>;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CirQueue</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">CirQueue</span>();<br>    ~<span class="hljs-built_in">CirQueue</span>();<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">EnQueue</span><span class="hljs-params">(DataType x)</span></span>;<br>    <span class="hljs-function">DataType <span class="hljs-title">DeQueue</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function">DataType <span class="hljs-title">GetHead</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Empty</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-keyword">private</span>:<br>    DataType data[QueueSize];<br>    <span class="hljs-type">int</span> front, rear;<br>&#125;;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br>CirQueue&lt;DataType&gt;::<span class="hljs-built_in">CirQueue</span>()<br>&#123;<br>    front = rear = <span class="hljs-number">0</span>; <span class="hljs-comment">// (1) 划线处</span><br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-type">void</span> CirQueue&lt;DataType&gt;::<span class="hljs-built_in">EnQueue</span>(DataType x)<br>&#123;<br>    <span class="hljs-keyword">if</span> ((rear + <span class="hljs-number">1</span>) % QueueSize == front) <span class="hljs-comment">// (2) 划线处</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-string">&quot;队满，上溢出&quot;</span>;<br>    rear = (rear + <span class="hljs-number">1</span>) % QueueSize; <span class="hljs-comment">// (3) 划线处</span><br>    data[rear] = x;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br>DataType CirQueue&lt;DataType&gt;::<span class="hljs-built_in">DeQueue</span>()<br>&#123;<br>    <span class="hljs-keyword">if</span> (front == rear) <span class="hljs-comment">// (4) 划线处</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-string">&quot;下溢&quot;</span>;<br>    front = (front + <span class="hljs-number">1</span>) % QueueSize; <span class="hljs-comment">// (5) 划线处</span><br>    <span class="hljs-keyword">return</span> data[front];<br>&#125;<br></code></pre></td></tr></table></figure><p>在代码中：</p><ol><li>划线处 (1) 完成了循环队列的构造函数，将 front 和 rear 初始化为 0。</li><li>划线处 (2) 是判断队列是否已满的条件。</li><li>划线处 (3) 更新 rear 的位置，使其指向下一个入队元素应该存放的位置。</li><li>划线处 (4) 是判断队列是否为空的条件。</li><li>划线处 (5) 更新 front 的位置，使其指向下一个出队元素的位置。</li></ol></li><li><h2 id="如下代码为顺序表和单链表的-C-类定义，请补充划线处缺失的代码，并对-含义进行注释。"><a href="#如下代码为顺序表和单链表的-C-类定义，请补充划线处缺失的代码，并对-含义进行注释。" class="headerlink" title="如下代码为顺序表和单链表的 C++类定义，请补充划线处缺失的代码，并对 含义进行注释。"></a>如下代码为顺序表和单链表的 C++类定义，请补充划线处缺失的代码，并对 含义进行注释。</h2><p>&lt;1&gt; 顺序表：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> MaxSize = <span class="hljs-number">100</span>;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SeqList</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">SeqList</span>();<br>    <span class="hljs-built_in">SeqList</span>(DataType a[], <span class="hljs-type">int</span> n);<br>    ~<span class="hljs-built_in">SeqList</span>();<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Length</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Empty</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PrintList</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function">DataType <span class="hljs-title">Get</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Locate</span><span class="hljs-params">(DataType x)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Insert</span><span class="hljs-params">(<span class="hljs-type">int</span> i, DataType x)</span></span>;<br>    <span class="hljs-function">DataType <span class="hljs-title">Delete</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span></span>;<br><br><span class="hljs-keyword">private</span>:<br>    DataType data[MaxSize]; <span class="hljs-comment">// (1) 顺序表的数据存储数组</span><br>    <span class="hljs-type">int</span> length; <span class="hljs-comment">// (2) 顺序表的当前长度</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>&lt;2&gt; 单链表：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span><br>&#123;<br>    DataType data; <span class="hljs-comment">// (3) 节点中存储的数据</span><br>    Node&lt;DataType&gt; *next; <span class="hljs-comment">// (4) 指向下一个节点的指针</span><br>&#125;;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkList</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">LinkList</span>();<br>    <span class="hljs-built_in">LinkList</span>(DataType a[], <span class="hljs-type">int</span> n);<br>    ~<span class="hljs-built_in">LinkList</span>();<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PrintList</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Length</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function">DataType <span class="hljs-title">Get</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Locate</span><span class="hljs-params">(DataType x)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Insert</span><span class="hljs-params">(<span class="hljs-type">int</span> i, DataType x)</span></span>;<br>    <span class="hljs-function">DataType <span class="hljs-title">Delete</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span></span>;<br><br><span class="hljs-keyword">private</span>:<br>    Node&lt;DataType&gt; *first; <span class="hljs-comment">// (5) 单链表的头指针</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>在代码中：</p><ol><li>划线处 (1) 是顺序表的数据存储数组。</li><li>划线处 (2) 是顺序表的当前长度。</li><li>划线处 (3) 是单链表节点中存储的数据。</li><li>划线处 (4) 是指向下一个节点的指针。</li><li>划线处 (5) 是单链表的头指针。</li></ol></li><li><h2 id="以下为顺序栈的定义、初始化和压栈操作的实现，请补充完整划线部分代码。"><a href="#以下为顺序栈的定义、初始化和压栈操作的实现，请补充完整划线部分代码。" class="headerlink" title="以下为顺序栈的定义、初始化和压栈操作的实现，请补充完整划线部分代码。"></a>以下为顺序栈的定义、初始化和压栈操作的实现，请补充完整划线部分代码。</h2><p>以下是补充完整划线部分代码的实现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> StackSize = <span class="hljs-number">100</span>;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SeqStack</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">SeqStack</span>();<br>    ~<span class="hljs-built_in">SeqStack</span>();<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Push</span><span class="hljs-params">(DataType x)</span></span>;<br>    <span class="hljs-function">DataType <span class="hljs-title">Pop</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function">DataType <span class="hljs-title">GetTop</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-keyword">private</span>:<br>    DataType data[StackSize]; <span class="hljs-comment">// (1) 划线处</span><br>    <span class="hljs-type">int</span> top; <span class="hljs-comment">// (2) 划线处</span><br>&#125;;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br>SeqStack&lt;DataType&gt;::<span class="hljs-built_in">SeqStack</span>()<br>&#123;<br>    top = <span class="hljs-number">-1</span>; <span class="hljs-comment">// (3) 划线处</span><br>&#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-type">void</span> SeqStack&lt;DataType&gt;::<span class="hljs-built_in">Push</span>(DataType x)<br>&#123;<br>    <span class="hljs-keyword">if</span> (top == StackSize - <span class="hljs-number">1</span>) <span class="hljs-comment">// (4) 划线处</span><br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;栈满&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-string">&quot;上溢&quot;</span>;<br>    &#125;<br>    top++; <span class="hljs-comment">// (5) 划线处</span><br>    data[top] = x;<br>&#125;<br></code></pre></td></tr></table></figure><p>在代码中：</p><ol><li>划线处 (1) 定义了顺序栈的数据存储数组。</li><li>划线处 (2) 定义了顺序栈的栈顶指针。</li><li>划线处 (3) 是顺序栈的构造函数，初始化栈顶指针 top 为 -1。</li><li>划线处 (4) 是判断栈是否已满的条件。</li><li>划线处 (5) 是实现元素压栈操作，将栈顶指针 top 向上移动一个位置，并将元素 x 压入栈顶。</li></ol></li><li><h2 id="设目标主串为-S-“BBCABCDABABCDABD”，模式串为-T-“ABCDABD”"><a href="#设目标主串为-S-“BBCABCDABABCDABD”，模式串为-T-“ABCDABD”" class="headerlink" title="设目标主串为 S&#x3D;“BBCABCDABABCDABD”，模式串为 T&#x3D;“ABCDABD”"></a>设目标主串为 S&#x3D;“BBCABCDABABCDABD”，模式串为 T&#x3D;“ABCDABD”</h2><ol><li><p>简述按 BF 算法对主串 S 进行模式匹配的过程; </p><blockquote><p> BF（Brute-Force）算法是一种简单直接的字符串匹配算法。其匹配过程为： 从主串 S 的第一个字符开始，依次和模式串 T 进行匹配。如果当前字符匹配成功，则继续比较下一个字符，直到模式串 T 完全匹配或者匹配失败。如果匹配失败，则将模式串向右移动一位，再次和主串进行匹配。这个过程会一直持续到找到匹配的子串或者主串遍历完毕。</p></blockquote></li><li><p>手工计算模式串 T 的 next 值; </p><blockquote><p>手工计算模式串 T 的 next 数组的过程如下：</p><p>T &#x3D; “ABCDABD” </p><p>首先，next[0] &#x3D; -1，next[1] &#x3D; 0（规定 next 数组下标从 0 开始）。</p><p>依次计算 next 数组的值： </p><p>对于第 i 个字符，如果 T[next[i]] &#x3D;&#x3D; T[i-1]，则 next[i+1] &#x3D; next[i] + 1； </p><p>否则，将 next[i+1] 更新为 0。</p></blockquote></li><li><p>简述利用求得的 next 数组，按 KMP 算法对主串 S 进行模式匹配的过程。</p><blockquote><p> KMP 算法利用模式串 T 的 next 数组在匹配过程中避免不必要的回溯。匹配过程如下： 从主串 S 的第一个字符开始，同时从模式串 T 的第一个字符开始进行匹配。 如果当前字符匹配成功，则继续比较下一个字符。 如果匹配失败，根据 next 数组进行回溯操作，将模式串 T 向右移动相应的位数，使得模式串能够对齐主串中的下一个字符，继续匹配。 如果模式串完全匹配成功，则返回匹配的起始位置；否则，主串遍历完毕仍未找到匹配子串，则匹配失败。</p></blockquote></li></ol><h1 id="四、附加题"><a href="#四、附加题" class="headerlink" title="四、附加题"></a>四、附加题</h1><p>请认真思考，谈一下你对数据结构课程的建议。（限 100 字以上，共 10 分）</p><blockquote><p>这题没什么好说的</p></blockquote></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;以下内容全部来自ChatGPT和Microsoft bing ai解答，正确率为85%左右，&lt;font color=&#39;red&#39;&gt;仅参考，本人对本页答案概不负责&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;一、选择题&quot;&gt;&lt;a h</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://w1ndys.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="数据结构作业" scheme="https://w1ndys.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%9C%E4%B8%9A/"/>
    
    <category term="考试" scheme="https://w1ndys.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%9C%E4%B8%9A/%E8%80%83%E8%AF%95/"/>
    
    
    <category term="数据结构作业" scheme="https://w1ndys.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%9C%E4%B8%9A/"/>
    
  </entry>
  
  <entry>
    <title>手把手教你注册Google账号</title>
    <link href="https://w1ndys.github.io/posts/f286f4f8"/>
    <id>https://w1ndys.github.io/posts/f286f4f8</id>
    <published>2024-01-14T11:06:36.933Z</published>
    <updated>2024-01-14T08:22:37.836Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Google账号的注册教程"><a href="#Google账号的注册教程" class="headerlink" title="Google账号的注册教程"></a>Google账号的注册教程</h1><blockquote><p>本部分基于<a href="https://blog.csdn.net/qq_45138120/article/details/131347452#/">这篇文章</a>进行编辑，致敬</p></blockquote><ol><li>首先打开浏览器，然后进入设置把浏览器设置成英文语言，来提高成功率</li></ol><p>特别说明一下，<span style="color:#FF0000;">是浏览器的总语言，在浏览器设置里，而不只是设置当前页面的语言</span></p><ol><li>我们使用浏览器打开谷歌邮箱官网（<a href="http://gmail.google.com/">http://gmail.google.com/</a> ），进入谷歌邮箱的登录主页，我们点击左下方的创建账号按钮，选择个人用途（为我自己）</li></ol><p><img src="/img/Google/Google1.png" srcset="/img/loading.gif" lazyload alt="账号注册"></p><ol start="3"><li>在进入的界面我们不要着急填写资料，我们先修改语言，点击左下方的简体中文。这个时候，会弹出国家语言列表，我们选择“English（United States）”。</li></ol><p><img src="/img/Google/Google2.png" srcset="/img/loading.gif" lazyload alt="语言"></p><ol start="4"><li>这个时候，界面会变成英语。输入姓氏和名字，点击 Next</li></ol><p><img src="/img/Google/Google3.png" srcset="/img/loading.gif" lazyload alt="在这里插入图片描述"></p><ol start="4"><li>选择月份、日、年、性别，点击Next</li></ol><p><img src="/img/Google/Google4.png" srcset="/img/loading.gif" lazyload alt="日期"></p><ol start="5"><li>选择Gmail邮箱地址，前两个是随机出的邮箱地址，可以勾选第三个自定义邮箱地址，输入邮箱地址后，点击 Next</li></ol><p><img src="/img/Google/Google5.png" srcset="/img/loading.gif" lazyload alt="在这里插入图片描述"></p><ol start="6"><li><p>输入密码，确认密码后，点击 Next</p><p><img src="/img/Google/Google6.png" srcset="/img/loading.gif" lazyload alt="在这里插入图片描述"></p></li><li><p>添加恢复电子邮件，账号异常或锁定时，Google 可以通过恢复电子邮件联系您。直接点击 Skip 跳过</p></li></ol><p><img src="/img/Google/Google7.png" srcset="/img/loading.gif" lazyload alt="在这里插入图片描述"></p><ol start="8"><li>选择中国，填写自己的手机号，点击Next</li></ol><p>关于手机号无法用于验证的问题，可以看这一位大佬的帖子：<a href="https://blog.csdn.net/qaqwqaqwq/article/details/130442226#/">https://blog.csdn.net/qaqwqaqwq/article/details/130442226#/</a></p><p>这个问题与我一开始写的第一步相呼应，开头切换英文主要就是为了解决这边</p><p><img src="/img/Google/Google8.png" srcset="/img/loading.gif" lazyload alt="在这里插入图片描述"></p><ol start="9"><li>确认账户信息页面，没问题的话，点击 Next</li></ol><p><img src="/img/Google/Google9.png" srcset="/img/loading.gif" lazyload alt="在这里插入图片描述"></p><ol start="10"><li>隐私条款确认，拉取到底部，点击 I agree 我同意</li></ol><p><img src="/img/Google/Google10.png" srcset="/img/loading.gif" lazyload alt="image-20231223005705473"></p><ol start="11"><li>如图，出现此界面，说明 Google 邮箱创建成果</li></ol><p><img src="/img/Google/Google11.png" srcset="/img/loading.gif" lazyload alt="在这里插入图片描述"></p><p>注：创建失败时</p><ul><li>手机号码已经注册过</li><li>在注册时，将语言设置为英语，成功率高</li><li>切换节点</li><li>过会再试试</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Google账号的注册教程&quot;&gt;&lt;a href=&quot;#Google账号的注册教程&quot; class=&quot;headerlink&quot; title=&quot;Google账号的注册教程&quot;&gt;&lt;/a&gt;Google账号的注册教程&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;本部分基于&lt;a href=</summary>
      
    
    
    
    <category term="手把手教程" scheme="https://w1ndys.github.io/categories/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E7%A8%8B/"/>
    
    <category term="Google" scheme="https://w1ndys.github.io/categories/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E7%A8%8B/Google/"/>
    
    
    <category term="手把手教程系列" scheme="https://w1ndys.github.io/tags/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E7%A8%8B%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>手把手教你用新版OBS虚拟摄像头</title>
    <link href="https://w1ndys.github.io/posts/f885f05a"/>
    <id>https://w1ndys.github.io/posts/f885f05a</id>
    <published>2024-01-14T11:06:36.932Z</published>
    <updated>2024-01-14T08:22:37.843Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本教程基于B站<a href="https://www.bilibili.com/read/cv11603378/%E7%BC%96%E5%86%99">https://www.bilibili.com/read/cv11603378/编写</a></p></blockquote><h1 id="零、前言说明"><a href="#零、前言说明" class="headerlink" title="零、前言说明"></a>零、前言说明</h1><p><strong>本教程仅适用于最新版OBS，主版本号30（版本26基本与此一样）</strong></p><h1 id="一、下载安装"><a href="#一、下载安装" class="headerlink" title="一、下载安装"></a>一、下载安装</h1><ol><li><p>下载方式有两种：</p></li><li><ul><li><p><strong>官网下载：</strong><a href="https://obsproject.com/">https://obsproject.com</a></p><p>服务器在国外，<strong>速度可能较慢</strong>，你可以尝试使用下面的方法下载。</p></li><li><p><strong>国内镜像：</strong><a href="https://mirror.tuna.tsinghua.edu.cn/">https://mirror.tuna.tsinghua.edu.cn</a></p><p>清华大学TUNA镜像站，右侧栏<strong>“获取下载链接”–应用软件–OBS–选择合适的版本下载</strong>即可（注意选择那个<strong>带有“Installer”字样的</strong>，括号里是exe，那个是安装包，zip是便携版）。</p></li></ul></li><li><p>打开安装包，一路下一步安装就行，与普通软件安装没什么两样，安装位置任意选。</p></li></ol><h1 id="二、OBS的简单配置"><a href="#二、OBS的简单配置" class="headerlink" title="二、OBS的简单配置"></a>二、OBS的简单配置</h1><p>打开OBS Studio软件。</p><ul><li><p>可以使用自动配置向导，选择最后一项<strong>“我只使用虚拟摄像机”</strong>即可。</p><p>注：OBS 26版本无此选项，此时你应该选择“取消”</p></li></ul><p><img src="/img/obs/image-20231210203435938.png" srcset="/img/loading.gif" lazyload alt="image-20231210203435938"></p><p>之后选择<strong>“下一步”–“应用设置”</strong></p><ul><li><p>（可选步骤）修改虚拟摄像头的输出大小</p><p>在OBS主程序菜单栏左上角<strong>“文件”</strong>中，找到<strong>“设置”</strong></p><p>你可以在“设置”窗口的“视频”选项卡中找到输出分辨率和帧率的设置</p><p>电脑配置较差的用户可以参考我的设置</p></li></ul><p><img src="/img/obs/image-20231210203512874.png" srcset="/img/loading.gif" lazyload alt="image-20231210203512874"></p><p><strong>不明白各参数什么意思的可以直接照搬我的设置，或者保持默认不动。</strong></p><h1 id="三、准备虚拟视频"><a href="#三、准备虚拟视频" class="headerlink" title="三、准备虚拟视频"></a>三、准备虚拟视频</h1><p>实现录制一个视频，用来虚拟化</p><p>注意此视频将会用作虚拟视频效果</p><h1 id="四、编辑和启动虚拟摄像头"><a href="#四、编辑和启动虚拟摄像头" class="headerlink" title="四、编辑和启动虚拟摄像头"></a>四、编辑和启动虚拟摄像头</h1><ul><li>回到主界面，在下方的<strong>“来源”栏下点击“+”</strong>加号，添加一个<strong>“媒体源”</strong></li></ul><p><img src="/img/obs/image-20231210203640263.png" srcset="/img/loading.gif" lazyload alt="image-20231210203640263"></p><p><img src="/img/obs/image-20231210203654429.png" srcset="/img/loading.gif" lazyload alt="image-20231210203654429"></p><ul><li><strong>点击“浏览”，选择刚才录制好的视频文件</strong></li></ul><p><img src="/img/obs/image-20231210203715094.png" srcset="/img/loading.gif" lazyload alt="image-20231210203715094"></p><p>选择好文件后，<strong>一定记得勾选“循环”！</strong></p><p>此时上方可能不会立刻出现视频的预览，<strong>点击“确定”，视频就出现了</strong>。</p><p>如果没有视频显示在预览的画面里，尝试修改<strong>“在可用时使用硬件编码”</strong>这一选项</p><p>注：如果想再次调出这个界面，双击“来源”栏里的“媒体源”即可。</p><ul><li>理论上的视频应该是铺满画面的，如果没有，那就<strong>右键视频的画面–变换–比例适配屏幕</strong>。</li></ul><p><img src="/img/obs/image-20231210203940096.png" srcset="/img/loading.gif" lazyload alt="image-20231210203940096"></p><ul><li><p>下面来启动虚拟摄像头</p><p>单击主界面<strong>右下角“控件”一栏里的“启动虚拟摄像机”</strong></p></li></ul><p><img src="/img/obs/image-20231210203956900.png" srcset="/img/loading.gif" lazyload alt="image-20231210203956900"></p><h1 id="五、在第三方软件里使用虚拟摄像头"><a href="#五、在第三方软件里使用虚拟摄像头" class="headerlink" title="五、在第三方软件里使用虚拟摄像头"></a>五、在第三方软件里使用虚拟摄像头</h1><p>这里以<strong>QQ</strong>电脑版为例</p><ul><li>在<strong>QQ</strong>里找到<strong>“设置”</strong></li></ul><p><img src="/img/obs/image-20231210204103698.png" srcset="/img/loading.gif" lazyload alt="image-20231210204103698"></p><ul><li>在“视频”选项卡里找到<strong>“摄像头”</strong>，设置为<strong>“OBS Virtual Camera”</strong></li><li>打开预览画面</li></ul><p><img src="/img/obs/image-20231210204210755.png" srcset="/img/loading.gif" lazyload alt="image-20231210204210755"></p><p>此时上面应该能显示出你在OBS中设置好的画面，关闭设置界面即可。</p><p>此时大功告成了，QQ视频里会循环播放你录制好的视频</p><ul><li>如果出现如下画面，请检查是否<strong>在OBS内“启动虚拟摄像机”</strong></li></ul><p><img src="/img/obs/image-20231210204307899.png" srcset="/img/loading.gif" lazyload alt="image-20231210204307899"></p><ul><li><p>如果卡了，没画面，则需要打开obs的设置</p><p><img src="/img/obs/image-20231210204357713.png" srcset="/img/loading.gif" lazyload alt="image-20231210204357713"></p><p><img src="/img/obs/image-20231210204448834.png" srcset="/img/loading.gif" lazyload alt="image-20231210204448834"></p></li></ul><p>改为800*600比例</p><br/><p>其他软件将默认摄像头设备改为“OBS Virtual Camera”即可。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本教程基于B站&lt;a href=&quot;https://www.bilibili.com/read/cv11603378/%E7%BC%96%E5%86%99&quot;&gt;https://www.bilibili.com/read/cv11603378/编写&lt;/a&gt;</summary>
      
    
    
    
    <category term="手把手教程" scheme="https://w1ndys.github.io/categories/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E7%A8%8B/"/>
    
    <category term="OBS" scheme="https://w1ndys.github.io/categories/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E7%A8%8B/OBS/"/>
    
    
    <category term="手把手教程系列" scheme="https://w1ndys.github.io/tags/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E7%A8%8B%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>使用电脑浏览获得更佳体验</title>
    <link href="https://w1ndys.github.io/posts/95d5a910"/>
    <id>https://w1ndys.github.io/posts/95d5a910</id>
    <published>2024-01-14T11:06:36.929Z</published>
    <updated>2024-01-14T08:22:37.863Z</updated>
    
    
    
    
    <category term="随笔" scheme="https://w1ndys.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="随笔" scheme="https://w1ndys.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>手把手教你使用ChatGPT3.5</title>
    <link href="https://w1ndys.github.io/posts/acc7bbca"/>
    <id>https://w1ndys.github.io/posts/acc7bbca</id>
    <published>2024-01-14T11:06:36.929Z</published>
    <updated>2024-01-14T08:22:37.816Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>爆肝一晚上写完教程，且看且珍惜</p><p>本教程未经允许禁止转载，来源：<a href="http://www.w1ndys.top/">www.w1ndys.top</a></p><p>本教程所涉及所有操作均已通过本机测试，出现其他情况均属于个人机器问题</p><p>本教程编写耗时 <font color='red'> 160 分钟 </font> 且浏览完全免费，且看且珍惜</p></blockquote><p>前排提醒：使用 ChatGPT 涉及 3.8-38.8 不等的付费内容，介意请立即退出</p><blockquote><p>截止 2023 年 12 月 23 日 16: 29: 07，已有成功案例，证明全过程是无问题的，最容易出现问题的是手机号的部分，注意设置好语言就可以</p></blockquote><p>前排提醒，已有成功案例，跟着来就行，教程没任何问题</p><p><img src="/img/ChatGPT/PixPin_2023-12-24_15-58-46.png" srcset="/img/loading.gif" lazyload></p><p><img src="/img/ChatGPT/PixPin_2023-12-24_15-59-24.png" srcset="/img/loading.gif" lazyload></p><h1 id="工具准备"><a href="#工具准备" class="headerlink" title="工具准备"></a>工具准备</h1><ol><li><p>一台能上网的 <span style="color:#FF0000; border:1px solid #FF3333;"> 电脑 </span>，注意非常推荐使用电脑，否则会遇到很多未知问题</p></li><li><p>Google Chrome（推荐）</p><p>没有 Google 的可以用 Windows 自带的 Edge 浏览器</p></li><li><p>一个魔法工具（梯子）</p><p><font color="#3333FF"> 需要特别注意的是，使用本工具 <span style="border:1px solid #808080;"> 有一定的流量计费 </span>，3.8-38.8 不等，根据自己需要选择 </font>，此费用也不是我本人收取，而是流量的提供方收取，特别注意这点 <font color="#FF0000" size=5> 如果你 <span style="border:1px solid #000000;"> 介意此费用 </span>，你可以 <span style="border:1px solid #990099;"> 关闭此页面 </span> 退出阅读了。</font> 具体注意事项下面会提到</p></li><li><p>一双灵敏的眼睛（不是</p></li><li><p>一个耐心看教程的好习惯（不是</p></li><li><p>一颗真诚的心和 <font color='red'> 良好的态度 </font>，有问题 <a href="https://qm.qq.com/q/9n506oZ8Ri&personal_qrcode_source=4">联系博主</a></p></li></ol><h1 id="开始操作"><a href="#开始操作" class="headerlink" title="开始操作"></a>开始操作</h1><h2 id="爬墙工具的介绍和安装使用"><a href="#爬墙工具的介绍和安装使用" class="headerlink" title="爬墙工具的介绍和安装使用"></a>爬墙工具的介绍和安装使用</h2><h3 id="工具介绍"><a href="#工具介绍" class="headerlink" title="工具介绍"></a>工具介绍</h3><p><font color="#FF3333"> 这些你都不需要记，看看就行 </font></p><ul><li><p>虚拟专用网络(Virtual Private Network，VPN)是专用网络的延伸，它包含了类似 Internet 的共享或公共网络链接。通过 VPN 可以以模拟点对点专用链接的方式通过共享或公共网络在两台计算机之间发送数据。</p></li><li><p>如果说得再通俗一点，VPN 实际上是 “线路中的线路”，类型于城市大道上的 “公交专用线”，所不同的是，由 VPN 组成的 “线路” 并不是物理存在的，而是通过技术手段模拟出来，即是 “虚拟” 的。不过，这种虚拟的专用网络技术却可以在一条公用线路中为两台计算机建立一个逻辑上的专用 “通道”，它具有良好的保密和不受干扰性，使双方能进行自由而安全的点对点连接，因此被网络管理员们非常广泛地关注着。</p></li><li><p>通过虚拟专用网，我们在家就可以轻松安全的登录到公司的内部网络上，这样可以实现我们在家办公的梦想了。</p></li></ul><h3 id="账号注册"><a href="#账号注册" class="headerlink" title="账号注册"></a>账号注册</h3><p>有了这个工具，你不只是能进 ai，还可以高速浏览 GitHub 等网站，以及…………</p><p>微信搜索公众号关注：  <code> W1ndys_Official</code> 或扫描下方二维码</p><p>发送：GPT 工具，即可获得链接</p><p><img src="/img/VPN/wx.png" srcset="/img/loading.gif" lazyload alt="注册"></p><p>输入邮箱密码注册账号，注册完成后登陆</p><p><img src="/img/VPN/%E6%B3%A8%E5%86%8C%E8%B4%A6%E5%8F%B7.png" srcset="/img/loading.gif" lazyload alt="注册"></p><p>然后点击左侧购买订阅</p><p><img src="/img/VPN/%E8%AE%A2%E9%98%85.png" srcset="/img/loading.gif" lazyload alt="订阅"></p><p>根据需求选择你合适的方案，如果你只是想尝鲜的话，毫无疑问，选最便宜的，能用就行</p><p><img src="/img/VPN/%E8%B4%AD%E4%B9%B0%E8%AE%A2%E9%98%85.png" srcset="/img/loading.gif" lazyload alt="购买订阅"></p><p>我本人用的是 <font color="#FF0000"> 38.8 巨量不限时，推荐这个 </font>，大约可以用 2 年左右，平均下来大约 0.6&#x2F;天，而且是实打实的买多少用多少，不会出现超时浪费</p><p>买完之后点击左上方仪表盘可以看到你的已订阅</p><p><img src="/img/VPN/%E4%BB%AA%E8%A1%A8%E7%9B%98.png" srcset="/img/loading.gif" lazyload alt="仪表盘"></p><p>然后点击仪表盘下方的使用文档</p><p><img src="/img/VPN/%E5%AE%A2%E6%88%B7%E7%AB%AF.png" srcset="/img/loading.gif" lazyload alt="客户端安装"></p><p>选择你的系统安装客户端</p><p>安装完之后登陆客户端就可以看到这样</p><p><img src="/img/VPN/%E5%AE%89%E8%A3%85%E5%AE%8C%E6%88%90.png" srcset="/img/loading.gif" lazyload alt="安装完成"></p><h3 id="连接节点"><a href="#连接节点" class="headerlink" title="连接节点"></a>连接节点</h3><p>目前为止已经基本结束了，点击连接，点进去选个绿色的节点，点全局，<font color="#FF0000"> 如果后续出现连接失败就换个节点 </font></p><p><img src="/img/VPN/%E8%8A%82%E7%82%B9.png" srcset="/img/loading.gif" lazyload alt="节点"></p><h2 id="Google-账号的注册"><a href="#Google-账号的注册" class="headerlink" title="Google 账号的注册"></a>Google 账号的注册</h2><p><span style="background:#FF8000;"> 注意 </span>：<span style="font-size:1.1em; color:#FF3399;"> 有 ChatGPT 账号的可以跳过此步骤，有 Google 账号的可以跳过此步骤，有 Apple 账号的可以先直接试试第三步，如果不行再回来本步骤 </span></p><p>（本质上来讲 Microsoft 账号也是可以的，但是我试过了，大陆手机号注册的 Microsoft 不可用，所以这里就一笔带过）</p><p>（需要一直开着步骤一的工具）</p><p>关于 Google 账号如何注册可以看下面链接另一篇博客</p><p><a href="https://w1ndys.top/2023/12/23/Google_account/">https://w1ndys.top/2023/12/23/Google_account/</a></p><h2 id="进入-OpenAI-官网"><a href="#进入-OpenAI-官网" class="headerlink" title="进入 OpenAI 官网"></a>进入 OpenAI 官网</h2><p>（需要一直开着步骤一的工具）</p><p>进入这个网站：<a href="https://chat.openai.com/">https://chat.openai.com/</a></p><p>点击 login</p><p><img src="/img/ChatGPT/image-1.png" srcset="/img/loading.gif" lazyload alt="image-20231223010822238"></p><p>点继续使用 Google（另外有 Apple 可选 Apple 但后面需不需要别的认证我不知道，买不起果子没试过）</p><p>（本质上来讲 Microsoft 账号也是可以的，但是我试过了，大陆手机号注册的 Microsoft 不可用，所以这里就一笔带过）</p><p><img src="/img/ChatGPT/image-20231223010933294.png" srcset="/img/loading.gif" lazyload alt="image-20231223010933294"></p><p>然后选择刚注册好的账号登陆之后就可以用了</p><p><img src="/img/ChatGPT/image-20231223010959130.png" srcset="/img/loading.gif" lazyload alt="image-20231223010959130"></p><p>放一张使用截图</p><p><img src="/img/ChatGPT/image-20231223011402732.png" srcset="/img/loading.gif" lazyload alt="image-20231223011402732"></p><hr><h1 id="免责声明"><a href="#免责声明" class="headerlink" title="免责声明"></a>免责声明</h1><p>在使用本教程前，请务必阅读并理解以下内容。使用本教程即代表您同意以下用户协议：</p><ol><li><strong>用户协议</strong>：使用本教程即表示您同意遵守本免责声明和用户协议。若您不同意此协议，请勿使用本教程提供的信息和指南。</li><li><strong>个人责任</strong>：本教程所提供的信息仅供参考，使用者需自行承担因使用产品 A 而产生的任何风险和后果。</li><li><strong>消费责任</strong>：使用本教程涉及的任何消费或购买行为与本人无关，用户需自行对其行为负责并承担相应风险。</li><li><strong>禁止转载</strong>：未经本人允许，严禁对本教程内容进行转载或再分发。任何未经授权的转载行为都将被视为侵权行为。</li><li><strong>结果不保证</strong>：本教程提供的建议和技巧并不能保证用户能够取得特定的结果或效果。实际使用中的成果可能因个人技能、环境差异或其他因素而有所不同。</li></ol><p>在使用本教程提供的信息前，请谨慎考虑个人能力和环境因素，并在必要时寻求专业建议。对于因使用本教程而产生的任何问题或损失，我们概不负责。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;爆肝一晚上写完教程，且看且珍惜&lt;/p&gt;
&lt;p&gt;本教程未经允许禁止转载，来源：&lt;a href=&quot;http://www.w1ndys.top/&quot;&gt;www.w1ndys.top&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本教程所涉及所有操作均已通过本机测试，出现其他情况均属</summary>
      
    
    
    
    <category term="手把手教程" scheme="https://w1ndys.github.io/categories/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E7%A8%8B/"/>
    
    <category term="ChatGPT" scheme="https://w1ndys.github.io/categories/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E7%A8%8B/ChatGPT/"/>
    
    
    <category term="手把手教程系列" scheme="https://w1ndys.github.io/tags/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E7%A8%8B%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>实验一、顺序存储结构线性表的建立及操作</title>
    <link href="https://w1ndys.github.io/posts/767f4a40"/>
    <id>https://w1ndys.github.io/posts/767f4a40</id>
    <published>2024-01-14T11:06:36.926Z</published>
    <updated>2024-01-14T08:22:37.825Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>声明：仅供留档查阅，仅用作起到提示引导性作用，仅用作学习交流，切勿直接照搬</p></blockquote><p><img src="https://cyberdownload.anrunlu.net/Fis_1Y1PQhtSsV6Vv8uzbswmKvrW" srcset="/img/loading.gif" lazyload></p><h1 id="代码主体"><a href="#代码主体" class="headerlink" title="代码主体"></a>代码主体</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-type">long</span> num;<br>    <span class="hljs-type">char</span> name[<span class="hljs-number">10</span>];<br>    <span class="hljs-type">float</span> score;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ScoreList</span> &#123;<br><span class="hljs-keyword">private</span>:<br>    Student data[<span class="hljs-number">100</span>];<br>    <span class="hljs-type">int</span> length;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">ScoreList</span>() &#123;<br>        length = <span class="hljs-number">5</span>;<br>        data[<span class="hljs-number">0</span>] = &#123; <span class="hljs-number">1001</span>, <span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">85</span> &#125;;<br>        data[<span class="hljs-number">1</span>] = &#123; <span class="hljs-number">1002</span>, <span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-number">90</span> &#125;;<br>        data[<span class="hljs-number">2</span>] = &#123; <span class="hljs-number">1003</span>, <span class="hljs-string">&quot;王五&quot;</span>, <span class="hljs-number">80</span> &#125;;<br>        data[<span class="hljs-number">3</span>] = &#123; <span class="hljs-number">1004</span>, <span class="hljs-string">&quot;赵六&quot;</span>, <span class="hljs-number">95</span> &#125;;<br>        data[<span class="hljs-number">4</span>] = &#123; <span class="hljs-number">1005</span>, <span class="hljs-string">&quot;孙七&quot;</span>, <span class="hljs-number">88</span> &#125;;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">del</span><span class="hljs-params">(<span class="hljs-type">long</span> num)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (data[i].num == num) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i; j &lt; length - <span class="hljs-number">1</span>; j++) &#123;<br>                    data[j] = data[j + <span class="hljs-number">1</span>];<br>                &#125;<br>                length--;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(Student stu)</span> </span>&#123;<br>        <span class="hljs-type">int</span> pos = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (pos &lt; length &amp;&amp; data[pos].score &gt; stu.score) pos++;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = length; i &gt; pos; i--) &#123;<br>            data[i] = data[i - <span class="hljs-number">1</span>];<br>        &#125;<br>        data[pos] = stu;<br>        length++;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">output</span><span class="hljs-params">()</span> </span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;学号\t姓名\t分数&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br>            cout &lt;&lt; data[i].num &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span> &lt;&lt; data[i].name &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span> &lt;&lt; data[i].score &lt;&lt; endl;<br>        &#125;<br>    &#125;<br><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">long</span> a;<br>    <span class="hljs-type">char</span> b[<span class="hljs-number">10</span>];<br>    <span class="hljs-type">float</span> c;<br>    ScoreList list;<br>    list.<span class="hljs-built_in">output</span>();<br>    cout &lt;&lt; <span class="hljs-string">&quot;删除一个学生，请输入学生学号&quot;</span> &lt;&lt; endl;<br>    cin &gt;&gt; a;<br>    list.<span class="hljs-built_in">del</span>(a);<br>    list.<span class="hljs-built_in">output</span>();<br>    cout &lt;&lt; <span class="hljs-string">&quot;插入一个新学生（学号 姓名 分数 ）用空格隔开&quot;</span> &lt;&lt; endl;<br>    cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;<br>    Student newStu = &#123; a, <span class="hljs-string">&quot;&quot;</span>, c &#125;;<br>    <span class="hljs-built_in">strcpy_s</span>(newStu.name, b); <span class="hljs-comment">// 使用 strcpy 函数复制字符串</span><br>    list.<span class="hljs-built_in">insert</span>(newStu);<br>    list.<span class="hljs-built_in">output</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;声明：仅供留档查阅，仅用作起到提示引导性作用，仅用作学习交流，切勿直接照搬&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://cyberdownload.anrunlu.net/Fis_1Y1PQhtSsV6Vv8uzb</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://w1ndys.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="数据结构作业" scheme="https://w1ndys.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%9C%E4%B8%9A/"/>
    
    <category term="实验" scheme="https://w1ndys.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%9C%E4%B8%9A/%E5%AE%9E%E9%AA%8C/"/>
    
    
    <category term="数据结构作业" scheme="https://w1ndys.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%9C%E4%B8%9A/"/>
    
  </entry>
  
  <entry>
    <title>实验五 树和二叉树的实现与应用</title>
    <link href="https://w1ndys.github.io/posts/6a30266c"/>
    <id>https://w1ndys.github.io/posts/6a30266c</id>
    <published>2024-01-14T11:06:36.924Z</published>
    <updated>2024-01-14T08:22:37.827Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cyberdownload.anrunlu.net/FtX0PHEedwNLABhhcw4vq0OnXJhk" srcset="/img/loading.gif" lazyload></p><h1 id="吐槽一下"><a href="#吐槽一下" class="headerlink" title="吐槽一下"></a>吐槽一下</h1><p>唉数据结构，唉二叉树，唉C++类，好多都不会，不懂得class类的用法，不知道怎么写代码</p><p>先是复制课本上的代码，然后经过缝缝补补，发现课本上的代码竟然有字母打错的可能（痛骂编者</p><p>然后用ChatGPT不断缝缝补补（点赞ChatGPT，用来写代码真的很不错</p><p>这下知新作业终于是写完了，逆向已经一个也没动了</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">BiNode</span><br>&#123;<br>DataType data;<br>BiNode&lt;DataType&gt;* lchild, * rchild;<br>&#125;;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BiTree</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">BiTree</span>() &#123; root = <span class="hljs-built_in">Creat</span>(); &#125;   <span class="hljs-comment">//建立一棵二叉树</span><br>~<span class="hljs-built_in">BiTree</span>() &#123; <span class="hljs-built_in">Release</span>(root); &#125;    <span class="hljs-comment">//释放各节点的存储空间</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PreOrder</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-built_in">PreOrder</span>(root); &#125;<span class="hljs-comment">//前序</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InOrder</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-built_in">InOrder</span>(root); &#125;<span class="hljs-comment">//中序</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PostOrder</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-built_in">PostOrder</span>(root); &#125;<span class="hljs-comment">//后序</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">LevelOrder</span><span class="hljs-params">()</span></span>;                  <span class="hljs-comment">//层序</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">NodeTree</span><span class="hljs-params">(BiNode&lt;DataType&gt;* bt)</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">NodeTreeHelper</span>(bt); &#125; <span class="hljs-comment">//计算叶子节点数</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">TreeDepth</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">TreeDepthHelper</span>(root); &#125; <span class="hljs-comment">//计算二叉树深度</span><br>BiNode&lt;DataType&gt;* root;<span class="hljs-comment">//指向根节点的头指针</span><br><span class="hljs-keyword">private</span>:<br><span class="hljs-function">BiNode&lt;DataType&gt;* <span class="hljs-title">Creat</span><span class="hljs-params">()</span></span>;              <span class="hljs-comment">//构造函数调用</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Release</span><span class="hljs-params">(BiNode&lt;DataType&gt;* bt)</span></span>;     <span class="hljs-comment">//析构函数调用</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PreOrder</span><span class="hljs-params">(BiNode&lt;DataType&gt;* bt)</span></span>;    <span class="hljs-comment">//前序</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InOrder</span><span class="hljs-params">(BiNode&lt;DataType&gt;* bt)</span></span>;     <span class="hljs-comment">//中序</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PostOrder</span><span class="hljs-params">(BiNode&lt;DataType&gt;* bt)</span></span>;   <span class="hljs-comment">//后序</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">NodeTreeHelper</span><span class="hljs-params">(BiNode&lt;DataType&gt;* bt)</span></span>; <span class="hljs-comment">//辅助函数用于计算叶子节点数量</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">TreeDepthHelper</span><span class="hljs-params">(BiNode&lt;DataType&gt;* bt)</span></span>; <span class="hljs-comment">//辅助函数用于计算二叉树深度</span><br><br>&#125;;<br><br><span class="hljs-comment">// 二叉链表类BiTree的前序遍历</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-type">void</span> BiTree&lt;DataType&gt; ::<span class="hljs-built_in">PreOrder</span>(BiNode&lt;DataType&gt;* bt)<br>&#123;<br><span class="hljs-keyword">if</span> (bt == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span>;<br><span class="hljs-keyword">else</span> &#123;<br>cout &lt;&lt; bt-&gt;data;<br><span class="hljs-built_in">PreOrder</span>(bt-&gt;lchild);<br><span class="hljs-built_in">PreOrder</span>(bt-&gt;rchild);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 二叉链表类BiTree的中序遍历</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-type">void</span> BiTree&lt;DataType&gt; ::<span class="hljs-built_in">InOrder</span>(BiNode&lt;DataType&gt;* bt)<br>&#123;<br><span class="hljs-keyword">if</span> (bt == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span>;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-built_in">InOrder</span>(bt-&gt;lchild);<br>cout &lt;&lt; bt-&gt;data;<br><span class="hljs-built_in">InOrder</span>(bt-&gt;rchild);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 二叉链表类BiTree的后序遍历</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-type">void</span> BiTree&lt;DataType&gt; ::<span class="hljs-built_in">PostOrder</span>(BiNode&lt;DataType&gt;* bt)<br>&#123;<br><span class="hljs-keyword">if</span> (bt == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span>;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-built_in">PostOrder</span>(bt-&gt;lchild);<br><span class="hljs-built_in">PostOrder</span>(bt-&gt;rchild);<br>cout &lt;&lt; bt-&gt;data;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 二叉链表类BiTree的层序遍历</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-type">void</span> BiTree&lt;DataType&gt; ::<span class="hljs-built_in">LevelOrder</span>()<br>&#123;<br>BiNode&lt;DataType&gt;* Q[<span class="hljs-number">100</span>], * q = <span class="hljs-literal">nullptr</span>;<br><span class="hljs-type">int</span> front = <span class="hljs-number">-1</span>, rear = <span class="hljs-number">-1</span>;<br><span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span>;<br>Q[++rear] = root;<br><span class="hljs-keyword">while</span> (front != rear)<br>&#123;<br>q = Q[++front];<br>cout &lt;&lt; q-&gt;data;<br><span class="hljs-keyword">if</span> (q-&gt;lchild != <span class="hljs-literal">nullptr</span>)  Q[++rear] = q-&gt;lchild;<br><span class="hljs-keyword">if</span> (q-&gt;rchild != <span class="hljs-literal">nullptr</span>)  Q[++rear] = q-&gt;rchild;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br>BiNode&lt;DataType&gt;* BiTree&lt;DataType&gt;::<span class="hljs-built_in">Creat</span>()<br>&#123;<br>BiNode&lt;DataType&gt;* bt;<br><span class="hljs-type">char</span> ch;<br>cin &gt;&gt; ch;<br><span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;#&#x27;</span>)<br>&#123;<br>bt = <span class="hljs-literal">nullptr</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>bt = <span class="hljs-keyword">new</span> BiNode&lt;DataType&gt;;<br>bt-&gt;data = ch;<br>bt-&gt;lchild = <span class="hljs-built_in">Creat</span>();<br>bt-&gt;rchild = <span class="hljs-built_in">Creat</span>();<br>&#125;<br><span class="hljs-keyword">return</span> bt;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-type">void</span> BiTree&lt;DataType&gt;::<span class="hljs-built_in">Release</span>(BiNode&lt;DataType&gt;* bt)<br>&#123;<br><span class="hljs-keyword">if</span> (bt == <span class="hljs-literal">nullptr</span>)<br>&#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">Release</span>(bt-&gt;lchild);<br><span class="hljs-built_in">Release</span>(bt-&gt;rchild);<br><span class="hljs-keyword">delete</span> bt;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-type">int</span> BiTree&lt;DataType&gt;::<span class="hljs-built_in">NodeTreeHelper</span>(BiNode&lt;DataType&gt;* bt)<br>&#123;<br><span class="hljs-keyword">if</span> (bt == <span class="hljs-literal">nullptr</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (bt-&gt;lchild == <span class="hljs-literal">nullptr</span> &amp;&amp; bt-&gt;rchild == <span class="hljs-literal">nullptr</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">NodeTreeHelper</span>(bt-&gt;lchild) + <span class="hljs-built_in">NodeTreeHelper</span>(bt-&gt;rchild);<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-type">int</span> BiTree&lt;DataType&gt;::<span class="hljs-built_in">TreeDepthHelper</span>(BiNode&lt;DataType&gt;* bt)<br>&#123;<br><span class="hljs-keyword">if</span> (bt == <span class="hljs-literal">nullptr</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">int</span> leftDepth = <span class="hljs-built_in">TreeDepthHelper</span>(bt-&gt;lchild);<br><span class="hljs-type">int</span> rightDepth = <span class="hljs-built_in">TreeDepthHelper</span>(bt-&gt;rchild);<br><span class="hljs-keyword">return</span> (leftDepth &gt; rightDepth) ? (leftDepth + <span class="hljs-number">1</span>) : (rightDepth + <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>BiTree&lt;<span class="hljs-type">char</span>&gt; t&#123;&#125;;<br>cout &lt;&lt; <span class="hljs-string">&quot;前序遍历&quot;</span>;<br>t.<span class="hljs-built_in">PreOrder</span>();<br>cout &lt;&lt; <span class="hljs-string">&quot;\n中序遍历&quot;</span>;<br>t.<span class="hljs-built_in">InOrder</span>();<br>cout &lt;&lt; <span class="hljs-string">&quot;\n后序遍历&quot;</span>;<br>t.<span class="hljs-built_in">PostOrder</span>();<br>cout &lt;&lt; <span class="hljs-string">&quot;\n层序遍历&quot;</span>;<br>t.<span class="hljs-built_in">LevelOrder</span>();<br>cout &lt;&lt; <span class="hljs-string">&quot;\n叶子结点数:&quot;</span> &lt;&lt; t.<span class="hljs-built_in">NodeTree</span>(t.root);<br>cout &lt;&lt; <span class="hljs-string">&quot;\n二叉树深度:&quot;</span> &lt;&lt; t.<span class="hljs-built_in">TreeDepth</span>();<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://cyberdownload.anrunlu.net/FtX0PHEedwNLABhhcw4vq0OnXJhk&quot; srcset=&quot;/img/loading.gif&quot; lazyload&gt;&lt;/p&gt;
&lt;h1 id=&quot;吐槽一下&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://w1ndys.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="数据结构作业" scheme="https://w1ndys.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%9C%E4%B8%9A/"/>
    
    <category term="实验" scheme="https://w1ndys.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%9C%E4%B8%9A/%E5%AE%9E%E9%AA%8C/"/>
    
    
    <category term="数据结构作业" scheme="https://w1ndys.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%9C%E4%B8%9A/"/>
    
  </entry>
  
  <entry>
    <title>实验四：字符串和多维数组的实现与应用</title>
    <link href="https://w1ndys.github.io/posts/6352a281"/>
    <id>https://w1ndys.github.io/posts/6352a281</id>
    <published>2024-01-14T11:06:36.922Z</published>
    <updated>2024-01-14T08:22:37.828Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cyberdownload.anrunlu.net/FicVRmge8QVfGJ00XaVJaDVKtKiH" srcset="/img/loading.gif" lazyload></p><h1 id="BF-KMP算法"><a href="#BF-KMP算法" class="headerlink" title="BF+KMP算法"></a>BF+KMP算法</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MaxSize 1000</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MaxLen 1000</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">SeqString</span><br>&#123;<br><span class="hljs-type">char</span> ch[MaxSize];<br><span class="hljs-type">int</span> len;<br>&#125;;<br><br><span class="hljs-comment">// BF算法</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">BF</span><span class="hljs-params">(<span class="hljs-type">char</span> S[], <span class="hljs-type">char</span> T[])</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>, start = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (S[i] != <span class="hljs-string">&#x27;\0&#x27;</span> &amp;&amp; T[j] != <span class="hljs-string">&#x27;\0&#x27;</span>)<br>&#123;<br><span class="hljs-keyword">if</span> (S[i] == T[j])<br>&#123;<br>i++;<br>j++;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>start++;<br>i = start;<br>j = <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (T[j] == <span class="hljs-string">&#x27;\0&#x27;</span>)<br>&#123;<br><span class="hljs-keyword">return</span> start + <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">GetNext</span><span class="hljs-params">(SeqString t, <span class="hljs-type">int</span> next[])</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> j, k;<br>j = <span class="hljs-number">0</span>;<br>k = <span class="hljs-number">-1</span>;<br>next[<span class="hljs-number">0</span>] = <span class="hljs-number">-1</span>;<br><span class="hljs-keyword">while</span> (j &lt; t.len - <span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-keyword">if</span> (k == <span class="hljs-number">-1</span> || t.ch[j] == t.ch[k])<br>&#123;<br>j++;<br>k++;<br>next[j] = k;<br>&#125;<br><span class="hljs-keyword">else</span><br>k = next[k];<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">KMP</span><span class="hljs-params">(SeqString s, SeqString t)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> next[MaxLen], i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">GetNext</span>(t, next); <span class="hljs-comment">// 求next值</span><br><span class="hljs-keyword">while</span> (i &lt; s.len &amp;&amp; j &lt; t.len) <span class="hljs-comment">// 修改这里</span><br>&#123;<br><span class="hljs-keyword">if</span> (j == <span class="hljs-number">-1</span> || s.ch[i] == t.ch[j])<br>&#123;<br>i++;<br>j++;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>j = next[j];<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (j &gt;= t.len)<br>&#123;<br><span class="hljs-keyword">return</span> (i - t.len); <span class="hljs-comment">// 返回下标</span><br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 不匹配</span><br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;*******BF算法实验*******&quot;</span> &lt;&lt; endl;<br><span class="hljs-type">char</span> a[MaxLen], b[MaxLen];<br>cout &lt;&lt; <span class="hljs-string">&quot;请输入主串&quot;</span> &lt;&lt; endl;<br>cin &gt;&gt; a;<br>cout &lt;&lt; <span class="hljs-string">&quot;输入了&quot;</span> &lt;&lt; a &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;请输入子串&quot;</span> &lt;&lt; endl;<br>cin &gt;&gt; b;<br>cout &lt;&lt; <span class="hljs-string">&quot;输入了&quot;</span> &lt;&lt; b &lt;&lt; endl;<br><span class="hljs-type">int</span> bf = <span class="hljs-built_in">BF</span>(a, b);<br><span class="hljs-keyword">if</span> (bf == <span class="hljs-number">0</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;BF算法结果：未找到&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;BF算法结果：位置是：&quot;</span> &lt;&lt; bf &lt;&lt; endl;<br>&#125;<br>cout &lt;&lt; <span class="hljs-string">&quot;*******BF算法实验*******&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; endl;<br>cout &lt;&lt; endl;<br>cout &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;*******KMP算法实验*******&quot;</span> &lt;&lt; endl;<br>SeqString s, t;<br>cout &lt;&lt; <span class="hljs-string">&quot;请输入主串&quot;</span> &lt;&lt; endl;<br>cin &gt;&gt; s.ch;<br>s.len = <span class="hljs-built_in">strlen</span>(s.ch);<br>cout &lt;&lt; <span class="hljs-string">&quot;输入了&quot;</span> &lt;&lt; s.ch &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;长度是：&quot;</span> &lt;&lt; s.len &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;请输入子串&quot;</span> &lt;&lt; endl;<br>cin &gt;&gt; t.ch;<br>t.len = <span class="hljs-built_in">strlen</span>(t.ch);<br>cout &lt;&lt; <span class="hljs-string">&quot;输入了&quot;</span> &lt;&lt; t.ch &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;长度是：&quot;</span> &lt;&lt; t.len &lt;&lt; endl;<br><span class="hljs-type">int</span> kmp = <span class="hljs-built_in">KMP</span>(s, t);<br><span class="hljs-keyword">if</span> (kmp == <span class="hljs-number">0</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;KMP算法结果：未找到&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;KMP算法结果：位置是：&quot;</span> &lt;&lt; kmp + <span class="hljs-number">1</span> &lt;&lt; endl; <span class="hljs-comment">// 返回的下标从1开始计数，所以需要+1</span><br>&#125;<br>cout &lt;&lt; <span class="hljs-string">&quot;*******KMP算法实验*******&quot;</span> &lt;&lt; endl;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 确保main函数有返回值</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="对称矩阵的压缩"><a href="#对称矩阵的压缩" class="headerlink" title="对称矩阵的压缩"></a>对称矩阵的压缩</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MaxSize 1000</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">yuansu</span><br>&#123;<br><span class="hljs-type">int</span> i;<br><span class="hljs-type">int</span> j;<br><span class="hljs-type">int</span> data;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Matrix</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Matrix</span>();<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PrintMatrix</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getMatrix</span><span class="hljs-params">(yuansu s)</span></span>;<br>~<span class="hljs-built_in">Matrix</span>();<br><br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> ma[MaxSize];<br>&#125;;<br><br>Matrix::<span class="hljs-built_in">Matrix</span>()<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; MaxSize; i++)<br>ma[i] = <span class="hljs-number">0</span>;<br>&#125;<br><br>Matrix::~<span class="hljs-built_in">Matrix</span>()<br>&#123;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Matrix::getMatrix</span><span class="hljs-params">(yuansu s)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (s.i &gt;= s.j) &#123;<br><span class="hljs-type">int</span> k = s.i * (s.i - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span> + s.j - <span class="hljs-number">1</span>;<br>ma[k] = s.data;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Matrix::PrintMatrix</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; MaxSize; i++)<br><span class="hljs-keyword">if</span> (ma[i] != <span class="hljs-number">0</span>)<br>cout &lt;&lt; <span class="hljs-string">&quot;ma[&quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot;] = &quot;</span> &lt;&lt; ma[i] &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Matrix ws;<br>yuansu s;<br>cin &gt;&gt; s.i &gt;&gt; s.j &gt;&gt; s.data;<br>ws.<span class="hljs-built_in">getMatrix</span>(s);<br>ws.<span class="hljs-built_in">PrintMatrix</span>();<br>cin &gt;&gt; s.i &gt;&gt; s.j &gt;&gt; s.data;<br>ws.<span class="hljs-built_in">getMatrix</span>(s);<br>ws.<span class="hljs-built_in">PrintMatrix</span>();<br>cin &gt;&gt; s.i &gt;&gt; s.j &gt;&gt; s.data;<br>ws.<span class="hljs-built_in">getMatrix</span>(s);<br>ws.<span class="hljs-built_in">PrintMatrix</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://cyberdownload.anrunlu.net/FicVRmge8QVfGJ00XaVJaDVKtKiH&quot; srcset=&quot;/img/loading.gif&quot; lazyload&gt;&lt;/p&gt;
&lt;h1 id=&quot;BF-KMP算法&quot;&gt;&lt;a hr</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://w1ndys.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="数据结构作业" scheme="https://w1ndys.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%9C%E4%B8%9A/"/>
    
    <category term="实验" scheme="https://w1ndys.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%9C%E4%B8%9A/%E5%AE%9E%E9%AA%8C/"/>
    
    
    <category term="数据结构作业" scheme="https://w1ndys.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%9C%E4%B8%9A/"/>
    
  </entry>
  
  <entry>
    <title>实验三、栈和队列的应用</title>
    <link href="https://w1ndys.github.io/posts/a2945f82"/>
    <id>https://w1ndys.github.io/posts/a2945f82</id>
    <published>2024-01-14T11:06:36.920Z</published>
    <updated>2024-01-14T08:22:37.826Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>已完结</p><p>声明：仅供留档查阅，仅用作起到提示引导性作用，仅用作学习交流，切勿直接照搬</p></blockquote><p><img src="https://cyberdownload.anrunlu.net/FruAGRXClw43THvg6TkSyPl_4S3q" srcset="/img/loading.gif" lazyload></p><h1 id="实验原理"><a href="#实验原理" class="headerlink" title="实验原理"></a>实验原理</h1><ol><li><strong>顺序栈</strong>：顺序栈是一种基于数组实现的栈。它通过一个数组和一个栈顶指针实现。当有新元素入栈时，将新元素放在数组的末尾，并将栈顶指针向后移动一位。当需要出栈时，直接返回栈顶元素，并将栈顶指针向前移动一位。</li><li><strong>链式栈</strong>：链式栈是一种基于链表实现的栈。它通过一个链表和一个头节点实现。当有新元素入栈时，将新元素插入到链表的头部，并更新头节点。当需要出栈时，直接返回头节点所指向的节点，并让头节点指向下一个节点。</li><li><strong>循环队列</strong>：循环队列是一种特殊的队列，它在逻辑上是环形的。循环队列使用一个数组和两个指针（一个头指针和一个尾指针）来实现。当元素入队时，尾指针向前移动并添加新元素；当元素出队时，头指针向前移动。当尾指针到达数组的末尾时，它会从数组的开始继续。</li><li><strong>链式队列</strong>：链式队列是基于单链表实现的队列。它使用一个单链表和两个指针（一个头指针和一个尾指针）来实现。当元素入队时，新元素被添加到链表的尾部，并更新尾指针；当元素出队时，头部的元素被移除，并更新头指针</li></ol><h1 id="实验内容和步骤"><a href="#实验内容和步骤" class="headerlink" title="实验内容和步骤"></a>实验内容和步骤</h1><ol><li><strong>顺序栈</strong>：<ul><li>入栈：将新元素放在数组的末尾，并将栈顶指针向后移动一位。</li><li>出栈：返回栈顶元素，并将栈顶指针向前移动一位。</li></ul></li><li><strong>链式栈</strong>：<ul><li>入栈：将新元素插入到链表的头部，并更新头节点。</li><li>出栈：返回头节点所指向的节点，并让头节点指向下一个节点。</li></ul></li><li><strong>循环队列</strong>：<ul><li>入队：尾指针向前移动并添加新元素。</li><li>出队：头指针向前移动。当尾指针到达数组的末尾时，它会从数组的开始继续。</li></ul></li><li><strong>链式队列</strong>：<ul><li>入队：新元素被添加到链表的尾部，并更新尾指针。</li><li>出队：头部的元素被移除，并更新头指针。</li></ul></li></ol><h1 id="代码主体"><a href="#代码主体" class="headerlink" title="代码主体"></a>代码主体</h1><h2 id="顺序栈SeqStack的实现："><a href="#顺序栈SeqStack的实现：" class="headerlink" title="顺序栈SeqStack的实现："></a>顺序栈SeqStack的实现：</h2><blockquote><p>自己写的</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> StackSize = <span class="hljs-number">100</span>;  <span class="hljs-comment">// 定义最大栈顶具体情况具体分析</span><br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> DataType&gt;   <span class="hljs-comment">//定义模板类SeqStack</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SeqStack</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">SeqStack</span>();   <span class="hljs-comment">//构造函数，初始化空栈</span><br>~<span class="hljs-built_in">SeqStack</span>();<span class="hljs-comment">//析构函数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Push</span><span class="hljs-params">(DataType x)</span></span>;<span class="hljs-comment">//压栈</span><br><span class="hljs-function">DataType <span class="hljs-title">Pop</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">//出栈</span><br><span class="hljs-function">DataType <span class="hljs-title">GetTop</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">//取栈顶</span><br><span class="hljs-function">DataType <span class="hljs-title">TopTop</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">//取栈顶下标</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">empty</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">//判空操作</span><br><span class="hljs-keyword">private</span>:<br>DataType data[StackSize];<span class="hljs-comment">//存放栈元素的数组</span><br><span class="hljs-type">int</span> top;<span class="hljs-comment">//栈顶元素的下标</span><br>&#125;;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> DataType&gt;<br>SeqStack&lt;DataType&gt;::~<span class="hljs-built_in">SeqStack</span>()<br>&#123;<br><br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-type">void</span> SeqStack&lt;DataType&gt;::<span class="hljs-built_in">Push</span>(DataType x)<br>&#123;<br><span class="hljs-keyword">if</span> (top == StackSize <span class="hljs-number">-1</span> )<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;栈满&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>top++;<br>data[top] = x;s<br>&#125;<br><br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> DataType&gt;<br>DataType SeqStack&lt;DataType&gt;::<span class="hljs-built_in">Pop</span>()<br>&#123;<br><span class="hljs-keyword">if</span> (top == <span class="hljs-number">-1</span> )<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;栈空&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>DataType x;<br>x = data[top];<br>top--;<br><span class="hljs-keyword">return</span> x;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> DataType&gt;<br>DataType SeqStack&lt;DataType&gt;::<span class="hljs-built_in">GetTop</span>()<br>&#123;<br><span class="hljs-keyword">if</span> (top == <span class="hljs-number">-1</span> )<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;栈空&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">return</span> data[top];<br>&#125;<br><br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-type">int</span> SeqStack&lt;DataType&gt;::<span class="hljs-built_in">empty</span>()<br>&#123;<br><span class="hljs-keyword">if</span> (top == <span class="hljs-number">-1</span>)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> DataType&gt;<br>DataType SeqStack&lt;DataType&gt;::<span class="hljs-built_in">TopTop</span>()<br>&#123;<br><span class="hljs-keyword">return</span>top;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> DataType&gt;<br>SeqStack&lt;DataType&gt;::<span class="hljs-built_in">SeqStack</span>()<br>&#123;<br>top = <span class="hljs-number">-1</span>;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> ws1 = <span class="hljs-number">0</span>;<br>SeqStack&lt;<span class="hljs-type">int</span>&gt; S&#123;&#125;;<span class="hljs-comment">//定义顺序栈变量</span><br>S.<span class="hljs-built_in">Push</span>(<span class="hljs-number">1</span>);<br>S.<span class="hljs-built_in">Push</span>(<span class="hljs-number">2</span>);<br>S.<span class="hljs-built_in">Push</span>(<span class="hljs-number">3</span>); <br>cout &lt;&lt; <span class="hljs-string">&quot;系统已压栈1,2,3&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;输入一个元素进行压栈&quot;</span> &lt;&lt; endl;<br>cin &gt;&gt; ws1;<br>S.<span class="hljs-built_in">Push</span>(ws1);<br>cout &lt;&lt; <span class="hljs-string">&quot;当前栈顶元素为：&quot;</span> &lt;&lt; S.<span class="hljs-built_in">GetTop</span>() &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;*****************&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;执行一次出栈操作&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;已释放&quot;</span> &lt;&lt; S.<span class="hljs-built_in">Pop</span>() &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;当前栈顶元素为：&quot;</span> &lt;&lt; S.<span class="hljs-built_in">GetTop</span>() &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;*****************&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;执行一次判空操作&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">if</span> (S.<span class="hljs-built_in">empty</span>() == <span class="hljs-number">1</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;栈空&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;栈非空&quot;</span> &lt;&lt; endl;<br>&#125;<br>cout &lt;&lt; <span class="hljs-string">&quot;*****************&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;正在出所有栈&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = S.<span class="hljs-built_in">TopTop</span>(); i &gt; <span class="hljs-number">-1</span> ; i--)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;已释放&quot;</span> &lt;&lt; S.<span class="hljs-built_in">Pop</span>() &lt;&lt; endl;<br>&#125;<br>cout &lt;&lt; <span class="hljs-string">&quot;已释放出所有栈&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;*****************&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;执行一次判空操作&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">if</span> (S.<span class="hljs-built_in">empty</span>() == <span class="hljs-number">1</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;栈空&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;栈非空&quot;</span> &lt;&lt; endl;<br>&#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="链式栈LinkStack的实现："><a href="#链式栈LinkStack的实现：" class="headerlink" title="链式栈LinkStack的实现："></a>链式栈LinkStack的实现：</h2><blockquote><p>自己写的</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span><br>&#123;<br>    DataType data;<br>    Node&lt;DataType&gt;* next;<br>&#125;;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkStack</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">LinkStack</span>();<br>    ~<span class="hljs-built_in">LinkStack</span>();<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Push</span><span class="hljs-params">(DataType x)</span></span>;  <span class="hljs-comment">//入栈</span><br>    <span class="hljs-function">DataType <span class="hljs-title">Pop</span><span class="hljs-params">()</span></span>;     <span class="hljs-comment">//出栈</span><br>    <span class="hljs-function">DataType <span class="hljs-title">GetTop</span><span class="hljs-params">()</span></span>;  <span class="hljs-comment">//取栈顶</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Empty</span><span class="hljs-params">()</span></span>;        <span class="hljs-comment">//判空</span><br><span class="hljs-keyword">private</span>:<br>    Node&lt;DataType&gt;* top;<br>&#125;;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br>LinkStack&lt;DataType&gt;::<span class="hljs-built_in">LinkStack</span>()<br>&#123;<br>    top = <span class="hljs-literal">nullptr</span>;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br>LinkStack&lt;DataType&gt;::~<span class="hljs-built_in">LinkStack</span>()<br>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;程序退出，析构函数被调用!&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">Empty</span>())<br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;出栈元素：&quot;</span> &lt;&lt; <span class="hljs-built_in">Pop</span>() &lt;&lt; endl;<br>    &#125;<br>    cout &lt;&lt; <span class="hljs-string">&quot;程序退出链栈已清空!&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br>DataType LinkStack&lt;DataType&gt; ::<span class="hljs-built_in">GetTop</span>()<br>&#123;<br>    <span class="hljs-keyword">if</span> (top == <span class="hljs-literal">nullptr</span>)<br>        cout &lt;&lt; <span class="hljs-string">&quot;下溢异常&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> top-&gt;data;<br>&#125;<br><br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-type">void</span> LinkStack&lt;DataType&gt; ::<span class="hljs-built_in">Push</span>(DataType x)<br>&#123;<br>    Node&lt;DataType&gt;* s = <span class="hljs-literal">nullptr</span>;<br>    s = <span class="hljs-keyword">new</span> Node&lt;DataType&gt;;<br>    s-&gt;data = x; <span class="hljs-comment">//申请结点s数据域为x</span><br>    s-&gt;next = top;<br>    top = s; <span class="hljs-comment">//将结点s插在栈顶</span><br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br>DataType LinkStack&lt;DataType&gt; ::<span class="hljs-built_in">Pop</span>()<br>&#123;<br>    Node&lt;DataType&gt;* p = <span class="hljs-literal">nullptr</span>;<br>    DataType x;<br>    <span class="hljs-keyword">if</span> (top == <span class="hljs-literal">nullptr</span>)<br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;栈空&quot;</span> &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        x = top-&gt;data; p = top; <span class="hljs-comment">//暂存栈顶元素</span><br>        top = top-&gt;next; <span class="hljs-comment">//将栈顶结点摘链</span><br>        <span class="hljs-keyword">delete</span> p;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-type">int</span> LinkStack&lt;DataType&gt;::<span class="hljs-built_in">Empty</span>()<br>&#123;<br>    <span class="hljs-keyword">if</span> (top == <span class="hljs-literal">nullptr</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> ws1 = <span class="hljs-number">0</span>;<br>    LinkStack&lt;<span class="hljs-type">int</span>&gt; S&#123;&#125;;<span class="hljs-comment">//定义顺序栈变量S</span><br>    S.<span class="hljs-built_in">Push</span>(<span class="hljs-number">1</span>);<br>    S.<span class="hljs-built_in">Push</span>(<span class="hljs-number">2</span>);<br>    S.<span class="hljs-built_in">Push</span>(<span class="hljs-number">3</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;系统已压栈1,2,3&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;输入一个元素进行压栈&quot;</span> &lt;&lt; endl;<br>    cin &gt;&gt; ws1;<br>    S.<span class="hljs-built_in">Push</span>(ws1);<br>    cout &lt;&lt; <span class="hljs-string">&quot;当前栈顶元素为：&quot;</span> &lt;&lt; S.<span class="hljs-built_in">GetTop</span>() &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;*****************&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;执行一次出栈操作&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;已释放&quot;</span> &lt;&lt; S.<span class="hljs-built_in">Pop</span>() &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;当前栈顶元素为：&quot;</span> &lt;&lt; S.<span class="hljs-built_in">GetTop</span>() &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;*****************&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;执行一次判空操作&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">if</span> (S.<span class="hljs-built_in">Empty</span>() == <span class="hljs-number">1</span>)<br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;栈空&quot;</span> &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;栈非空&quot;</span> &lt;&lt; endl;<br>    &#125;<br>    cout &lt;&lt; <span class="hljs-string">&quot;*****************&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;正在出所有栈&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">while</span> (S.<span class="hljs-built_in">Empty</span>() != <span class="hljs-number">1</span>)<br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;已释放&quot;</span> &lt;&lt; S.<span class="hljs-built_in">Pop</span>() &lt;&lt; endl;<br>    &#125;<br>    cout &lt;&lt; <span class="hljs-string">&quot;已释放出所有栈&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;*****************&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;执行一次判空操作&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">if</span> (S.<span class="hljs-built_in">Empty</span>() == <span class="hljs-number">1</span>)<br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;栈空&quot;</span> &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;栈非空&quot;</span> &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="循环队列CirQueue的实现："><a href="#循环队列CirQueue的实现：" class="headerlink" title="循环队列CirQueue的实现："></a>循环队列CirQueue的实现：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> QueueSize = <span class="hljs-number">100</span>; <span class="hljs-comment">//最大长度</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CirQueue</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">CirQueue</span>();<br>~<span class="hljs-built_in">CirQueue</span>();<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">EnQueue</span><span class="hljs-params">(DataType x)</span></span>;<span class="hljs-comment">//入队</span><br><span class="hljs-function">DataType <span class="hljs-title">DeQueue</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">//出队</span><br><span class="hljs-function">DataType <span class="hljs-title">GetQueue</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">//取队头</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Empty</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">//判空操作</span><br><span class="hljs-keyword">private</span>:<br>DataType data[QueueSize];<span class="hljs-comment">//存放需要的数组</span><br><span class="hljs-type">int</span> front, rear;<span class="hljs-comment">//队头和队尾指针</span><br>&#125;;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> DataType&gt;<br>CirQueue&lt;DataType&gt;::<span class="hljs-built_in">CirQueue</span>()<br>&#123;<br>rear = front = QueueSize - <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> DataType&gt;<br>CirQueue&lt;DataType&gt;::~<span class="hljs-built_in">CirQueue</span>()<br>&#123;<br><br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-type">void</span> CirQueue&lt;DataType&gt;::<span class="hljs-built_in">EnQueue</span>(DataType x)<br>&#123;<br><span class="hljs-keyword">if</span> ((rear+<span class="hljs-number">1</span>)%QueueSize==front)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;队满&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>rear = (rear + <span class="hljs-number">1</span>) % QueueSize; <span class="hljs-comment">//队尾指针+1</span><br>data[rear] = x;<span class="hljs-comment">//在队尾插入元素</span><br>&#125;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> DataType&gt;<br>DataType CirQueue&lt;DataType&gt;::<span class="hljs-built_in">DeQueue</span>()<br>&#123;<br><span class="hljs-keyword">if</span> ((rear + <span class="hljs-number">1</span>)%QueueSize==front )<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;队空&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>front = (front + <span class="hljs-number">1</span>) % QueueSize;<br><span class="hljs-keyword">return</span> data[front];<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> DataType&gt;<br>DataType CirQueue&lt;DataType&gt;::<span class="hljs-built_in">GetQueue</span>()<br>&#123;<br><span class="hljs-keyword">if</span> (front == rear)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;队空&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">return</span> data[(front + <span class="hljs-number">1</span>) % QueueSize];<br>&#125;<br><br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-type">int</span> CirQueue&lt;DataType&gt;::<span class="hljs-built_in">Empty</span>()<br>&#123;<br><span class="hljs-keyword">if</span> (front == rear)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>CirQueue&lt;<span class="hljs-type">int</span>&gt; S&#123;&#125;;<br><span class="hljs-type">int</span> x = <span class="hljs-number">0</span>;<br>S.<span class="hljs-built_in">EnQueue</span>(<span class="hljs-number">1</span>);<br>S.<span class="hljs-built_in">EnQueue</span>(<span class="hljs-number">2</span>);<br>S.<span class="hljs-built_in">EnQueue</span>(<span class="hljs-number">3</span>);<br>cout &lt;&lt; <span class="hljs-string">&quot;已入队1,2,3&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;******取一次队头******&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;队头是：&quot;</span> &lt;&lt; S.<span class="hljs-built_in">GetQueue</span>() &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;请输入一个元素进行入队&quot;</span> &lt;&lt; endl;<br>cin &gt;&gt; x;<br>S.<span class="hljs-built_in">EnQueue</span>(x);<br>cout &lt;&lt; <span class="hljs-string">&quot;已入队：&quot;</span> &lt;&lt; x &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;******取一次队头******&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;队头是：&quot;</span> &lt;&lt; S.<span class="hljs-built_in">GetQueue</span>() &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;******执行一次出队******&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;已出队：&quot;</span> &lt;&lt; S.<span class="hljs-built_in">DeQueue</span>() &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;*****进行一次判空*****&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">if</span> (S.<span class="hljs-built_in">Empty</span>() == <span class="hljs-number">1</span>)<br>&#123; <br>cout &lt;&lt; <span class="hljs-string">&quot;队列空&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;队列非空&quot;</span> &lt;&lt; endl;<br>&#125;<br>cout &lt;&lt; <span class="hljs-string">&quot;已出队：&quot;</span> &lt;&lt; S.<span class="hljs-built_in">DeQueue</span>() &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;已出队：&quot;</span> &lt;&lt; S.<span class="hljs-built_in">DeQueue</span>() &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;已出队：&quot;</span> &lt;&lt; S.<span class="hljs-built_in">DeQueue</span>() &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;*****进行一次判空*****&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">if</span> (S.<span class="hljs-built_in">Empty</span>() == <span class="hljs-number">1</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;队列空&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;队列非空&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="链式队列LinkQueue的实现："><a href="#链式队列LinkQueue的实现：" class="headerlink" title="链式队列LinkQueue的实现："></a>链式队列LinkQueue的实现：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br>DataType data;<br>node&lt;DataType&gt;* next;<br>&#125;;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkQueue</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">LinkQueue</span>();<br>~<span class="hljs-built_in">LinkQueue</span>();<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">enQueue</span><span class="hljs-params">(DataType x)</span></span>;<br><span class="hljs-function">DataType <span class="hljs-title">DeQueue</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function">DataType <span class="hljs-title">GetQueue</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Empty</span><span class="hljs-params">()</span></span>;<br><span class="hljs-keyword">private</span>:<br>node&lt;DataType&gt;* front, * rear;<br>&#125;;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> DataType&gt;<br>LinkQueue&lt;DataType&gt;::<span class="hljs-built_in">LinkQueue</span>()<br>&#123;<br>node&lt;DataType&gt;* s = <span class="hljs-literal">nullptr</span>;<br>s = <span class="hljs-keyword">new</span> node&lt;DataType&gt;;<span class="hljs-comment">//开辟空间</span><br>s-&gt;next = <span class="hljs-literal">nullptr</span>;<br>front = rear = s;<br><br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> DataType&gt;<br>LinkQueue&lt;DataType&gt;::~<span class="hljs-built_in">LinkQueue</span>()<br>&#123;<br>node&lt;DataType&gt;* q = <span class="hljs-literal">nullptr</span>;<br><span class="hljs-keyword">while</span> (front != <span class="hljs-literal">nullptr</span>)<br>&#123;<br>q = front;<br>front = front-&gt;next;<br><span class="hljs-keyword">delete</span> q;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-type">void</span> LinkQueue&lt;DataType&gt;::<span class="hljs-built_in">enQueue</span>(DataType x)<br>&#123;<br>node&lt;DataType&gt;* s = <span class="hljs-literal">nullptr</span>;<br>s = <span class="hljs-keyword">new</span> node&lt;DataType&gt;;<br>s-&gt;data = x;<br>s-&gt;next = <span class="hljs-literal">nullptr</span>;<br>rear-&gt;next = s;<span class="hljs-comment">//插入到队尾</span><br>rear = s;<span class="hljs-comment">//移动队尾</span><br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> DataType&gt;<br>DataType LinkQueue&lt;DataType&gt;::<span class="hljs-built_in">DeQueue</span>()<br>&#123;<br>DataType x;<br>node&lt;DataType&gt;* p = <span class="hljs-literal">nullptr</span>;<br><span class="hljs-keyword">if</span> (reat==front )<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;队空&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>p = front-&gt;next;<br>x = p-&gt;data;<br>front-&gt;next = p-&gt;next;<br><span class="hljs-keyword">delete</span> p;<br><span class="hljs-keyword">return</span> x;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> DataType&gt;<br>DataType LinkQueue&lt;DataType&gt;::<span class="hljs-built_in">GetQueue</span>()<br>&#123;<br><span class="hljs-keyword">if</span> (front == rear)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;队空&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">return</span> front-&gt;next-&gt;data;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-type">int</span> LinkQueue&lt;DataType&gt;::<span class="hljs-built_in">Empty</span>()<br>&#123;<br><span class="hljs-keyword">if</span> (front == rear )<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> x;<br>LinkQueue&lt;<span class="hljs-type">int</span>&gt; S = &#123;&#125;;<br>S.<span class="hljs-built_in">enQueue</span>(<span class="hljs-number">1</span>);<br>S.<span class="hljs-built_in">enQueue</span>(<span class="hljs-number">2</span>);<br>S.<span class="hljs-built_in">enQueue</span>(<span class="hljs-number">3</span>);<br>cout &lt;&lt; <span class="hljs-string">&quot;已入队1,2,3&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;******取一次队头******&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;队头是：&quot;</span> &lt;&lt; S.<span class="hljs-built_in">GetQueue</span>() &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;请输入一个元素进行入队&quot;</span> &lt;&lt; endl;<br>cin &gt;&gt; x;<br>S.<span class="hljs-built_in">enQueue</span>(x);<br>cout &lt;&lt; <span class="hljs-string">&quot;已入队：&quot;</span> &lt;&lt; x &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;******取一次队头******&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;队头是：&quot;</span> &lt;&lt; S.<span class="hljs-built_in">GetQueue</span>() &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;******执行一次出队******&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;已出队：&quot;</span> &lt;&lt; S.<span class="hljs-built_in">DeQueue</span>() &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;*****进行一次判空*****&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">if</span> (S.<span class="hljs-built_in">Empty</span>() == <span class="hljs-number">1</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;队列空&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;队列非空&quot;</span> &lt;&lt; endl;<br>&#125;<br>cout &lt;&lt; <span class="hljs-string">&quot;已出队：&quot;</span> &lt;&lt; S.<span class="hljs-built_in">DeQueue</span>() &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;已出队：&quot;</span> &lt;&lt; S.<span class="hljs-built_in">DeQueue</span>() &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;已出队：&quot;</span> &lt;&lt; S.<span class="hljs-built_in">DeQueue</span>() &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;*****进行一次判空*****&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">if</span> (S.<span class="hljs-built_in">Empty</span>() == <span class="hljs-number">1</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;队列空&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;队列非空&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="十进制转换为二至九进制之间的任一进制的算法实现："><a href="#十进制转换为二至九进制之间的任一进制的算法实现：" class="headerlink" title="十进制转换为二至九进制之间的任一进制的算法实现："></a>十进制转换为二至九进制之间的任一进制的算法实现：</h2><blockquote><p>这里有一个细节就是，任何数转化为任何进制，最后整除取整的结果都是0，而最后一次压栈是无法在循环里压栈（在这个算法里），需要在循环外再写一行压栈，把最后一个进制数压进去（也就是输出结果的第一位）</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*十进制转化为其他进制，实际上是做取余然后逆序输出运算，可以用顺序栈实现功能*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> StackSize = <span class="hljs-number">10000</span>;  <span class="hljs-comment">// 定义最大栈顶具体情况具体分析</span><br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> DataType&gt;   <span class="hljs-comment">//定义模板类SeqStack</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SeqStack</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">SeqStack</span>();   <span class="hljs-comment">//构造函数，初始化空栈</span><br>~<span class="hljs-built_in">SeqStack</span>();<span class="hljs-comment">//析构函数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Push</span><span class="hljs-params">(DataType x)</span></span>;<span class="hljs-comment">//压栈</span><br><span class="hljs-function">DataType <span class="hljs-title">Pop</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">//出栈</span><br><span class="hljs-function">DataType <span class="hljs-title">GetTop</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">//取栈顶</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">empty</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">//判空操作</span><br><span class="hljs-keyword">private</span>:<br>DataType data[StackSize];<span class="hljs-comment">//存放栈元素的数组</span><br><span class="hljs-type">int</span> top;<span class="hljs-comment">//栈顶元素的下标</span><br>&#125;;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> DataType&gt;<br>SeqStack&lt;DataType&gt;::~<span class="hljs-built_in">SeqStack</span>()<br>&#123;<br><br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-type">void</span> SeqStack&lt;DataType&gt;::<span class="hljs-built_in">Push</span>(DataType x)<br>&#123;<br><span class="hljs-keyword">if</span> (top == StackSize - <span class="hljs-number">1</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;栈满&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>top++;<br>data[top] = x;<br>&#125;<br><br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> DataType&gt;<br>DataType SeqStack&lt;DataType&gt;::<span class="hljs-built_in">Pop</span>()<br>&#123;<br><span class="hljs-keyword">if</span> (top == <span class="hljs-number">-1</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;栈空&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>DataType x;<br>x = data[top];<br>top--;<br><span class="hljs-keyword">return</span> x;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> DataType&gt;<br>DataType SeqStack&lt;DataType&gt;::<span class="hljs-built_in">GetTop</span>()<br>&#123;<br><span class="hljs-keyword">if</span> (top == <span class="hljs-number">-1</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;栈空&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">return</span> data[top];<br>&#125;<br><br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-type">int</span> SeqStack&lt;DataType&gt;::<span class="hljs-built_in">empty</span>()<br>&#123;<br><span class="hljs-keyword">if</span> (top == <span class="hljs-number">-1</span>)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> DataType&gt;<br>SeqStack&lt;DataType&gt;::<span class="hljs-built_in">SeqStack</span>()<br>&#123;<br>top = <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>SeqStack&lt;<span class="hljs-type">int</span>&gt; s = &#123;&#125;;<br><span class="hljs-type">int</span> x, y, count = <span class="hljs-number">1</span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;请按顺序输入你想转化的十进制数，和目标进制（2-9），以空格隔开&quot;</span> &lt;&lt; endl;<br>cin &gt;&gt; x &gt;&gt; y;<br><span class="hljs-keyword">while</span> ((x/y) != <span class="hljs-number">0</span>)<br>&#123;<br>cout &lt;&lt;<span class="hljs-string">&quot;入栈&quot;</span> &lt;&lt; x % y &lt;&lt; endl;<br>s.<span class="hljs-built_in">Push</span>(x % y);<br>count++;<br>x /= y;<br>&#125;<br>s.<span class="hljs-built_in">Push</span>(x % y);<br>cout &lt;&lt; <span class="hljs-string">&quot;入栈&quot;</span> &lt;&lt; x % y &lt;&lt; endl;<br>cout &lt;&lt;<span class="hljs-string">&quot;************************&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;转换后的结果是&quot;</span>;<br><span class="hljs-keyword">while</span> (count!=<span class="hljs-number">0</span>)<br>&#123;<br>cout&lt;&lt;s.<span class="hljs-built_in">Pop</span>();<br>count--;<br>&#125;<br>cout &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;************************&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;已完结&lt;/p&gt;
&lt;p&gt;声明：仅供留档查阅，仅用作起到提示引导性作用，仅用作学习交流，切勿直接照搬&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://cyberdownload.anrunlu.net/FruAGRXClw</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://w1ndys.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="数据结构作业" scheme="https://w1ndys.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%9C%E4%B8%9A/"/>
    
    <category term="实验" scheme="https://w1ndys.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%9C%E4%B8%9A/%E5%AE%9E%E9%AA%8C/"/>
    
    
    <category term="数据结构作业" scheme="https://w1ndys.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%9C%E4%B8%9A/"/>
    
  </entry>
  
  <entry>
    <title>实验七 最小生成树和最短路径的实现</title>
    <link href="https://w1ndys.github.io/posts/1b9cb669"/>
    <id>https://w1ndys.github.io/posts/1b9cb669</id>
    <published>2024-01-14T11:06:36.919Z</published>
    <updated>2024-01-14T08:22:37.829Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cyberdownload.anrunlu.net/Fv5QkbY1G5LDg_28R1J8Oief5nmC" srcset="/img/loading.gif" lazyload alt="Fv5QkbY1G5LDg_28R1J8Oief5nmC"></p><h1 id="Prim算法"><a href="#Prim算法" class="headerlink" title="Prim算法"></a>Prim算法</h1><blockquote><p>没听课（）教材代码，复制过来了</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/******************************* </span><br><span class="hljs-comment">   对应教材6.4.1节，Prim算法 </span><br><span class="hljs-comment">********************************/</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MaxSize = <span class="hljs-number">10</span>;                   <span class="hljs-comment">//图中最多顶点个数</span><br><span class="hljs-type">int</span> visited[MaxSize] = &#123;<span class="hljs-number">0</span>&#125;;              <span class="hljs-comment">//全局数组变量visited初始化</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">DataType</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MGraph</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>   <span class="hljs-built_in">MGraph</span>(DataType a[ ], <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> e);     <span class="hljs-comment">//构造函数，建立具有n个顶点e条边的图</span><br>   ~<span class="hljs-built_in">MGraph</span>( )&#123; &#125;;                        <span class="hljs-comment">//析构函数</span><br> <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Prim</span><span class="hljs-params">(<span class="hljs-type">int</span> v)</span></span>;<br><span class="hljs-keyword">private</span>:<br>    DataType vertex[MaxSize];           <span class="hljs-comment">//存放图中顶点的数组</span><br>    <span class="hljs-type">int</span> edge[MaxSize][MaxSize];           <span class="hljs-comment">//存放图中边的数组</span><br>    <span class="hljs-type">int</span> vertexNum, edgeNum;              <span class="hljs-comment">//图的顶点数和边数</span><br><br> <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">MinEdge</span><span class="hljs-params">(<span class="hljs-type">int</span> r[ ], <span class="hljs-type">int</span> n)</span></span>;<br>&#125;;<br>  <br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">DataType</span>&gt;<br>MGraph&lt;DataType&gt; :: <span class="hljs-built_in">MGraph</span>(DataType a[ ], <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> e) <br>&#123;<br>   <span class="hljs-type">int</span> i, j, k, w;<br>   vertexNum = n; edgeNum = e;<br>   <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; vertexNum; i++)          <span class="hljs-comment">//存储顶点</span><br>   vertex[i] = a[i];<br>   <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; vertexNum; i++)          <span class="hljs-comment">//初始化邻接矩阵</span><br> <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; vertexNum; j++)<br>   <span class="hljs-keyword">if</span> (i == j)<br>   edge[i][j] = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">else</span><br>   edge[i][j] = <span class="hljs-number">100</span>;               <span class="hljs-comment">//假设边上权的最大值是100             </span><br>   <span class="hljs-keyword">for</span> (k = <span class="hljs-number">0</span>; k &lt; edgeNum; k++)           <span class="hljs-comment">//依次输入每一条边</span><br>   &#123;<br>   cout &lt;&lt; <span class="hljs-string">&quot;请输入边依附的两个顶点的编号，以及边上的权值：&quot;</span>;<br>cin &gt;&gt; i &gt;&gt; j &gt;&gt; w;                       <span class="hljs-comment">//输入边依附的两个顶点的编号</span><br>edge[i][j] = w; edge[j][i] = w;           <span class="hljs-comment">//置有边标志</span><br>   &#125;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">DataType</span>&gt;<br><span class="hljs-type">void</span> MGraph&lt;DataType&gt; :: <span class="hljs-built_in">Prim</span>(<span class="hljs-type">int</span> v)                           <span class="hljs-comment">//从顶点v出发</span><br>&#123;   <br><span class="hljs-type">int</span> i, j, k;<br><span class="hljs-type">int</span> adjvex[MaxSize], lowcost[MaxSize];<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; vertexNum; i++)             <span class="hljs-comment">//初始化辅助数组</span><br>&#123;<br>lowcost[i] = edge[v][i]; adjvex[i] = v;<br>&#125;<br>lowcost[v] = <span class="hljs-number">0</span>;                         <span class="hljs-comment">//将顶点v加入集合U</span><br><span class="hljs-keyword">for</span> (k = <span class="hljs-number">1</span>; k &lt; vertexNum; k++)            <span class="hljs-comment">//迭代n-1次</span><br>&#123;<br>j = <span class="hljs-built_in">MinEdge</span>(lowcost, vertexNum);       <span class="hljs-comment">//寻找最短边的邻接点j</span><br>      cout &lt;&lt; <span class="hljs-string">&quot;(&quot;</span> &lt;&lt; vertex[j] &lt;&lt; <span class="hljs-string">&quot;,&quot;</span> &lt;&lt; vertex[adjvex[j]] &lt;&lt; <span class="hljs-string">&quot;)&quot;</span> &lt;&lt; lowcost[j] &lt;&lt; endl; <br>lowcost[j] = <span class="hljs-number">0</span>;                       <span class="hljs-comment">//顶点j加入集合U</span><br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; vertexNum; i++)          <span class="hljs-comment">//调整辅助数组</span><br>        <span class="hljs-keyword">if</span> (edge[i][j] &lt; lowcost[i]) &#123;<br>lowcost[i] = edge[i][j]; <br>adjvex[i] = j;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">DataType</span>&gt;<br><span class="hljs-type">int</span> MGraph&lt;DataType&gt; :: <span class="hljs-built_in">MinEdge</span>(<span class="hljs-type">int</span> r[ ], <span class="hljs-type">int</span> n)<br>&#123;<br><span class="hljs-type">int</span> index = <span class="hljs-number">0</span>, min = <span class="hljs-number">100</span>;           <span class="hljs-comment">//此处如果仅记载最小值下标会有bug </span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++)<br><span class="hljs-keyword">if</span> (r[i] != <span class="hljs-number">0</span> &amp;&amp; r[i] &lt; min)<br>&#123;<br>min = r[i]; index = i;<br>&#125;<br><span class="hljs-keyword">return</span> index;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">( )</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">/*测试数据使用教材 图6-16 所示带权无向图， 输入边依次为 </span><br><span class="hljs-comment">(0 1 34)(0 2 46)(0 5 19)(1 4 12)(2 3 17)(2 5 25)(3 4 38)(3 5 25)(4 5 26) */</span> <br><span class="hljs-type">char</span> ch[ ]=&#123;<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;C&#x27;</span>,<span class="hljs-string">&#x27;D&#x27;</span>,<span class="hljs-string">&#x27;E&#x27;</span>,<span class="hljs-string">&#x27;F&#x27;</span>&#125;;       <br>MGraph&lt;<span class="hljs-type">char</span>&gt; MG&#123;ch, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>&#125;;             <br>MG.<span class="hljs-built_in">Prim</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://cyberdownload.anrunlu.net/Fv5QkbY1G5LDg_28R1J8Oief5nmC&quot; srcset=&quot;/img/loading.gif&quot; lazyload alt=&quot;Fv5QkbY1G5LDg_28R1J8Oie</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://w1ndys.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="数据结构作业" scheme="https://w1ndys.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%9C%E4%B8%9A/"/>
    
    <category term="实验" scheme="https://w1ndys.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%9C%E4%B8%9A/%E5%AE%9E%E9%AA%8C/"/>
    
    
    <category term="数据结构作业" scheme="https://w1ndys.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%9C%E4%B8%9A/"/>
    
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>W1ndysの小屋</title>
  <icon>https://www.gravatar.com/avatar/35d8b83bb6ad9bce76c0b476a582c5cd</icon>
  <subtitle>W1ndys’s blog</subtitle>
  <link href="http://w1ndys.top/atom.xml" rel="self"/>
  
  <link href="http://w1ndys.top/"/>
  <updated>2023-10-05T09:24:25.159Z</updated>
  <id>http://w1ndys.top/</id>
  
  <author>
    <name>W1ndys</name>
    <email>w2769731875@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C++常用的代码模板</title>
    <link href="http://w1ndys.top/2023/10/05/C++_template_usually/"/>
    <id>http://w1ndys.top/2023/10/05/C++_template_usually/</id>
    <published>2023-10-05T05:52:39.644Z</published>
    <updated>2023-10-05T09:24:25.159Z</updated>
    
    <content type="html"><![CDATA[<h1 id="生成随机数"><a href="#生成随机数" class="headerlink" title="生成随机数"></a>生成随机数</h1><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;random&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;chrono&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 使用当前时间作为随机数生成器的种子</span><br>    <span class="hljs-type">unsigned</span> seed = chrono::system_clock::<span class="hljs-built_in">now</span>().<span class="hljs-built_in">time_since_epoch</span>().<span class="hljs-built_in">count</span>();<br>    <br>    <span class="hljs-comment">// 创建一个随机数生成器</span><br>    <span class="hljs-function">default_random_engine <span class="hljs-title">generator</span><span class="hljs-params">(seed)</span></span>;<br>    <br>    <span class="hljs-comment">// 创建一个均匀分布的随机数生成器，范围从1到100</span><br>    <span class="hljs-function">uniform_int_distribution&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">distribution</span><span class="hljs-params">(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>)</span></span>;<br>    <br>    <span class="hljs-comment">// 生成并打印一个随机数</span><br>    cout &lt;&lt; <span class="hljs-string">&quot;Random number: &quot;</span> &lt;&lt; <span class="hljs-built_in">distribution</span>(generator) &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// 使用当前时间作为随机数生成器的种子</span><br><span class="hljs-type">unsigned</span> seed = chrono::system_clock::<span class="hljs-built_in">now</span>().<span class="hljs-built_in">time_since_epoch</span>().<span class="hljs-built_in">count</span>();<br><br><span class="hljs-comment">// 创建一个随机数生成器</span><br><span class="hljs-function">default_random_engine <span class="hljs-title">generator</span><span class="hljs-params">(seed)</span></span>;<br><br><span class="hljs-comment">// 创建一个均匀分布的随机数生成器，范围从1到100</span><br><span class="hljs-function">uniform_int_distribution&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">distribution</span><span class="hljs-params">(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>)</span></span>;<br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">distribution</span><span class="hljs-params">(generator)</span></span><br></code></pre></td></tr></table></figure><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;chrono&gt;</span></span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;生成随机数&quot;&gt;&lt;a href=&quot;#生成随机数&quot; class=&quot;headerlink&quot; title=&quot;生成随机数&quot;&gt;&lt;/a&gt;生成随机数&lt;/h1&gt;&lt;h2 id=&quot;源代码&quot;&gt;&lt;a href=&quot;#源代码&quot; class=&quot;headerlink&quot; title=&quot;源代码&quot;&gt;&lt;/</summary>
      
    
    
    
    <category term="C++" scheme="http://w1ndys.top/categories/C/"/>
    
    <category term="常用代码" scheme="http://w1ndys.top/categories/C/%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81/"/>
    
    
    <category term="C++" scheme="http://w1ndys.top/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>CTF-crypto&amp;misc常用解密工具</title>
    <link href="http://w1ndys.top/2023/10/04/CTF-tools-crypto/"/>
    <id>http://w1ndys.top/2023/10/04/CTF-tools-crypto/</id>
    <published>2023-10-04T14:53:18.529Z</published>
    <updated>2023-10-04T15:01:11.384Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="这个密码看着不太对, 再试试吧~或者线下solo博主试试。" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="7684f9864ebe95791363c6fbdf7d7acf30f726e0cda0220e76f37fb67820b03a">1a122d849dea0253b8c2e18440c0e53b93e7c2dc25016e4b4aa4af6362977a049ab3efeadcadc122b4d048d75cb41c45ded919fa1d8d722562510f4534abe850ba63f4f3818dd392590ce1e0a62b15d029fd00156d2f740870a6fc1a4ba6f08123e1beff080f3713c62cc9c4d16ed3a403d6c5f8d835e1334a37faf80676dbfb8c6ac8ff0d06ff8777ac37bd8d546485f0906e0ef450de082b7eaebffbf14b329a66e550391ed62f66d2a37e2179d26fed6d1b3eeba03316e3a9a45b0ff0487237035055a27ab8601a804784ca63a21ca0b78e9d003ad54985240652fcb8b68a9f357b3769df4864f3e075b0617c431211d866975afe5316e5730a325efc2a094307c0d8664709a70d6d99a12828d9a8b1fe2e12aa3eea3d6d6a9316d3d8805577daa7c90108686a684128c6ed9a0b2635f8f8a83100a5a264b839695dc33be4862daf8c1c0ec8221fec5dd68088c4eb393e184312ec785b41523887fb33936ebe8ecb6d076dadd11a68b481290893cb91f75f8bb74644ada8320d696af63da02481c347dd32cbb2f4426354955b9dd7121abb2ebc6b2668530debeb309792d84b9293b68f8ba33e2b58b76dba33abedcef7745f05ea2078d3d665f8e19e79d5d7619f728916dc5ea10a1880fd616c58dba5b4ec717ac0ddf694d69e14499bf4deb15ced04410481ca507576e4bc25da27d9472ca2ca619da211dcf51e16599c1748405d78fdc7a459f7187110b3f771fc495eb6c9d35e345e3aef0668b84abf43fa4a3bf4f93c635cb6105a2cbd5bfab5c9447b552b53de8e7b140b2b9b9f2e833b3c822227f883edaa4faaa0b10a68496eabd26bad2f5d343c0718a47801799f321a1abe2d34a43c5cbe5fdc702b000fd530f53bdbad31022b2c8bdc348be2e401895e900780c0fedd2b93e298ddf2006067912a277024aa593f9963568713122d0e5918f7e67fb3725ab19ac2342538d9980ae8b2605c22df29a5dd1283b2a80f8e4bd005bf0e6fbd00feff7ce7a0965950cfe009138675fe887417ed8dcb13ff40396053808c47ecbd08a56a134461f07d0a6aea987dd07f0c3d65a47f789ba9fa21f3f82ca6da6f214c3b7619e012305f9ab56ea9410158aa561dd62aac2469e0dcd562752d4234864b201d4818ac3ffe23e706b2ebb9de16ff31f4c84e7ee420d71a89f9b34f6dfb61496a8d7a3251f587ec3168758e727ad2dac6c3982347a98e5b9012c2f19310b4cb24ee7297c748bf67b781ebedd4ec3bf20f839ccf55c3fda305093eeed503f03b50199d66ca684bf43642db802c66d2ea1466e6716dec8759edcb10391116d6f68990a4b1a688d685d3ddcf088f5858778be3ea9e9bf71bf265d38ec5e6df01e0cb898b8594bab8df9824492ac393606de0a0ba66109239db087ce239c056143d464acf0ffec6b69e64506bcb098133eb842a922316853e45d3721ea88273caace72fa4b60ad4f90f4d69ae9f2d4206b9e6077d0a11d0b9e6c1e3628032e58a54c92065df4636f1b3528fe1d7357b21ec6ed2321801a5ba8caeccf61cafac9005a5c5ad4b41085228a6f4f22c12f6bdaafbc4dbb0129c24b46a847297648c90b26c9456a5f380bbbabff8fd0ff6012ee2bd9b39ad5c0ee1fa6b6d0742c3e0ab104754b660346cdba1a8714377941c68ea2698eaf8d556518851e9688f4b2876ccf6fcae776fb69a5f4030c1ad470d4f025b947d8910011b20ff4c0d04c3cc90cecb7fbcc22e07c48cca69f50bd8ba709aaaface2c989e18450d9cc4a99b0f10971d1589804a58d9fa4b4792885e236706e18f5b9db3182901747fd5a10c5d222f9f55e96a8193d02b8f02dc63c551d90c4198ce4deaa8ca851c363a93a6ce53b6759eb051d9414923ce9827d78985185b68a442526c5b60c1ab6d8c9b0e62029168a37db23ddd64ddc20f90673182a0805ed13d3db983fff777c776008f52419ce499eeac185ce8aa0f73b704768eaef6ebeffd98ca09ddb1adbf90ab782c84e54b479ed86f2be27da103081c9fc28afdf6c2698249d5400efb075a2dc9448710b2f9d1f6292cd5e68fe01dad4579c41c7d3c36ff1f16ade7441be524d99b853fcd940f488828958360c9cd3d4dd457b03cf8a74114c8efcf7424e0350e456c418c0b95d38a9a27e29ca5a65be5d7c92fb778de860d7a8497f86e859434cfd8096d2aeff392ff4a081c20c32aac64d340805fef5a2abededf09c8e375d99a4f8603563d32b9b4a2ff30644c5d657b40fc7d8955d45fa84e4b54b674d60c49dcb1d0e4901a8a2ad3d5fefe4826bf87d7ecc5070b3fe34be7839f3f0e74883414e2a77d207b1701daaeae5f9a9c8479f42516c625f3d711c959c51fd234f549c35f9c0e9e7ed178e0c2b1c177f69a9e497e66d7a8a588a0f84b86abb6a27cd31eed955afa9af72923b616517596f21ac8971fb13b258b88f62e0f85c7f7bff71ace0c05bcc6b3c1c8283313ac8d03e2b95fbaff7eb222a86aa5f6f011596fa18a8ea49cd9f2dcaafd74656058b4273ab31c2f727afb27d9d62e52ca4e98d314faf0e8deb18b909bf9e7f446eb15cf6549d51b7e3505290f1f0321af41e741234a0a3800b2c5013e82eaaff0729deff6cde0e7ef5784ec79bccf904778386dc1810229537de9d9fa9289f49ede75b2682307c9e76d03265138c2e16d4ab90630b6af0df49021cfd6a4c8cae347f38ab7eb581a496ad99a076b378d2f0ffd35e8d24c285886c6d309b412a08c4666ba8ab203180b4e2248cffdbd0446820bb26be9d6679a371fd1fa01ff94a9588d68c0a6b455c0fd4c7c17f542923ee6a4fdb0afff60ef033fda13f47d9fd464c95c8d87096d30716fc04eac7632785b96f62e691700060feb734ba40242c6f8aeb8a502996da1bb29fb0bc2ef7684702a296f6b06dcc04f752f4140b01216e2e85b2d3381cf35fb67c7624452d1f85ce3be39b90f4d4ad9976b1b90fa41355926798d9255ec6752f95cdaec13449bff85494504fed4984db98eead417408cbb0bf2ff3ace3c2ae654f1eb18ebf0cdcfe98defc3949c2fc261475a26042a77f334b3654175c74d38e3c01d1662bb8ec1da41896d9cc1f836eba4864e51ffdfac946b067ba572ac24d2bff911a743eff3a2b54251b081547334aae4f532d83d871019bae93b75ec2e8c08c039811f0582bca4194bca1d4dc97d6471a491206e450aa7776d4f2c446e8379644bddf8c026c319d12f496a2f2b17e412d6c0e531a66c264d25cfbc00e011470b9fe7144ae45b22a9024dc71fab5d71b60e00c1aa3d5fccb830afbb257cba8bda0073cee465cc7bd8b871a9d58a96e4482ab5c868891cf0ba182dfe30e142502d31eaca325595f7c5f8289e23753c1907a5a62b49948f199b7933fcd731b4302793a8bc01d072f202931999a3a15dcf12b86df6df71eebe7eb16ba9ad28f7431a24290cc55c9db2e9ff99e9ae7e821ca9c76b93eb7216849b72bcd0a5b290881e5203d0e6a795011d22597533d14d5ccc0b9ca01b1cf1452a75c4ed39072dfc1d62f4b0a7e4523450c40de339eeaa9637619932d09cde0c4d7f4930ba6d83b30f6a25cd340f59fabc38cd031b1d538425bb3f6d08789615cfcd22fcfa1ce5e3bcad2bf59330653b756cee5c60b729151516509f63be2bdd274bf7f2d61be3bc95bf3a94f9d31b5b70e05459b8e5b1d2373a44c5d3e1c8267ff38e1449abe7a9432893737221e3636f8d1442f08cbc900621fbab7961f5095d2a59e640e3a562675ff4392bdb0cd00f779f9f65c55ce55a7ec684aabf11573043ccce25734e8d4db55ee910662f8fa4b7b4268c9ff06941f2b862fbf0f21d9bd6b8c6b5749728a0da0d260fac432b9159202fccba26befaf38c33226f1a481373a324bf49cc84c674e0be23ac4ec211b9156781b7a274e4854ccaa86e7b5ff0acd53a7b5fc52d43a96c044fb9dd1705729b0811c639b8f0509647c4d8575ff847bbdc49fec5a7ab0324431d63646958029837012b32bbde0b776b9225ff4206b45b876c86290b40c537f4f320aa2691fc9b91a5a8e44db4b0dfe402d9852ccfaef89b568742820631c475ce37e66454b1ec57f1a0b0f823b345cb46e6986f1698991b7761ab269ba77a77e14148cd35f9f1070445b1e1488f4721909f76c106421ee6a6a8f80971484466042c9c8f9d5b74ca2250aac1396497f2a047766aeb9e07af9d01c6afd70110bd843e7edda28093e941c1f266cd21c367e4195bcc1f7944a9c5d9857626e559cbd6f8275b4d7f7eb4cb9826f42b1c3ecc19b5e4fa294f41d6913b43e06a4f4740a66bdaaf337261c4a2b4164d28bbb3a3431bfc2d441f4f5c010a1da64e91d7a36585290d6bd96334b080e3eaff8cfebd2a7e504ce87860520ec86a76c5209e96e1fe52a6b30aa4de3aca79dfb9b5dcdcc2a4355d6c2c096819fb8f4136386edf882385e79747eb9844003db858836f873fedfa81867cff99acd75b45a89d5fe73b5b477ad84576482064883c6b4fb87121618d419f7cfa48280c1769d2f0fb23a81efbfff43f3b4fa14b6432933040cbbf0cb8888ec1cd251d8dcd5e0e247c829c15dee94dbae4d170837f1278b6e5b1aec2eb20666a7ea94933c5b11a06f77aa17dc84eb5a8914664c7ee17b247f7f232b67191e251540046891d05f724ac2f66c930e98c54572fa85f2aec25174b01c0f308fd35300fffcf3022b5ea2748b14771b175d953bedbd28bceedb9957b83b1f7dc92ead6fec9908c9ce6c51febf4f2e2544b22072f506665639264b1bb2354174a0495d3167b5272ac3932262783ad8382cd7c18f9126c7e85a83a10fd8a12e9e508d850fb8cdeb8d6c8636ec2eed2eeff5fb6fd3bec7a5402b433b720216bc71475a13dcfd8e2b1af72fbbb58f790a9261cc3d6ee17f7904ac821390d9c2e8dcec0222c01571a7d5609089e47a84f9ea4291b482c72656bb3d67f29e28c17d4877aad86d701d3e4d5bb505e65ba9df46ebe76ab976d928ba14ed56a77d5733b1d3e6cfba8a02b1e3d5ff457dfd81b872f5665412de8fafd1b55c765a6963123b50ae6e6987f93b53ff0a4a806c81fc3434cdf18f9edba6a2542c7d358a321b0c1ae02cf6f87868befc5e771123451cd71dfbdaaf5f61862231859bac5a57332dcc72c206d4a1fad4d509d2346d560a75cffe68c3fce832ef2bf7698be56cd3e8c6f444ea5de93f2a712622ab3bfd906fff9f862a50b35478ed2b5d8c6efee882926938c78255819d251b1b21abaf9f090d2f2e629c5fd478fe475df7abd0127364bb39d057dd89159007d9cd6369214d8a68e5c0a1e27e0e0e0a9145e8b089b1fcf82852c3c6ed3a1c29015ca6e169ca4b2ef39e059e96c6874135122bd33b805ca033bfe67dd61a11a2ac345b5aed88a3d7a9b36879ef0e6ee83514cf457eea36640b6829675082c8e6e7dccb9488d4d2e86ca5c20b334c2480a4cdb44e56a0bf7af20d5360300f851e2a824857412e76d9a4677827e65aad7260c9bedbe999e98cbbe60a4ea719c9be56a037913026168cd89af5b5b7d5826efb613dfeaa592d61197c67a38a5f00760de094d256f6a7216016180d9284369f4fbb3a89b64d64bf1569351d2ba15c64f5362094802566cb342bf04969dec2841fad6b5a588b76baa07c8286719c2fb7ecd52da7f4bd77aa448efc5c28cb210f466985010d6dd02f1541358db538c24fbab35870717301dcda09ad5699916e10f3b42af009f9fa5b18e7cd5306650cfecb343a9c94eb498a2c1a8d4f3e62aae28df7812dd86ba4b25d600fdb5d1730b37b375a204a72c3b7afa0dd756b92b414224a694e988bd199824bc8cebe294e222f60c22e5dd2244beeda377b8004d1cb594a5936966952c2807ce95f7b0590eae3d432f744f928f01a5629891570f4e6f92465732967181ee8b82d4e02ebf4d80e844d7eb218720377e75b39600b6f87c6524cb2754eabec6976ed2776056086ce326b2c4b3a14227c077604c6d</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">你好，请输入这篇文章的密码！锵锵！可莉登场！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">这篇文章被加密了喵~W1ndys不想让你看见里面的内容。</summary>
    
    
    
    <category term="CTF" scheme="http://w1ndys.top/categories/CTF/"/>
    
    <category term="工具" scheme="http://w1ndys.top/categories/CTF/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="CTF" scheme="http://w1ndys.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>CTF密码学常见密码形式</title>
    <link href="http://w1ndys.top/2023/10/04/CTF-crypto/"/>
    <id>http://w1ndys.top/2023/10/04/CTF-crypto/</id>
    <published>2023-10-04T13:01:44.739Z</published>
    <updated>2023-10-04T15:33:47.995Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="这个密码看着不太对, 再试试吧~或者线下solo博主试试。" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="0d1670c4c0382b785d96ccb7836f9944648b8b2d93980ade23db822a3ecb705d"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">你好，请输入这篇文章的密码！锵锵！可莉登场！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">这篇文章被加密了喵~W1ndys不想让你看见里面的内容。</summary>
    
    
    
    <category term="CTF" scheme="http://w1ndys.top/categories/CTF/"/>
    
    <category term="密码学" scheme="http://w1ndys.top/categories/CTF/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    
    <category term="CTF" scheme="http://w1ndys.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>实验一、顺序存储结构线性表的建立及操作</title>
    <link href="http://w1ndys.top/2023/10/04/DS-test1/"/>
    <id>http://w1ndys.top/2023/10/04/DS-test1/</id>
    <published>2023-10-04T12:37:45.329Z</published>
    <updated>2023-10-04T14:37:06.510Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cyberdownload.anrunlu.net/Fis_1Y1PQhtSsV6Vv8uzbswmKvrW" srcset="/img/loading.gif" lazyload></p><h1 id="代码主体"><a href="#代码主体" class="headerlink" title="代码主体"></a>代码主体</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-type">long</span> num;<br>    <span class="hljs-type">char</span> name[<span class="hljs-number">10</span>];<br>    <span class="hljs-type">float</span> score;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ScoreList</span> &#123;<br><span class="hljs-keyword">private</span>:<br>    Student data[<span class="hljs-number">100</span>];<br>    <span class="hljs-type">int</span> length;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">ScoreList</span>() &#123;<br>        length = <span class="hljs-number">5</span>;<br>        data[<span class="hljs-number">0</span>] = &#123; <span class="hljs-number">1001</span>, <span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">85</span> &#125;;<br>        data[<span class="hljs-number">1</span>] = &#123; <span class="hljs-number">1002</span>, <span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-number">90</span> &#125;;<br>        data[<span class="hljs-number">2</span>] = &#123; <span class="hljs-number">1003</span>, <span class="hljs-string">&quot;王五&quot;</span>, <span class="hljs-number">80</span> &#125;;<br>        data[<span class="hljs-number">3</span>] = &#123; <span class="hljs-number">1004</span>, <span class="hljs-string">&quot;赵六&quot;</span>, <span class="hljs-number">95</span> &#125;;<br>        data[<span class="hljs-number">4</span>] = &#123; <span class="hljs-number">1005</span>, <span class="hljs-string">&quot;孙七&quot;</span>, <span class="hljs-number">88</span> &#125;;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">del</span><span class="hljs-params">(<span class="hljs-type">long</span> num)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (data[i].num == num) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i; j &lt; length - <span class="hljs-number">1</span>; j++) &#123;<br>                    data[j] = data[j + <span class="hljs-number">1</span>];<br>                &#125;<br>                length--;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(Student stu)</span> </span>&#123;<br>        <span class="hljs-type">int</span> pos = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (pos &lt; length &amp;&amp; data[pos].score &gt; stu.score) pos++;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = length; i &gt; pos; i--) &#123;<br>            data[i] = data[i - <span class="hljs-number">1</span>];<br>        &#125;<br>        data[pos] = stu;<br>        length++;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">output</span><span class="hljs-params">()</span> </span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;学号\t姓名\t分数&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br>            cout &lt;&lt; data[i].num &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span> &lt;&lt; data[i].name &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span> &lt;&lt; data[i].score &lt;&lt; endl;<br>        &#125;<br>    &#125;<br><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">long</span> a;<br>    <span class="hljs-type">char</span> b[<span class="hljs-number">10</span>];<br>    <span class="hljs-type">float</span> c;<br>    ScoreList list;<br>    list.<span class="hljs-built_in">output</span>();<br>    cout &lt;&lt; <span class="hljs-string">&quot;删除一个学生，请输入学生学号&quot;</span> &lt;&lt; endl;<br>    cin &gt;&gt; a;<br>    list.<span class="hljs-built_in">del</span>(a);<br>    list.<span class="hljs-built_in">output</span>();<br>    cout &lt;&lt; <span class="hljs-string">&quot;插入一个新学生（学号 姓名 分数 ）用空格隔开&quot;</span> &lt;&lt; endl;<br>    cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;<br>    Student newStu = &#123; a, <span class="hljs-string">&quot;&quot;</span>, c &#125;;<br>    <span class="hljs-built_in">strcpy_s</span>(newStu.name, b); <span class="hljs-comment">// 使用 strcpy 函数复制字符串</span><br>    list.<span class="hljs-built_in">insert</span>(newStu);<br>    list.<span class="hljs-built_in">output</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://cyberdownload.anrunlu.net/Fis_1Y1PQhtSsV6Vv8uzbswmKvrW&quot; srcset=&quot;/img/loading.gif&quot; lazyload&gt;&lt;/p&gt;
&lt;h1 id=&quot;代码主体&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://w1ndys.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="数据结构作业" scheme="http://w1ndys.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%9C%E4%B8%9A/"/>
    
    <category term="实验" scheme="http://w1ndys.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%9C%E4%B8%9A/%E5%AE%9E%E9%AA%8C/"/>
    
    
    <category term="数据结构" scheme="http://w1ndys.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>DS作业-4-Ch3-22网安物联网-20230927</title>
    <link href="http://w1ndys.top/2023/10/04/DS-homework-4-Ch3-22wanganwulian-20230927/"/>
    <id>http://w1ndys.top/2023/10/04/DS-homework-4-Ch3-22wanganwulian-20230927/</id>
    <published>2023-10-04T09:58:53.070Z</published>
    <updated>2023-10-05T08:59:54.104Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ch3-1-总结栈空、栈满、队空、队满的判定条件。"><a href="#Ch3-1-总结栈空、栈满、队空、队满的判定条件。" class="headerlink" title="Ch3-1. 总结栈空、栈满、队空、队满的判定条件。"></a>Ch3-1. 总结栈空、栈满、队空、队满的判定条件。</h1><p>栈和队列是两种常见的数据结构，它们的空和满的判断条件如下：</p><p><strong>栈</strong>：</p><ul><li><strong>栈空</strong>：当栈顶指针<code>top</code>等于-1时，表示栈为空。</li><li><strong>栈满</strong>：当栈顶指针<code>top</code>等于栈的最大容量减1（假设栈的最大容量为<code>maxSize</code>）时，表示栈已满，即<code>top == maxSize - 1</code>。</li></ul><p><strong>队列</strong>：</p><ul><li><strong>队空</strong>：当队头指针<code>front</code>等于队尾指针<code>rear</code>时，表示队列为空。</li><li><strong>队满</strong>：这个判断条件取决于你如何实现队列。如果你使用数组实现循环队列，那么当<code>(rear + 1) % maxSize == front</code>时，表示队列已满（假设队列的最大容量为<code>maxSize</code>）。这里的 <code>%</code> 是取余运算，用于实现循环。</li></ul><h1 id="Ch3-2-循环队列的优点是什么？设用数组来存放循环队列，你有几种判断队满和队空的方案？"><a href="#Ch3-2-循环队列的优点是什么？设用数组来存放循环队列，你有几种判断队满和队空的方案？" class="headerlink" title="Ch3-2. 循环队列的优点是什么？设用数组来存放循环队列，你有几种判断队满和队空的方案？"></a>Ch3-2. 循环队列的优点是什么？设用数组来存放循环队列，你有几种判断队满和队空的方案？</h1><p><strong>循环队列</strong>的优点主要有以下几点：</p><ol><li><strong>有效利用空间</strong>：在普通队列中，当队尾指针到达数组的末端时，即使数组的前端还有空闲空间，也无法再添加新的元素。而循环队列通过将队列的首尾相连，形成一个循环，使得在队尾指针到达数组末端时，可以从数组前端继续添加新的元素，从而更有效地利用了空间。</li><li><strong>避免数据迁移</strong>：在普通队列中，每次出队操作后，为了维持队列的连续性，需要将所有元素向前移动一位，这会消耗大量的时间和计算资源。而在循环队列中，通过移动队头和队尾指针来实现入队和出队操作，无需移动元素本身，因此效率更高。</li></ol><p>对于使用数组实现的循环队列，常见的判断队满和队空的方案有以下几种：</p><ol><li><strong>牺牲一个存储空间</strong>：这是最常见的方法。当<code>(rear + 1) % maxSize == front</code>时，判断队列已满；当<code>rear == front</code>时，判断队列为空。这种方法的缺点是会浪费一个数组的存储空间。</li><li><strong>使用一个标志位</strong>：除了使用<code>front</code>和<code>rear</code>两个指针外，还可以额外使用一个标志位来判断队列的状态。当入队操作后<code>rear == front</code>时，将标志位设为满；当出队操作后<code>rear == front</code>时，将标志位设为空。这种方法可以充分利用所有存储空间，但需要额外的标志位。</li><li><strong>记录元素个数</strong>：除了使用<code>front</code>和<code>rear</code>两个指针外，还可以使用一个计数器来记录队列中元素的个数。当计数器为0时，判断队列为空；当计数器等于数组大小时，判断队列已满。这种方法同样可以充分利用所有存储空间，但需要额外的计数器。</li></ol><h1 id="Ch3-3-假设以带头结点的循环单链表表示队列，并且只设一个尾指针Node-Rear-指向队尾结点（没有队头指针Node-front），试编写入队和出队算法。"><a href="#Ch3-3-假设以带头结点的循环单链表表示队列，并且只设一个尾指针Node-Rear-指向队尾结点（没有队头指针Node-front），试编写入队和出队算法。" class="headerlink" title="Ch3-3. 假设以带头结点的循环单链表表示队列，并且只设一个尾指针Node*Rear 指向队尾结点（没有队头指针Node *front），试编写入队和出队算法。"></a>Ch3-3. 假设以带头结点的循环单链表表示队列，并且只设一个尾指针Node*Rear 指向队尾结点（没有队头指针Node *front），试编写入队和出队算法。</h1><blockquote><p>AI生成的，不想做了，谨慎查阅</p></blockquote><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs xl">#include &lt;stdio.h&gt;<br>#include &lt;stdlib.h&gt;<br><br><span class="hljs-comment">// 定义结点</span><br>typedef struct Node &#123;<br>    int <span class="hljs-keyword">data</span>;<br>    struct Node* next;<br>&#125; Node;<br><br><span class="hljs-comment">// 定义队列</span><br>typedef struct Queue &#123;<br>    Node* rear;<br>&#125; Queue;<br><br><span class="hljs-comment">// 初始化队列</span><br>Queue* initQueue() &#123;<br>    Node* head = (Node*)malloc(sizeof(Node));  <span class="hljs-comment">// 创建头结点</span><br>    <span class="hljs-function"><span class="hljs-title">head</span>-&gt;</span>next = head;  <span class="hljs-comment">// 循环链表</span><br>    Queue* queue = (Queue*)malloc(sizeof(Queue));<br>    <span class="hljs-function"><span class="hljs-title">queue</span>-&gt;</span>rear = head;  <span class="hljs-comment">// 尾指针指向头结点</span><br>    return queue;<br>&#125;<br><br><span class="hljs-comment">// 入队操作</span><br>void enQueue(Queue* queue, int <span class="hljs-keyword">data</span>) &#123;<br>    Node* newNode = (Node*)malloc(sizeof(Node));<br>    <span class="hljs-function"><span class="hljs-title">newNode</span>-&gt;</span><span class="hljs-keyword">data</span> = <span class="hljs-keyword">data</span>;<br>    <span class="hljs-function"><span class="hljs-title">newNode</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">next</span> = queue-&gt;</span><span class="hljs-function"><span class="hljs-title">rear</span>-&gt;</span>next;  <span class="hljs-comment">// 新结点指向头结点</span><br>    <span class="hljs-function"><span class="hljs-title">queue</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">rear</span>-&gt;</span>next = newNode;  <span class="hljs-comment">// 尾结点指向新结点</span><br>    <span class="hljs-function"><span class="hljs-title">queue</span>-&gt;</span>rear = newNode;  <span class="hljs-comment">// 更新尾指针</span><br>&#125;<br><br><span class="hljs-comment">// 出队操作</span><br>int deQueue(Queue* queue) &#123;<br>    <span class="hljs-function"><span class="hljs-title">if</span> (queue-&gt;</span><span class="hljs-function"><span class="hljs-title">rear</span> == queue-&gt;</span><span class="hljs-function"><span class="hljs-title">rear</span>-&gt;</span>next) &#123;<br>        printf(<span class="hljs-string">&quot;队列为空，无法出队。\n&quot;</span>);<br>        return -<span class="hljs-number">1</span>;<br>    &#125;<br>    N<span class="hljs-function"><span class="hljs-title">ode</span>* head = queue-&gt;</span><span class="hljs-function"><span class="hljs-title">rear</span>-&gt;</span>next;  <span class="hljs-comment">// 头结点</span><br>    N<span class="hljs-function"><span class="hljs-title">ode</span>* firstNode = head-&gt;</span>next;  <span class="hljs-comment">// 第一个结点（即要出队的结点）</span><br>    <span class="hljs-function"><span class="hljs-title">int</span> <span class="hljs-keyword">data</span> = firstNode-&gt;</span><span class="hljs-keyword">data</span>;<br>    <span class="hljs-function"><span class="hljs-title">head</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">next</span> = firstNode-&gt;</span>next;  <span class="hljs-comment">// 头结点指向第二个结点</span><br>    <span class="hljs-function"><span class="hljs-title">if</span> (firstNode == queue-&gt;</span>rear) &#123;  <span class="hljs-comment">// 如果只有一个元素，出队后更新尾指针</span><br>        <span class="hljs-function"><span class="hljs-title">queue</span>-&gt;</span>rear = head;<br>    &#125;<br>    free(firstNode);  <span class="hljs-comment">// 释放出队的结点内存</span><br>    return <span class="hljs-keyword">data</span>;<br>&#125;<br><br>int main() &#123;<br>    Queue* queue = initQueue();<br>    <br><br>    printf(<span class="hljs-string">&quot;入队：\n&quot;</span>);<br>    <span class="hljs-keyword">for</span> (int i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;<br>        printf(<span class="hljs-string">&quot;%d &quot;</span>, i);<br>        enQueue(queue, i);<br>    &#125;<br>    <br>    printf(<span class="hljs-string">&quot;\n出队：\n&quot;</span>);<br>    <span class="hljs-keyword">for</span> (int i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;<br>        printf(<span class="hljs-string">&quot;%d &quot;</span>, deQueue(queue));<br>    &#125;<br>    <br>    return <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Ch3-1-总结栈空、栈满、队空、队满的判定条件。&quot;&gt;&lt;a href=&quot;#Ch3-1-总结栈空、栈满、队空、队满的判定条件。&quot; class=&quot;headerlink&quot; title=&quot;Ch3-1. 总结栈空、栈满、队空、队满的判定条件。&quot;&gt;&lt;/a&gt;Ch3-1. 总结栈</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://w1ndys.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="数据结构作业" scheme="http://w1ndys.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%9C%E4%B8%9A/"/>
    
    
    <category term="数据结构" scheme="http://w1ndys.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>DS作业-3-Ch2-22网安物联网-20230927</title>
    <link href="http://w1ndys.top/2023/10/04/DS-homework-3-Ch2-22wanganwulian-20230927/"/>
    <id>http://w1ndys.top/2023/10/04/DS-homework-3-Ch2-22wanganwulian-20230927/</id>
    <published>2023-10-04T08:40:10.106Z</published>
    <updated>2023-10-05T08:49:45.581Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>已完结，仅供留档查阅，切勿直接复制</p></blockquote><h1 id="作业Ch2-1-总结单链表中引入头节点的原因？"><a href="#作业Ch2-1-总结单链表中引入头节点的原因？" class="headerlink" title="作业Ch2-1:总结单链表中引入头节点的原因？"></a>作业Ch2-1:总结单链表中引入头节点的原因？</h1><p>为了使操作方便，加了头结点之后，无论单链表是否为空，头指针始终指向头节点，因此空表和非空表的处理也统一了</p><h1 id="作业Ch2-2-编程题目，逆置一个单链表为一个新表，编制源代码并运行。"><a href="#作业Ch2-2-编程题目，逆置一个单链表为一个新表，编制源代码并运行。" class="headerlink" title="作业Ch2-2:编程题目，逆置一个单链表为一个新表，编制源代码并运行。"></a>作业Ch2-2:编程题目，逆置一个单链表为一个新表，编制源代码并运行。</h1><blockquote><p>没用ai跑，自己写的，实际上原理就是头插法和尾插法，两个方法的顺序是相反的</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span><br>&#123;<br>    DataType data;<br>    Node&lt;DataType&gt;* next;<br>&#125;;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">linklist</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">linklist</span>();<br><span class="hljs-built_in">linklist</span>(DataType a[],<span class="hljs-type">int</span> n);<br>~<span class="hljs-built_in">linklist</span>();<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">nizhi</span><span class="hljs-params">(DataType a[], <span class="hljs-type">int</span> m)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span></span>;<br><span class="hljs-keyword">private</span>:<br>Node&lt;DataType&gt;* first;<span class="hljs-comment">//头结点</span><br>&#125;;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> DataType&gt;<br>linklist&lt;DataType&gt;::<span class="hljs-built_in">linklist</span>()<br>&#123;<br>first = <span class="hljs-keyword">new</span> Node&lt;DataType&gt;;<br>first-&gt;next = <span class="hljs-literal">nullptr</span>;<span class="hljs-comment">//头结点指针置空</span><br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br>linklist&lt;DataType&gt;::<span class="hljs-built_in">linklist</span>(DataType a[], <span class="hljs-type">int</span> n)<br>&#123;<br>first = <span class="hljs-keyword">new</span> Node&lt;DataType&gt;;              <span class="hljs-comment">// 生成头结点</span><br>Node&lt;DataType&gt;* r = first, * s = <span class="hljs-literal">nullptr</span>; <span class="hljs-comment">// 尾指针初始化</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>&#123;<br>s = <span class="hljs-keyword">new</span> Node&lt;DataType&gt;;<br>s-&gt;data = a[i];<br>r-&gt;next = s;<br>r = s; <span class="hljs-comment">// 将结点s插入到终端结点之后</span><br>&#125;<br>r-&gt;next = <span class="hljs-literal">nullptr</span>; <span class="hljs-comment">// 单链表建立完毕，将终端结点的指针域置空</span><br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-type">void</span> linklist&lt;DataType&gt;::<span class="hljs-built_in">nizhi</span>(DataType a[], <span class="hljs-type">int</span> n)<br>&#123;<br>first = <span class="hljs-keyword">new</span> Node&lt;DataType&gt;;<br>first-&gt;next = <span class="hljs-literal">nullptr</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>&#123;<br>Node&lt;DataType&gt;* s = <span class="hljs-literal">nullptr</span>;<br>s = <span class="hljs-keyword">new</span> Node&lt;DataType&gt;;<br>s-&gt;data = a[i];<br>s-&gt;next = first-&gt;next;<br>first-&gt;next = s;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-type">void</span> linklist&lt;DataType&gt;::<span class="hljs-built_in">display</span>()<br>&#123;<br>Node&lt;DataType&gt;* p = first-&gt;next;<br><span class="hljs-keyword">while</span> (p != <span class="hljs-literal">nullptr</span>)<br>&#123;<br>cout &lt;&lt; p-&gt;data &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span>;<br>p = p-&gt;next;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">DataType</span>&gt;<br>linklist&lt;DataType&gt;::~<span class="hljs-built_in">linklist</span>()<br>&#123;<br>Node&lt;DataType&gt;* q = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">while</span> (first != <span class="hljs-literal">NULL</span>) <span class="hljs-comment">// 释放单链表的每一个结点的存储空间</span><br>&#123;<br>q = first;           <span class="hljs-comment">// 暂存被释放结点</span><br>first = first-&gt;next; <span class="hljs-comment">// first指向被释放结点的下一个结点</span><br><span class="hljs-keyword">delete</span> q;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> maxsize;<br>cout &lt;&lt; <span class="hljs-string">&quot;请输入你要创建数组的大小&quot;</span> &lt;&lt; endl;<br>cin &gt;&gt; maxsize;<br><span class="hljs-type">int</span>* a = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[maxsize];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; maxsize; i++)<br>&#123;<br>a[i] = i + <span class="hljs-number">1</span>;<br>cout &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; endl;<br>&#125;<br>cout &lt;&lt; <span class="hljs-string">&quot;已创建一个最大长度&quot;</span> &lt;&lt; maxsize &lt;&lt; <span class="hljs-string">&quot;的链表&quot;</span> &lt;&lt; endl;<br>linklist&lt;<span class="hljs-type">int</span>&gt; L&#123; a, maxsize &#125;;<br>cout &lt;&lt; <span class="hljs-string">&quot;执行遍历链表&quot;</span> &lt;&lt; endl;<br>L.<span class="hljs-built_in">display</span>();<br>cout &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;下面逆置最大长度为&quot;</span> &lt;&lt; maxsize &lt;&lt; <span class="hljs-string">&quot;的链表&quot;</span> &lt;&lt; endl;<br>L.<span class="hljs-built_in">nizhi</span>(a, maxsize);<br>L.<span class="hljs-built_in">display</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="作业Ch2-3-教材P66-2-1-题：请说明顺序表和单链表有何优缺点？并分析不同情况下采用何种存储结构更合适？"><a href="#作业Ch2-3-教材P66-2-1-题：请说明顺序表和单链表有何优缺点？并分析不同情况下采用何种存储结构更合适？" class="headerlink" title="作业Ch2-3:教材P66, 2(1)题：请说明顺序表和单链表有何优缺点？并分析不同情况下采用何种存储结构更合适？"></a>作业Ch2-3:教材P66, 2(1)题：请说明顺序表和单链表有何优缺点？并分析不同情况下采用何种存储结构更合适？</h1><p>顺序表的优点:① 无需为表示表中元素之间的逻辑关系而增加额外的存储空间;② 可以快速地存取表中任一位置的元素(即随机存取)。</p><p>顺序表的缺点:① 插入和删除操作需移动大量元素;② 表的容量难以确定;③ 造成存储空间的“碎片”。</p><p>单链表的优点:① 不必事先知道线性表的长度;② 插入和删除元素时只需修改指针,不用移动元素。</p><p>单链表的缺点:① 指针的结构性开销;② 存取表中任意元素不方便,只能进行顺序存取。</p><p>⑴ 应选用顺序存储结构。因为顺序表是随机存取结构,单链表是顺序存取结构。本题很少进行插入和删除操作,所以空间变化不大,且需要快速存取,所以应选用顺序存储结构。</p><p>⑵ 应选用链接存储结构。链表容易实现表容量的扩充,适合表的长度动态发生变化。⑶ 应选用链接存储结构。因为一个城市的设计和规划涉及活动很多,需要经常修改、扩充和删除各种信息, 才能适应不断发展的需要。而顺序表的插入、删除的效率低,故不合适。</p><h1 id="作业Ch2-4-算法设计：在顺序表中删除所有元素值为x的元素，要求空间复杂度为O-1-，给出算法伪代码和源代码。"><a href="#作业Ch2-4-算法设计：在顺序表中删除所有元素值为x的元素，要求空间复杂度为O-1-，给出算法伪代码和源代码。" class="headerlink" title="作业Ch2-4:算法设计：在顺序表中删除所有元素值为x的元素，要求空间复杂度为O(1)，给出算法伪代码和源代码。"></a>作业Ch2-4:算法设计：在顺序表中删除所有元素值为x的元素，要求空间复杂度为O(1)，给出算法伪代码和源代码。</h1><blockquote><p>ai加自己写的，有两个方法，第一个方法比较好一些</p></blockquote><h2 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h2><h3 id="法一"><a href="#法一" class="headerlink" title="法一"></a>法一</h3><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs haskell">输入：顺序表<span class="hljs-class"><span class="hljs-keyword">data</span>，元素x</span><br>输出：删除所有值为x的元素后的顺序表<br><br><span class="hljs-number">1</span>. 初始化一个新的索引j为<span class="hljs-number">0</span><br><span class="hljs-number">2</span>. 对于顺序表<span class="hljs-class"><span class="hljs-keyword">data</span>中的每个元素，执行以下操作：</span><br>   <span class="hljs-number">1</span>. 如果当前元素不等于x，则将当前元素复制到j位置，并将j增加<span class="hljs-number">1</span><br><span class="hljs-number">3</span>. 将顺序表<span class="hljs-class"><span class="hljs-keyword">data</span>的长度设置为j</span><br></code></pre></td></tr></table></figure><h3 id="法二"><a href="#法二" class="headerlink" title="法二"></a>法二</h3><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs haskell">输入：顺序表<span class="hljs-class"><span class="hljs-keyword">data</span>，元素x</span><br>输出：删除所有值为x的元素后的顺序表<br><br><span class="hljs-number">1</span>. 对于顺序表<span class="hljs-class"><span class="hljs-keyword">data</span>中的每个元素，执行以下操作：</span><br>   <span class="hljs-number">1</span>. 如果当前元素等于x，则执行以下操作：<br>      <span class="hljs-number">1</span>. 对于从当前元素到倒数第二个元素的每个元素，将下一个元素复制到当前位置<br>      <span class="hljs-number">2</span>. 将顺序表<span class="hljs-class"><span class="hljs-keyword">data</span>的长度减1</span><br>      <span class="hljs-number">3</span>. 将当前索引减<span class="hljs-number">1</span>（因为删除了元素）<br></code></pre></td></tr></table></figure><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;random&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;chrono&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MaxSize = <span class="hljs-number">100</span>;            <span class="hljs-comment">//100只是示例性的数据，根据实际问题具体定义</span><br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">DataType</span>&gt;          <span class="hljs-comment">//定义模板类SeqList</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SeqList</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">SeqList</span>();                     <span class="hljs-comment">//无参构造函数，建立空的顺序表</span><br>    <span class="hljs-built_in">SeqList</span>(DataType a[], <span class="hljs-type">int</span> n);      <span class="hljs-comment">//有参构造函数，建立长度为n的顺序表</span><br>    ~<span class="hljs-built_in">SeqList</span>();                    <span class="hljs-comment">//析构函数</span><br>    <span class="hljs-function">DataType <span class="hljs-title">Delete</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span></span>;            <span class="hljs-comment">//删除操作，删除第i个元素</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PrintList</span><span class="hljs-params">()</span></span>;                 <span class="hljs-comment">//遍历操作，按序号依次输出各元素</span><br><span class="hljs-keyword">private</span>:<br>    DataType data[MaxSize];          <span class="hljs-comment">//存放数据元素的数组</span><br>    <span class="hljs-type">int</span> length;                       <span class="hljs-comment">//线性表的长度</span><br>&#125;;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">DataType</span>&gt;<br>DataType SeqList&lt;DataType&gt; ::<span class="hljs-built_in">Delete</span>(<span class="hljs-type">int</span> x)<br>&#123;   <span class="hljs-comment">/*这段代码遍历顺序表，每次遇到值不等于x的元素时，就将其复制到新的位置。最后，它将顺序表的长度设置为新的长度。这个算法的空间复杂度是O(1)，因为它只使用了固定数量的额外空间。*/</span><br>    <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; length; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (data[i] != x)<br>        &#123;<br>            data[j] = data[i];<br>            j++;<br>        &#125;<br>        <br>    &#125;<br>    length = j;<br>    <span class="hljs-keyword">return</span> x;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    这个有两种做法，还有一种是直接删除。每次遇到值为x的元素时，就将其删除。但是，这种方法的时间复杂度是O(n^2)，因为每次删除操作都需要O(n)的时间。</span><br><span class="hljs-comment">    for (int i = 0; i &lt; length; i++)</span><br><span class="hljs-comment">    &#123;</span><br><span class="hljs-comment">        if (data[i] == x)</span><br><span class="hljs-comment">        &#123;</span><br><span class="hljs-comment">            for (int j = i; j &lt; length - 1; j++)</span><br><span class="hljs-comment">            &#123;</span><br><span class="hljs-comment">                data[j] = data[j + 1];</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">            length--;</span><br><span class="hljs-comment">            i--;  // 因为删除了元素，所以需要将索引减1</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">    &#125;*/</span><br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">DataType</span>&gt;<br>SeqList&lt;DataType&gt; :: ~<span class="hljs-built_in">SeqList</span>()<br>&#123;<br><br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">DataType</span>&gt;<br>SeqList&lt;DataType&gt; ::<span class="hljs-built_in">SeqList</span>()<br>&#123;<br>    length = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">DataType</span>&gt;<br>SeqList&lt;DataType&gt; ::<span class="hljs-built_in">SeqList</span>(DataType a[], <span class="hljs-type">int</span> n)<br>&#123;<br>    <span class="hljs-keyword">if</span> (n &gt; MaxSize)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-string">&quot;参数非法&quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        data[i] = a[i];<br>    length = n;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">DataType</span>&gt;<br><span class="hljs-type">void</span> SeqList&lt;DataType&gt; ::<span class="hljs-built_in">PrintList</span>()<br>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; length; i++)<br>        cout &lt;&lt; data[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;                   <span class="hljs-comment">//依次输出线性表的元素值</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 使用当前时间作为随机数生成器的种子</span><br>    <span class="hljs-type">unsigned</span> seed = chrono::system_clock::<span class="hljs-built_in">now</span>().<span class="hljs-built_in">time_since_epoch</span>().<span class="hljs-built_in">count</span>();<br>    <span class="hljs-comment">// 创建一个随机数生成器</span><br>    <span class="hljs-function">default_random_engine <span class="hljs-title">generator</span><span class="hljs-params">(seed)</span></span>;<br>    <span class="hljs-comment">// 创建一个均匀分布的随机数生成器，范围从1到100</span><br>    <span class="hljs-function">uniform_int_distribution&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">distribution</span><span class="hljs-params">(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>)</span></span>;<br>    <span class="hljs-type">int</span> maxsize;<br>    cout &lt;&lt; <span class="hljs-string">&quot;请输入你要创建表的大小&quot;</span> &lt;&lt; endl;<br>    cin &gt;&gt; maxsize;<br>    <span class="hljs-type">int</span>* a = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[maxsize];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; maxsize; i++)<br>    &#123;<br>        a[i] = <span class="hljs-built_in">distribution</span>(generator);<span class="hljs-comment">//赋值</span><br>    &#125;<br>    cout &lt;&lt; <span class="hljs-string">&quot;已创建一个最大长度&quot;</span> &lt;&lt; maxsize &lt;&lt; <span class="hljs-string">&quot;的顺序表&quot;</span> &lt;&lt; endl;<br>    SeqList&lt;<span class="hljs-type">int</span>&gt; L&#123; a, maxsize &#125;;<br>    cout &lt;&lt; <span class="hljs-string">&quot;*******执行遍历链表******&quot;</span> &lt;&lt; endl;<br>    L.<span class="hljs-built_in">PrintList</span>();<br>    cout &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;**************************&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;请输入你要删除的数据&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-type">int</span> del;<br>    cin &gt;&gt; del;<br>    cout &lt;&lt; <span class="hljs-string">&quot;删除的数据是&quot;</span> &lt;&lt; L.<span class="hljs-built_in">Delete</span>(del) &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;*******执行遍历链表******&quot;</span> &lt;&lt; endl;<br>    L.<span class="hljs-built_in">PrintList</span>();<br>    cout &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;**************************&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="作业Ch2-5-算法设计：已知单链表中各结点的元素值为整型且递增有序，设计算法删除链表中大于mink且小于maxk的所有元素，并释放被删结点的存储空间，给出算法伪代码和源代码。"><a href="#作业Ch2-5-算法设计：已知单链表中各结点的元素值为整型且递增有序，设计算法删除链表中大于mink且小于maxk的所有元素，并释放被删结点的存储空间，给出算法伪代码和源代码。" class="headerlink" title="作业Ch2-5:算法设计：已知单链表中各结点的元素值为整型且递增有序，设计算法删除链表中大于mink且小于maxk的所有元素，并释放被删结点的存储空间，给出算法伪代码和源代码。"></a>作业Ch2-5:算法设计：已知单链表中各结点的元素值为整型且递增有序，设计算法删除链表中大于mink且小于maxk的所有元素，并释放被删结点的存储空间，给出算法伪代码和源代码。</h1><blockquote><p>这个也是借助ai加自己写的，就加了一个条件判断，另外还需要加强一下头插法尾插法的算法，不熟练</p></blockquote><h2 id="伪代码-1"><a href="#伪代码-1" class="headerlink" title="伪代码"></a>伪代码</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-number">1</span>. 定义一个模板函数Delete，接受两个参数mink和maxk。<br><span class="hljs-number">2</span>. 初始化两个指针<span class="hljs-selector-tag">p</span>和<span class="hljs-selector-tag">q</span>，其中<span class="hljs-selector-tag">p</span>指向链表的第一个节点，<span class="hljs-selector-tag">q</span>指向头节点。<br><span class="hljs-number">3</span>. 进入一个while循环，条件是<span class="hljs-selector-tag">p</span>不为空。<br>   - 如果<span class="hljs-selector-tag">p</span>指向的节点的数据在mink和maxk之间，则删除该节点，并将<span class="hljs-selector-tag">q</span>的next指针指向<span class="hljs-selector-tag">p</span>的next节点。然后更新<span class="hljs-selector-tag">p</span>为<span class="hljs-selector-tag">q</span>的next节点。<br>   - 如果<span class="hljs-selector-tag">p</span>指向的节点的数据不在mink和maxk之间，则将<span class="hljs-selector-tag">q</span>更新为<span class="hljs-selector-tag">p</span>，然后将<span class="hljs-selector-tag">p</span>更新为<span class="hljs-selector-tag">p</span>的next节点。<br><span class="hljs-number">4</span>. 循环结束后，所有在mink和maxk之间的节点都被删除。<br></code></pre></td></tr></table></figure><h2 id="源代码-1"><a href="#源代码-1" class="headerlink" title="源代码"></a>源代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span>                  <span class="hljs-comment">//引入输入输出流</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;random&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;chrono&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span><br>&#123;<br>    DataType data;               <span class="hljs-comment">//数据域</span><br>    Node&lt;DataType&gt;* next;       <span class="hljs-comment">//指针域</span><br>&#125;;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkList</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">LinkList</span>();                      <span class="hljs-comment">//无参构造函数，建立只有头结点的空链表</span><br>    <span class="hljs-built_in">LinkList</span>(DataType a[], <span class="hljs-type">int</span> n);       <span class="hljs-comment">//有参构造函数，建立有n个元素的单链表</span><br>    ~<span class="hljs-built_in">LinkList</span>();                     <span class="hljs-comment">//析构函数</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Delete</span><span class="hljs-params">(<span class="hljs-type">int</span> mink, <span class="hljs-type">int</span> maxk)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PrintList</span><span class="hljs-params">()</span></span>;                  <span class="hljs-comment">//遍历操作，按序号依次输出各元素</span><br><br><span class="hljs-keyword">private</span>:<br>    Node&lt;DataType&gt;* first;           <span class="hljs-comment">//单链表的头指针</span><br>&#125;; <br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-type">void</span> LinkList&lt;DataType&gt; ::<span class="hljs-built_in">Delete</span>(<span class="hljs-type">int</span> mink,<span class="hljs-type">int</span> maxk)<br>&#123;<br>    DataType x;<br>    Node&lt;DataType&gt;* p = first-&gt;next, * q = first;        <span class="hljs-comment">//工作指针p指向头结点</span><br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">nullptr</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> ((p-&gt;data&lt;maxk) &amp;&amp;(p-&gt;data&gt;mink) )<br>        &#123;<br>            q-&gt;next = p-&gt;next;<br>            <span class="hljs-keyword">delete</span> p;<br>            p = q-&gt;next;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            q = p;<br>            p = p-&gt;next;<br>            <br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br>LinkList&lt;DataType&gt; ::<span class="hljs-built_in">LinkList</span>()<br>&#123;<br>    first = <span class="hljs-keyword">new</span> Node&lt;DataType&gt;;              <span class="hljs-comment">//生成头结点</span><br>    first-&gt;next = <span class="hljs-literal">nullptr</span>;                      <span class="hljs-comment">//头结点的指针域置空</span><br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">DataType</span>&gt;<br>LinkList&lt;DataType&gt; :: ~<span class="hljs-built_in">LinkList</span>()<br>&#123;<br>    Node&lt;DataType&gt;* q = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">while</span> (first != <span class="hljs-literal">NULL</span>)        <span class="hljs-comment">//释放单链表的每一个结点的存储空间</span><br>    &#123;<br>        q = first;                 <span class="hljs-comment">//暂存被释放结点</span><br>        first = first-&gt;next;         <span class="hljs-comment">// first指向被释放结点的下一个结点</span><br>        <span class="hljs-keyword">delete</span> q;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-type">void</span> LinkList&lt;DataType&gt; ::<span class="hljs-built_in">PrintList</span>()<br>&#123;<br>    Node&lt;DataType&gt;* p = first-&gt;next;                <span class="hljs-comment">//工作指针p初始化</span><br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">nullptr</span>)<br>    &#123;<br>        cout &lt;&lt; p-&gt;data &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span>;<br>        p = p-&gt;next;                 <span class="hljs-comment">//工作指针p后移，注意不能写作p++</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//尾插法构造</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br>LinkList&lt;DataType&gt; ::<span class="hljs-built_in">LinkList</span>(DataType a[], <span class="hljs-type">int</span> n)<br>&#123;<br>    first = <span class="hljs-keyword">new</span> Node&lt;DataType&gt;;                    <span class="hljs-comment">//生成头结点</span><br>    Node&lt;DataType&gt;* r = first, * s = <span class="hljs-literal">nullptr</span>;           <span class="hljs-comment">//尾指针初始化</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        s = <span class="hljs-keyword">new</span> Node&lt;DataType&gt;; s-&gt;data = a[i];<br>        r-&gt;next = s; r = s;                 <span class="hljs-comment">//将结点s插入到终端结点之后</span><br>    &#125;<br>    r-&gt;next = <span class="hljs-literal">nullptr</span>;        <span class="hljs-comment">//单链表建立完毕，将终端结点的指针域置空</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> maxsize;<br>    cout &lt;&lt; <span class="hljs-string">&quot;请输入你要创建表的大小&quot;</span> &lt;&lt; endl;<br>    cin &gt;&gt; maxsize;<br>    <span class="hljs-type">int</span>* a = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[maxsize];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; maxsize; i++)<br>    &#123;<br>        a[i] = i;<br>    &#125;<br>    cout &lt;&lt; <span class="hljs-string">&quot;已创建一个最大长度&quot;</span> &lt;&lt; maxsize &lt;&lt; <span class="hljs-string">&quot;的单链表&quot;</span> &lt;&lt; endl;<br>    LinkList&lt;<span class="hljs-type">int</span>&gt; L&#123; a, maxsize &#125;;<br>    cout &lt;&lt; <span class="hljs-string">&quot;*******执行遍历链表******&quot;</span> &lt;&lt; endl;<br>    L.<span class="hljs-built_in">PrintList</span>();<br>    cout &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;**************************&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;请输入左右界定范围mink和maxk&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-type">int</span> mink, maxk;<br>    cin &gt;&gt; mink &gt;&gt; maxk;<br>    cout &lt;&lt; <span class="hljs-string">&quot;**************************&quot;</span> &lt;&lt; endl;<br>    L.<span class="hljs-built_in">Delete</span>(mink, maxk);<br>    cout &lt;&lt; <span class="hljs-string">&quot;题解删除操作已执行完毕&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;*******执行遍历链表******&quot;</span> &lt;&lt; endl;<br>    L.<span class="hljs-built_in">PrintList</span>();<br>    cout &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;**************************&quot;</span> &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;已完结，仅供留档查阅，切勿直接复制&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;作业Ch2-1-总结单链表中引入头节点的原因？&quot;&gt;&lt;a href=&quot;#作业Ch2-1-总结单链表中引入头节点的原因？&quot; class=&quot;headerlink&quot; t</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://w1ndys.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="数据结构作业" scheme="http://w1ndys.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%9C%E4%B8%9A/"/>
    
    
    <category term="数据结构" scheme="http://w1ndys.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>利用Kali中的工具John破解压缩包密码（弱密码</title>
    <link href="http://w1ndys.top/2023/10/03/kali-john/"/>
    <id>http://w1ndys.top/2023/10/03/kali-john/</id>
    <published>2023-10-03T13:08:34.543Z</published>
    <updated>2023-10-03T13:39:11.220Z</updated>
    
    <content type="html"><![CDATA[<p>推荐一篇文章</p><p><a href="https://blog.csdn.net/mengmeng0510/article/details/120812017">kali中binwalk&#x2F;foremost&#x2F;zip2john工具的配合使用</a></p><h3 id="第一步拿到hash文件"><a href="#第一步拿到hash文件" class="headerlink" title="第一步拿到hash文件"></a>第一步拿到hash文件</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">zip2john  <span class="hljs-selector-attr">[压缩包文件]</span>  &gt;&gt;  <span class="hljs-selector-attr">[名字.txt]</span><br></code></pre></td></tr></table></figure><h3 id="第二步解析hash文件"><a href="#第二步解析hash文件" class="headerlink" title="第二步解析hash文件"></a>第二步解析hash文件</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">john</span> <span class="hljs-meta"> [名字.txt]</span><br></code></pre></td></tr></table></figure><p>另外此处可以指定加密方式</p><p>在Kali系统中我们只需要添加–format&#x3D;[xxx]参数，即可指定John使用指定算法破解密码：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">john --<span class="hljs-keyword">format</span>=<span class="hljs-keyword">crypt</span> passwd.txt<br></code></pre></td></tr></table></figure><p>破解结束后无需再次对相同密文进行破解通常会提示：</p><blockquote><p>Loaded [number] password hashes with [number] different salts (crypt, generic crypt([number]) [?&#x2F;64])<br>No password hashes left to crack (see FAQ)</p></blockquote><p>如果我们需要再次查看破解后的密码只需执行如下命令：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">john </span>--<span class="hljs-keyword">show </span>passwd.txt<br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">john <span class="hljs-attr">--format</span>=<span class="hljs-selector-attr">[加密方式]</span> <span class="hljs-attr">--wordlist</span>=<span class="hljs-selector-attr">[字典路径]</span> <span class="hljs-selector-attr">[待解密密文文件]</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;推荐一篇文章&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/mengmeng0510/article/details/120812017&quot;&gt;kali中binwalk&amp;#x2F;foremost&amp;#x2F;zip2john工具的配合使用&lt;/a&gt;&lt;</summary>
      
    
    
    
    <category term="Linux" scheme="http://w1ndys.top/categories/Linux/"/>
    
    <category term="kali" scheme="http://w1ndys.top/categories/Linux/kali/"/>
    
    <category term="john" scheme="http://w1ndys.top/categories/Linux/kali/john/"/>
    
    
    <category term="Linux" scheme="http://w1ndys.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>《拣爱》游戏心得</title>
    <link href="http://w1ndys.top/2023/10/01/love-choice/"/>
    <id>http://w1ndys.top/2023/10/01/love-choice/</id>
    <published>2023-10-01T14:45:29.744Z</published>
    <updated>2023-10-02T14:54:04.119Z</updated>
    
    <content type="html"><![CDATA[<p>注:部分资料来自百度，部分图片来自知乎，游戏狗</p><h1 id="游戏介绍"><a href="#游戏介绍" class="headerlink" title="游戏介绍"></a>游戏介绍</h1><p><img src="https://ts1.cn.mm.bing.net/th/id/R-C.69cb6a56106651395dd883ce4d06bfb5?rik=o5ik/GOs5kjyfA&riu=http://pic.qt6.com/up/2021-5/16214970414542509.jpg&ehk=qBqfjnePXOeJlvpUxh8YEbYFJJeB/anrwS3OIhcuWd4=&risl=&pid=ImgRaw&r=0" srcset="/img/loading.gif" lazyload></p><blockquote><p>百度百科</p></blockquote><p>拣，有<a href="https://baike.baidu.com/item/%E9%80%89%E6%8B%A9/980212?fromModule=lemma_inlink">选择</a>之意。游戏中每一个<a href="https://baike.baidu.com/item/%E5%9C%BA%E6%99%AF/82239?fromModule=lemma_inlink">场景</a>，每一个选择都合理而有其自己的意义。它还是一款谈论爱的游戏。希望通过游戏和故事，让玩家能够感受爱，学会爱他人和爱人的方法。</p><p>这个游戏鼓励人们拥有一颗温暖柔软，<a href="https://baike.baidu.com/item/%E5%96%84%E8%A7%A3%E4%BA%BA%E6%84%8F/4595238?fromModule=lemma_inlink">善解人意</a>的心。</p><p>《拣爱》由三个独立故事构成。完整游玩一次游戏大概需要1.5小时。 </p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="对游戏的评价"><a href="#对游戏的评价" class="headerlink" title="对游戏的评价"></a>对游戏的评价</h2><p>首先我想先写一下我对这个游戏的评价，游戏的可玩时间并不长，毕竟是剧情向游戏，剧情过完了就没得玩了，第二游戏的剧情做得非常好，能够引发玩家引起共鸣和无限的思考，我更觉得它像是一种艺术，就像一千个人眼中有一千个哈姆雷特一样，我对游戏其中的剧情的思考有一些我也问过原作者，而原作者的回答是纯主观想法，无标准答案。是的，艺术的意义便是这样。</p><h2 id="这个游戏引发出来的我的思考"><a href="#这个游戏引发出来的我的思考" class="headerlink" title="这个游戏引发出来的我的思考"></a>这个游戏引发出来的我的思考</h2><p>游戏一共分三章，第一章讲的是恋爱过程中的情侣，第二章讲的是两个青梅竹马的分分合合，第三章讲的是已婚夫妻的朝夕相处</p><p>虽然我是牡丹solo，但是对我的触动也是很深刻的</p><p>第一章是我印象最深的一章，也许是因为我正处于这么一个年龄段，所引发的共鸣比较多</p><p>游戏有存档，但爱没有存档，游戏可以回档，爱不能重来</p><p>每个人都拥有爱的能力，每个人都值得被爱</p><p>游戏中有很多操作是不被告知的，比如有的剧情要等着，有的剧情要点击小物品，而不是只点明显的选项而已，爱也是一样，有时候并不能思维定式，只看选项，而更多的是爱情中的不确定</p><h1 id="我的游戏历程"><a href="#我的游戏历程" class="headerlink" title="我的游戏历程"></a>我的游戏历程</h1><h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><h3 id="一、相遇、相知、相识"><a href="#一、相遇、相知、相识" class="headerlink" title="一、相遇、相知、相识"></a>一、相遇、相知、相识</h3><blockquote><p>我是一个游戏开发者，今天参加了一个gamejam活动。</p><p>（注：GameJam是一个游戏开发活动，参加者自由组队，48小时内围绕指定的主题进行创作，从零开始完成一款游戏)</p><p>传闻中gamejam现场可以偶遇女生一起组队，但偏偏我们组却是全男班</p><p>活动在一个周五的下午开始，大部分队伍都会把第一天夜晚用来进行整个游戏的构思和设计工作。</p><p>而我们组的讨论进行得十分顺利。在方案基本定下来以后，我也放松紧绷的神经，开始环顾会场四周。</p><p>这时候，我留意到她的存在。她所在的小组就坐在我们隔壁</p><p>他们组好像还在激烈的讨论。我听到他们其中一个队员说:大家先休息10分钟，之后再回来继续讨论吧。</p><p>她的队友都纷纷离开了座位，留下她一个人在本子上写写画画</p><p>”现在是个和她说话的好机会。“我心想</p><p>我简单整理了一下仪表仪容，在脸上挤出一个自认为最好的表情</p><p>鼓足勇气，走到她的身旁</p></blockquote><p><img src="https://pic3.zhimg.com/v2-e98b1b7a3ecfc8be7cb4894b249eddd6_r.jpg" srcset="/img/loading.gif" lazyload></p><h4 id="第一次玩"><a href="#第一次玩" class="headerlink" title="第一次玩"></a>第一次玩</h4><p>这是第一个对话选项，第一个选项相比而言还是比较自然的，第二个有有点显得高傲自大，像是很夸赞很吹嘘自己的想法，我不喜欢，<font color='red'>所以我选择了第一个</font></p><blockquote><p>她仿佛面有难色。但依然礼貌地介绍了自己:…“嗨，我叫000.“</p></blockquote><p><font color='red'>其实你向我搭讪的时候，我内心是拒绝的。大概是因为给我感觉很不自然吧</font></p><h4 id="第二次玩"><a href="#第二次玩" class="headerlink" title="第二次玩"></a>第二次玩</h4><p>由于结局提示这边选错了，所以无奈我选了另一个，但是结局还是有错，我觉得有蹊跷，鼠标移动到屏幕才发现画框可以点，点击场景中的海报，才能走向正确剧情</p><blockquote><p>“这次GameJam的题目不错，很有趣。”</p><p>“是啊，我觉得图中男女相互纠缠，可以做一个和恋爱相关的游戏”</p><p>“恋爱游戏啊…我觉得挺适合的。这次的题目或许还有一个意思:‘一件事情总有你意想不到的另一面。’”</p><p>“我也是这么想的，如果把这层意思放进恋爱游戏里或许会很有趣吧”</p><p>“对了，我们还可以…”</p><p>不知不觉，我们聊了很久。可惜的是她的队友最后还是没有采用她的建议</p><p>而这也是她后来告诉我的</p></blockquote><ul><li><font color='green'>两个兴趣相同的人有共同话题，这样才是最好的搭讪方式，不是吗？</font></li></ul><h3 id="二、第一次约会前的准备"><a href="#二、第一次约会前的准备" class="headerlink" title="二、第一次约会前的准备"></a>二、第一次约会前的准备</h3><blockquote><p>GameJam活动结束后，我通过活动的微信群找到了她</p><p>开始大家都有些拘谨，但很快我们就成为了相互倾诉生活琐事的”笔友</p><p>朋友都说我虽然在GameJam上没获奖，但却是所有人中唯一中了大奖的</p><p>我没法反驳，因为我真的太幸运了。</p><p>两周后的一天，我们在微信上聊着</p><p>而我一直想找机会把她约出来一起看个电影，吃个饭</p></blockquote><p><img src="https://pic3.zhimg.com/v2-2cdb0ea00331561fedafa23e4cb1b86a_r.jpg" srcset="/img/loading.gif" lazyload></p><p>第二个对话选项，虽然这个对话选什么都不影响结局，但还是第一个选项更好一些，第一个选项更适合来安慰对方，而第二个选项传达出来的意思就好像是她确实是做错了，但第一个就能传达出其实大家都这样，你没错，是上司的原因的意思，更好一些</p><ul><li><font color='green'>安慰别人的时候不要把错误说到对方身上</font></li></ul><p>后面紧跟着的对话刚刚一样，与上面同理，选第一个</p><p>男主开始尝试约女主出来玩</p><ul><li><font color='green'>自然地进行，不要带着目的做事</font></li><li><font color='green'>需要关注女孩子的朋友圈昂，才能知道女孩子的兴趣</font></li><li><font color='green'>和女孩子出来玩不能只看电影啊~不还得吃点东西吗</font></li></ul><p>这里有个细节，就是朋友圈里传达出来两个信息，“女主是猫尔摩斯的真爱粉”和“喜欢吃火锅”，这两个信息是推动剧情的关键点</p><p><img src="https://pic2.zhimg.com/80/v2-546f6f6dd8a695c8a2697557f7df05c1_720w.webp" srcset="/img/loading.gif" lazyload alt="点开朋友圈"></p><p><img src="https://pic2.zhimg.com/80/v2-82b172d45cada35288d61319afb22e3d_720w.webp" srcset="/img/loading.gif" lazyload alt="选猫尔摩斯"></p><p>然后后面有个小游戏，中间会有弹窗来分散你的注意力</p><ul><li><font color='green'>和女孩子约会怎么能分心呢！</font></li></ul><h3 id="三、看完电影吃饭"><a href="#三、看完电影吃饭" class="headerlink" title="三、看完电影吃饭"></a>三、看完电影吃饭</h3><blockquote><p>终于到了和她见面的日子</p><p>第一次和她看电影，不免有些紧张</p><p>但我还是告诉自己要尽量把注意力放在电影上面</p><p>电影放映完之后，我们在椅子上留到了最后</p><p>“刚刚的电影还挺精彩的”</p><p>”虽然和原著有些出入，但是看得出导演为了拍出原著的味道很用心!太精彩了!“</p><p>“不枉我期待这电影这么久!”</p><p>“我们接着去哪里?”</p><p>“这附近的话，我知道有家不错的店。”<br>当然是选择她最喜欢吃的火锅啦~</p></blockquote><p><img src="https://pic3.zhimg.com/v2-5d7189081ad21b6ca5c9bce8d56fa392_r.jpg" srcset="/img/loading.gif" lazyload></p><h3 id="四、约会后的闲聊"><a href="#四、约会后的闲聊" class="headerlink" title="四、约会后的闲聊"></a>四、约会后的闲聊</h3><blockquote><p>月光在她的脸上勾画出一道银白色的轮廓</p><p>看着她的脸，走在旁边的我内心有点不安分了起来</p><p>两人的距离越走越近，就算不说出口，两人之间也早已经有了默契</p><p>我还需要开口说些什么吗?</p></blockquote><p><img src="https://pic2.zhimg.com/v2-63c9446c97fadf1ba722e70c324e4589_r.jpg" srcset="/img/loading.gif" lazyload></p><h4 id="第一次玩-1"><a href="#第一次玩-1" class="headerlink" title="第一次玩"></a>第一次玩</h4><p>这里有三个选项，“我喜欢你”，“我能牵着你的手吗？”，“月色真美”</p><p>第一个选项未免有些太直接了，第二个选项也有点尴尬，<font color='red'>于是我选择了第三个</font></p><h4 id="第二次玩-1"><a href="#第二次玩-1" class="headerlink" title="第二次玩"></a>第二次玩</h4><p>由于后面结局的提示这边选错了</p><p>所以这边我第二次直接选了第二个选项，“我能牵着你的手吗”</p><p>但还是错了</p><h4 id="第三次玩"><a href="#第三次玩" class="headerlink" title="第三次玩"></a>第三次玩</h4><p>第三次玩才知道屏幕可以点，我才明白是点男女主的手！</p><blockquote><p>这一刻，或许任何言语，都是多余。</p><p>我们就这样开始了。</p></blockquote><ul><li><font color='green'>有时无言胜过千言万语，男孩子只要出手就好了！</font></li></ul><h3 id="五、无话不聊的甜蜜期"><a href="#五、无话不聊的甜蜜期" class="headerlink" title="五、无话不聊的甜蜜期"></a>五、无话不聊的甜蜜期</h3><blockquote><p>我们就这样开始了</p><p>我们之间仿佛有聊不完的话题</p><p>只要找到能够挑起话题的东西，我们都绝对不会放过</p><p>我们渴望了解对方，恨不得把镜头拉近，对焦到对方心里面去看对方心底在想什么。</p></blockquote><p><img src="https://pic4.zhimg.com/80/v2-d3c4c982bf9fe915cf51f9640d9ae793_720w.webp" srcset="/img/loading.gif" lazyload></p><h4 id="第一次玩-2"><a href="#第一次玩-2" class="headerlink" title="第一次玩"></a>第一次玩</h4><p>这里只有一个选项，<font color='red'>第一次玩只好点选项了</font>因为没得选</p><p>经过结局的提示才知道这边操作错了</p><p>“<font color='red'>但是我们的话题往往只能停留于表面。其实，我一直希望能与你分享更深层的想法</font>”</p><h4 id="第二次玩-2"><a href="#第二次玩-2" class="headerlink" title="第二次玩"></a>第二次玩</h4><p>第二次玩因为有了之前的经验了，所以我觉得这边肯定是有东西可以点的，结合屏幕发现男女主都有同类的物品，所以应该是<font color='green'>共同话题</font>以此点击六个物品之后点了选项，发现还是提示不完美</p><h4 id="第三次玩-1"><a href="#第三次玩-1" class="headerlink" title="第三次玩"></a>第三次玩</h4><p>这边我猜着应该是有深层义，但是我不知道怎么操作，在往上查了才知道是滑动鼠标滚轮，会出现六个idea。</p><p><img src="https://pic3.zhimg.com/80/v2-49d3f449c0d92fa1b6a5d545afeaaa6a_720w.webp" srcset="/img/loading.gif" lazyload></p><p>找到六个每两个一一对应就可以触发完美剧情</p><p><font color='green'>对白真的很暖！</font></p><h3 id="六、甜蜜过后的烦躁期"><a href="#六、甜蜜过后的烦躁期" class="headerlink" title="六、甜蜜过后的烦躁期"></a>六、甜蜜过后的烦躁期</h3><p><img src="https://pic3.zhimg.com/80/v2-9c33bda2179064731e26b4eecfbe183e_720w.webp" srcset="/img/loading.gif" lazyload></p><p>生活上的烦心事和小事，最容易在细节处伤到别人</p><blockquote><p>“￥%……*&amp;……o”</p></blockquote><p>此时的音乐也开始变得急促</p><h4 id="第一次玩-3"><a href="#第一次玩-3" class="headerlink" title="第一次玩"></a>第一次玩</h4><p>这里只有一个选项，所以<font color='red'>我直接选了</font>，然后过一会又出现一个选项，<font color='red'>我接着点了</font>。<font color='red'>吵架的气泡也随着越来越大</font></p><p>到结局提示才知道这边也有错误</p><p><font color='red'>吵架时的你是那么得理不饶人。而我也不愿意先让步，常常把一些鸡毛蒜皮的小事弄得发不可收拾</font></p><h4 id="第二次玩-3"><a href="#第二次玩-3" class="headerlink" title="第二次玩"></a>第二次玩</h4><p>有了第一次的经验和以往点屏幕的经验，我开始点屏幕上的东西，但是丝毫没有反应</p><h4 id="第三次玩-2"><a href="#第三次玩-2" class="headerlink" title="第三次玩"></a>第三次玩</h4><p>有了前两次的教训，我已经逐渐理解，应该做出让步，但是只有一个选项，要怎么选？</p><p>经过查了才知道，这边要等一会才会触发完美结局</p><p><img src="http://p.qpic.cn/mwegame/0/de786890024b6ab99e3b67b7416bd523/550" srcset="/img/loading.gif" lazyload></p><ul><li><font color='green'>生活上的烦心事和小事，最容易在细节处伤到别人，在吵架的时候双方每个人都需要作出让步，相互理解相互宽容</font></li></ul><h3 id="七、同居时的陪伴"><a href="#七、同居时的陪伴" class="headerlink" title="七、同居时的陪伴"></a>七、同居时的陪伴</h3><blockquote><p>和刚认识她的时候一样，她还是很喜欢和我抱怨生活中遇到的烦心事.</p><p>她明明很聪明，我想这些琐事应该难不倒她</p><p>却不知为何好像总是因为这些琐事而烦心</p></blockquote><p><img src="https://pic3.zhimg.com/80/v2-d883f8a91b1484b7153f5c42db1e239e_720w.webp" srcset="/img/loading.gif" lazyload></p><h4 id="第一次玩-4"><a href="#第一次玩-4" class="headerlink" title="第一次玩"></a>第一次玩</h4><p>这对话框怎么跟之前一样啊歪，我刚看到就觉得有蹊跷，但是无奈，只得点击选项</p><p>当然，不是完美结局</p><h4 id="第二次玩-4"><a href="#第二次玩-4" class="headerlink" title="第二次玩"></a>第二次玩</h4><p>由于明白了屏幕可以点，我试着点了点男主，发现男主可以滑动，顺着滑动过去，让男主过去陪女主，做一个好的倾听者</p><p><font color='green'>这边的对白也很暖！！！</font></p><blockquote><p>其实我知道，她很清楚这些问题该怎么处理</p><p>我只需要当一个聆听者，陪在她的身边，那就足够了.</p></blockquote><ul><li><font color='green'>一个好男友一定是一个好的倾听者！！！</font></li><li><font color='green'>情侣间有时候需要处理的不是事情，而是态度</font></li></ul><h3 id="八、同居时的烦恼"><a href="#八、同居时的烦恼" class="headerlink" title="八、同居时的烦恼"></a>八、同居时的烦恼</h3><blockquote><p>当距离越来越近，原本从远处看不清的瑕疵，也会越发明显</p><p>只要两个人生活在一起，就会有问题发生</p><p>这时候，要么是她迁就我，要么是我迁就她，难道不是吗?</p><p>加班到深夜回来时，她正看着她最爱的韩剧。</p><p>四周散落着零食的包装和纸巾。</p></blockquote><p><img src="http://img1.gamedog.cn/2023/01/30/12023312-2301301KF20.jpg" srcset="/img/loading.gif" lazyload></p><h4 id="第一次玩-5"><a href="#第一次玩-5" class="headerlink" title="第一次玩"></a>第一次玩</h4><p>这里有两个选项“让女主收拾”和“我来收拾”，我首先想到的是我就惯着他吧，我来收拾，后来通过结局才发现我错了</p><p><font color='red'>无论是谁迁就谁，只要是单方面的迁就，就不会有相互谅解的关系长久</font></p><p><font color='red'>但矛盾的是，有时候，我又会想你能够包容一下我的缺点。</font></p><h4 id="第二次玩-5"><a href="#第二次玩-5" class="headerlink" title="第二次玩"></a>第二次玩</h4><p>由于第一次错了于是我又点了另一个，让她来收拾，但还是错了</p><h4 id="第三次玩-3"><a href="#第三次玩-3" class="headerlink" title="第三次玩"></a>第三次玩</h4><p>想到屏幕可以滑动，我点了一下垃圾，才走到正确剧情</p><p>我以为剧情一直是从男主的视角来考虑爱情，没想到这个镜头的主角是女主，作者太有心了</p><p><img src="https://pic2.zhimg.com/80/v2-39e4fd39344f2736ba2e7c7a3ce9fa4d_720w.webp" srcset="/img/loading.gif" lazyload></p><ul><li><font color='green'>原来爱情中是双方的付出，而不是一个人单方面的付出，另一个人只知享受</font></li></ul><blockquote><p>比起单方面的迁就，两个人的相处更应该是相互的。</p><p>相互依靠的两人总比单依赖一方的两人站得稳，不是吗?</p><p>时间飞快流逝，距离你我相识，已经过去三年</p></blockquote><h3 id="九、结局"><a href="#九、结局" class="headerlink" title="九、结局"></a>九、结局</h3><h4 id="不完美结局"><a href="#不完美结局" class="headerlink" title="不完美结局"></a>不完美结局</h4><blockquote><p>我突然的来信没有吓到你吧?</p><p>这或许是我第一次这么毫无保留地向你透露心声</p><p>也是应该是最后一次了。</p><p>很可惜我们最后还是没能一起走下去。</p><p>但是我不后悔，因为我从我们的相处中学到了很多</p><p>祝君安好。再见。</p></blockquote><h4 id="完美结局"><a href="#完美结局" class="headerlink" title="完美结局"></a>完美结局</h4><blockquote><p>还记得我们是在gamejam上认识的</p><p>当时你主动和我说话。</p><p><font color='green'>聊到游戏我们的意见是一拍即合。围绕那次gamejam主题，我们开始越聊越投契</font></p><p>在那之后，我们又开始聊微信。</p><p>不知不觉中，你就成为了我的第一倾诉对象</p><p>还记得我们的第一次约会吗?</p><p><font color='green'>你和我去看我最喜欢的”猫耳摩斯”电影。然后又带我去吃我最喜欢的麻辣火锅。大概你有仔细看过我朋友圈吧?</font></p><p><font color='green'>知道你事前有好好为约会准备，我当时还是挺感动的</font></p><p>还记得我们的第一次牵手吗?</p><p><font color='green'>那天晚上月色很美。我到现在还记得你静静牵起我手时的感觉。我们就这样开始了。</font></p><p>在一起以后，我们有了更多的时间去了解彼此</p><p>我们谈论共同的兴趣爱好，生活中大小事情</p><p>和你在一起的日子大多都是甜蜜的，然而我们有时也会吵架</p><p><font color='green'>但庆幸我们能够相互谅解。一点点的争吵反而成为我们加深了解的机会</font></p><p>有时我会想你听我抱怨生活中的那那些烦心事</p><p><font color='green'>而你总能够在我需要的时候，做一个安静的聆听者</font></p><p><font color='green'>陪在我身边，静静听我讲那些生活中的琐碎事情。</font></p><p>我知道我们都并不完美。</p><p><font color='green'>好在我们知道怎样平衡彼此的关系，而不是一味依赖某一方</font></p><p>这或许是我第一次这么毫无保留地向你透露心声</p><p>我只是希望你能够理解我的心情，多点关心我</p><p>希望在我们的下一个三年里，我们能够更好地相处吧。相识周年纪念日快乐!</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;注:部分资料来自百度，部分图片来自知乎，游戏狗&lt;/p&gt;
&lt;h1 id=&quot;游戏介绍&quot;&gt;&lt;a href=&quot;#游戏介绍&quot; class=&quot;headerlink&quot; title=&quot;游戏介绍&quot;&gt;&lt;/a&gt;游戏介绍&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://ts1.cn.mm.bin</summary>
      
    
    
    
    <category term="游戏心得" scheme="http://w1ndys.top/categories/%E6%B8%B8%E6%88%8F%E5%BF%83%E5%BE%97/"/>
    
    
    <category term="内心深处的呐喊-《拣爱》" scheme="http://w1ndys.top/tags/%E5%86%85%E5%BF%83%E6%B7%B1%E5%A4%84%E7%9A%84%E5%91%90%E5%96%8A-%E3%80%8A%E6%8B%A3%E7%88%B1%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>kali如何切换源</title>
    <link href="http://w1ndys.top/2023/10/01/kali-yuan/"/>
    <id>http://w1ndys.top/2023/10/01/kali-yuan/</id>
    <published>2023-10-01T07:03:11.137Z</published>
    <updated>2023-10-03T13:09:36.556Z</updated>
    
    <content type="html"><![CDATA[<p>转载  </p><p><a href="https://blog.csdn.net/fingue/article/details/127096363">https://blog.csdn.net/fingue/article/details/127096363</a></p><h1 id="1、进入vim模式"><a href="#1、进入vim模式" class="headerlink" title="1、进入vim模式"></a>1、进入vim模式</h1><p>sudo su进入root 模式<br>vim &#x2F;etc&#x2F;apt&#x2F;sources.list编辑软件源配置文件</p><p>随后进入vim模式</p><h1 id="2、国内源"><a href="#2、国内源" class="headerlink" title="2、国内源"></a>2、国内源</h1><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs 1c">官方源<br>deb http:<span class="hljs-comment">//http.kali.org/kali kali-rolling main non-free contrib</span><br>deb-src http:<span class="hljs-comment">//http.kali.org/kali kali-rolling main non-free contrib</span><br><span class="hljs-meta">#根据需要自己选一个，中科大的还可以</span><br><span class="hljs-meta">#中科大</span><br>deb http:<span class="hljs-comment">//mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib</span><br>deb-src http:<span class="hljs-comment">//mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib</span><br><span class="hljs-meta">#阿里云</span><br><span class="hljs-meta">#deb http:<span class="hljs-comment">//mirrors.aliyun.com/kali kali-rolling main non-free contrib</span></span><br><span class="hljs-meta">#deb-src http:<span class="hljs-comment">//mirrors.aliyun.com/kali kali-rolling main non-free contrib</span></span><br><span class="hljs-meta">#清华大学</span><br><span class="hljs-meta">#deb http:<span class="hljs-comment">//mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free</span></span><br><span class="hljs-meta">#deb-src https:<span class="hljs-comment">//mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free</span></span><br><span class="hljs-meta">#浙大</span><br><span class="hljs-meta">#deb http:<span class="hljs-comment">//mirrors.zju.edu.cn/kali kali-rolling main contrib non-free</span></span><br><span class="hljs-meta">#deb-src http:<span class="hljs-comment">//mirrors.zju.edu.cn/kali kali-rolling main contrib non-free</span></span><br><span class="hljs-meta">#东软大学</span><br><span class="hljs-meta">#deb http:<span class="hljs-comment">//mirrors.neusoft.edu.cn/kali kali-rolling/main non-free contrib</span></span><br><span class="hljs-meta">#deb-src http:<span class="hljs-comment">//mirrors.neusoft.edu.cn/kali kali-rolling/main non-free contrib</span></span><br><span class="hljs-meta">#重庆大学</span><br><span class="hljs-meta">#deb http:<span class="hljs-comment">//http.kali.org/kali kali-rolling main non-free contrib</span></span><br><span class="hljs-meta">#deb-src http:<span class="hljs-comment">//http.kali.org/kali kali-rolling main non-free contrib</span></span><br></code></pre></td></tr></table></figure><h1 id="3、换源"><a href="#3、换源" class="headerlink" title="3、换源"></a>3、换源</h1><p>按“i”进行编辑</p><p>将源插入后，点击“Esc”退出编辑，输入“：wq”回车保存退出，此处插入的是清华大学的源。</p><p>注：“#”有注释本行的用途，可以先将原来的源进行注释，再插入新源</p><h1 id="4、随后输入下列命令行进行更新"><a href="#4、随后输入下列命令行进行更新" class="headerlink" title="4、随后输入下列命令行进行更新"></a>4、随后输入下列命令行进行更新</h1><p>更新软件列表(非root权限在命令行前加“sudo”)</p><p>apt-get update 更新索引</p><p>apt-get upgrade 更新软件</p><p>apt-get dist-upgrade 升级</p><p>apt-get clean 删除缓存包</p><p>apt-get autoclean 删除未安装的deb包<br>————————————————<br>版权声明：本文为CSDN博主「不过教资不改名111」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/fingue/article/details/127096363">https://blog.csdn.net/fingue/article/details/127096363</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;转载  &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/fingue/article/details/127096363&quot;&gt;https://blog.csdn.net/fingue/article/details/127096363&lt;/a&gt;&lt;/</summary>
      
    
    
    
    <category term="Linux" scheme="http://w1ndys.top/categories/Linux/"/>
    
    <category term="kali" scheme="http://w1ndys.top/categories/Linux/kali/"/>
    
    <category term="切换源" scheme="http://w1ndys.top/categories/Linux/kali/%E5%88%87%E6%8D%A2%E6%BA%90/"/>
    
    
    <category term="Linux" scheme="http://w1ndys.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>hexo博文中front-matter的用法</title>
    <link href="http://w1ndys.top/2023/09/30/hexo-front-matter/"/>
    <id>http://w1ndys.top/2023/09/30/hexo-front-matter/</id>
    <published>2023-09-30T12:52:30.249Z</published>
    <updated>2023-09-30T14:32:49.697Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://hexo.io/zh-cn/docs/front-matter">https://hexo.io/zh-cn/docs/front-matter</a></p><h1 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h1><p>Front-matter 是文件最上方以 <code>---</code> 分隔的区域，用于指定个别文件的变量，举例来说：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">Hello</span> <span class="hljs-string">World</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2013</span><span class="hljs-string">/7/13</span> <span class="hljs-number">20</span><span class="hljs-string">:46:25</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>以下是预先定义的参数，您可在模板中使用这些参数值并加以利用。</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left"><code>layout</code></td><td align="left">布局</td><td align="left"><a href="https://hexo.io/zh-cn/docs/configuration#%E6%96%87%E7%AB%A0"><code>config.default_layout</code></a></td></tr><tr><td align="left"><code>title</code></td><td align="left">标题</td><td align="left">文章的文件名</td></tr><tr><td align="left"><code>date</code></td><td align="left">建立日期</td><td align="left">文件建立日期</td></tr><tr><td align="left"><code>updated</code></td><td align="left">更新日期</td><td align="left">文件更新日期</td></tr><tr><td align="left"><code>comments</code></td><td align="left">开启文章的评论功能</td><td align="left"><code>true</code></td></tr><tr><td align="left"><code>tags</code></td><td align="left">标签（不适用于分页）</td><td align="left"></td></tr><tr><td align="left"><code>categories</code></td><td align="left">分类（不适用于分页）</td><td align="left"></td></tr><tr><td align="left"><code>permalink</code></td><td align="left">覆盖文章的永久链接，永久链接应该以 <code>/</code> 或 <code>.html</code> 结尾</td><td align="left"><code>null</code></td></tr><tr><td align="left"><code>excerpt</code></td><td align="left">纯文本的页面摘要。使用 <a href="https://hexo.io/zh-cn/docs/tag-plugins#%E6%96%87%E7%AB%A0%E6%91%98%E8%A6%81%E5%92%8C%E6%88%AA%E6%96%AD">该插件</a> 来格式化文本</td><td align="left"></td></tr><tr><td align="left"><code>disableNunjucks</code></td><td align="left">启用时禁用 Nunjucks 标签 <code>&#123;&#123; &#125;&#125;</code>&#x2F;<code>&#123;% %&#125;</code> 和 <a href="https://hexo.io/zh-cn/docs/tag-plugins">标签插件</a> 的渲染功能</td><td align="left">false</td></tr><tr><td align="left"><code>lang</code></td><td align="left">设置语言以覆盖 <a href="https://hexo.io/zh-cn/docs/internationalization#%E8%B7%AF%E5%BE%84">自动检测</a></td><td align="left">继承自 <code>_config.yml</code></td></tr><tr><td align="left"><code>published</code></td><td align="left">文章是否发布</td><td align="left">对于 <code>_posts</code> 下的文章为 <code>true</code>，对于 <code>_draft</code> 下的文章为 <code>false</code></td></tr></tbody></table><h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><p>根据 <code>_config.yml</code> 中 <a href="https://hexo.io/zh-cn/docs/configuration#%E6%96%87%E7%AB%A0"><code>default_layout</code></a> 的设置，默认布局是 <code>post</code> 。当文章中的布局被禁用(<code>layout: false</code>)，它将不会使用主题处理。然而，它仍然会被任何可用的渲染引擎渲染：如果一篇文章是用 Markdown 写的，并且安装了 Markdown 渲染引擎（比如默认的 <a href="https://github.com/hexojs/hexo-renderer-marked">hexo-renderer-marked</a>)，它将被渲染成HTML。</p><p>除非通过 <code>disableNunjucks</code> 设置或 <a href="https://hexo.io/zh-cn/api/renderer#%E7%A6%81%E7%94%A8-Nunjucks-%E6%A0%87%E7%AD%BE">渲染引擎</a> 禁用，否则无论布局如何，<a href="https://hexo.io/zh-cn/docs/tag-plugins">标签插件</a> 总是被处理。</p><h2 id="分类和标签"><a href="#分类和标签" class="headerlink" title="分类和标签"></a>分类和标签</h2><p>只有文章支持分类和标签，您可以在 Front-matter 中设置。在其他系统中，分类和标签听起来很接近，但是在 Hexo 中两者有着明显的差别：分类具有顺序性和层次性，也就是说 <code>Foo, Bar</code> 不等于 <code>Bar, Foo</code>；而标签没有顺序和层次。</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs subunit">categories:<br>- Diary<br><span class="hljs-keyword">tags:</span><br>- PS3<br>- Games<br></code></pre></td></tr></table></figure><blockquote><p>分类方法的分歧</p><p>如果您有过使用 WordPress 的经验，就很容易误解 Hexo 的分类方式。WordPress 支持对一篇文章设置多个分类，而且这些分类可以是同级的，也可以是父子分类。但是 Hexo 不支持指定多个同级分类。下面的指定方法：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">categories</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">Diary</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">Life</span><br></code></pre></td></tr></table></figure><p>会使分类 <code>Life</code> 成为 <code>Diary</code> 的子分类，而不是并列分类。因此，有必要为您的文章选择尽可能准确的分类。</p><p>如果你需要为文章添加多个分类，可以尝试以下 list 中的方法。</p><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ldif"><span class="hljs-attribute">categories</span>:<br><span class="hljs-literal">-</span> [Diary, PlayStation]<br><span class="hljs-literal">-</span> [Diary, Games]<br><span class="hljs-literal">-</span> [Life]<br></code></pre></td></tr></table></figure><p>此时这篇文章同时包括三个分类： <code>PlayStation</code> 和 <code>Games</code> 分别都是父分类 <code>Diary</code> 的子分类，同时 <code>Life</code> 是一个没有子分类的分类。</p></blockquote><h2 id="JSON-Front-matter"><a href="#JSON-Front-matter" class="headerlink" title="JSON Front-matter"></a>JSON Front-matter</h2><p>除了 YAML 外，你也可以使用 JSON 来编写 Front-matter，只要将 <code>---</code> 代换成 <code>;;;</code> 即可。</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;Hello World&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-string">&quot;date&quot;</span>: <span class="hljs-string">&quot;2013/7/13 20:46:25&quot;</span><br><span class="hljs-comment">;;;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://hexo.io/zh-cn/docs/front-matter&quot;&gt;https://hexo.io/zh-cn/docs/front-matter&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;Front-matter&quot;&gt;&lt;a href=&quot;#Front-m</summary>
      
    
    
    
    <category term="hexo" scheme="http://w1ndys.top/categories/hexo/"/>
    
    <category term="用法" scheme="http://w1ndys.top/categories/hexo/%E7%94%A8%E6%B3%95/"/>
    
    
    <category term="hexo" scheme="http://w1ndys.top/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>跟随欧丽娟老师学习哲学</title>
    <link href="http://w1ndys.top/2023/09/30/Ou-li-juan/"/>
    <id>http://w1ndys.top/2023/09/30/Ou-li-juan/</id>
    <published>2023-09-30T11:50:07.641Z</published>
    <updated>2023-09-30T12:04:34.486Z</updated>
    
    <content type="html"><![CDATA[<p>永远学习欧丽娟老师！</p><p><img src="https://z1.ax1x.com/2023/09/30/pPqcohF.jpg" srcset="/img/loading.gif" lazyload></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;永远学习欧丽娟老师！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://z1.ax1x.com/2023/09/30/pPqcohF.jpg&quot; srcset=&quot;/img/loading.gif&quot; lazyload&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://w1ndys.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="哲学" scheme="http://w1ndys.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%93%B2%E5%AD%A6/"/>
    
    <category term="欧丽娟" scheme="http://w1ndys.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%93%B2%E5%AD%A6/%E6%AC%A7%E4%B8%BD%E5%A8%9F/"/>
    
    
    <category term="文" scheme="http://w1ndys.top/tags/%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>提问的智慧</title>
    <link href="http://w1ndys.top/2023/09/29/how-to-ask/"/>
    <id>http://w1ndys.top/2023/09/29/how-to-ask/</id>
    <published>2023-09-29T09:58:42.073Z</published>
    <updated>2023-09-30T12:05:40.203Z</updated>
    
    <content type="html"><![CDATA[<h1 id="提问的智慧"><a href="#提问的智慧" class="headerlink" title="提问的智慧"></a>提问的智慧</h1><p>How To Ask Questions The Smart Way</p><p>Copyright © 2001,2006,2014 Eric S. Raymond, Rick Moen 本指南英文版版权为 Eric S. Raymond, Rick Moen 所有。</p><p>原文网址:<a href="http://www.catb.org/~esr/faqs/smart-questions.html">http://www.catb.org/~esr/faqs/smart-questions.html</a></p><p>Copyleft 2001 by D.H.Grand(nOBODY&#x2F;Ginux), 2010 by Gasolin, 2015 by Ryan Wu 本中文指南是基于原文 3.10 版以及 2010 年由 <a href="https://github.com/gasolin">Gasolin </a>所翻译版本的最新翻译；协助指出翻译问题，<strong>请</strong><a href="https://github.com/ryanhanwu/smartquestions/issues/new">发Issue</a><strong>，或直接</strong><a href="https://github.com/ryanhanwu/smartquestions/compare/">发Pull Request</a><strong>给我。</strong></p><p>本文另有简体中文版: <a href="https://github.com/FredWe/How-To-Ask-Questions-The-Smart-Way/blob/master/README-zh_CN.mdWay/blob/master/README-zh_CN.md">https://github.com/FredWe/How-To-Ask-Questions-The-Smart-Way/blob/master/README-zh_CN.mdWay/blob/master/README-zh_CN.md</a></p><p><font size=5><a href="https://github.com/ryanhanwu/smartquestions/blob/master/history.md">原文版本历史</a></font></p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><p><a href="#%E5%A3%B0%E6%98%8E"> 声明</a></p></li><li><p><a href="#%E7%AE%80%E4%BB%8B"> 简介</a></p></li><li><p><a href="#%E5%9C%A8%E6%8F%90%E9%97%AE%E4%B9%8B%E5%89%8D"> 在提问之前</a></p></li><li><p><a href="#%E5%BD%93%E4%BD%A0%E6%8F%90%E9%97%AE%E6%97%B6"> 当你提问时</a></p><ul><li><p><a href="#%E6%85%8E%E9%80%89%E6%8F%90%E9%97%AE%E7%9A%84%E8%AE%BA%E5%9D%9B"> 慎选提问的论坛</a></p></li><li><p><a href="#%E7%BD%91%E7%AB%99%E5%92%8CIRC%E8%AE%BA%E5%9D%9B"> 网站和IRC论坛</a></p></li><li><p><a href="#%E7%AC%AC%E4%BA%8C%E6%AD%A5%EF%BC%8C%E4%BD%BF%E7%94%A8%E9%A1%B9%E7%9B%AE%E9%82%AE%E4%BB%B6%E5%88%97%E8%A1%A8"> 第二步，使用项目邮件列表</a></p></li><li><p><a href="#%E4%BD%BF%E7%94%A8%E6%9C%89%E6%84%8F%E4%B9%89%E4%B8%94%E6%8F%8F%E8%BF%B0%E6%98%8E%E7%A1%AE%E7%9A%84%E6%A0%87%E9%A2%98"> 使用有意义且描述明确的标题</a></p></li><li><p><a href="#%E4%BD%BF%E9%97%AE%E9%A2%98%E5%AE%B9%E6%98%93%E5%9B%9E%E5%A4%8D"> 使问题容易回复</a></p></li><li><p><a href="#%E7%94%A8%E6%B8%85%E6%99%B0%E3%80%81%E6%AD%A3%E7%A1%AE%E3%80%81%E7%B2%BE%E5%87%86%E5%B9%B6%E5%90%88%E6%B3%95%E8%AF%AD%E6%B3%95%E7%9A%84%E8%AF%AD%E5%8F%A5">用清晰、正确、精准并合法语法的语句</a></p></li><li><p><a href="#%E4%BD%BF%E7%94%A8%E6%98%93%E4%BA%8E%E8%AF%BB%E5%8F%96%E4%B8%94%E6%A0%87%E5%87%86%E7%9A%84%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E5%8F%91%E9%80%81%E9%97%AE%E9%A2%98"> 使用易于读取且标准的文件格式发送问题</a></p></li><li><p><a href="#%E7%B2%BE%E7%A1%AE%E7%9A%84%E6%8F%8F%E8%BF%B0%E9%97%AE%E9%A2%98%E5%B9%B6%E8%A8%80%E4%B9%8B%E6%9C%89%E7%89%A9"> 精确的描述问题并言之有物</a></p></li><li><p><a href="#%E8%AF%9D%E4%B8%8D%E5%9C%A8%E5%A4%9A%E8%80%8C%E5%9C%A8%E7%B2%BE"> 话不在多而在精</a></p></li><li><p><a href="#%E5%88%AB%E5%8A%A8%E8%BE%84%E5%A3%B0%E7%A7%B0%E6%89%BE%E5%88%B0Bug"> 别动辄声称找到Bug</a></p></li><li><p><a href="#%E5%8F%AF%E4%BB%A5%E4%BD%8E%E5%A3%B0%E4%B8%8B%E6%B0%94%EF%BC%8C%E4%BD%86%E8%BF%98%E6%98%AF%E8%A6%81%E5%85%88%E5%81%9A%E5%8A%9F%E8%AF%BE"> 可以低声下气，但还是要先做功课</a></p></li><li><p><a href="#%E6%8F%8F%E8%BF%B0%E9%97%AE%E9%A2%98%E7%97%87%E7%8A%B6%E8%80%8C%E9%9D%9E%E7%8C%9C%E6%B5%8B"> 描述问题症状而非猜测</a></p></li><li><p><a href="#%E6%8C%89%E5%8F%91%E7%94%9F%E6%97%B6%E9%97%B4%E5%85%88%E5%90%8E%E5%88%97%E5%87%BA%E9%97%AE%E9%A2%98%E7%97%87%E7%8A%B6"> 按发生时间先后列出问题症状</a></p></li><li><p><a href="#%E6%8F%8F%E8%BF%B0%E7%9B%AE%E6%A0%87%E8%80%8C%E4%B8%8D%E6%98%AF%E8%BF%87%E7%A8%8B"> 描述目标而不是过程</a></p></li><li><p><a href="#%E5%88%AB%E8%A6%81%E6%B1%82%E4%BD%BF%E7%94%A8%E7%A7%81%E4%BA%BA%E7%94%B5%E9%82%AE%E5%9B%9E%E5%A4%8D"> 别要求使用私人电邮回复</a></p></li><li><p><a href="#%E6%B8%85%E6%A5%9A%E6%98%8E%E7%A1%AE%E7%9A%84%E8%A1%A8%E8%BE%BE%E4%BD%A0%E7%9A%84%E9%97%AE%E9%A2%98%E4%BB%A5%E5%8F%8A%E9%9C%80%E6%B1%82"> 清楚明确的表达你的问题以及需求</a></p></li><li><p><a href="#%E8%AF%A2%E9%97%AE%E6%9C%89%E5%85%B3%E4%BB%A3%E7%A0%81%E7%9A%84%E9%97%AE%E9%A2%98%E6%97%B6"> 询问有关代码的问题时</a></p></li><li><p><a href="#%E5%88%AB%E6%8A%8A%E8%87%AA%E5%B7%B1%E5%AE%B6%E5%BA%AD%E4%BD%9C%E4%B8%9A%E7%9A%84%E9%97%AE%E9%A2%98%E8%B4%B4%E4%B8%8A%E6%9D%A5"> 别把自己家庭作业的问题贴上来</a></p></li><li><p><a href="#%E5%8E%BB%E6%8E%89%E6%97%A0%E6%84%8F%E4%B9%89%E7%9A%84%E6%8F%90%E9%97%AE%E5%8F%A5"> 去掉无意义的提问句</a></p></li><li><p><a href="#%E5%8D%B3%E4%BD%BF%E4%BD%A0%E5%BE%88%E6%80%A5%E4%B9%9F%E4%B8%8D%E8%A6%81%E5%9C%A8%E6%A0%87%E9%A2%98%E5%86%99%E7%B4%A7%E6%80%A5"> 即使你很急也不要在标题写紧急</a></p></li><li><p><a href="#%E7%A4%BC%E5%A4%9A%E4%BA%BA%E4%B8%8D%E6%80%AA%EF%BC%8C%E8%80%8C%E4%B8%94%E6%9C%89%E6%97%B6%E8%BF%98%E5%BE%88%E6%9C%89%E5%B8%AE%E5%8A%A9"> 礼多人不怪，而且有时还很有帮助</a></p></li><li><p><a href="#%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E5%90%8E%EF%BC%8C%E5%8A%A0%E4%B8%AA%E7%AE%80%E7%9F%AD%E7%9A%84%E8%A1%A5%E5%85%85%E8%AF%B4%E6%98%8E"> 问题解决后，加个简短的补充说明</a></p></li></ul></li><li><p><a href="#%E5%A6%82%E4%BD%95%E8%A7%A3%E8%AF%BB%E7%AD%94%E6%A1%88"> 如何解读答案</a></p><ul><li><p><a href="#RTFM%E5%92%8CSTFW%EF%BC%9A%E5%A6%82%E4%BD%95%E7%9F%A5%E9%81%93%E4%BD%A0%E5%B7%B2%E5%AE%8C%E5%85%A8%E6%90%9E%E7%A0%B8%E4%BA%86"> RTFM和STFW：如何知道你已完全搞砸了</a></p></li><li><p><a href="#%E5%A6%82%E6%9E%9C%E8%BF%98%E6%98%AF%E6%90%9E%E4%B8%8D%E6%87%82"> 如果还是搞不懂</a></p></li><li><p><a href="#%E5%A4%84%E7%90%86%E6%97%A0%E7%A4%BC%E7%9A%84%E5%9B%9E%E5%BA%94"> 处理无礼的回应</a></p></li></ul></li><li><p><a href="#%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E6%89%AE%E6%BC%94%E5%A4%B1%E8%B4%A5%E8%80%85"> 如何避免扮演失败者</a></p></li><li><p><a href="#%E4%B8%8D%E8%AF%A5%E9%97%AE%E7%9A%84%E9%97%AE%E9%A2%98"> 不该问的问题</a></p></li><li><p><a href="#%E5%A5%BD%E9%97%AE%E9%A2%98%E4%B8%8E%E8%A0%A2%E9%97%AE%E9%A2%98"> 好问题与蠢问题</a></p></li><li><p><a href="#%E5%A6%82%E6%9E%9C%E5%BE%97%E4%B8%8D%E5%88%B0%E5%9B%9E%E7%AD%94"> 如果得不到回答</a></p></li><li><p><a href="#%E5%A6%82%E4%BD%95%E6%9B%B4%E5%A5%BD%E5%9C%B0%E5%9B%9E%E7%AD%94%E9%97%AE%E9%A2%98"> 如何更好地回答问题</a></p></li><li><p><a href="#%E7%9B%B8%E5%85%B3%E8%B5%84%E6%BA%90"> 相关资源</a></p></li><li><p><a href="#%E9%B8%A3%E8%B0%A2"> 鸣谢</a></p></li></ul><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>许多项目在他们的使用协助&#x2F;说明网页中链接了本指南，这么做很好，我们也鼓励大家都这么做。但如果你是负责管理这个项目网页的人，请在超链接附近的显着位置上注明：</p><p><strong>本指南不提供此项目的实际支持服务！</strong></p><p>我们已经深刻领教到少了上述声明所带来的痛苦。因为少了这点声明，我们不停地被一些白痴纠缠。这些白痴认为既然我们发布了这本指南，那么我们就有责任解决世上所有的技术问题。</p><p>如果你是因为需要某些协助而正在阅读这本指南，并且最后离开是因为发现从本指南作者们身上得不到直接的协助，那么你就是我们所说的那些白痴之一。别问我们问题，我们只会忽略你。我们在这本指南中是教你如何从那些真正懂得你所遇到软件或硬件问题的人取得协助，而99%的情况下那不会是我们。除非你确定本指南的作者之一刚好是你所遇到的问题领域的专家，否则请不要打扰我们，这样大家都会开心一点。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在<a href="http://www.catb.org/~esr/faqs/hacker-howto.html">黑客</a>的世界里，当你拋出一个技术问题时，最终是否能得到有用的回答，往往取决于你所提问和追问的方式。本指南将教你如何正确的提问以获得你满意的答案。</p><p>不只是黑客，现在开放源代码（Open Source）软件已经相当盛行，你常常也可以由其他有经验的使用者身上得到好答案，这是件<em><strong>好事</strong></em> ；使用者比起黑客来，往往对那些新手常遇到的问题更宽容一些。然而，将有经验的使用者视为黑客，并采用本指南所提的方法与他们沟通，同样也是能从他们身上得到满意回答的最有效方式。</p><p>首先你应该明白，黑客们喜爱有挑战性的问题，或者能激发我们思维的好问题。如果我们并非如此，那我们也不会成为你想询问的对象。如果你给了我们一个值得反复咀嚼玩味的好问题，我们自会对你感激不尽。好问题是激励，是厚礼。好问题可以提高我们的理解力，而且通常会暴露我们以前从没意识到或者思考过的问题。对黑客而言，”好问题！”是诚挚的大力称赞。</p><p>尽管如此，黑客们有着蔑视或傲慢面对简单问题的坏名声，这有时让我们看起来对新手、无知者似乎较有敌意，但其实不是那样的。</p><p>我们不讳言我们对那些不愿思考、或者在发问前不做他们该做的事的人的蔑视。那些人是时间杀手 -– 他们只想索取，从不付出，消耗我们可用在更有趣的问题或更值得回答的人身上的时间。我们称这样的人为 <code>失败者（撸瑟）</code> （由于历史原因，我们有时把它拼作 <code>lusers</code> ）。</p><p>我们意识到许多人只是想使用我们写的软件，他们对学习技术细节没有兴趣。对大多数人而言，电脑只是种工具，是种达到目的的手段而已。他们有自己的生活并且有更要紧的事要做。我们了解这点，也从不指望每个人都对这些让我们着迷的技术问题感兴趣。尽管如此，我们回答问题的风格是指向那些真正对此有兴趣并愿意主动参与解决问题的人，这一点不会变，也不该变。如果连这都变了，我们就是在降低做自己最擅长的事情上的效率。</p><p>我们（在很大程度上）是自愿的，从繁忙的生活中抽出时间来解答疑惑，而且时常被提问淹没。所以我们无情的滤掉一些话题，特别是拋弃那些看起来像失败者的家伙，以便更高效的利用时间来回答<code>赢家（winner）</code>的问题。</p><p>如果你厌恶我们的态度，高高在上，或过于傲慢，不妨也设身处地想想。我们并没有要求你向我们屈服 -</p><p>- 事实上，我们大多数人非常乐意与你平等地交流，只要你付出小小努力来满足基本要求，我们就会欢迎你加入我们的文化。但让我们帮助那些不愿意帮助自己的人是没有效率的。无知没有关系，但装白痴就是不行。</p><p>所以，你不必在技术上很在行才能吸引我们的注意，但你必须表现出能引导你变得在行的特质 – 机敏、有想法、善于观察、乐于主动参与解决问题。如果你做不到这些使你与众不同的事情，我们建议你花点钱找家商业公司签个技术支持服务合同，而不是要求黑客个人无偿地帮助你。</p><p>如果你决定向我们求助，当然你也不希望被视为失败者，更不愿成为失败者中的一员。能立刻得到快速并有效答案的最好方法，就是像赢家那样提问 – 聪明、自信、有解决问题的思路，只是偶尔在特定的问题上需要获得一点帮助。</p><p>（欢迎对本指南提出改进意见。你可以 email 你的建议至 <a href="mailto:&#x65;&#x73;&#x72;&#x40;&#x74;&#x68;&#x79;&#114;&#x73;&#x75;&#x73;&#46;&#99;&#111;&#109;">&#x65;&#x73;&#x72;&#x40;&#x74;&#x68;&#x79;&#114;&#x73;&#x75;&#x73;&#46;&#99;&#111;&#109;</a> 或<a href="mailto:&#x72;&#x65;&#115;&#112;&#x6f;&#110;&#x64;&#45;&#x61;&#x75;&#x74;&#x6f;&#64;&#108;&#x69;&#110;&#x75;&#x78;&#109;&#97;&#x66;&#105;&#x61;&#46;&#x63;&#x6f;&#x6d;">&#x72;&#x65;&#115;&#112;&#x6f;&#110;&#x64;&#45;&#x61;&#x75;&#x74;&#x6f;&#64;&#108;&#x69;&#110;&#x75;&#x78;&#109;&#97;&#x66;&#105;&#x61;&#46;&#x63;&#x6f;&#x6d;</a>。然而请注意，本文并非<a href="http://www.ietf.org/rfc/rfc1855.txt">网络礼节</a>的通用指南，而我们通常会拒绝无助于在技术论坛得到有用答案的建议。）</p><h2 id="在提问之前"><a href="#在提问之前" class="headerlink" title="在提问之前"></a>在提问之前</h2><p>在你准备要通过电子邮件、新闻群组或者聊天室提出技术问题前，请先做到以下事情：</p><ol><li><p>   尝试在你准备提问的论坛的旧文章中搜索答案。</p></li><li><p>   尝试上网搜索以找到答案。</p></li><li><p>   尝试阅读手册以找到答案。</p></li><li><p>   尝试阅读常见问题文件（FAQ）以找到答案。</p></li><li><p>   尝试自己检查或试验以找到答案</p></li><li><p>   向你身边的强者朋友打听以找到答案。</p></li><li><p>   如果你是程序开发者，请尝试阅读源代码以找到答案</p></li></ol><p>当你提出问题的时候，请先表明你已经做了上述的努力；这将有助于树立你并不是一个不劳而获且浪费别人的时间的提问者。如果你能一并表达在做了上述努力的过程中所学到的东西会更好，因为我们更乐于回答那些表现出能从答案中学习的人的问题。</p><p>运用某些策略，比如先用Google搜索你所遇到的各种错误信息（既搜索<a href="http://groups.google.com/">Google论坛</a>，也搜索网页），这样很可能直接就找到了能解决问题的文件或邮件列表线索。即使没有结果，在邮件列表或新闻组寻求帮助时加上一句<code>我在Google中搜过下列句子但没有找到什么有用的东西 </code>也是件好事，即使它只是表明了搜索引擎不能提供哪些帮助。这么做（加上搜索过的字串）也让遇到相似问题的其他人能被搜索引擎引导到你的提问来。</p><p>别着急，不要指望几秒钟的Google搜索就能解决一个复杂的问题。在向专家求助之前，再阅读一下常见问题文件（FAQ）、放轻松、坐舒服一些，再花点时间思考一下这个问题。相信我们，他们能从你的提问看出你做了多少阅读与思考，如果你是有备而来，将更有可能得到解答。不要将所有问题一股脑拋出，只因你的第一次搜索没有找到答案（或者找到太多答案）。</p><p>准备好你的问题，再将问题仔细的思考过一遍，因为草率的发问只能得到草率的回答，或者根本得不到任何答案。越是能表现出在寻求帮助前你为解决问题所付出的努力，你越有可能得到实质性的帮助。</p><p>小心别问错了问题。如果你的问题基于错误的假设，某个普通黑客（J. Random Hacker）多半会一边在心里想着<code>蠢问题… </code>， 一边用无意义的字面解释来答复你，希望着你会从问题的回答（而非你想得到的答案）中汲取教训。</p><p>绝不要自以为<em><strong>够格</strong></em>得到答案，你没有；你并没有。毕竟你没有为这种服务支付任何报酬。你将会是自己去<em><strong>挣到</strong></em>一个答案，靠提出有内涵的、有趣的、有思维激励作用的问题 –一个有潜力能贡献社区经验的问题，而不仅仅是被动的从他人处索取知识。</p><p>另一方面，表明你愿意在找答案的过程中做点什么是一个非常好的开端。 <code>谁能给点提示？</code> 、 <code>我的这个例子里缺了什么？</code> 以及<code>我应该检查什么地方</code>比<code>请把我需要的确切的过程贴出来</code>更容易得到答复。因为你表现出只要有人能指个正确方向，你就有完成它的能力和决心。</p><h2 id="当你提问时"><a href="#当你提问时" class="headerlink" title="当你提问时"></a>当你提问时</h2><h3 id="慎选提问的论坛"><a href="#慎选提问的论坛" class="headerlink" title="慎选提问的论坛"></a>慎选提问的论坛</h3><p>小心选择你要提问的场合。如果你做了下述的事情，你很可能被忽略掉或者被看作失败者：</p><ul><li><p>在与主题不合的论坛上贴出你的问题</p></li><li><p>在探讨进阶技术问题的论坛张贴非常初级的问题；反之亦然</p></li><li><p>在太多的不同新闻群组上重复转贴同样的问题（cross-post）</p></li><li><p>向既非熟人也没有义务解决你问题的人发送私人电邮</p></li></ul><p>黑客会剔除掉那些搞错场合的问题，以保护他们沟通的渠道不被无关的东西淹没。你不会想让这种事发 生在自己身上的。</p><p>因此，第一步是找到对的论坛。再说一次，Google和其它搜索引擎还是你的朋友，用它们来找到与你遭 遇到困难的软硬件问题最相关的网站。通常那儿都有常见问题（FAQ）、邮件列表及相关说明文件的链 接。如果你的努力（包括<em><strong>阅读</strong></em>FAQ）都没有结果，网站上也许还有报告Bug（Bug-reporting）的流程或 链接，如果是这样，连过去看看。</p><p>向陌生的人或论坛发送邮件最可能是风险最大的事情。举例来说，别假设一个提供丰富内容的网页的作 者会想充当你的免费顾问。不要对你的问题是否会受到欢迎做太乐观的估计 – 如果你不确定，那就向别 处发送，或者压根别发。</p><p>在选择论坛、新闻群组或邮件列表时，别太相信名字，先看看FAQ或者许可书以弄清楚你的问题是否切 题。发文前先翻翻已有的话题，这样可以让你感受一下那里的文化。事实上，事先在新闻组或邮件列表 的历史记录中搜索与你问题相关的关键词是个极好的主意，也许这样就找到答案了。即使没有，也能帮 助你归纳出更好的问题。</p><p>别像机关枪似的一次”扫射”所有的帮助渠道，这就像大喊大叫一样会使人不快。要一个一个地来。 </p><p>搞清楚你的主题！最典型的错误之一是在某种致力于跨平台可移植的语言、套件或工具的论坛中提关于 Unix或Windows操作系统程序界面的问题。如果你不明白为什么这是大错，最好在搞清楚这之间差异之 前什么也别问。</p><p>一般来说，在仔细挑选的公共论坛中提问，会比在私有论坛中提同样的问题更容易得到有用的回答。有 几个理由可以支持这点，一是看潜在的回复者有多少，二是看观众有多少。黑客较愿意回答那些能帮助 到许多人的问题。</p><p>可以理解的是，老练的黑客和一些热门软件的作者正在接受过多的错发信息。就像那根最后压垮骆驼背 的稻草一样，你的加入也有可能使情况走向极端 – 已经好几次了，一些热门软件的作者从自己软件的支 持中抽身出来，因为伴随而来涌入其私人邮箱的无用邮件变得无法忍受。</p><h2 id="Stack-Overflow"><a href="#Stack-Overflow" class="headerlink" title="Stack Overflow"></a>Stack Overflow</h2><p>搜索，<em><strong>然后</strong></em> 在 Stack Exchange 问。</p><p>近年来，Stack Exchange community 社区已经成为回答技术及其他问题的主要渠道，尤其是那些开放 源码的项目。</p><p>因为 Google 索引是即时的，在看 Stack Exchange 之前先在 Google 搜索。有很高的机率某人已经问了 一个类似的问题，而且 Stack Exchange 网站们往往会是搜索结果中最前面几个。如果你在 Google 上没 有找到任何答案，你再到特定相关主题的网站去找。用标签（Tag）搜索能让你更缩小你的搜索结果。</p><p>Stack Exchange 已经成长到<a href="http://stackexchange.com/sites">超过一百个网站</a>，以下是最常用的几个站：</p><ul><li><p>Super User 是问一些通用的电脑问题，如果你的问题跟代码或是写程序无关，只是一些网络连线 之类的，请到这里。 </p></li><li><p>Stack Overflow 是问写程序有关的问题。 </p></li><li><p>Server Fault 是问服务器和网管相关的问题。</p></li></ul><h2 id="网站和IRC论坛"><a href="#网站和IRC论坛" class="headerlink" title="网站和IRC论坛"></a>网站和IRC论坛</h2><p>本地的使用者群组（user group），或者你所用的 Linux 发行版本也许正在宣传他们的网页论坛或 IRC 频道，并提供新手帮助（在一些非英语国家，新手论坛很可能还是邮件列表）， 这些地方是开始提问的 好首选，特别是当你觉得遇到的也许只是相对简单或者很普通的问题时。经过宣传的 IRC 频道是公开欢 迎提问的地方，通常可以即时得到回应。</p><p>事实上，如果程序出的问题只发生在特定 Linux 发行版提供的版本（这很常见），最好先去该发行版的 论坛或邮件列表中提问，再到程序本身的论坛或邮件列表提问。（否则）该项目的黑客可能仅仅回复 “用<em><strong>我们的</strong></em>版本”。</p><p>在任何论坛发文以前，先确认一下有没有搜索功能。如果有，就试着搜索一下问题的几个关键词，也许 这会有帮助。如果在此之前你已做过通用的网页搜索（你也该这样做），还是再搜索一下论坛，搜索引 擎有可能没来得及索引此论坛的全部内容。</p><p>通过论坛或 IRC 频道来提供使用者支持服务有增长的趋势，电子邮件则大多为项目开发者间的交流而保 留。所以最好先在论坛或 IRC 中寻求与该项目相关的协助。</p><h2 id="第二步，使用项目邮件列表"><a href="#第二步，使用项目邮件列表" class="headerlink" title="第二步，使用项目邮件列表"></a>第二步，使用项目邮件列表</h2><p>当某个项目提供开发者邮件列表时，要向列表而不是其中的个别成员提问，即使你确信他能最好地回答 你的问题。查一查项目的文件和首页，找到项目的邮件列表并使用它。有几个很好的理由支持我们采用 这种办法：</p><ul><li><p>任何好到需要向个别开发者提出的问题，也将对整个项目群组有益。反之，如果你认为自己的问题 对整个项目群组来说太愚蠢，也不能成为骚扰个别开发者的理由。</p></li><li><p>向列表提问可以分散开发者的负担，个别开发者（尤其是项目领导人）也许太忙以至于没法回答你的问题。</p></li><li><p>大多数邮件列表都会被存档，那些被存档的内容将被搜索引擎索引。如果你向列表提问并得到解答，将来其它人可以通过网页搜索找到你的问题和答案，也就不用再次发问了。</p></li><li><p>如果某些问题经常被问到，开发者可以利用此信息来改进说明文件或软件本身，以使其更清楚。如果只是私下提问，就没有人能看到最常见问题的完整场景。</p></li></ul><p>如果一个项目既有”使用者” 也有”开发者”（或”黑客”）邮件列表或论坛，而你又不会动到那些源代码，那么就向”使用者”列表或论坛提问。不要假设自己会在开发者列表中受到欢迎，那些人多半会将你的提问视为干扰他们开发的噪音。</p><p>然而，如果你<em><strong>确信</strong></em>你的问题很特别，而且在”使用者” 列表或论坛中几天都没有回复，可以试试前往”开发 者”列表或论坛发问。建议你在张贴前最好先暗地里观察几天以了解那里的行事方式（事实上这是参与任 何私有或半私有列表的好主意）</p><p>如果你找不到一个项目的邮件列表，而只能查到项目维护者的电子邮件地址，尽管向他发信。即使是在 这种情况下，也别假设（项目）邮件列表不存在。在你的电子邮件中，请陈述你已经试过但没有找到合 适的邮件列表，也提及你不反对将自己的邮件转发给他人（许多人认为，即使没什么秘密，私人电子邮 件也不应该被公开。通过允许将你的电子邮件转发他人，你给了相应人员处置你邮件的选择）。</p><h2 id="使用有意义且描述明确的标题"><a href="#使用有意义且描述明确的标题" class="headerlink" title="使用有意义且描述明确的标题"></a>使用有意义且描述明确的标题</h2><p>在邮件列表、新闻群组或论坛中，大约50字以内的标题是抓住资深专家注意力的好机会。别用喋喋不休的<code>帮帮忙</code>、<code>跪求</code> 、<code>急</code> （更别说<code>救命啊！！！！</code>这样让人反感的话，用这种标题会被条件反射式地忽略） 来浪费这个机会。不要妄想用你的痛苦程度来打动我们，而是在这点空间中使用极简单扼要的描述方式 来提出问题。</p><p>一个好标题范例是<code>目标 -- 差异</code>式的描述，许多技术支持组织就是这样做的。在<code>目标</code>部分指出是哪一个 或哪一组东西有问题，在<code>差异</code>部分则描述与期望的行为不一致的地方。</p><blockquote><p>蠢问题：救命啊！我的笔电不能正常显示了！ </p></blockquote><blockquote><p>聪明问题：X.org 6.8.1的鼠标游标会变形，某牌显卡 MV1005 芯片组。</p></blockquote><blockquote><p> 更聪明问题：X.org 6.8.1的鼠标游标，在某牌显卡 MV1005 芯片组环境下 - 会变形。</p></blockquote><p>编写<code>目标 -- 差异</code>式描述的过程有助于你组织对问题的细緻思考。是什么被影响了？ 仅仅是鼠标游标或 者还有其它图形？只在 X.org 的 X 版中出现？或只是出现在6.8.1版中？ 是针对某牌显卡芯片组？或者只 是其中的 MV1005 型号？ 一个黑客只需瞄一眼就能够立即明白你的环境<em><strong>和</strong></em>你遇到的问题。</p><p>总而言之，请想像一下你正在一个只显示标题的存档讨论串（Thread）索引中查寻。让你的标题更好地 反映问题，可使下一个搜索类似问题的人能够关注这个讨论串，而不用再次提问相同的问题。</p><p>如果你想在回复中提出问题，记得要修改内容标题，以表明你是在问一个问题， 一个看起来像<code>Re: 测试</code>或者<code>Re: 新bug</code>的标题很难引起足够重视。另外，在不影响连贯性之下，适当引用并删减前文的内 容，能给新来的读者留下线索。</p><p>对于讨论串，不要直接点击回复来开始一个全新的讨论串，这将限制你的观众。因为有些邮件阅读程 序，比如 mutt ，允许使用者按讨论串排序并通过折叠讨论串来隐藏消息，这样做的人永远看不到你发 的消息。</p><p>仅仅改变标题还不够。mutt 和其它一些邮件阅读程序还会检查邮件标题以外的其它信息，以便为其指定 讨论串。所以宁可发一个全新的邮件。</p><p>在网页论坛上，好的提问方式稍有不同，因为讨论串与特定的信息紧密结合，并且通常在讨论串外就看 不到里面的内容，故通过回复提问，而非改变标题是可接受的。不是所有论坛都允许在回复中出现分离 的标题，而且这样做了基本上没有人会去看。不过，通过回复提问，这本身就是暧昧的做法，因为它们 只会被正在查看该标题的人读到。所以，除非你<em><strong>只想</strong></em>在该讨论串当前活跃的人群中提问，不然还是另起炉灶比较好。</p><h2 id="使问题容易回复"><a href="#使问题容易回复" class="headerlink" title="使问题容易回复"></a>使问题容易回复</h2><p>以<code>**请将你的回复寄到**……</code> 来结束你的问题多半会使你得不到回答。如果你觉得花几秒钟在邮件客户端设置一下回复地址都麻烦，我们也觉得花几秒钟思考你的问题更麻烦。如果你的邮件程序不支持这样做，<a href="http://linuxmafia.com/faq/Mail/muas.html">换个好点的</a>；如果是操作系统不支持这种邮件程序，也换个好点的。</p><p>在论坛，要求通过电子邮件回复是非常无礼的，除非你相信回复的信息可能比较敏感（而且有人会为了某些未知的原因，只让你而不是整个论坛知道答案）。如果你只是想在有人回复讨论串时得到电子邮件提醒，可以要求网页论坛发送给你。几乎所有论坛都支持诸如<code>追踪此讨论串</code>、<code>有回复时发送邮件提醒</code>等功能。</p><h2 id="用清晰、正确、精准并语法正确的语句"><a href="#用清晰、正确、精准并语法正确的语句" class="headerlink" title="用清晰、正确、精准并语法正确的语句"></a>用清晰、正确、精准并语法正确的语句</h2><p>我们从经验中发现，粗心的提问者通常也会粗心的写程序与思考（我敢打包票）。回答粗心大意者的问 题很不值得，我们宁愿把时间耗在别处。</p><p>正确的拼字、标点符号和大小写是很重要的。一般来说，如果你觉得这样做很麻烦，不想在乎这些，那 我们也觉得麻烦，不想在乎你的提问。花点额外的精力斟酌一下字句，用不着太僵硬与正式 – 事实上， 黑客文化很看重能准确地使用非正式、俚语和幽默的语句。但它<em><strong>必须很</strong></em>准确，而且有迹象表明你是在思 考和关注问题。</p><p>正确地拼写、使用标点和大小写，不要将 <code>its</code> 混淆为 <code>it&#39;s </code>，<code>loose</code>搞成<code>lose</code>或者将 <code>discrete</code> 弄成 <code>discreet</code> 。不要<strong>全部用大写</strong>，这会被视为无礼的大声嚷嚷（全部小写也好不到哪去，因为不易阅读。<a href="http://en.wikipedia.org/wiki/Alan_Cox">Alan Cox</a>也许可以这样做，但你不行。）</p><p>更白话的说，如果你写得像是个半文盲[译注：<a href="http://zh.wikipedia.org/zh-tw/%E5%B0%8F%E7%99%BD">小白</a>]），那多半得不到理睬。也不要使用即时通讯中的简写或<a href="http://zh.wikipedia.org/zh-tw/%E7%81%AB%E6%98%9F%E6%96%87">火星文</a>，如将<code>的</code> 简化为<code>ㄉ</code> 会使你看起来像一个为了少打几个键而省字的小白。更糟的是，如果像个小孩似地鬼画符那绝对是在找死，可以肯定没人会理你（或者最多是给你一大堆指责与挖苦）。</p><p>如果在使用非母语的论坛提问，你可以犯点拼写和语法上的小错，但决不能在思考上马虎（没错，我们 通常能弄清两者的分别）。同时，除非你知道回复者使用的语言，否则请使用英语书写。繁忙的黑客一 般会直接删除用他们看不懂语言写的消息。在网络上英语是通用语言，用英语书写可以将你的问题在尚 未被阅读就被直接删除的可能性降到最低。</p><p>如果英文是你的外语（Second language），提示潜在回复者你有潜在的语言困难是很好的： [译注：以下附上原文以供使用]</p><blockquote><p>English is not my native language; please excuse typing errors.</p></blockquote><ul><li>英文不是我的母语，请原谅我的错字或语法</li></ul><blockquote><p>If you speak $LANGUAGE, please email&#x2F;PM me; </p><p>I may need assistance translating my question.</p></blockquote><ul><li>如果你说<strong>某语言</strong>，请寄信&#x2F;私讯给我；我需要有人协助我翻译我的问题</li></ul><blockquote><p>I’ve posted my question in $LANGUAGE and English. </p><p>I’ll be glad to translate responses, if you only use one or the other.</p></blockquote><ul><li>我把我的问题用<strong>某语言</strong>和英文写出来，如果你只用一种语言回答，我会乐意将其翻译成另一种。</li></ul><h2 id="使用易于读取且标准的文件格式发送问题"><a href="#使用易于读取且标准的文件格式发送问题" class="headerlink" title="使用易于读取且标准的文件格式发送问题"></a>使用易于读取且标准的文件格式发送问题</h2><p>如果你人为地将问题搞得难以阅读，它多半会被忽略，人们更愿读易懂的问题，所以：</p><ul><li><p>使用纯文字而不是HTML (<a href="http://archive.birdhouse.org/etc/evilmail.html">关闭HTML</a>并不难）</p></li><li><p>使用MIME附件通常是可以的，前提是真正有内容（譬如附带的源代码或patch），而不仅仅是邮件 程序生成的模板（譬如只是信件内容的拷贝）。 </p></li><li><p>不要发送一段文字只是单行句子但多次断行的邮件（这使得回复部分内容非常困难）。设想你的读 者是在80个字符宽的终端机上阅读邮件，最好设置你的断行点小于80字。 </p></li><li><p>但是，也<em><strong>不要</strong></em>用任何固定断行资料（譬如日志档案拷贝或会话记录）。档案应该原样包含，让回复 者有信心他们看到的是和你看到的一样的东西。 </p></li><li><p>在英语论坛中，不要使用 <code>Quoted-Printable</code> MIME编码发送消息。这种编码对于张贴非ASCII语言 可能是必须的，但很多邮件程序并不支持这种编码。当它们分断时，那些文本中四处散布的 <code>=20</code> 符 号既难看也分散注意力，甚至有可能破坏内容的语意。 </p></li><li><p>绝对，<em><strong>永远</strong></em>不要指望黑客们阅读使用封闭格式编写的文档，像是微软公司的Word或Excel文件等。 大多数黑客对此的反应就像有人将还在冒热气的猪粪倒在你门口阶梯上时你的反应一样。即便他们 能够处理，他们也很厌恶这么做。</p></li><li><p>如果你从使用Windows的电脑发送电子邮件，关闭微软愚蠢的 <code>智能引号</code> 功能 （从[选项] &gt; [校订] &gt; [自动校正选项], 按掉 <code>智能引号</code> 单选框），以免在你的邮件中到处散布垃圾字符。</p></li><li><p>在论坛，勿滥用 <code>表情符号</code> 和 <code>HTML</code> 功能（当它们提供时）。一两个表情符号通常没有问题，但花哨 的彩色文本倾向于使人认为你是个无能之辈。过滥地使用表情符号、色彩和字体会使你看来像个傻 笑的小姑娘。这通常不是个好主意，除非你只是对sex而不是有用的回复更有兴趣。</p></li></ul><p>如果你使用图形用户界面的邮件程序（如微软公司的Outlook或者其它类似的），注意它们的默认设置 不一定满足这些要求。大多数这类程序有基于选单的 <code>查看源代码</code> 命令，用它来检查发送文件夹中的消 息，以确保发送的是没有多餘杂质的纯文本文件。</p><h2 id="精确的描述问题并言之有物"><a href="#精确的描述问题并言之有物" class="headerlink" title="精确的描述问题并言之有物"></a>精确的描述问题并言之有物</h2><ul><li><p>仔细、清楚地描述你的问题或Bug的症状。</p></li><li><p>描述问题发生的环境（机器配置、操作系统、应用程序、以及相关的信息），提供经销商的发行版 和版本号（如： <code>Fedora Core 4</code> 、 <code>Slackware 9.1</code> 等）。</p></li><li><p>描述在提问前你是怎样去研究和理解这个问题的。</p></li><li><p>描述在提问前为确定问题而采取的诊断步骤。</p></li><li><p>描述最近做过什么可能相关的硬件或软件变更。 </p></li><li><p>尽可能的提供一个可以 <code>重现这个问题的既定环境</code> 的方法</p></li></ul><p>尽量去揣测一个黑客会怎样反问你，在他提问的时候预先给他答案。</p><p>以上几点中，当你报告的是你认为可能在代码中的问题时，给黑客一个可以重现你的问题的环境尤其重 要。当你这么做时，你得到有效的回答的机会和速度都会大大的提升。</p><p><a href="http://www.chiark.greenend.org.uk/~sgtatham/">Simon Tatham</a>写过一篇名为《<a href="http://www.chiark.greenend.org.uk/~sgtatham/bugs-tw.html">如何有效的报告Bug</a>》的出色文章。强力推荐你也读一读。</p><h2 id="话不在多而在精"><a href="#话不在多而在精" class="headerlink" title="话不在多而在精"></a>话不在多而在精</h2><p>你需要提供精确有内容的信息。这并不是要求你简单的把成堆的出错代码或者资料完全转录到你的提问中。如果你有庞大而复杂的测试样例能重现程序挂掉的情境，尽量将它剪裁得越小越好。</p><p>这样做的用处至少有三点。</p><p>第一，表现出你为简化问题付出了努力，这可以使你得到回答的机会增加；</p><p>第二，简化问题使你更有可能得到<em><strong>有用</strong></em>的答案；</p><p>第三，在精炼你的bug报告的过程中，你很可能就自己找到了解决方法或权宜之计。</p><h2 id="别动辄声称找到Bug"><a href="#别动辄声称找到Bug" class="headerlink" title="别动辄声称找到Bug"></a>别动辄声称找到Bug</h2><p>当你在使用软件中遇到问题，除非你非常、<em><strong>非常</strong></em>的有根据，不要动辄声称找到了Bug。提示：除非你能 提供解决问题的源代码补丁，或者对前一版本的回归测试表现出不正确的行为，否则你都多半不够完全 确信。这同样适用在网页和文件，如果你（声称）发现了文件的 <code>Bug</code> ，你应该能提供相应位置的修正或 替代文件。</p><p>请记得，还有许多其它使用者没遇到你发现的问题，否则你在阅读文件或搜索网页时就应该发现了（你在抱怨前<a href="#page3">已经做了这些，是吧</a>？）。这也意味着很有可能是你弄错了而不是软件本身有问题。</p><p>编写软件的人总是非常辛苦地使它尽可能完美。如果你声称找到了Bug，也就是在质疑他们的能力，即 使你是对的，也有可能会冒犯到其中某部分人。这尤其严重当你在标题中嚷嚷着有 <code>Bug</code> 。</p><p>提问时，即使你私下非常确信已经发现一个真正的Bug，最好写得像是<em><strong>你</strong></em>做错了什么。如果真的有 Bug，你会在回复中看到这点。这样做的话，如果真有Bug，维护者就会向你道歉，这总比你惹恼别人 然后欠别人一个道歉要好一点。</p><h2 id="可以低声下气，但还是要先做功课"><a href="#可以低声下气，但还是要先做功课" class="headerlink" title="可以低声下气，但还是要先做功课"></a>可以低声下气，但还是要先做功课</h2><p>有些人明白他们不该粗鲁或傲慢的提问并要求得到答复，但他们选择另一个极端 – 低声下气： <code>我知道我只是个可悲的新手，一个撸瑟，但...</code> 。这既使人困扰，也没有用，尤其是伴随着与实际问题含糊不清的描 述时更令人反感。</p><p>别用原始灵长类动物的把戏来浪费你我的时间。取而代之的是，尽可能清楚地描述背景条件和你的问题 情况。这比低声下气更好地定位了你的位置。</p><p>有时网页论坛会设有专为新手提问的版面，如果你真的认为遇到了初学者的问题，到那去就是了，但一 样别那么低声下气。</p><h2 id="描述问题症状而非猜测"><a href="#描述问题症状而非猜测" class="headerlink" title="描述问题症状而非猜测"></a>描述问题症状而非猜测</h2><p>告诉黑客们你认为问题是怎样造成的并没什么帮助。（如果你的推断如此有效，还用向别人求助 吗？），因此要确信你原原本本告诉了他们问题的症状，而不是你的解释和理论；让黑客们来推测和诊 断。如果你认为陈述自己的猜测很重要，清楚地说明这只是你的猜测，并描述为什么它们不起作用。</p><p><em><strong>蠢问题</strong></em></p><blockquote><p>我在编译内核时接连遇到 SIG11 错误， </p><p>我怀疑某条飞线搭在主板的走线上了，这种情况应该怎样检查最好？</p></blockquote><p><em><strong>聪明问题</strong></em></p><blockquote><p>我的组装电脑是 FIC-PA2007 主机板搭载 AMD K6&#x2F;233 CPU（威盛 Apollo VP2芯片组）， 256MB Corsair PC133 SDRAM内存，在编译内核时，从开机20分钟以后就频频产生 SIG11 错误， </p><p>但是在头20分钟内从没发生过相同的问题。重新启动也没有用，但是关机一晚上就又能工作20分钟。</p><p>所有内存都换过了，没有效果。相关部分的标准编译记录如下…。</p></blockquote><p>由于以上这点似乎让许多人觉得难以配合，这里有句话可以提醒你： <code>所有的诊断专家都来自密苏里州</code>。 美国国务院的官方座右铭则是： <code>让我看看</code> （出自国会议员 Willard D. Vandiver 在1899年时的讲话： <code>我来自一个出产玉米，棉花，牛蒡和民主党人的国家，滔滔雄辩既不能说服我，也不会让我满意。我来自密苏里州，你必须让我看看。</code> ） 针对诊断者而言，这并不是一种怀疑，而只是一种真实而有用的需求，以便让他们看 到的是与你看到的原始证据尽可能一致的东西，而不是你的猜测与归纳的结论。所以，大方的展示给我 们看吧！</p><h2 id="按发生时间先后列出问题症状"><a href="#按发生时间先后列出问题症状" class="headerlink" title="按发生时间先后列出问题症状"></a>按发生时间先后列出问题症状</h2><p>问题发生前的一系列操作，往往就是对找出问题最有帮助的线索。因此，你的说明里应该包含你的操作 步骤，以及机器和软件的反应，直到问题发生。在命令行处理的情况下，提供一段操作记录（例如运行 脚本工具所生成的），并引用相关的若干行（如20行）记录会非常有帮助。</p><p>如果挂掉的程序有诊断选项（如 -v 的详述开关），试着选择这些能在记录中增加调试信息的选项。记住， <code>多</code> 不等于 <code>好</code> 。试着选取适当的调试级别以便提供有用的信息而不是让读者淹没在垃圾中。</p><p>如果你的说明很长（如超过四个段落），在开头简述问题，接下来再按时间顺序详述会有所帮助。这样 黑客们在读你的记录时就知道该注意哪些内容了。</p><h2 id="描述目标而不是过程"><a href="#描述目标而不是过程" class="headerlink" title="描述目标而不是过程"></a>描述目标而不是过程</h2><p>如果你想弄清楚如何做某事（而不是报告一个Bug），在开头就描述你的目标，然后才陈述重现你所卡 住的特定步骤。</p><p>经常寻求技术帮助的人在心中有个更高层次的目标，而他们在自以为能达到目标的特定道路上被卡住 了，然后跑来问该怎么走，但没有意识到这条路本身就有问题。结果要费很大的劲才能搞定。</p><p><strong>蠢问题</strong></p><blockquote><p>我怎样才能从某绘图程序的颜色选择器中取得十六进制的的RGB值？</p></blockquote><p><strong>聪明问题</strong></p><blockquote><p>我正试着用替换一幅图片的色码成自己选定的色码，我现在知道的唯一方法是编辑每个色码区块， 但却无法从某绘图程序的颜色选择器取得十六进制的的RGB值。</p></blockquote><p>第二种提问法比较聪明，你可能得到像是 <code>建议采用另一个更合适的工具</code> 的回复。</p><h2 id="别要求使用私人电邮回复"><a href="#别要求使用私人电邮回复" class="headerlink" title="别要求使用私人电邮回复"></a>别要求使用私人电邮回复</h2><p>黑客们认为问题的解决过程应该公开、透明，此过程中如果更有经验的人注意到不完整或者不当之处， 最初的回复才能够、也应该被纠正。同时，作为提供帮助者也能因为能力和学识被其它同行看到而得到 某种奖励。</p><p>当你要求私下回复时，这个过程和奖励都被中止。别这样做，让<em><strong>回复者</strong></em>来决定是否私下回答 – 如果他真 这么做了，通常是因为他认为问题编写太差或者太肤浅，以至于对其它人没有兴趣。</p><p>这条规则存在一条有限的例外，如果你确信提问可能会引来大量雷同的回复时，那么这个神奇的提问句 <code>会是向我发电邮，我将为论坛归纳这些回复</code> 。试着将邮件列表或新闻群组从洪水般的雷同回复中解救出来 是非常有礼貌的 – 但你必须信守诺言。</p><h2 id="清楚明确的表达你的问题以及需求"><a href="#清楚明确的表达你的问题以及需求" class="headerlink" title="清楚明确的表达你的问题以及需求"></a>清楚明确的表达你的问题以及需求</h2><p>漫无边际的提问近乎无休无止的时间黑洞。最有可能给你有用答案的人通常也正是最忙的人（他们忙是 因为要亲自完成大部分工作）。这样的人对无节制的时间黑洞相当厌恶，所以他们也倾向于厌恶那些漫 无边际的提问。</p><p>如果你明确表述需要回答者做什么（如提供指点、发送一段代码、检查你的补丁、或是其他等等），就 最有可能得到有用的答案。因为这会定出一个时间和精力的上限，便于回答者能集中精力来帮你。这么 做很棒。</p><p>要理解专家们所处的世界，请把专业技能想像为充裕的资源，而回复的时间则是稀缺的资源。你要求他 们奉献的时间越少，你越有可能从真正专业而且很忙的专家那里得到解答。</p><p>所以，界定一下你的问题，使专家花在辨识你的问题和回答所需要付出的时间减到最少，这技巧对你有 用答案相当有帮助 – 但这技巧通常和简化问题有所区别。因此，问 <code>我想更好的理解X，可否指点一下哪有好 一点说明？</code> 通常比问 <code>你能解释一下X吗？</code> 更好。如果你的代码不能运作，通常请别人看看哪里有问题，比 要求别人替你改正要明智得多。</p><h2 id="询问有关代码的问题时"><a href="#询问有关代码的问题时" class="headerlink" title="询问有关代码的问题时"></a>询问有关代码的问题时</h2><p>别要求他人帮你有问题的代码调试而不提示一下应该从何入手。张贴几百行的代码，然后说一声： <code>它不会动</code> 会让你完全被忽略。只贴几十行代码，然后说一句： <code>在第七行以后，我期待它显示&lt;x&gt; ，但实际出现的是&lt;y&gt;比较有可能让你得到回应</code>。</p><p>最有效描述程序问题的方法是提供最精简的Bug展示测试示例（bug-demonstrating test case）。什么是最精简的测试示例? 那是问题的缩影；一小个程序片段能<strong>刚好</strong>展示出程序的异常行为，而不包含其他令人分散注意力的内容。怎么制作最精简的测试示例？如果你知道哪一行或哪一段代码会造成异常的行为，复制下来并加入足够重现这个状况的代码（例如，足以让这段代码能被编译&#x2F;直译&#x2F;被应用程序处理）。如果你无法将问题缩减到一个特定区块，就复制一份代码并移除不影响产生问题行为的部分。总之，测试示例越小越好（查看<a href="#%E8%AF%9D%E4%B8%8D%E5%9C%A8%E5%A4%9A%E8%80%8C%E5%9C%A8%E7%B2%BE">话不在多而在精</a>一节）。</p><p>一般而言，要得到一段相当精简的测试示例并不太容易，但永远先尝试这样做的是种好习惯。这种方式可以帮助你了解如何自行解决这个问题 —- 而且即使你的尝试不成功，黑客们也会看到你在尝试取得答案的过程中付出了努力，这可以让他们更愿意与你合作。</p><p>如果你只是想让别人帮忙审查（Review）一下代码，在信的开头就要说出来，并且一定要提到你认为哪一部分特别需要关注以及为什么。</p><h2 id="别把自己家庭作业的问题贴上来"><a href="#别把自己家庭作业的问题贴上来" class="headerlink" title="别把自己家庭作业的问题贴上来"></a>别把自己家庭作业的问题贴上来</h2><p>黑客们很擅长分辨哪些问题是家庭作业式的问题；因为我们中的大多数都曾自己解决这类问题。同样， 这些问题得由<em><strong>你</strong></em>来搞定，你会从中学到东西。你可以要求给点提示，但别要求得到完整的解决方案。</p><p>如果你怀疑自己碰到了一个家庭作业式的问题，但仍然无法解决，试试在<em><strong>使用者</strong></em>群组，论坛或（最后一 招）在项目的使用者邮件列表或论坛中提问。尽管黑客们<em><strong>会</strong></em>看出来，但一些有经验的使用者也许仍会给 你一些提示。</p><h2 id="去掉无意义的提问句"><a href="#去掉无意义的提问句" class="headerlink" title="去掉无意义的提问句"></a>去掉无意义的提问句</h2><p>避免用无意义的话结束提问，例如<code>有人能帮我吗？</code> 或者<code>这有答案吗？</code> 。</p><p>首先：如果你对问题的描述不是很好，这样问更是画蛇添足。</p><p>其次：由于这样问是画蛇添足，黑客们会很厌烦你 – 而且通常会用逻辑上正确，但毫无意义的回答来表示他们的蔑视， 例如：<code>没错，有人能帮你</code> 或者<code>不，没答案</code> 。</p><p>一般来说，避免用 <code>是或否</code> 、<code>对或错</code> 、<code>有或没有</code> 类型的问句，除非你想得到<a href="http://homepage.ntlworld.com./jonathan.deboynepollard/FGA/questions-with-yes-or-no-answers.html">是或否类型的回答</a>。</p><h2 id="即使你很急也不要在标题写紧急"><a href="#即使你很急也不要在标题写紧急" class="headerlink" title="即使你很急也不要在标题写紧急"></a>即使你很急也不要在标题写<code>紧急</code></h2><p>这是你的问题，不是我们的。宣称 <code>紧急</code> 极有可能事与愿违：大多数黑客会直接删除无礼和自私地企图即 时引起关注的问题。更严重的是， <code>紧急</code> 这个字（或是其他企图引起关注的标题）通常会被垃圾信过滤器 过滤掉 – 你希望能看到你问题的人可能永远也看不到。</p><p>有半个例外的情况是，如果你是在一些很高调，会使黑客们兴奋的地方，也许值得这样去做。在这种情 况下，如果你有时间压力，也很有礼貌地提到这点，人们也许会有兴趣回答快一点。</p><p>当然，这风险很大，因为黑客们兴奋的点多半与你的不同。譬如从 NASA 国际空间站（International Space Station）发这样的标题没有问题，但用自我感觉良好的慈善行为或政治原因发肯定不行。事实 上，张贴诸如 <code>紧急：帮我救救这个毛绒绒的小海豹！</code> 肯定让你被黑客忽略或惹恼他们，即使他们认为毛绒 绒的小海豹很重要。</p><h2 id="礼多人不怪，而且有时还很有帮助"><a href="#礼多人不怪，而且有时还很有帮助" class="headerlink" title="礼多人不怪，而且有时还很有帮助"></a>礼多人不怪，而且有时还很有帮助</h2><p>彬彬有礼，多用 <code>请</code> 和 <code>谢谢您的关注</code> ，或 <code>谢谢你的关照</code> 。让大家都知道你对他们花时间免费提供帮助心存感激。</p><p>坦白说，这一点并没有比清晰、正确、精准并合法语法和避免使用专用格式重要（也不能取而代之）。 黑客们一般宁可读有点唐突但技术上鲜明的Bug报告，而不是那种有礼但含糊的报告。（如果这点让你 不解，记住我们是按问题能教我们什么来评价问题的价值的）</p><p>然而，如果你有一串的问题待解决，客气一点肯定会增加你得到有用回应的机会。</p><p> （我们注意到，自从本指南发布后，从资深黑客那里得到的唯一严重缺陷反馈，就是对预先道谢这一 条。一些黑客觉得 <code>先谢了</code> 意味着事后就不用再感谢任何人的暗示。我们的建议是要么先说 <code>先谢了</code> ，然后 事后再对回复者表示感谢，或者换种方式表达感激，譬如用 <code>谢谢你的关注</code> 或 <code>谢谢你的关照</code> 。）</p><h2 id="问题解决后，加个简短的补充说明"><a href="#问题解决后，加个简短的补充说明" class="headerlink" title="问题解决后，加个简短的补充说明"></a>问题解决后，加个简短的补充说明</h2><p>问题解决后，向所有帮助过你的人发个说明，让他们知道问题是怎样解决的，并再一次向他们表示感谢。如果问题在新闻组或者邮件列表中引起了广泛关注，应该在那里贴一个说明比较恰当。</p><p>最理想的方式是向最初提问的话题回复此消息，并在标题中包含<code>已修正</code> ，已解决 或其它同等含义的明显标记。在人来人往的邮件列表里，一个看见讨论串<code>问题 X</code> 和<code>问题的X - 已解决</code> 的潜在回复者就明白不用再浪费时间了（除非他个人觉得<code>问题 X</code> 的有趣），因此可以利用此时间去解决其它问题。</p><p>补充说明不必很长或是很深入；简单的一句你<code>好，原来是网线出了问题！谢谢大家 – Bill</code> 比什么也不说要来的好。事实上，除非结论真的很有技术含量，否则简短可爱的小结比长篇大论更好。说明问题是怎样解决的，但大可不必将解决问题的过程复述一遍。</p><p>对于有深度的问题，张贴调试记录的摘要是有帮助的。描述问题的最终状态，说明是什么解决了问题， 在此<em><strong>之后</strong></em>才指明可以避免的盲点。避免盲点的部分应放在正确的解决方案和其它总结材料之后，而不要 将此信息搞成侦探推理小说。列出那些帮助过你的名字，会让你交到更多朋友。</p><p>除了有礼貌和有内涵以外，这种类型的补充也有助于他人在邮件列表&#x2F;新闻群组&#x2F;论坛中搜索到真正解决你问题的方案，让他们也从中受益。</p><p>至少，这种补充有助于让每位参与协助的人因问题的解决而从中得到满足感。如果你自己不是技术专家或者黑客，那就相信我们，这种感觉对于那些你向他们求助的大师或者专家而言，是非常重要的。问题悬而未决会让人灰心；黑客们渴望看到问题被解决。好人有好报，满足他们的渴望，你会在下次提问时尝到甜头。</p><p>思考一下怎样才能避免他人将来也遇到类似的问题，自问写一份文件或加个常见问题（FAQ）会不会有帮助。如果是的话就将它们发给维护者。</p><p>在黑客中，这种良好的后继行动实际上比传统的礼节更为重要，也是你如何透过善待他人而赢得声誉的方式，这是非常有价值的资产。</p><h2 id="如何解读答案"><a href="#如何解读答案" class="headerlink" title="如何解读答案"></a>如何解读答案</h2><h3 id="RTFM和STFW：如何知道你已完全搞砸了"><a href="#RTFM和STFW：如何知道你已完全搞砸了" class="headerlink" title="RTFM和STFW：如何知道你已完全搞砸了"></a>RTFM和STFW：如何知道你已完全搞砸了</h3><p>有一个古老而神圣的传统：如果你收到 <code>RTFM （Read The Fucking Manual）</code> 的回应，回答者认为<strong>你应该去读他妈的手册</strong>。当然，基本上他是对的，你应该去读一读。</p><p>RTFM 有一个年轻的亲戚。如果你收到 <code>STFW（Search The Fucking Web）</code> 的回应，回答者认为你<strong>应该到他妈的网上搜索</strong>过了。那人多半也是对的，去搜索一下吧。（更温和一点的说法是<a href="http://lmgtfy.com/">Google是你的朋友</a></p><p>在论坛，你也可能被要求去爬爬论坛的旧文。事实上，有人甚至可能热心地为你提供以前解决此问题的讨论串。但不要依赖这种关照，提问前应该先搜索一下旧文。</p><p>通常，用这两句之一回答你的人会给你一份包含你需要内容的手册或者一个网址，而且他们打这些字的时候也正在读着。这些答复意味着回答者认为</p><ul><li>你需要的信息非常容易获得； </li><li>你自己去搜索这些信息比灌给你能让你学到更多。</li></ul><p>你不应该因此不爽；<strong>依照黑客的标准，他已经表示了对你一定程度的关注，而没有对你的要求视而不见</strong>。你应该对他祖母般的慈祥表示感谢。</p><h3 id="如果还是搞不懂"><a href="#如果还是搞不懂" class="headerlink" title="如果还是搞不懂"></a>如果还是搞不懂</h3><p>如果你看不懂回应，别立刻要求对方解释。像你以前试着自己解决问题时那样（利用手册，FAQ，网 络，身边的高手），先试着去搞懂他的回应。如果你真的需要对方解释，记得表现出你已经从中学到了 点什么。</p><p>比方说，如果我回答你： <code>看来似乎是 zentry 卡住了；你应该先清除它。</code> ，然后，这是一个<em><strong>很糟的</strong></em>后续问 题回应： <code>zentry是什么？</code> 好的问法应该是这样： <code>哦~~~我看过说明了但是只有 -z 和 -p 两个参数中提到了 zentries，而且还都没有清楚的解释如何清除它。你是指这两个中的哪一个吗？还是我看漏了什么？</code></p><h3 id="处理无礼的回应"><a href="#处理无礼的回应" class="headerlink" title="处理无礼的回应"></a>处理无礼的回应</h3><p>很多黑客圈子中看似无礼的行为并不是存心冒犯。相反，它是直接了当，一针见血式的交流风格，这种 风格更注重解决问题，而不是使人感觉舒服而却模模糊糊。</p><p>如果你觉得被冒犯了，试着平静地反应。如果有人真的做了出格的事，邮件列表、新闻群组或论坛中的 前辈多半会招呼他。如果这<em><strong>没有</strong></em>发生而你却发火了，那么你发火对象的言语可能在黑客社区中看起来是 正常的，而你将被视为有错的一方，这将伤害到你获取信息或帮助的机会。</p><p>另一方面，你偶而真的会碰到无礼和无聊的言行。与上述相反，对真正的冒犯者狠狠地打击，用犀利的 语言将其驳得体无完肤都是可以接受的。然而，在行事之前一定要非常非常的有根据。纠正无礼的言论 与开始一场毫无意义的口水战仅一线之隔，黑客们自己莽撞地越线的情况并不鲜见。如果你是新手或外 人，避开这种莽撞的机会并不高。如果你想得到的是信息而不是消磨时光，这时最好不要把手放在键盘 上以免冒险。</p><p>（有些人断言很多黑客都有轻度的自闭症或亚斯伯格综合症，缺少用于润滑人类社会<strong>正常</strong>交往所需的神 经。这既可能是真也可能是假的。如果你自己不是黑客，兴许你认为我们脑袋有问题还能帮助你应付我 们的古怪行为。只管这么干好了，我们不在乎。我们<strong>喜欢</strong>我们现在这个样子，并且通常对病患标记都有 站得住脚的怀疑。）</p><p>在下一节，我们会谈到另一个问题，当<em><strong>你</strong></em>行为不当时所会受到的 <code>冒犯</code> 。</p><h2 id="如何避免扮演失败者"><a href="#如何避免扮演失败者" class="headerlink" title="如何避免扮演失败者"></a>如何避免扮演失败者</h2><p>黑客社区的论坛中有那么几次你可能会搞砸 – 以本指南所描述到的或类似的方式。而你会在公开场合中被告知你是如何搞砸的，也许攻击的言语中还会带点夹七夹八的颜色。</p><p>这种事发生以后，你能做的最糟糕的事莫过于哀嚎你的遭遇、宣称被口头攻击、要求道歉、高声尖叫、憋闷气、威胁诉诸法律、向其雇主报怨、忘了关马桶盖等等。相反地，你该这么做：</p><p>熬过去，这很正常。事实上，它是有益健康且合理的。</p><p>社区的标准不会自行维持，它们是通过参与者积极而<em><strong>公开地</strong></em>执行来维持的。不要哭嚎所有的批评都应该 通过私下的邮件传送，它不是这样运作的。当有人评论你的一个说法有误或者提出不同看法时，坚持声 称受到个人攻击也毫无益处，这些都是失败者的态度。</p><p>也有其它的黑客论坛，受过高礼节要求的误导，禁止参与者张贴任何对别人帖子挑毛病的消息，并声称 <code>如果你不想帮助用户就闭嘴。</code> 结果造成有想法的参与者纷纷离开，这么做只会使它们沦为毫无意义的嘮叨 与无用的技术论坛。</p><p>夸张的讲法是：你要的是<strong>友善</strong>（以上述方式）还是有用？两个里面挑一个。</p><p>记着：当黑客说你搞砸了，并且（无论多么刺耳）告诉你别再这样做时，他正在为关心<strong>你</strong>和<strong>他的社区</strong>而行动。对他而言，不理你并将你从他的生活中滤掉更简单。如果你无法做到感谢，至少要表现地有点尊 严，别大声哀嚎，也别因为自己是个有戏剧性超级敏感的灵魂和自以为有资格的新来者，就指望别人像 对待脆弱的洋娃娃那样对你。</p><p>有时候，即使你没有搞砸（或者只是在他的想像中你搞砸了），有些人也会无缘无故地攻击你本人。在这种情况下，抱怨倒是<strong>真的</strong>会把问题搞砸。</p><p>这些来找麻烦的人要么是毫无办法但自以为是专家的不中用家伙，要么就是测试你是否真会搞砸的心理 专家。其它读者要么不理睬，要么用自己的方式对付他们。这些来找麻烦的人在给他们自己找麻烦，这 点你不用操心。</p><p>也别让自己卷入口水战，最好不要理睬大多数的口水战 – 当然，是在你检验它们只是口水战，而并未指 出你有搞砸的地方，且也没有巧妙地将问题真正的答案藏于其后（这也是有可能的）。</p><h2 id="不该问的问题"><a href="#不该问的问题" class="headerlink" title="不该问的问题"></a>不该问的问题</h2><p>以下是几个经典蠢问题，以及黑客没回答时心中所想的：</p><p>问题：<a href="#%E9%97%AE%E9%A2%98%EF%BC%9A%E6%88%91%E8%83%BD%E5%9C%A8%E5%93%AA%E6%89%BE%E5%88%B0X%E7%A8%8B%E5%BA%8F%E6%88%96X%E8%B5%84%E6%BA%90%EF%BC%9F">我能在哪找到 X 程序或 X 资源？</a></p><p>问题：<a href="#%E9%97%AE%E9%A2%98%EF%BC%9A%E6%88%91%E6%80%8E%E6%A0%B7%E7%94%A8X%E5%81%9AY%EF%BC%9F">我怎样用 X 做 Y？</a></p><p>问题：<a href="#%E9%97%AE%E9%A2%98%EF%BC%9A%E5%A6%82%E4%BD%95%E8%AE%BE%E5%AE%9A%E6%88%91%E7%9A%84shell%E6%8F%90%E7%A4%BA%EF%BC%9F">如何设定我的 shell 提示？</a></p><p>问题：<a href="#%E9%97%AE%E9%A2%98%EF%BC%9A%E6%88%91%E5%8F%AF%E4%BB%A5%E7%94%A8Bass-o-matic%E6%96%87%E4%BB%B6%E8%BD%AC%E6%8D%A2%E5%B7%A5%E5%85%B7%E5%B0%86AcmeCorp%E6%A1%A3%E6%A1%88%E8%BD%AC%E6%8D%A2%E4%B8%BATeX%E6%A0%BC%E5%BC%8F%E5%90%97%EF%BC%9F">我可以用 Bass-o-matic 文件转换工具将 AcmeCorp 档案转换为 TeX 格式吗？</a></p><p>问题：<a href="#%E9%97%AE%E9%A2%98%EF%BC%9A%E6%88%91%E7%9A%84%E7%A8%8B%E5%BA%8F%E3%80%81%E8%AE%BE%E5%AE%9A%E3%80%81SQL%E8%AF%AD%E5%8F%A5%E6%B2%A1%E6%9C%89%E7%94%A8">我的程序、设定、SQL语句没有用</a></p><p>问题：<a href="#%E9%97%AE%E9%A2%98%EF%BC%9A%E6%88%91%E7%9A%84Windows%E7%94%B5%E8%84%91%E6%9C%89%E9%97%AE%E9%A2%98%EF%BC%8C%E4%BD%A0%E8%83%BD%E5%B8%AE%E6%88%91%E5%90%97%EF%BC%9F">我的 Windows 电脑有问题，你能帮我吗？</a></p><p>问题：<a href="#%E9%97%AE%E9%A2%98%EF%BC%9A%E6%88%91%E7%9A%84%E7%A8%8B%E5%BA%8F%E4%B8%8D%E4%BC%9A%E5%8A%A8%E4%BA%86%EF%BC%8C%E6%88%91%E8%AE%A4%E4%B8%BA%E7%B3%BB%E7%BB%9F%E5%B7%A5%E5%85%B7X%E6%9C%89%E9%97%AE%E9%A2%98">我的程序不会动了，我认为系统工具 X 有问题</a></p><p>问题：<a href="#%E9%97%AE%E9%A2%98%EF%BC%9A%E6%88%91%E5%9C%A8%E5%AE%89%E8%A3%85Linux%EF%BC%88%E6%88%96%E8%80%85X%EF%BC%89%E6%97%B6%E6%9C%89%E9%97%AE%E9%A2%98%EF%BC%8C%E4%BD%A0%E8%83%BD%E5%B8%AE%E6%88%91%E5%90%97%EF%BC%9F">我在安装 Linux（或者 X ）时有问题，你能帮我吗？</a></p><p>问题：<a href="#%E9%97%AE%E9%A2%98%EF%BC%9A%E6%88%91%E6%80%8E%E4%B9%88%E6%89%8D%E8%83%BD%E7%A0%B4%E8%A7%A3root%E5%B8%90%E5%8F%B7%E3%80%81%E7%AA%83%E5%8F%96OP%E7%89%B9%E6%9D%83%E3%80%81%E8%AF%BB%E5%88%AB%E4%BA%BA%E7%9A%84%E9%82%AE%E4%BB%B6%E5%91%A2%EF%BC%9F">我怎么才能破解 root 帐号&#x2F;窃取 OP 特权&#x2F;读别人的邮件呢？</a></p><hr><blockquote><h6 id="问题：我能在哪找到X程序或X资源？"><a href="#问题：我能在哪找到X程序或X资源？" class="headerlink" title="问题：我能在哪找到X程序或X资源？"></a>问题：我能在哪找到X程序或X资源？</h6></blockquote><p>回答：就在我找到它的地方啊，白痴 – 搜索引擎的那一头。天哪！难道还有人不会用 <a href="http://www.google.com/">Google </a>吗？</p><blockquote><h6 id="问题：我怎样用X做Y？"><a href="#问题：我怎样用X做Y？" class="headerlink" title="问题：我怎样用X做Y？"></a>问题：我怎样用X做Y？</h6></blockquote><p>回答：如果你想解决的是 Y ，提问时别给出可能并不恰当的方法。这种问题说明提问者不但对 X 完全无知，也对 Y 要解决的问题糊涂，还被特定形势禁锢了思维。最好忽略这种人，等他们把问题搞清楚了再说。</p><blockquote><h6 id="问题：如何设定我的shell提示？"><a href="#问题：如何设定我的shell提示？" class="headerlink" title="问题：如何设定我的shell提示？"></a>问题：如何设定我的shell提示？</h6></blockquote><p>回答：如果你有足够的智慧提这个问题，你也该有足够的智慧去 RTFM，然后自己去找出来。</p><blockquote><h6 id="问题：我可以用Bass-o-matic文件转换工具将AcmeCorp档案转换为TeX格式吗？"><a href="#问题：我可以用Bass-o-matic文件转换工具将AcmeCorp档案转换为TeX格式吗？" class="headerlink" title="问题：我可以用Bass-o-matic文件转换工具将AcmeCorp档案转换为TeX格式吗？"></a>问题：我可以用Bass-o-matic文件转换工具将AcmeCorp档案转换为TeX格式吗？</h6></blockquote><p>回答：试试看就知道了。如果你试过，你既知道了答案，就不用浪费我的时间了。</p><blockquote><h6 id="问题：我的程序、设定、SQL语句没有用"><a href="#问题：我的程序、设定、SQL语句没有用" class="headerlink" title="问题：我的程序、设定、SQL语句没有用"></a>问题：我的程序、设定、SQL语句没有用</h6></blockquote><p>回答：这不算是问题吧，我对要我问你二十个问题才找得出你真正问题的问题没兴趣 – 我有更有意思的 事要做呢。在看到这类问题的时候，我的反应通常不外如下三种</p><ul><li>你还有什么要补充的吗？ </li><li>真糟糕，希望你能搞定。 </li><li>这关我有什么屁事？</li></ul><blockquote><h6 id="问题：我的Windows电脑有问题，你能帮我吗？"><a href="#问题：我的Windows电脑有问题，你能帮我吗？" class="headerlink" title="问题：我的Windows电脑有问题，你能帮我吗？"></a>问题：我的Windows电脑有问题，你能帮我吗？</h6></blockquote><p>回答：能啊，扔掉萎软的垃圾，换个像 Linux 或 BSD 的开放源代码操作系统吧。</p><p>注意：如果程序有官方版 Windows 或者与 Windows 有互动（如Samba），你<em><strong>可以</strong></em>问与Windows相关 的问题， 只是别对问题是由 Windows 操作系统而不是程序本身造成的回复感到惊讶， 因为 Windows 一般来说实在太烂，这种说法通常都是对的。</p><blockquote><h6 id="问题：我的程序不会动了，我认为系统工具X有问题"><a href="#问题：我的程序不会动了，我认为系统工具X有问题" class="headerlink" title="问题：我的程序不会动了，我认为系统工具X有问题"></a>问题：我的程序不会动了，我认为系统工具X有问题</h6></blockquote><p>回答：你完全有可能是第一个注意到被成千上万用户反复使用的系统调用与函数库档案有明显缺陷的 人，更有可能的是你完全没有根据。不同凡响的说法需要不同凡响的证据，当你这样声称时，你必须有 清楚而详尽的缺陷说明文件作后盾。</p><blockquote><h6 id="问题：我在安装Linux（或者X）时有问题，你能帮我吗？"><a href="#问题：我在安装Linux（或者X）时有问题，你能帮我吗？" class="headerlink" title="问题：我在安装Linux（或者X）时有问题，你能帮我吗？"></a>问题：我在安装Linux（或者X）时有问题，你能帮我吗？</h6></blockquote><p>回答：不能，我只有亲自在你的电脑上动手才能找到毛病。还是去找你当地的 Linux 使用群组者寻求实际的指导吧（你能在<a href="http://www.linux.org/groups/index.html">这儿</a>找到使用者群组的清单）。</p><p>注意：如果安装问题与某 Linux 的发行版有关，在它的邮件列表、论坛或本地使用者群组中提问也许是 恰当的。此时，应描述问题的准确细节。在此之前，先用 <code>Linux</code> 和<em><strong>所有</strong></em>被怀疑的硬件作关键词仔细搜索。</p><blockquote><h6 id="问题：我怎么才能破解root帐号、窃取OP特权、读别人的邮件呢？"><a href="#问题：我怎么才能破解root帐号、窃取OP特权、读别人的邮件呢？" class="headerlink" title="问题：我怎么才能破解root帐号、窃取OP特权、读别人的邮件呢？"></a>问题：我怎么才能破解root帐号、窃取OP特权、读别人的邮件呢？</h6></blockquote><p>回答：想要这样做，说明了你是个卑鄙小人；想找个黑客帮你，说明你是个白痴！</p><h2 id="好问题与蠢问题"><a href="#好问题与蠢问题" class="headerlink" title="好问题与蠢问题"></a>好问题与蠢问题</h2><p>最后，我将透过举一些例子，来说明怎样聪明的提问；同一个问题的两种问法被放在一起，一种是愚蠢 的，另一种才是明智的。</p><p><em><strong>蠢问题：</strong></em></p><blockquote><p>我可以在哪儿找到关于 Foonly Flurbamatic 的资料？</p></blockquote><p>这种问法无非想得到 <a href="#page12">STFW </a>这样的回答。</p><p><em><strong>聪明问题：</strong></em></p><blockquote><p>我用Google搜索过 “Foonly Flurbamatic 2600”，但是没找到有用的结果。谁知道上哪儿去找对这 种设备编程的资料？ </p></blockquote><p>这个问题已经 STFW 过了，看起来他真的遇到了麻烦。</p><p> <em><strong>蠢问题</strong></em> </p><blockquote><p>我从 foo 项目找来的源码没法编译。它怎么这么烂？ </p></blockquote><p>他觉得都是别人的错，这个傲慢自大的提问者 </p><p><em><strong>聪明问题</strong></em> </p><blockquote><p>foo 项目代码在 Nulix 6.2 版下无法编译通过。我读过了 FAQ，但里面没有提到跟 Nulix 有关的问 题。这是我编译过程的记录，我有什么做的不对的地方吗？ </p></blockquote><p>提问者已经指明了环境，也读过了FAQ，还列出了错误，并且他没有把问题的责任推到别人头上，他的 问题值得被关注。</p><p><em><strong>蠢问题</strong></em> </p><blockquote><p>我的主机板有问题了，谁来帮我？ </p></blockquote><p>某黑客对这类问题的回答通常是： <code>好的，还要帮你拍拍背和换尿布吗？</code> ，然后按下删除键。</p><p><em><strong>聪明问题</strong></em></p><blockquote><p>我在 S2464 主机板上试过了 X 、 Y 和 Z ，但没什么作用，我又试了 A 、 B 和 C 。请注意当我尝 试 C 时的奇怪现象。显然 florbish 正在 grommicking，但结果出人意料。通常在 Athlon MP 主机 板上引起 grommicking 的原因是什么？有谁知道接下来我该做些什么测试才能找出问题？</p></blockquote><p>这个家伙，从另一个角度来看，值得去回答他。他表现出了解决问题的能力，而不是坐等天上掉答案。 在最后一个问题中，注意 <code>告诉我答案</code> 和 <code>给我启示，指出我还应该做什么诊断工作</code> 之间微妙而又重要的区别。</p><p>事实上，后一个问题源自于 2001 年 8 月在 Linux 内核邮件列表（lkml）上的一个真实的提问。我 （Eric）就是那个提出问题的人。我在 Tyan S2464 主板上观察到了这种无法解释的锁定现象，列表成员 们提供了解决这一问题的重要信息。</p><p>通过我的提问方法，我给了别人可以咀嚼玩味的东西；我设法让人们很容易参与并且被吸引进来。我显 示了自己具备和他们同等的能力，并邀请他们与我共同探讨。通过告诉他们我所走过的弯路，以避免他 们再浪费时间，我也表明了对他们宝贵时间的尊重。</p><p>事后，当我向每个人表示感谢，并且讚赏这次良好的讨论经歷的时候， 一个 Linux 内核邮件列表的成员 表示，他觉得我的问题得到解决并非由于我是这个列表中的<code>名人</code>，而是因为我用了正确的方式来提问。</p><p>黑客从某种角度来说是拥有丰富知识但缺乏人情味的家伙；我相信他是对的，如果我<code>像</code>个乞讨者那样提 问，不论我是谁，一定会惹恼某些人或者被他们忽视。他建议我记下这件事，这直接导致了本指南的出 现。</p><h2 id="如果得不到回答"><a href="#如果得不到回答" class="headerlink" title="如果得不到回答"></a>如果得不到回答</h2><p>如果仍得不到回答，请不要以为我们觉得无法帮助你。有时只是看到你问题的人不知道答案罢了。没有回应不代表你被忽视，虽然不可否认这种差别很难区分。</p><p>总的来说，简单的重复张贴问题是个很糟的点子。这将被视为无意义的喧闹。有点耐心，知道你问题答案的人可能生活在不同的时区，可能正在睡觉，也有可能你的问题一开始就没有组织好。</p><p>你可以通过其他渠道获得帮助，这些渠道通常更适合初学者的需要。</p><p>有许多网上的以及本地的使用者群组，由热情的软件爱好者（即使他们可能从没亲自写过任何软件）组成。通常人们组建这样的团体来互相帮助并帮助新手。</p><p>另外，你可以向很多商业公司寻求帮助，不论公司大还是小。别为要付费才能获得帮助而感到沮丧！毕竟，假使你的汽车发动机汽缸密封圈爆掉了– 完全可能如此 –你还得把它送到修车铺，并且为维修付费。就算软件没花费你一分钱，你也不能强求技术支持总是免费的。</p><p>对像是 Linux 这种大众化的软件，每个开发者至少会对应到上万名使用者。根本不可能由一个人来处理来自上万名使用者的求助电话。要知道，即使你要为这些协助付费，和你所购买的同类软件相比，你所付出的也是微不足道的（通常封闭源代码软件的技术支持费用比开放源代码软件的要高得多，且内容也没那么丰富）。</p><h2 id="如何更好地回答问题"><a href="#如何更好地回答问题" class="headerlink" title="如何更好地回答问题"></a>如何更好地回答问题</h2><p><em><strong>态度和善一点。</strong></em>问题带来的压力常使人显得无礼或愚蠢，其实并不是这样。</p><p><em><strong>对初犯者私下回复。</strong></em>对那些坦诚犯错之人没有必要当众羞辱，一个真正的新手也许连怎么搜索或在哪找 常见问题都不知道。</p><p><em><strong>如果你不确定，一定要说出来！</strong></em>一个听起来权威的错误回复比没有还要糟，别因为听起来像个专家很好 玩，就给别人乱指路。要谦虚和诚实，给提问者与同行都树个好榜样。</p><p><em><strong>如果帮不了忙，也别妨碍他。</strong></em>不要在实际步骤上开玩笑，那样也许会毁了使用者的设置 –有些可怜的呆 瓜会把它当成真的指令。</p><p><em><strong>试探性的反问以引出更多的细节。</strong></em>如果你做得好，提问者可以学到点东西 –你也可以。试试将蠢问题转 变成好问题，别忘了我们都曾是新手。</p><p>尽管对那些懒虫抱怨一声 RTFM 是正当的，能指出文件的位置（即使只是建议个 Google 搜索关键词） 会更好。</p><p><em><strong>如果你决定回答，就请给出好的答案。</strong></em>当别人正在用错误的工具或方法时别建议笨拙的权宜之计 （wordaround），应推荐更好的工具，重新界定问题。</p><p><em><strong>正面的回答问题！</strong></em>如果这个提问者已经很深入的研究而且也表明已经试过 X 、 Y 、 Z 、 A 、 B 、 C 但 没得到结果，回答 <code>试试看 A 或是 B</code> 或者 <code>试试X 、 Y 、 Z 、 A 、 B 、 C</code> 并附上一个链接一点用都 没有。</p><p><em><strong>帮助你的社区从问题中学习。</strong></em>当回复一个好问题时，问问自己 <code>如何修改相关文件或常见问题文件以免再次解 答同样的问题？</code> ，接着再向文件维护者发一份补丁。</p><p>如果你是在研究一番后才做出的回答，<em><strong>展现你的技巧而不是直接端出结果</strong></em>。毕竟 <code>授人以鱼不如授人以渔</code> 。</p><h2 id="相关资源"><a href="#相关资源" class="headerlink" title="相关资源"></a>相关资源</h2><p>如果你需要个人电脑、Unix 系统和网络如何运作的基础知识，参阅<a href="http://en.tldp.org/HOWTO/Unix-and-Internet-Fundamentals-HOWTO/">Unix系统和网络基本原理</a>。</p><p>当你发布软件或补丁时，试着按<a href="http://en.tldp.org/HOWTO/Software-Release-Practice-HOWTO/index.html">软件发布实践</a>操作。</p><h2 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢"></a>鸣谢</h2><p>Evelyn Mitchel贡献了一些愚蠢问题例子并启发了编写 <code>如何更好地回答问题</code> 这一节， Mikhail Ramendik 贡献了一些特别有价值的建议和改进。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;提问的智慧&quot;&gt;&lt;a href=&quot;#提问的智慧&quot; class=&quot;headerlink&quot; title=&quot;提问的智慧&quot;&gt;&lt;/a&gt;提问的智慧&lt;/h1&gt;&lt;p&gt;How To Ask Questions The Smart Way&lt;/p&gt;
&lt;p&gt;Copyright © 2001</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://w1ndys.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="提问的智慧" scheme="http://w1ndys.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7/"/>
    
    
    <category term="文" scheme="http://w1ndys.top/tags/%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>中华人民共和国网络安全法</title>
    <link href="http://w1ndys.top/2023/09/24/Cybersecurity-Law-of-the-People&#39;s-Republic-of-China/"/>
    <id>http://w1ndys.top/2023/09/24/Cybersecurity-Law-of-the-People&#39;s-Republic-of-China/</id>
    <published>2023-09-24T08:18:32.461Z</published>
    <updated>2023-09-24T08:42:22.555Z</updated>
    
    <content type="html"><![CDATA[<h1 id="中华人民共和国网络安全法"><a href="#中华人民共和国网络安全法" class="headerlink" title="中华人民共和国网络安全法"></a>中华人民共和国网络安全法</h1><p>​（2016年11月7日第十二届全国人民代表大会常务委员会第二十四次会议通过）</p><p>来源： 中国人大网 2016年11月7日 17:31:34</p><p>目  录</p><p>  <a href="https://w1ndys.top/2023/09/24/%E4%B8%AD%E5%8D%8E%E4%BA%BA%E6%B0%91%E5%85%B1%E5%92%8C%E5%9B%BD%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%B3%95/#%E7%AC%AC%E4%B8%80%E7%AB%A0-%E6%80%BB-%E5%88%99">第一章  总  则</a></p><p>  <a href="https://w1ndys.top/2023/09/24/%E4%B8%AD%E5%8D%8E%E4%BA%BA%E6%B0%91%E5%85%B1%E5%92%8C%E5%9B%BD%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%B3%95/#%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%94%AF%E6%8C%81%E4%B8%8E%E4%BF%83%E8%BF%9B">第二章  网络安全支持与促进</a></p><p>  <a href="https://w1ndys.top/2023/09/24/%E4%B8%AD%E5%8D%8E%E4%BA%BA%E6%B0%91%E5%85%B1%E5%92%8C%E5%9B%BD%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%B3%95/#%E7%AC%AC%E4%B8%89%E7%AB%A0-%E7%BD%91%E7%BB%9C%E8%BF%90%E8%A1%8C%E5%AE%89%E5%85%A8">第三章  网络运行安全</a></p><p>​          <a href="https://w1ndys.top/2023/09/24/%E4%B8%AD%E5%8D%8E%E4%BA%BA%E6%B0%91%E5%85%B1%E5%92%8C%E5%9B%BD%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%B3%95/#%E7%AC%AC%E4%B8%80%E8%8A%82-%E4%B8%80%E8%88%AC%E8%A7%84%E5%AE%9A">第一节 一般规定</a></p><p>​          <a href="https://w1ndys.top/2023/09/24/%E4%B8%AD%E5%8D%8E%E4%BA%BA%E6%B0%91%E5%85%B1%E5%92%8C%E5%9B%BD%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%B3%95/#%E7%AC%AC%E4%BA%8C%E8%8A%82-%E5%85%B3%E9%94%AE%E4%BF%A1%E6%81%AF%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E7%9A%84%E8%BF%90%E8%A1%8C%E5%AE%89%E5%85%A8">第二节 关键信息基础设施的运行安全</a></p><p>  <a href="https://w1ndys.top/2023/09/24/%E4%B8%AD%E5%8D%8E%E4%BA%BA%E6%B0%91%E5%85%B1%E5%92%8C%E5%9B%BD%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%B3%95/#%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8">第四章  网络信息安全</a></p><p>  <a href="https://w1ndys.top/2023/09/24/%E4%B8%AD%E5%8D%8E%E4%BA%BA%E6%B0%91%E5%85%B1%E5%92%8C%E5%9B%BD%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%B3%95/#%E7%AC%AC%E4%BA%94%E7%AB%A0-%E7%9B%91%E6%B5%8B%E9%A2%84%E8%AD%A6%E4%B8%8E%E5%BA%94%E6%80%A5%E5%A4%84%E7%BD%AE">第五章 监测预警与应急处置</a></p><p>  <a href="https://w1ndys.top/2023/09/24/%E4%B8%AD%E5%8D%8E%E4%BA%BA%E6%B0%91%E5%85%B1%E5%92%8C%E5%9B%BD%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%B3%95/#%E7%AC%AC%E5%85%AD%E7%AB%A0-%E6%B3%95%E5%BE%8B%E8%B4%A3%E4%BB%BB">第六章 法律责任</a></p><p>  <a href="https://w1ndys.top/2023/09/24/%E4%B8%AD%E5%8D%8E%E4%BA%BA%E6%B0%91%E5%85%B1%E5%92%8C%E5%9B%BD%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%B3%95/#%E7%AC%AC%E4%B8%83%E7%AB%A0-%E9%99%84-%E5%88%99">第七章 附  则</a></p><h2 id="第一章-总-则"><a href="#第一章-总-则" class="headerlink" title="第一章  总  则"></a>第一章  总  则</h2><p><strong>第一条</strong> 为了保障网络安全，维护网络空间主权和国家安全、社会公共利益，保护公民、法人和其他组织的合法权益，促进经济社会信息化健康发展，制定本法。</p><p><strong>第二条</strong> 在中华人民共和国境内建设、运营、维护和使用网络，以及网络安全的监督管理，适用本法。</p><p><strong>第三条</strong> 国家坚持网络安全与信息化发展并重，遵循积极利用、科学发展、依法管理、确保安全的方针，推进网络基础设施建设和互联互通，鼓励网络技术创新和应用，支持培养网络安全人才，建立健全网络安全保障体系，提高网络安全保护能力。</p><p><strong>第四条</strong> 国家制定并不断完善网络安全战略，明确保障网络安全的基本要求和主要目标，提出重点领域的网络安全政策、工作任务和措施。</p><p><strong>第五条</strong> 国家采取措施，监测、防御、处置来源于中华人民共和国境内外的网络安全风险和威胁，保护关键信息基础设施免受攻击、侵入、干扰和破坏，依法惩治网络违法犯罪活动，维护网络空间安全和秩序。</p><p><strong>第六条</strong> 国家倡导诚实守信、健康文明的网络行为，推动传播社会主义核心价值观，采取措施提高全社会的网络安全意识和水平，形成全社会共同参与促进网络安全的良好环境。</p><p><strong>第七条</strong> 国家积极开展网络空间治理、网络技术研发和标准制定、打击网络违法犯罪等方面的国际交流与合作，推动构建和平、安全、开放、合作的网络空间，建立多边、民主、透明的网络治理体系。</p><p><strong>第八条</strong> 国家网信部门负责统筹协调网络安全工作和相关监督管理工作。国务院电信主管部门、公安部门和其他有关机关依照本法和有关法律、行政法规的规定，在各自职责范围内负责网络安全保护和监督管理工作。</p><p>县级以上地方人民政府有关部门的网络安全保护和监督管理职责，按照国家有关规定确定。</p><p><strong>第九条</strong> 网络运营者开展经营和服务活动，必须遵守法律、行政法规，尊重社会公德，遵守商业道德，诚实信用，履行网络安全保护义务，接受政府和社会的监督，承担社会责任。</p><p><strong>第十条</strong> 建设、运营网络或者通过网络提供服务，应当依照法律、行政法规的规定和国家标准的强制性要求，采取技术措施和其他必要措施，保障网络安全、稳定运行，有效应对网络安全事件，防范网络违法犯罪活动，维护网络数据的完整性、保密性和可用性。</p><p><strong>第十一条</strong> 网络相关行业组织按照章程，加强行业自律，制定网络安全行为规范，指导会员加强网络安全保护，提高网络安全保护水平，促进行业健康发展。</p><p><strong>第十二条</strong> 国家保护公民、法人和其他组织依法使用网络的权利，促进网络接入普及，提升网络服务水平，为社会提供安全、便利的网络服务，保障网络信息依法有序自由流动。</p><p>任何个人和组织使用网络应当遵守宪法法律，遵守公共秩序，尊重社会公德，不得危害网络安全，不得利用网络从事危害国家安全、荣誉和利益，煽动颠覆国家政权、推翻社会主义制度，煽动分裂国家、破坏国家统一，宣扬恐怖主义、极端主义，宣扬民族仇恨、民族歧视，传播暴力、淫秽色情信息，编造、传播虚假信息扰乱经济秩序和社会秩序，以及侵害他人名誉、隐私、知识产权和其他合法权益等活动。</p><p><strong>第十三条</strong> 国家支持研究开发有利于未成年人健康成长的网络产品和服务，依法惩治利用网络从事危害未成年人身心健康的活动，为未成年人提供安全、健康的网络环境。</p><p><strong>第十四条</strong> 任何个人和组织有权对危害网络安全的行为向网信、电信、公安等部门举报。收到举报的部门应当及时依法作出处理；不属于本部门职责的，应当及时移送有权处理的部门。</p><p>有关部门应当对举报人的相关信息予以保密，保护举报人的合法权益。</p><h2 id="第二章-网络安全支持与促进"><a href="#第二章-网络安全支持与促进" class="headerlink" title="第二章  网络安全支持与促进"></a>第二章  网络安全支持与促进</h2><p><strong>第十五条</strong> 国家建立和完善网络安全标准体系。国务院标准化行政主管部门和国务院其他有关部门根据各自的职责，组织制定并适时修订有关网络安全管理以及网络产品、服务和运行安全的国家标准、行业标准。</p><p>国家支持企业、研究机构、高等学校、网络相关行业组织参与网络安全国家标准、行业标准的制定。</p><p><strong>第十六条</strong> 国务院和省、自治区、直辖市人民政府应当统筹规划，加大投入，扶持重点网络安全技术产业和项目，支持网络安全技术的研究开发和应用，推广安全可信的网络产品和服务，保护网络技术知识产权，支持企业、研究机构和高等学校等参与国家网络安全技术创新项目。</p><p><strong>第十七条</strong> 国家推进网络安全社会化服务体系建设，鼓励有关企业、机构开展网络安全认证、检测和风险评估等安全服务。</p><p><strong>第十八条</strong> 国家鼓励开发网络数据安全保护和利用技术，促进公共数据资源开放，推动技术创新和经济社会发展。</p><p>国家支持创新网络安全管理方式，运用网络新技术，提升网络安全保护水平。</p><p><strong>第十九条</strong> 各级人民政府及其有关部门应当组织开展经常性的网络安全宣传教育，并指导、督促有关单位做好网络安全宣传教育工作。</p><p>大众传播媒介应当有针对性地面向社会进行网络安全宣传教育。</p><p><strong>第二十条</strong> 国家支持企业和高等学校、职业学校等教育培训机构开展网络安全相关教育与培训，采取多种方式培养网络安全人才，促进网络安全人才交流。</p><h2 id="第三章-网络运行安全"><a href="#第三章-网络运行安全" class="headerlink" title="第三章 网络运行安全"></a>第三章 网络运行安全</h2><h3 id="第一节-一般规定"><a href="#第一节-一般规定" class="headerlink" title="第一节 一般规定"></a>第一节 一般规定</h3><p><strong>第二十一条</strong> 国家实行网络安全等级保护制度。网络运营者应当按照网络安全等级保护制度的要求，履行下列安全保护义务，保障网络免受干扰、破坏或者未经授权的访问，防止网络数据泄露或者被窃取、篡改：</p><p>（一）制定内部安全管理制度和操作规程，确定网络安全负责人，落实网络安全保护责任；</p><p>（二）采取防范计算机病毒和网络攻击、网络侵入等危害网络安全行为的技术措施；</p><p>（三）采取监测、记录网络运行状态、网络安全事件的技术措施，并按照规定留存相关的网络日志不少于六个月；</p><p>（四）采取数据分类、重要数据备份和加密等措施；</p><p>（五）法律、行政法规规定的其他义务。</p><p><strong>第二十二条</strong> 网络产品、服务应当符合相关国家标准的强制性要求。网络产品、服务的提供者不得设置恶意程序；发现其网络产品、服务存在安全缺陷、漏洞等风险时，应当立即采取补救措施，按照规定及时告知用户并向有关主管部门报告。</p><p>网络产品、服务的提供者应当为其产品、服务持续提供安全维护；在规定或者当事人约定的期限内，不得终止提供安全维护。</p><p>网络产品、服务具有收集用户信息功能的，其提供者应当向用户明示并取得同意；涉及用户个人信息的，还应当遵守本法和有关法律、行政法规关于个人信息保护的规定。</p><p><strong>第二十三条</strong> 网络关键设备和网络安全专用产品应当按照相关国家标准的强制性要求，由具备资格的机构安全认证合格或者安全检测符合要求后，方可销售或者提供。国家网信部门会同国务院有关部门制定、公布网络关键设备和网络安全专用产品目录，并推动安全认证和安全检测结果互认，避免重复认证、检测。</p><p><strong>第二十四条</strong> 网络运营者为用户办理网络接入、域名注册服务，办理固定电话、移动电话等入网手续，或者为用户提供信息发布、即时通讯等服务，在与用户签订协议或者确认提供服务时，应当要求用户提供真实身份信息。用户不提供真实身份信息的，网络运营者不得为其提供相关服务。</p><p>国家实施网络可信身份战略，支持研究开发安全、方便的电子身份认证技术，推动不同电子身份认证之间的互认。</p><p><strong>第二十五条</strong> 网络运营者应当制定网络安全事件应急预案，及时处置系统漏洞、计算机病毒、网络攻击、网络侵入等安全风险；在发生危害网络安全的事件时，立即启动应急预案，采取相应的补救措施，并按照规定向有关主管部门报告。</p><p><strong>第二十六条</strong> 开展网络安全认证、检测、风险评估等活动，向社会发布系统漏洞、计算机病毒、网络攻击、网络侵入等网络安全信息，应当遵守国家有关规定。</p><p><strong>第二十七条</strong> 任何个人和组织不得从事非法侵入他人网络、干扰他人网络正常功能、窃取网络数据等危害网络安全的活动；不得提供专门用于从事侵入网络、干扰网络正常功能及防护措施、窃取网络数据等危害网络安全活动的程序、工具；明知他人从事危害网络安全的活动的，不得为其提供技术支持、广告推广、支付结算等帮助。</p><p><strong>第二十八条</strong> 网络运营者应当为公安机关、国家安全机关依法维护国家安全和侦查犯罪的活动提供技术支持和协助。</p><p><strong>第二十九条</strong> 国家支持网络运营者之间在网络安全信息收集、分析、通报和应急处置等方面进行合作，提高网络运营者的安全保障能力。</p><p>有关行业组织建立健全本行业的网络安全保护规范和协作机制，加强对网络安全风险的分析评估，定期向会员进行风险警示，支持、协助会员应对网络安全风险。</p><p><strong>第三十条</strong> 网信部门和有关部门在履行网络安全保护职责中获取的信息，只能用于维护网络安全的需要，不得用于其他用途。</p><h3 id="第二节-关键信息基础设施的运行安全"><a href="#第二节-关键信息基础设施的运行安全" class="headerlink" title="第二节 关键信息基础设施的运行安全"></a>第二节 关键信息基础设施的运行安全</h3><p><strong>第三十一条</strong> 国家对公共通信和信息服务、能源、交通、水利、金融、公共服务、电子政务等重要行业和领域，以及其他一旦遭到破坏、丧失功能或者数据泄露，可能严重危害国家安全、国计民生、公共利益的关键信息基础设施，在网络安全等级保护制度的基础上，实行重点保护。关键信息基础设施的具体范围和安全保护办法由国务院制定。</p><p>国家鼓励关键信息基础设施以外的网络运营者自愿参与关键信息基础设施保护体系。</p><p><strong>第三十二条</strong> 按照国务院规定的职责分工，负责关键信息基础设施安全保护工作的部门分别编制并组织实施本行业、本领域的关键信息基础设施安全规划，指导和监督关键信息基础设施运行安全保护工作。</p><p><strong>第三十三条</strong> 建设关键信息基础设施应当确保其具有支持业务稳定、持续运行的性能，并保证安全技术措施同步规划、同步建设、同步使用。</p><p><strong>第三十四条</strong> 除本法第二十一条的规定外，关键信息基础设施的运营者还应当履行下列安全保护义务：</p><p>（一）设置专门安全管理机构和安全管理负责人，并对该负责人和关键岗位的人员进行安全背景审查；</p><p>（二）定期对从业人员进行网络安全教育、技术培训和技能考核；</p><p>（三）对重要系统和数据库进行容灾备份；</p><p>（四）制定网络安全事件应急预案，并定期进行演练；</p><p>（五）法律、行政法规规定的其他义务。</p><p><strong>第三十五条</strong> 关键信息基础设施的运营者采购网络产品和服务，可能影响国家安全的，应当通过国家网信部门会同国务院有关部门组织的国家安全审查。</p><p><strong>第三十六条</strong> 关键信息基础设施的运营者采购网络产品和服务，应当按照规定与提供者签订安全保密协议，明确安全和保密义务与责任。</p><p><strong>第三十七条</strong> 关键信息基础设施的运营者在中华人民共和国境内运营中收集和产生的个人信息和重要数据应当在境内存储。因业务需要，确需向境外提供的，应当按照国家网信部门会同国务院有关部门制定的办法进行安全评估；法律、行政法规另有规定的，依照其规定。</p><p><strong>第三十八条</strong> 关键信息基础设施的运营者应当自行或者委托网络安全服务机构对其网络的安全性和可能存在的风险每年至少进行一次检测评估，并将检测评估情况和改进措施报送相关负责关键信息基础设施安全保护工作的部门。</p><p><strong>第三十九条</strong> 国家网信部门应当统筹协调有关部门对关键信息基础设施的安全保护采取下列措施：</p><p>（一）对关键信息基础设施的安全风险进行抽查检测，提出改进措施，必要时可以委托网络安全服务机构对网络存在的安全风险进行检测评估；</p><p>（二）定期组织关键信息基础设施的运营者进行网络安全应急演练，提高应对网络安全事件的水平和协同配合能力；</p><p>（三）促进有关部门、关键信息基础设施的运营者以及有关研究机构、网络安全服务机构等之间的网络安全信息共享；</p><p>（四）对网络安全事件的应急处置与网络功能的恢复等，提供技术支持和协助。</p><h2 id="第四章-网络信息安全"><a href="#第四章-网络信息安全" class="headerlink" title="第四章 网络信息安全"></a>第四章 网络信息安全</h2><p><strong>第四十条</strong> 网络运营者应当对其收集的用户信息严格保密，并建立健全用户信息保护制度。</p><p><strong>第四十一条</strong> 网络运营者收集、使用个人信息，应当遵循合法、正当、必要的原则，公开收集、使用规则，明示收集、使用信息的目的、方式和范围，并经被收集者同意。</p><p>网络运营者不得收集与其提供的服务无关的个人信息，不得违反法律、行政法规的规定和双方的约定收集、使用个人信息，并应当依照法律、行政法规的规定和与用户的约定，处理其保存的个人信息。</p><p><strong>第四十二条</strong> 网络运营者不得泄露、篡改、毁损其收集的个人信息；未经被收集者同意，不得向他人提供个人信息。但是，经过处理无法识别特定个人且不能复原的除外。</p><p>网络运营者应当采取技术措施和其他必要措施，确保其收集的个人信息安全，防止信息泄露、毁损、丢失。在发生或者可能发生个人信息泄露、毁损、丢失的情况时，应当立即采取补救措施，按照规定及时告知用户并向有关主管部门报告。</p><p><strong>第四十三条</strong> 个人发现网络运营者违反法律、行政法规的规定或者双方的约定收集、使用其个人信息的，有权要求网络运营者删除其个人信息；发现网络运营者收集、存储的其个人信息有错误的，有权要求网络运营者予以更正。网络运营者应当采取措施予以删除或者更正。</p><p><strong>第四十四条</strong> 任何个人和组织不得窃取或者以其他非法方式获取个人信息，不得非法出售或者非法向他人提供个人信息。</p><p><strong>第四十五条</strong> 依法负有网络安全监督管理职责的部门及其工作人员，必须对在履行职责中知悉的个人信息、隐私和商业秘密严格保密，不得泄露、出售或者非法向他人提供。</p><p><strong>第四十六条</strong> 任何个人和组织应当对其使用网络的行为负责，不得设立用于实施诈骗，传授犯罪方法，制作或者销售违禁物品、管制物品等违法犯罪活动的网站、通讯群组，不得利用网络发布涉及实施诈骗，制作或者销售违禁物品、管制物品以及其他违法犯罪活动的信息。</p><p><strong>第四十七条</strong> 网络运营者应当加强对其用户发布的信息的管理，发现法律、行政法规禁止发布或者传输的信息的，应当立即停止传输该信息，采取消除等处置措施，防止信息扩散，保存有关记录，并向有关主管部门报告。</p><p><strong>第四十八条</strong> 任何个人和组织发送的电子信息、提供的应用软件，不得设置恶意程序，不得含有法律、行政法规禁止发布或者传输的信息。</p><p>电子信息发送服务提供者和应用软件下载服务提供者，应当履行安全管理义务，知道其用户有前款规定行为的，应当停止提供服务，采取消除等处置措施，保存有关记录，并向有关主管部门报告。</p><p><strong>第四十九条</strong> 网络运营者应当建立网络信息安全投诉、举报制度，公布投诉、举报方式等信息，及时受理并处理有关网络信息安全的投诉和举报。</p><p>网络运营者对网信部门和有关部门依法实施的监督检查，应当予以配合。</p><p><strong>第五十条</strong> 国家网信部门和有关部门依法履行网络信息安全监督管理职责，发现法律、行政法规禁止发布或者传输的信息的，应当要求网络运营者停止传输，采取消除等处置措施，保存有关记录；对来源于中华人民共和国境外的上述信息，应当通知有关机构采取技术措施和其他必要措施阻断传播。</p><h2 id="第五章-监测预警与应急处置"><a href="#第五章-监测预警与应急处置" class="headerlink" title="第五章 监测预警与应急处置"></a>第五章 监测预警与应急处置</h2><p><strong>第五十一条</strong> 国家建立网络安全监测预警和信息通报制度。国家网信部门应当统筹协调有关部门加强网络安全信息收集、分析和通报工作，按照规定统一发布网络安全监测预警信息。</p><p><strong>第五十二条</strong> 负责关键信息基础设施安全保护工作的部门，应当建立健全本行业、本领域的网络安全监测预警和信息通报制度，并按照规定报送网络安全监测预警信息。</p><p><strong>第五十三条</strong> 国家网信部门协调有关部门建立健全网络安全风险评估和应急工作机制，制定网络安全事件应急预案，并定期组织演练。</p><p>负责关键信息基础设施安全保护工作的部门应当制定本行业、本领域的网络安全事件应急预案，并定期组织演练。</p><p>网络安全事件应急预案应当按照事件发生后的危害程度、影响范围等因素对网络安全事件进行分级，并规定相应的应急处置措施。</p><p><strong>第五十四条</strong> 网络安全事件发生的风险增大时，省级以上人民政府有关部门应当按照规定的权限和程序，并根据网络安全风险的特点和可能造成的危害，采取下列措施：</p><p>（一）要求有关部门、机构和人员及时收集、报告有关信息，加强对网络安全风险的监测；</p><p>（二）组织有关部门、机构和专业人员，对网络安全风险信息进行分析评估，预测事件发生的可能性、影响范围和危害程度；</p><p>（三）向社会发布网络安全风险预警，发布避免、减轻危害的措施。</p><p><strong>第五十五条</strong> 发生网络安全事件，应当立即启动网络安全事件应急预案，对网络安全事件进行调查和评估，要求网络运营者采取技术措施和其他必要措施，消除安全隐患，防止危害扩大，并及时向社会发布与公众有关的警示信息。</p><p><strong>第五十六条</strong> 省级以上人民政府有关部门在履行网络安全监督管理职责中，发现网络存在较大安全风险或者发生安全事件的，可以按照规定的权限和程序对该网络的运营者的法定代表人或者主要负责人进行约谈。网络运营者应当按照要求采取措施，进行整改，消除隐患。</p><p><strong>第五十七条</strong> 因网络安全事件，发生突发事件或者生产安全事故的，应当依照《中华人民共和国突发事件应对法》、《中华人民共和国安全生产法》等有关法律、行政法规的规定处置。</p><p><strong>第五十八条</strong> 因维护国家安全和社会公共秩序，处置重大突发社会安全事件的需要，经国务院决定或者批准，可以在特定区域对网络通信采取限制等临时措施。</p><h2 id="第六章-法律责任"><a href="#第六章-法律责任" class="headerlink" title="第六章 法律责任"></a>第六章 法律责任</h2><p><strong>第五十九条</strong> 网络运营者不履行本法第二十一条、第二十五条规定的网络安全保护义务的，由有关主管部门责令改正，给予警告；拒不改正或者导致危害网络安全等后果的，处一万元以上十万元以下罚款，对直接负责的主管人员处五千元以上五万元以下罚款。</p><p>关键信息基础设施的运营者不履行本法第三十三条、第三十四条、第三十六条、第三十八条规定的网络安全保护义务的，由有关主管部门责令改正，给予警告；拒不改正或者导致危害网络安全等后果的，处十万元以上一百万元以下罚款，对直接负责的主管人员处一万元以上十万元以下罚款。</p><p><strong>第六十条</strong> 违反本法第二十二条第一款、第二款和第四十八条第一款规定，有下列行为之一的，由有关主管部门责令改正，给予警告；拒不改正或者导致危害网络安全等后果的，处五万元以上五十万元以下罚款，对直接负责的主管人员处一万元以上十万元以下罚款：</p><p>（一）设置恶意程序的；</p><p>（二）对其产品、服务存在的安全缺陷、漏洞等风险未立即采取补救措施，或者未按照规定及时告知用户并向有关主管部门报告的；</p><p>（三）擅自终止为其产品、服务提供安全维护的。</p><p><strong>第六十一条</strong> 网络运营者违反本法第二十四条第一款规定，未要求用户提供真实身份信息，或者对不提供真实身份信息的用户提供相关服务的，由有关主管部门责令改正；拒不改正或者情节严重的，处五万元以上五十万元以下罚款，并可以由有关主管部门责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照，对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款。</p><p><strong>第六十二条</strong> 违反本法第二十六条规定，开展网络安全认证、检测、风险评估等活动，或者向社会发布系统漏洞、计算机病毒、网络攻击、网络侵入等网络安全信息的，由有关主管部门责令改正，给予警告；拒不改正或者情节严重的，处一万元以上十万元以下罚款，并可以由有关主管部门责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照，对直接负责的主管人员和其他直接责任人员处五千元以上五万元以下罚款。</p><p><strong>第六十三条</strong> 违反本法第二十七条规定，从事危害网络安全的活动，或者提供专门用于从事危害网络安全活动的程序、工具，或者为他人从事危害网络安全的活动提供技术支持、广告推广、支付结算等帮助，尚不构成犯罪的，由公安机关没收违法所得，处五日以下拘留，可以并处五万元以上五十万元以下罚款；情节较重的，处五日以上十五日以下拘留，可以并处十万元以上一百万元以下罚款。</p><p>单位有前款行为的，由公安机关没收违法所得，处十万元以上一百万元以下罚款，并对直接负责的主管人员和其他直接责任人员依照前款规定处罚。</p><p>违反本法第二十七条规定，受到治安管理处罚的人员，五年内不得从事网络安全管理和网络运营关键岗位的工作；受到刑事处罚的人员，终身不得从事网络安全管理和网络运营关键岗位的工作。</p><p><strong>第六十四条</strong> 网络运营者、网络产品或者服务的提供者违反本法第二十二条第三款、第四十一条至第四十三条规定，侵害个人信息依法得到保护的权利的，由有关主管部门责令改正，可以根据情节单处或者并处警告、没收违法所得、处违法所得一倍以上十倍以下罚款，没有违法所得的，处一百万元以下罚款，对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款；情节严重的，并可以责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照。</p><p>违反本法第四十四条规定，窃取或者以其他非法方式获取、非法出售或者非法向他人提供个人信息，尚不构成犯罪的，由公安机关没收违法所得，并处违法所得一倍以上十倍以下罚款，没有违法所得的，处一百万元以下罚款。</p><p><strong>第六十五条</strong> 关键信息基础设施的运营者违反本法第三十五条规定，使用未经安全审查或者安全审查未通过的网络产品或者服务的，由有关主管部门责令停止使用，处采购金额一倍以上十倍以下罚款；对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款。</p><p><strong>第六十六条</strong> 关键信息基础设施的运营者违反本法第三十七条规定，在境外存储网络数据，或者向境外提供网络数据的，由有关主管部门责令改正，给予警告，没收违法所得，处五万元以上五十万元以下罚款，并可以责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照；对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款。</p><p><strong>第六十七条</strong> 违反本法第四十六条规定，设立用于实施违法犯罪活动的网站、通讯群组，或者利用网络发布涉及实施违法犯罪活动的信息，尚不构成犯罪的，由公安机关处五日以下拘留，可以并处一万元以上十万元以下罚款；情节较重的，处五日以上十五日以下拘留，可以并处五万元以上五十万元以下罚款。关闭用于实施违法犯罪活动的网站、通讯群组。</p><p>单位有前款行为的，由公安机关处十万元以上五十万元以下罚款，并对直接负责的主管人员和其他直接责任人员依照前款规定处罚。</p><p><strong>第六十八条</strong> 网络运营者违反本法第四十七条规定，对法律、行政法规禁止发布或者传输的信息未停止传输、采取消除等处置措施、保存有关记录的，由有关主管部门责令改正，给予警告，没收违法所得；拒不改正或者情节严重的，处十万元以上五十万元以下罚款，并可以责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照，对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款。</p><p>电子信息发送服务提供者、应用软件下载服务提供者，不履行本法第四十八条第二款规定的安全管理义务的，依照前款规定处罚。</p><p><strong>第六十九条</strong> 网络运营者违反本法规定，有下列行为之一的，由有关主管部门责令改正；拒不改正或者情节严重的，处五万元以上五十万元以下罚款，对直接负责的主管人员和其他直接责任人员，处一万元以上十万元以下罚款：</p><p>（一）不按照有关部门的要求对法律、行政法规禁止发布或者传输的信息，采取停止传输、消除等处置措施的；</p><p>（二）拒绝、阻碍有关部门依法实施的监督检查的；</p><p>（三）拒不向公安机关、国家安全机关提供技术支持和协助的。</p><p><strong>第七十条</strong> 发布或者传输本法第十二条第二款和其他法律、行政法规禁止发布或者传输的信息的，依照有关法律、行政法规的规定处罚。</p><p><strong>第七十一条</strong> 有本法规定的违法行为的，依照有关法律、行政法规的规定记入信用档案，并予以公示。</p><p><strong>第七十二条</strong> 国家机关政务网络的运营者不履行本法规定的网络安全保护义务的，由其上级机关或者有关机关责令改正；对直接负责的主管人员和其他直接责任人员依法给予处分。</p><p><strong>第七十三条</strong> 网信部门和有关部门违反本法第三十条规定，将在履行网络安全保护职责中获取的信息用于其他用途的，对直接负责的主管人员和其他直接责任人员依法给予处分。</p><p>网信部门和有关部门的工作人员玩忽职守、滥用职权、徇私舞弊，尚不构成犯罪的，依法给予处分。</p><p><strong>第七十四条</strong> 违反本法规定，给他人造成损害的，依法承担民事责任。</p><p>违反本法规定，构成违反治安管理行为的，依法给予治安管理处罚；构成犯罪的，依法追究刑事责任。</p><p><strong>第七十五条</strong> 境外的机构、组织、个人从事攻击、侵入、干扰、破坏等危害中华人民共和国的关键信息基础设施的活动，造成严重后果的，依法追究法律责任；国务院公安部门和有关部门并可以决定对该机构、组织、个人采取冻结财产或者其他必要的制裁措施。</p><h2 id="第七章-附-则"><a href="#第七章-附-则" class="headerlink" title="第七章 附  则"></a>第七章 附  则</h2><p><strong>第七十六条</strong> 本法下列用语的含义：</p><p>（一）网络，是指由计算机或者其他信息终端及相关设备组成的按照一定的规则和程序对信息进行收集、存储、传输、交换、处理的系统。</p><p>（二）网络安全，是指通过采取必要措施，防范对网络的攻击、侵入、干扰、破坏和非法使用以及意外事故，使网络处于稳定可靠运行的状态，以及保障网络数据的完整性、保密性、可用性的能力。</p><p>（三）网络运营者，是指网络的所有者、管理者和网络服务提供者。</p><p>（四）网络数据，是指通过网络收集、存储、传输、处理和产生的各种电子数据。</p><p>（五）个人信息，是指以电子或者其他方式记录的能够单独或者与其他信息结合识别自然人个人身份的各种信息，包括但不限于自然人的姓名、出生日期、身份证件号码、个人生物识别信息、住址、电话号码等。</p><p><strong>第七十七条</strong> 存储、处理涉及国家秘密信息的网络的运行安全保护，除应当遵守本法外，还应当遵守保密法律、行政法规的规定。</p><p><strong>第七十八条</strong> 军事网络的安全保护，由中央军事委员会另行规定。</p><p><strong>第七十九条</strong> 本法自2017年6月1日起施行。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;中华人民共和国网络安全法&quot;&gt;&lt;a href=&quot;#中华人民共和国网络安全法&quot; class=&quot;headerlink&quot; title=&quot;中华人民共和国网络安全法&quot;&gt;&lt;/a&gt;中华人民共和国网络安全法&lt;/h1&gt;&lt;p&gt;​		（2016年11月7日第十二届全国人民代表大会常务委员</summary>
      
    
    
    
    <category term="法律" scheme="http://w1ndys.top/categories/%E6%B3%95%E5%BE%8B/"/>
    
    <category term="网络安全法" scheme="http://w1ndys.top/categories/%E6%B3%95%E5%BE%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%B3%95/"/>
    
    
    <category term="文" scheme="http://w1ndys.top/tags/%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>一些零碎的知识点</title>
    <link href="http://w1ndys.top/2023/09/24/%E4%B8%80%E4%BA%9B%E9%9B%B6%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>http://w1ndys.top/2023/09/24/%E4%B8%80%E4%BA%9B%E9%9B%B6%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/</id>
    <published>2023-09-24T08:02:59.559Z</published>
    <updated>2023-09-30T12:05:10.566Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于二维码"><a href="#关于二维码" class="headerlink" title="关于二维码"></a>关于二维码</h1><p>二维码除了定位点不能被遮挡外，其他地方不是有数据冗余机制嘛，允许10%-20%以内的遮挡&#x2F;噪声好像是</p><p>不同软件算法可能不一样，有的能算出来原始数据，有的算不出来</p><p>这也是那个stable diffusion生成二维码能契合原图的原因</p><p>在生成二维码的时候，由于有这部分冗余的存在，在一定程度上“丢掉”某些颜色差异与底图过大的信息是不影响数据表达的。但会影响传输可靠性</p><p>比如这个码你很难在 摄像设备歪斜&#x2F;远距离&#x2F;模糊的展板 的情况下成功扫出来</p><p>——来自芃哥</p><h1 id="修改文件创建时间等"><a href="#修改文件创建时间等" class="headerlink" title="修改文件创建时间等"></a>修改文件创建时间等</h1><p>使用windows自带的powershell即可，win+r键，输入powershell,在弹出的命令窗口输入命令，以abc.txt举例</p><p>1.修改文件创建时间</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">$</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">Get</span><span class="hljs-operator">-</span><span class="hljs-built_in">Item</span> <span class="hljs-variable">abc</span><span class="hljs-operator">.</span><span class="hljs-variable">txt</span><span class="hljs-punctuation">)</span><span class="hljs-operator">.</span><span class="hljs-variable">creationtime</span><span class="hljs-operator">=</span><span class="hljs-variable">$</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">Get</span><span class="hljs-operator">-</span><span class="hljs-built_in">Date</span> <span class="hljs-string">&quot;11/04/2019 20:42:23&quot;</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>2.修改文件最后访问时间</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">$</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">Get</span><span class="hljs-operator">-</span><span class="hljs-built_in">Item</span> <span class="hljs-variable">abc</span><span class="hljs-operator">.</span><span class="hljs-variable">txt</span><span class="hljs-punctuation">)</span><span class="hljs-operator">.</span><span class="hljs-variable">lastaccesstime</span><span class="hljs-operator">=</span><span class="hljs-variable">$</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">Get</span><span class="hljs-operator">-</span><span class="hljs-built_in">Date</span> <span class="hljs-string">&quot;11/04/2019 20:42:23&quot;</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>3.修改文件最后修改时间</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">$</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">Get</span><span class="hljs-operator">-</span><span class="hljs-built_in">Item</span> <span class="hljs-variable">abc</span><span class="hljs-operator">.</span><span class="hljs-variable">txt</span><span class="hljs-punctuation">)</span><span class="hljs-operator">.</span><span class="hljs-variable">lastwritetime</span><span class="hljs-operator">=</span><span class="hljs-variable">$</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">Get</span><span class="hljs-operator">-</span><span class="hljs-built_in">Date</span> <span class="hljs-string">&quot;11/04/2019 20:42:23&quot;</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><h1 id="关于Python—base64编码"><a href="#关于Python—base64编码" class="headerlink" title="关于Python—base64编码"></a>关于Python—base64编码</h1><p>crypt &#x3D; base64.b64encode(enc.encode(‘utf-8’)).decode(‘utf-8’)</p><p>cipher &#x3D; base64.b64decode(crypt).decode(‘utf-8’)</p><p>关于这两段为什么要写两个utf-8</p><p>​                                 </p><h1 id="关于Python解密"><a href="#关于Python解密" class="headerlink" title="关于Python解密"></a>关于Python解密</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python">Str = <span class="hljs-string">&quot;ylqq]aycqyp&#123;&quot;</span><br><br>flag = []<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(Str)):<br><br>  <span class="hljs-keyword">if</span> (Str[i] &lt;= <span class="hljs-built_in">chr</span>(<span class="hljs-number">94</span>) <span class="hljs-keyword">or</span> Str[i] &gt; <span class="hljs-built_in">chr</span>(<span class="hljs-number">96</span>)) <span class="hljs-keyword">and</span> (Str[i] &lt;= <span class="hljs-built_in">chr</span>(<span class="hljs-number">62</span>) <span class="hljs-keyword">or</span> Str[i] &gt; <span class="hljs-built_in">chr</span>(<span class="hljs-number">64</span>)):<br><br>     flag.append(<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(Str[i])+<span class="hljs-number">2</span>))<br><br>  <span class="hljs-keyword">else</span>:<br><br>     flag.append(<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(Str[i])-<span class="hljs-number">24</span>))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>.join(flag))<br><br><span class="hljs-comment"># 知识点</span><br><span class="hljs-comment"># flag要写为列表，字符串不可以直接相加减</span><br><span class="hljs-comment"># 做加减法的时候要先ord转化在加减然后转化为chr字符串</span><br><span class="hljs-comment"># 然后在字符操作</span><br><span class="hljs-comment"># 最后用join()拼接</span><br></code></pre></td></tr></table></figure><h1 id="关于Python找数组相同元素下标"><a href="#关于Python找数组相同元素下标" class="headerlink" title="关于Python找数组相同元素下标"></a>关于Python找数组相同元素下标</h1><p>可以直接用函数find，例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python">flag = <span class="hljs-string">&#x27;&#x27;</span><br><br>s = <span class="hljs-string">&#x27;wesyvbniazxchjko1973652048@$+-&amp;*&lt;&gt;&#x27;</span><br><br>result = <span class="hljs-string">&#x27;v0b9n1nkajz@j0c4jjo3oi1h1i937b395i5y5e0e$i&#x27;</span><br><br>len1=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">len</span>(result)/<span class="hljs-number">2</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(len1):<br><br>  s1 = s.find(result[i * <span class="hljs-number">2</span>]) - i<br><br>  s2 = <span class="hljs-number">34</span> - s.find(result[i * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>]) - i - <span class="hljs-number">1</span><br><br>  <span class="hljs-keyword">if</span> s2 &lt; <span class="hljs-number">0</span>:<br><br>     s2 = s2 + <span class="hljs-number">34</span><br><br>  <span class="hljs-keyword">else</span>:<br><br>     flag += <span class="hljs-built_in">chr</span>(s1 * <span class="hljs-number">17</span> + s2)<br><br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><p>其中s.find(result[i<em>2])就是找s中和result[2</em>i]元素相同元素的下标</p><h1 id="关于upx加壳脱壳指令"><a href="#关于upx加壳脱壳指令" class="headerlink" title="关于upx加壳脱壳指令"></a>关于upx加壳脱壳指令</h1><p>upx.exe –o 别名.exe –d 现名.exe</p><p>-o：表示输出；</p><p>-o 别名.exe：表示以别名.exe作为脱壳后的输出；</p><p>-d 现名.exe：表示以现名.exe作为脱壳前的输入。</p><h1 id="关于Python切片"><a href="#关于Python切片" class="headerlink" title="关于Python切片"></a>关于Python切片</h1><p><a href="https://blog.csdn.net/qq_30460949/article/details/118888961">Python切片操作_小魔王降临的博客-CSDN博客</a></p><h1 id="关于IDA"><a href="#关于IDA" class="headerlink" title="关于IDA"></a>关于IDA</h1><p>交叉引用就是看哪段代码引用了这个变量</p><h1 id="关于C语言伪代码转化"><a href="#关于C语言伪代码转化" class="headerlink" title="关于C语言伪代码转化"></a>关于C语言伪代码转化</h1><h1 id="关于Python的random库"><a href="#关于Python的random库" class="headerlink" title="关于Python的random库"></a>关于Python的random库</h1><p>import random</p><p>print(random.getrandbits(8))    #返回一个八位大小的整数</p><p>扩展：8位大小的整数是指二进制八位00000000-11111111的数，转换成十进制就是0-255</p><p>random.seed(1)             #设置一个种子为1并生成随机数，设置种子后生成的随机数就是固定的（逆向题可用）</p><h1 id="关于xor异或的逆运算"><a href="#关于xor异或的逆运算" class="headerlink" title="关于xor异或的逆运算"></a>关于xor异或的逆运算</h1><p>A&#x3D;A^B^B</p><h1 id="关于Python语法小记"><a href="#关于Python语法小记" class="headerlink" title="关于Python语法小记"></a>关于Python语法小记</h1><p>字符串连接时只能将字符和字符连接，flag+&#x3D;str（）</p><p>Ord是转化成对应的ascll</p><p>异或运算只能int类型，ord()^int()</p><p>定义字符串单双引号都可以</p><h1 id="关于大端序和小端序的区别"><a href="#关于大端序和小端序的区别" class="headerlink" title="关于大端序和小端序的区别"></a>关于大端序和小端序的区别</h1><p><a href="https://blog.csdn.net/afanzcf/article/details/118788007">BUUCTF SimpleRev（涉及大小端序存储的问题）_Afanbird的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/Casuall/article/details/98481469">大端序和小端序_Casuall的博客-CSDN博客</a></p><p>1、大端模式：高字节保存在内存的低地址</p><p>2、小端模式：高字节保存在内存的高地址</p><p>Big-endian：高位字节存入低地址，低位字节存入高地址</p><p>Little-endian：低位字节存入低地址，高位字节存入高地址</p><p>一般来说，x86系列CPU都是Little-endian字节序，PowerPC通常是Big-endian字节序。</p><h1 id="关于可以直接打进地址栏的文件类型"><a href="#关于可以直接打进地址栏的文件类型" class="headerlink" title="关于可以直接打进地址栏的文件类型"></a>关于可以直接打进地址栏的文件类型</h1><p>data:image&#x2F;png;base64,iVB………………………………</p><h1 id="关于base编码原理"><a href="#关于base编码原理" class="headerlink" title="关于base编码原理"></a>关于base编码原理</h1><p><a href="https://www.cnblogs.com/0yst3r-2046/p/11962942.html">Base系列编码浅析【base16 base32 base64 base85 base36 base 58 base91 base 92 base62】 - 0yst3r - 博客园 (cnblogs.com)</a></p><h1 id="关于CTF常见编码以及加解密"><a href="#关于CTF常见编码以及加解密" class="headerlink" title="关于CTF常见编码以及加解密"></a>关于CTF常见编码以及加解密</h1><p><a href="https://www.cnblogs.com/ruoli-s/p/14206145.html">CTF常见编码及加解密（超全） - ruoli-s - 博客园 (cnblogs.com)</a></p><h1 id="常用的在线编码工具"><a href="#常用的在线编码工具" class="headerlink" title="常用的在线编码工具"></a>常用的在线编码工具</h1><p><a href="https://gchq.github.io/CyberChef/">CyberChef (gchq.github.io)</a></p><p><a href="https://github.com/Ciphey/Ciphey">Ciphey&#x2F;Ciphey: ⚡ Automatically decrypt encryptions without knowing the key or cipher, decode encodings, and crack hashes ⚡ (github.com)</a></p><p><a href="http://www.hiencode.com/">CTF在线工具-CTF工具|CTF编码|CTF密码学|CTF加解密|程序员工具|在线编解码 (hiencode.com)</a></p><p><a href="https://ctf.bugku.com/tools">在线工具 - Bugku CTF</a></p><h1 id="关于ASCII逆向穷举"><a href="#关于ASCII逆向穷举" class="headerlink" title="关于ASCII逆向穷举"></a>关于ASCII逆向穷举</h1><p>例如：[ACTF新生赛2020]rome1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python">a= <span class="hljs-string">&#x27;ACTF&#123;&#x27;</span><br><br>enc=<span class="hljs-string">&#x27;Qsw3sj_lz4_Ujw@l&#x27;</span><br><br>s=<span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(enc)):<br><br>  <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">128</span>):<br><br>     j=n<br><br>     <span class="hljs-keyword">if</span> j &gt;<span class="hljs-number">64</span> <span class="hljs-keyword">and</span> j&lt;=<span class="hljs-number">90</span>:<br><br>       j=(j-<span class="hljs-number">51</span>)%<span class="hljs-number">26</span>+<span class="hljs-number">65</span><br><br>     <span class="hljs-keyword">if</span> j&gt;<span class="hljs-number">96</span> <span class="hljs-keyword">and</span> j&lt;=<span class="hljs-number">122</span>:<br><br>       j= (j-<span class="hljs-number">79</span>)%<span class="hljs-number">26</span> +<span class="hljs-number">97</span><br><br>     <span class="hljs-keyword">if</span> j==<span class="hljs-built_in">ord</span>(enc[i]):<br><br>       a=a+<span class="hljs-built_in">chr</span>(n)<br><br><span class="hljs-built_in">print</span>(a+<span class="hljs-string">&#x27;&#125;&#x27;</span>)<br></code></pre></td></tr></table></figure><p>ACTF{Cae3ar_th4_Gre@t}</p><p>题目中意思是输入的字符经过一系列加密得到enc，在逆向的过程中可以用穷举的方法逐渐得到结果，以顺代逆</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;关于二维码&quot;&gt;&lt;a href=&quot;#关于二维码&quot; class=&quot;headerlink&quot; title=&quot;关于二维码&quot;&gt;&lt;/a&gt;关于二维码&lt;/h1&gt;&lt;p&gt;二维码除了定位点不能被遮挡外，其他地方不是有数据冗余机制嘛，允许10%-20%以内的遮挡&amp;#x2F;噪声好像是&lt;/p</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://w1ndys.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="计算机" scheme="http://w1ndys.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
    <category term="计算机" scheme="http://w1ndys.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>简单两步，将Windows11右键菜单修改为Windows10风格</title>
    <link href="http://w1ndys.top/2023/09/23/%E5%B0%86Windows11%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%E4%BF%AE%E6%94%B9%E4%B8%BAWindows10%E9%A3%8E%E6%A0%BC/"/>
    <id>http://w1ndys.top/2023/09/23/%E5%B0%86Windows11%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%E4%BF%AE%E6%94%B9%E4%B8%BAWindows10%E9%A3%8E%E6%A0%BC/</id>
    <published>2023-09-23T08:14:52.964Z</published>
    <updated>2023-09-23T08:21:16.255Z</updated>
    
    <content type="html"><![CDATA[<p>原文链接<a href="http://t.csdn.cn/dhe9N">http://t.csdn.cn/dhe9N</a></p><p>Windows11更新后，右键菜单很多功能隐藏起来了，使用时需要点击“显示更多选型”才能获取完整功能。为了能获得Windows10右键菜单丝滑的体验，我总结了以下方法。</p><p>修改前：</p><p><a href="https://img-blog.csdnimg.cn/img_convert/59704c4ffbd6af9764dd5ab84c0fc7bf.gif">https://img-blog.csdnimg.cn/img_convert/59704c4ffbd6af9764dd5ab84c0fc7bf.gif</a></p><p>修改后：</p><p><a href="https://img-blog.csdnimg.cn/img_convert/1e8911f87d020b6034f90d8b5b1a9255.gif">https://img-blog.csdnimg.cn/img_convert/1e8911f87d020b6034f90d8b5b1a9255.gif</a></p><h1 id="方法一：控制台操作法"><a href="#方法一：控制台操作法" class="headerlink" title="方法一：控制台操作法"></a>方法一：控制台操作法</h1><p>按住win+R打开运行窗口</p><p>输入cmd，打开控制台<br>在控制泰中输入下方代码，回车，显示操作成功<br>开启旧版右键菜单：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">reg <span class="hljs-keyword">add</span><span class="language-bash"> <span class="hljs-string">&quot;HKCU\Software\Classes\CLSID\&#123;86ca1aa0-34aa-4e8b-a509-50c905bae2a2&#125;\InprocServer32&quot;</span> /f /ve</span><br></code></pre></td></tr></table></figure><p>恢复windows11新版右键菜单：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs subunit">reg delete &quot;HKCU\Software\Classes\CLSID\&#123;86ca1aa0<span class="hljs-string">-34</span>aa<span class="hljs-string">-4</span>e8b-a509<span class="hljs-string">-50</span>c905bae2a2&#125;&quot; /f<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;原文链接&lt;a href=&quot;http://t.csdn.cn/dhe9N&quot;&gt;http://t.csdn.cn/dhe9N&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Windows11更新后，右键菜单很多功能隐藏起来了，使用时需要点击“显示更多选型”才能获取完整功能。为了能获得Windows10右</summary>
      
    
    
    
    <category term="Windows" scheme="http://w1ndys.top/categories/Windows/"/>
    
    <category term="系统设置" scheme="http://w1ndys.top/categories/Windows/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E7%BD%AE/"/>
    
    
    <category term="Windows技术分享" scheme="http://w1ndys.top/tags/Windows%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>如何安装Microsoft office各种版本以及破解||office盗版弹窗的关闭方法</title>
    <link href="http://w1ndys.top/2023/09/22/office-error/"/>
    <id>http://w1ndys.top/2023/09/22/office-error/</id>
    <published>2023-09-22T13:52:49.899Z</published>
    <updated>2023-09-30T12:05:43.508Z</updated>
    
    <content type="html"><![CDATA[<p>想必大家都认识Microsoft office</p><p>就是常说的Word  Excel  PPT三大办公套件</p><p>当然也有Outlook OneNote Publisher Access  Teams等这些不常用的</p><p>但是，正版购买要七百多甚至一千多！太贵了怎么办</p><p>没事</p><p>教你不花钱免费用</p><h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><p>原地址：<a href="https://www.coolhub.top/archives/42">[新手必读] Office Tool Plus 入门教程</a></p><h2 id="写在开头"><a href="#写在开头" class="headerlink" title="写在开头"></a>写在开头</h2><p>Office Tool Plus 是一个强大且实用的 Office 部署工具。</p><p>Office Tool Plus 基于 <a href="https://aka.ms/ODT">Office 部署工具</a> 制作，可以很方便的部署 Office，其内置迅雷和 Downloader 引擎可帮助您更快地下载 Office。</p><p>你也可以使用 Office Tool Plus 的其他功能或者是内置的小工具方便、快捷地管理 Office 哦！</p><p>支持下列产品：</p><ul><li>Microsoft 365</li><li>Office 2016 - 2021</li><li>Visio Online Plan 2 &amp; Visio 2016 - 2021</li><li>Project Online Desktop Client &amp; Project 2016 - 2021</li></ul><p>个人主页：<a href="https://officetool.plus/">https://officetool.plus/</a></p><p>官方网站：<a href="https://otp.landian.vip/">https://otp.landian.vip/</a></p><p>帮助文档：<a href="https://otp.landian.vip/help/">https://otp.landian.vip/help/</a></p><p>GitHub：<a href="https://github.com/YerongAI/Office-Tool">https://github.com/YerongAI/Office-Tool</a></p><p>无论你是个体还是团队，Office Tool Plus 都是你的得力小助手。</p><h2 id="系统要求"><a href="#系统要求" class="headerlink" title="系统要求"></a>系统要求</h2><p>请查看<a href="https://otp.landian.vip/docs/zh-cn/start/requirement.html">帮助文档</a>。</p><h2 id="相关教程"><a href="#相关教程" class="headerlink" title="相关教程"></a>相关教程</h2><h3 id="点击阅读以下教程"><a href="#点击阅读以下教程" class="headerlink" title="点击阅读以下教程"></a>点击阅读以下教程</h3><p>[<a href="https://www.coolhub.top/archives/11">安装 Office] Office Tool Plus 入门教程</a></p><p>[<a href="https://www.coolhub.top/archives/14">激活 Office] Office Tool Plus 入门教程</a></p><p>[<a href="https://www.coolhub.top/archives/13">疑难解答] Office Tool Plus 入门教程</a></p><p>[<a href="https://www.coolhub.top/archives/44">技能扩展] Office Tool Plus 高级教程</a></p><h2 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h2><ul><li>创建 Office 安装配置，支持导出到本地；或从本地或网络位置导入。</li><li>下载 Office，支持所有通道的 Office，支持所有的 Office 语言。</li><li>安装 Office，支持对现有的 Office 进行修改，包括新增或卸载产品和应用程序。[1]</li><li>创建 Office ISO，支持默认安装配置、静默安装配置。</li><li>支持 Office 激活管理，包括许可证管理，密钥管理以及 KMS 管理。[2]</li><li>激活 Office，支持在线激活、电话激活、KMS 激活。[3]</li><li>修改 Office 更新通道，支持在不重装 Office 的情况下升级&#x2F;降级 Office.</li><li>移除 Office，在 Office 无法正常卸载的情况下强制移除 Office，几乎支持所有 Office 版本。</li><li>内置 Office 工具箱，可以修复安装或使用 Office 过程中遇到的大多数问题。</li><li>转换 Office 文档，基于 Office COM，稳定可靠。</li><li>自定义主题，打造你自己的专属 Office Tool Plus。</li></ul><p>还有更多功能，等待您的体验~</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">注<span class="hljs-selector-attr">[1]</span>：能够安装的 Office 版本视 Windows 版本决定。<br>注<span class="hljs-selector-attr">[2]</span>：安装许可证时，旧的许可证不会被清除，因此零售和批量许可证可以共存。<br>注<span class="hljs-selector-attr">[3]</span>：无论你如何激活 Office 都需要自行处理，Office Tool Plus 不会也不可能提供任何破解途径。<br></code></pre></td></tr></table></figure><h2 id="Office-Tool-Plus-合法吗？"><a href="#Office-Tool-Plus-合法吗？" class="headerlink" title="Office Tool Plus 合法吗？"></a>Office Tool Plus 合法吗？</h2><p>Office Tool Plus 是一款完全合法的应用程序，提供的是原版 Office，不对 Office 的任何东西进行未经授权的修改。我们给用户提供了 Office 的下载、安装、激活功能，具体 Office 正版与否，取决于用户如何激活 Office。</p><p>Office 是支持账户、密钥、KMS 激活的，前两者基本都是正版授权（网上找的密钥另说），KMS 的正版和非正版因为人们多少都有点误解，因此在这里补充解释一下。</p><h2 id="什么是-KMS？"><a href="#什么是-KMS？" class="headerlink" title="什么是 KMS？"></a>什么是 KMS？</h2><p>具体的技术性资料可从网上搜索得到，这里就简单粗暴地描述一下。</p><hr><p>KMS 激活类似于签名一样，在大多数现实情况下，签名可以仿写，就像是“家长签名”一样，很多时候其实不是真的家长签名吧 <img src="https://www.coolhub.top/wp-content/themes/kratos-pjax-0.4.3/static/images/smilies/huaji.png" srcset="/img/loading.gif" lazyload alt=":huaji:"></p><p>那么你把这份“经过家长签名”的东西给了老师或者领导，他们大多数时候也不会去验证是吧？</p><p>KMS 激活也是有正规的，正规的来讲就是要经过微软授权的（就比如签名一定得是家长本人签的）。</p><p>但 KMS 也可以像“家长签名”一样伪造，就是 Office 接收到了来自 KMS 主机返回的激活信息，它不知道这个信息是不是正版授权的，总之接收到了正确的信息然后就这么简单地就激活了。</p><p>一句话讲晒，就是冒名顶替，没人查确实不知道，一查出来你就 gg</p><hr><p>这就是 Office 与 KMS 的关系，简单来讲就是这样。再补充一下：</p><p>每隔 7 天（默认），Office 都会与 KMS 通信一次，以更新自己的许可证状态。</p><p>如果 KMS 允许你更新许可，那么新的许可就是 180 天期限。</p><p>如果 KMS 不允许你更新许可，或者 KMS 不可用，那么原来的 180 天期限到期后，你的 Office 就会变成未激活了。</p><h2 id="KMS-正版与否的区别"><a href="#KMS-正版与否的区别" class="headerlink" title="KMS 正版与否的区别"></a>KMS 正版与否的区别</h2><p>有微软授权的 KMS 服务器一般情况下只能部署在 Windows Server 上，且通常只在内网部署，不对外开放。</p><p>目前网上公开的基本都是基于 vlmcs 的 KMS 服务器，非正版，无激活限制，谁都可以访问。</p><h1 id="office提示你的许可证不是正版，你可能是盗版软件的受害者？"><a href="#office提示你的许可证不是正版，你可能是盗版软件的受害者？" class="headerlink" title="office提示你的许可证不是正版，你可能是盗版软件的受害者？"></a>office提示你的许可证不是正版，你可能是盗版软件的受害者？</h1><p>看这个</p><p><a href="https://blog.csdn.net/qq_44275213/article/details/128543910">office提示你的许可证不是正版，你可能是盗版软件的受害者？</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;想必大家都认识Microsoft office&lt;/p&gt;
&lt;p&gt;就是常说的Word  Excel  PPT三大办公套件&lt;/p&gt;
&lt;p&gt;当然也有Outlook OneNote Publisher Access  Teams等这些不常用的&lt;/p&gt;
&lt;p&gt;但是，正版购买要七百多甚至</summary>
      
    
    
    
    <category term="Windows" scheme="http://w1ndys.top/categories/Windows/"/>
    
    <category term="office" scheme="http://w1ndys.top/categories/Windows/office/"/>
    
    
    <category term="Windows技术分享" scheme="http://w1ndys.top/tags/Windows%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>一些好玩的网站</title>
    <link href="http://w1ndys.top/2023/09/21/%E4%B8%80%E4%BA%9B%E5%A5%BD%E7%8E%A9%E7%9A%84%E7%BD%91%E7%AB%99/"/>
    <id>http://w1ndys.top/2023/09/21/%E4%B8%80%E4%BA%9B%E5%A5%BD%E7%8E%A9%E7%9A%84%E7%BD%91%E7%AB%99/</id>
    <published>2023-09-21T10:42:17.364Z</published>
    <updated>2023-09-23T07:03:38.148Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-致美化"><a href="#1-致美化" class="headerlink" title="1.致美化"></a>1.<a href="https://zhutix.com/">致美化</a></h1><p>windows美化</p><p>致美化是一个老牌桌面美化分享站，创办于 2014 年。探索丰富多彩的主题、壁纸、图标、皮肤等酷炫的美化素材，更有全面的美化教程及工具，是一个比较良心的美化站。</p><h1 id="2-在线文件转换器"><a href="#2-在线文件转换器" class="headerlink" title="2.在线文件转换器"></a>2.<a href="https://cn.cloud-converter.com/">在线文件转换器</a></h1><p>使用这款免费快速在线转换器. 将pdf, 图像, 视频, 文档, 音频, 电子书及压缩等文件格式转换为其他格式。现支持超过20200多种不同格式转换。</p><h1 id="3-从0开始做博客"><a href="#3-从0开始做博客" class="headerlink" title="3.从0开始做博客"></a>3.<a href="https://zhuanlan.zhihu.com/p/102592286">从0开始做博客</a></h1><p>不用介绍什么了，这是知乎大佬收集的一篇文章，我的博客就是根据这个搭建的</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-致美化&quot;&gt;&lt;a href=&quot;#1-致美化&quot; class=&quot;headerlink&quot; title=&quot;1.致美化&quot;&gt;&lt;/a&gt;1.&lt;a href=&quot;https://zhutix.com/&quot;&gt;致美化&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;windows美化&lt;/p&gt;
&lt;p&gt;致美化是一个老</summary>
      
    
    
    
    <category term="网站收录" scheme="http://w1ndys.top/categories/%E7%BD%91%E7%AB%99%E6%94%B6%E5%BD%95/"/>
    
    
    <category term="网站收录" scheme="http://w1ndys.top/tags/%E7%BD%91%E7%AB%99%E6%94%B6%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>实验二、链式存储结构线性表的建立及操作</title>
    <link href="http://w1ndys.top/2023/09/17/DS-test2/"/>
    <id>http://w1ndys.top/2023/09/17/DS-test2/</id>
    <published>2023-09-17T10:53:12.653Z</published>
    <updated>2023-10-04T14:37:09.160Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cyberdownload.anrunlu.net/FlO6Qn0cVLJHriuYzOv453gkwMYY" srcset="/img/loading.gif" lazyload></p><h1 id="实验二主体"><a href="#实验二主体" class="headerlink" title="实验二主体"></a>实验二主体</h1><p>以下是一个简单的C++实现，用于维护单链表：</p><blockquote><p>来自bing ai</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span><br>&#123;<br>    DataType data;        <span class="hljs-comment">// 数据域</span><br>    Node&lt;DataType&gt;* next; <span class="hljs-comment">// 指针域</span><br>&#125;;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkList</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">LinkList</span>();                    <span class="hljs-comment">// 无参构造函数，建立只有头结点的空链表</span><br>    <span class="hljs-built_in">LinkList</span>(DataType a[], <span class="hljs-type">int</span> n); <span class="hljs-comment">// 有参构造函数，建立有n个元素的单链表</span><br>    ~<span class="hljs-built_in">LinkList</span>();                   <span class="hljs-comment">// 析构函数</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Length</span><span class="hljs-params">()</span></span>;                  <span class="hljs-comment">// 求单链表的长度</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Empety</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function">DataType <span class="hljs-title">Get</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span></span>;            <span class="hljs-comment">// 按位查找。查找第i个结点的元素值</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Locate</span><span class="hljs-params">(DataType x)</span></span>;         <span class="hljs-comment">// 按值查找。查找值为x的元素序号</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Insert</span><span class="hljs-params">(<span class="hljs-type">int</span> i, DataType x)</span></span>; <span class="hljs-comment">// 插入操作，第i个位置插入值为x的结点</span><br>    <span class="hljs-function">DataType <span class="hljs-title">Delete</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span></span>;         <span class="hljs-comment">// 删除操作，删除第i个结点</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PrintList</span><span class="hljs-params">()</span></span>;               <span class="hljs-comment">// 遍历操作，按序号依次输出各元素</span><br><span class="hljs-keyword">private</span>:<br>    Node&lt;DataType&gt;* first; <span class="hljs-comment">// 单链表的头指针</span><br>&#125;;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br>LinkList&lt;DataType&gt;::<span class="hljs-built_in">LinkList</span>()<br>&#123;<br>    first = <span class="hljs-keyword">new</span> Node&lt;DataType&gt;; <span class="hljs-comment">// 生成头结点</span><br>    first-&gt;next = <span class="hljs-literal">nullptr</span>;      <span class="hljs-comment">// 头结点的指针域置空</span><br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-type">int</span> LinkList&lt;DataType&gt;::<span class="hljs-built_in">Empety</span>()<br>&#123;<br>    <span class="hljs-keyword">if</span> (first-&gt;next == <span class="hljs-literal">nullptr</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-type">void</span> LinkList&lt;DataType&gt;::<span class="hljs-built_in">PrintList</span>()<br>&#123;<br>    Node&lt;DataType&gt;* p = first-&gt;next; <span class="hljs-comment">// 工作指针p初始化</span><br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">nullptr</span>)<br>    &#123;<br>        cout &lt;&lt; p-&gt;data &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span>;<br>        p = p-&gt;next; <span class="hljs-comment">// 工作指针p后移，注意不能写作p++</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-type">int</span> LinkList&lt;DataType&gt;::<span class="hljs-built_in">Length</span>()<br>&#123;<br>    Node&lt;DataType&gt;* p = first-&gt;next; <span class="hljs-comment">// 工作指针p初始化为开始接点</span><br>    <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;                   <span class="hljs-comment">// 累加器count初始化</span><br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">nullptr</span>)<br>    &#123;<br>        p = p-&gt;next;<br>        count++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> count; <span class="hljs-comment">// 注意count的初始化和返回值之间的关系</span><br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br>DataType LinkList&lt;DataType&gt;::<span class="hljs-built_in">Get</span>(<span class="hljs-type">int</span> i)<br>&#123;<br>    Node&lt;DataType&gt;* p = first-&gt;next; <span class="hljs-comment">// 工作指针p初始化</span><br>    <span class="hljs-type">int</span> count = <span class="hljs-number">1</span>;                   <span class="hljs-comment">// 累加器count初始化</span><br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">nullptr</span> &amp;&amp; count &lt; i)<br>    &#123;<br>        p = p-&gt;next; <span class="hljs-comment">// 工作指针p后移</span><br>        count++;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (p == <span class="hljs-literal">nullptr</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-string">&quot;位置&quot;</span>;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> p-&gt;data;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-type">int</span> LinkList&lt;DataType&gt;::<span class="hljs-built_in">Locate</span>(DataType x)<br>&#123;<br>    Node&lt;DataType&gt;* p = first-&gt;next; <span class="hljs-comment">// 工作指针p初始化</span><br>    <span class="hljs-type">int</span> count = <span class="hljs-number">1</span>;                   <span class="hljs-comment">// 累加器count初始化</span><br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">nullptr</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (p-&gt;data == x)<br>            <span class="hljs-keyword">return</span> count; <span class="hljs-comment">// 查找成功，结束函数并返回序号</span><br>        p = p-&gt;next;<br>        count++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 退出循环表明查找失败</span><br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-type">void</span> LinkList&lt;DataType&gt;::<span class="hljs-built_in">Insert</span>(<span class="hljs-type">int</span> i, DataType x)<br>&#123;<br>    Node&lt;DataType&gt;* p = first, * s = <span class="hljs-literal">nullptr</span>; <span class="hljs-comment">// 工作指针p初始化</span><br>    <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">nullptr</span> &amp;&amp; count &lt; i - <span class="hljs-number">1</span>) <span class="hljs-comment">// 查找第i – 1个结点</span><br>    &#123;<br>        p = p-&gt;next; <span class="hljs-comment">// 工作指针p后移</span><br>        count++;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (p == <span class="hljs-literal">nullptr</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-string">&quot;位置&quot;</span>; <span class="hljs-comment">// 没有找到第i – 1个结点</span><br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        s = <span class="hljs-keyword">new</span> Node&lt;DataType&gt;;<br>        s-&gt;data = x; <span class="hljs-comment">// 申请结点s，数据域为x</span><br>        s-&gt;next = p-&gt;next;<br>        p-&gt;next = s; <span class="hljs-comment">// 将结点s插入到结点p之后</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br>LinkList&lt;DataType&gt;::<span class="hljs-built_in">LinkList</span>(DataType a[], <span class="hljs-type">int</span> n)<br>&#123;<br>    first = <span class="hljs-keyword">new</span> Node&lt;DataType&gt;;              <span class="hljs-comment">// 生成头结点</span><br>    Node&lt;DataType&gt;* r = first, * s = <span class="hljs-literal">nullptr</span>; <span class="hljs-comment">// 尾指针初始化</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        s = <span class="hljs-keyword">new</span> Node&lt;DataType&gt;;<br>        s-&gt;data = a[i];<br>        r-&gt;next = s;<br>        r = s; <span class="hljs-comment">// 将结点s插入到终端结点之后</span><br>    &#125;<br>    r-&gt;next = <span class="hljs-literal">nullptr</span>; <span class="hljs-comment">// 单链表建立完毕，将终端结点的指针域置空</span><br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br>DataType LinkList&lt;DataType&gt;::<span class="hljs-built_in">Delete</span>(<span class="hljs-type">int</span> i)<br>&#123;<br>    DataType x;<br>    Node&lt;DataType&gt;* p = first, * q = <span class="hljs-literal">nullptr</span>; <span class="hljs-comment">// 工作指针p指向头结点</span><br>    <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">nullptr</span> &amp;&amp; count &lt; i - <span class="hljs-number">1</span>) <span class="hljs-comment">// 查找第i-1个结点</span><br>    &#123;<br>        p = p-&gt;next;<br>        count++;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (p == <span class="hljs-literal">nullptr</span> || p-&gt;next == <span class="hljs-literal">nullptr</span>) <span class="hljs-comment">// 结点p不存在或p的后继结点不存在</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-string">&quot;位置&quot;</span>;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        q = p-&gt;next;<br>        x = q-&gt;data;       <span class="hljs-comment">// 暂存被删结点</span><br>        p-&gt;next = q-&gt;next; <span class="hljs-comment">// 摘链</span><br>        <span class="hljs-keyword">delete</span> q;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">DataType</span>&gt;<br>LinkList&lt;DataType&gt;::~<span class="hljs-built_in">LinkList</span>()<br>&#123;<br>    Node&lt;DataType&gt;* q = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">while</span> (first != <span class="hljs-literal">NULL</span>) <span class="hljs-comment">// 释放单链表的每一个结点的存储空间</span><br>    &#123;<br>        q = first;           <span class="hljs-comment">// 暂存被释放结点</span><br>        first = first-&gt;next; <span class="hljs-comment">// first指向被释放结点的下一个结点</span><br>        <span class="hljs-keyword">delete</span> q;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> maxsize;<br>    cout &lt;&lt; <span class="hljs-string">&quot;请输入你要创建数组的大小&quot;</span> &lt;&lt; endl;<br>    cin &gt;&gt; maxsize;<br>    <span class="hljs-type">int</span>* a = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[maxsize];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; maxsize; i++)<br>    &#123;<br>        a[i] = i+<span class="hljs-number">1</span>;<br>        cout &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; endl;<br>    &#125;<br>    cout &lt;&lt; <span class="hljs-string">&quot;已创建一个最大长度&quot;</span>&lt;&lt;maxsize&lt;&lt;<span class="hljs-string">&quot;的随机数链表&quot;</span> &lt;&lt; endl;<br>    LinkList&lt;<span class="hljs-type">int</span>&gt; L&#123; a, maxsize &#125;;<br>    cout &lt;&lt; <span class="hljs-string">&quot;执行遍历链表&quot;</span> &lt;&lt; endl;<br>    L.<span class="hljs-built_in">PrintList</span>();<br>    cout &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;请输入一个最大长度内的数字查找元素&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-type">int</span> i;<br>    cin &gt;&gt; i;<br>    cout &lt;&lt; L.<span class="hljs-built_in">Locate</span>(i) &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;请插入一个新数字元素，请依次输入位置和数据&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-type">int</span> j, k;<br>    cin &gt;&gt; j &gt;&gt; k;<br>    L.<span class="hljs-built_in">Insert</span>(j, k);<br>    cout &lt;&lt; <span class="hljs-string">&quot;执行遍历链表&quot;</span> &lt;&lt; endl;<br>    L.<span class="hljs-built_in">PrintList</span>();<br>    cout &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;请删除一个新数字元素，请输入位置&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-type">int</span> l;<br>    cin &gt;&gt; l;<br>    cout &lt;&lt; <span class="hljs-string">&quot;删除的元素位置是&quot;</span> &lt;&lt; l &lt;&lt; <span class="hljs-string">&quot;数据是&quot;</span> &lt;&lt; L.<span class="hljs-built_in">Get</span>(l) &lt;&lt; endl;<br>    L.<span class="hljs-built_in">Delete</span>(l);<br>    cout &lt;&lt; <span class="hljs-string">&quot;执行遍历链表&quot;</span> &lt;&lt; endl;<br>    L.<span class="hljs-built_in">PrintList</span>();<br>    cout &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个程序首先创建了一个空的单链表，然后向其中添加了一些节点。然后，它遍历了整个列表，查找了一个元素，插入了一个新的元素，删除了一个元素，然后再次遍历了整个列表。希望这个示例能对你有所帮助！</p><h1 id="两个有序单链表合并为一个有序单链表"><a href="#两个有序单链表合并为一个有序单链表" class="headerlink" title="两个有序单链表合并为一个有序单链表"></a>两个有序单链表合并为一个有序单链表</h1><p>当然，这是一个包含main函数的完整程序，它创建了两个有序链表，并将它们合并为一个有序链表：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-comment">// 定义链表节点</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ListNode</span> &#123;<br>    <span class="hljs-type">int</span> val;<br>    ListNode *next;<br>    <span class="hljs-built_in">ListNode</span>(<span class="hljs-type">int</span> x) : <span class="hljs-built_in">val</span>(x), <span class="hljs-built_in">next</span>(<span class="hljs-literal">NULL</span>) &#123;&#125;<br>&#125;;<br><br><span class="hljs-comment">// 合并两个有序链表</span><br><span class="hljs-function">ListNode* <span class="hljs-title">mergeTwoLists</span><span class="hljs-params">(ListNode* l1, ListNode* l2)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (l1 == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> l2;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (l2 == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> l1;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (l1-&gt;val &lt; l2-&gt;val) &#123;<br>        l1-&gt;next = <span class="hljs-built_in">mergeTwoLists</span>(l1-&gt;next, l2);<br>        <span class="hljs-keyword">return</span> l1;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        l2-&gt;next = <span class="hljs-built_in">mergeTwoLists</span>(l1, l2-&gt;next);<br>        <span class="hljs-keyword">return</span> l2;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 创建第一个有序链表：1 -&gt; 3 -&gt; 5</span><br>    ListNode *l1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">1</span>);<br>    l1-&gt;next = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">3</span>);<br>    l1-&gt;next-&gt;next = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">5</span>);<br><br>    <span class="hljs-comment">// 创建第二个有序链表：2 -&gt; 4 -&gt; 6</span><br>    ListNode *l2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">2</span>);<br>    l2-&gt;next = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">4</span>);<br>    l2-&gt;next-&gt;next = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">6</span>);<br><br>    <span class="hljs-comment">// 合并两个有序链表</span><br>    ListNode *merged = <span class="hljs-built_in">mergeTwoLists</span>(l1, l2);<br><br>    <span class="hljs-comment">// 打印合并后的链表</span><br>    <span class="hljs-keyword">while</span> (merged != <span class="hljs-literal">NULL</span>) &#123;<br>        std::cout &lt;&lt; merged-&gt;val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        merged = merged-&gt;next;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个程序首先创建了两个有序链表<code>l1</code>和<code>l2</code>，然后调用<code>mergeTwoLists</code>函数将它们合并为一个新的有序链表。最后，它遍历新的链表并打印出每个节点的值。</p><p>请注意，这个程序没有释放分配给链表节点的内存。在实际使用中，你应该在不再需要节点时释放它们的内存，以防止内存泄漏。此外，这个程序假设输入的链表已经排序。如果输入的链表没有排序，你需要先对它们进行排序。</p><h1 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h1><p>双链表是一种更复杂的线性数据结构，它的每个节点都有两个链接，一个指向前一个节点，另一个指向后一个节点。以下是一个使用C++实现的双链表的基本设计：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-comment">// 定义双链表节点</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ListNode</span> &#123;<br>    <span class="hljs-type">int</span> val;<br>    ListNode *prev;<br>    ListNode *next;<br>    <span class="hljs-built_in">ListNode</span>(<span class="hljs-type">int</span> x) : <span class="hljs-built_in">val</span>(x), <span class="hljs-built_in">prev</span>(<span class="hljs-literal">NULL</span>), <span class="hljs-built_in">next</span>(<span class="hljs-literal">NULL</span>) &#123;&#125;<br>&#125;;<br><br><span class="hljs-comment">// 添加节点到双链表的末尾</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addNode</span><span class="hljs-params">(ListNode* &amp;head, <span class="hljs-type">int</span> val)</span> </span>&#123;<br>    ListNode* newNode = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(val);<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">NULL</span>) &#123;<br>        head = newNode;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        ListNode* temp = head;<br>        <span class="hljs-keyword">while</span> (temp-&gt;next != <span class="hljs-literal">NULL</span>) &#123;<br>            temp = temp-&gt;next;<br>        &#125;<br>        temp-&gt;next = newNode;<br>        newNode-&gt;prev = temp;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 打印双链表</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printList</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;<br>    ListNode* temp = head;<br>    <span class="hljs-keyword">while</span> (temp != <span class="hljs-literal">NULL</span>) &#123;<br>        std::cout &lt;&lt; temp-&gt;val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        temp = temp-&gt;next;<br>    &#125;<br>    std::cout &lt;&lt; std::endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 创建一个空的双链表</span><br>    ListNode* head = <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-comment">// 添加节点到双链表</span><br>    <span class="hljs-built_in">addNode</span>(head, <span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">addNode</span>(head, <span class="hljs-number">2</span>);<br>    <span class="hljs-built_in">addNode</span>(head, <span class="hljs-number">3</span>);<br><br>    <span class="hljs-comment">// 打印双链表</span><br>    <span class="hljs-built_in">printList</span>(head);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个程序首先定义了一个双链表节点的结构，然后定义了两个函数：<code>addNode</code>用于向双链表的末尾添加新的节点，<code>printList</code>用于打印双链表的所有节点。在<code>main</code>函数中，它创建了一个空的双链表，然后添加了几个节点，并打印出了这个双链表。</p><p>请注意，这个程序没有释放分配给链表节点的内存。在实际使用中，你应该在不再需要节点时释放它们的内存，以防止内存泄漏。此外，你可能还需要实现其他操作，如删除节点、查找节点等。这取决于你的具体需求。如果你需要帮助实现这些操作，请随时向我询问！</p><h1 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h1><p>循环链表是一种特殊的链表，其中最后一个元素指向链表的第一个元素。这种类型的数据结构可以用于实现需要循环或重复的算法。以下是一个使用C++实现的循环链表的基本设计：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-comment">// 定义链表节点</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ListNode</span> &#123;<br>    <span class="hljs-type">int</span> val;<br>    ListNode *next;<br>    <span class="hljs-built_in">ListNode</span>(<span class="hljs-type">int</span> x) : <span class="hljs-built_in">val</span>(x), <span class="hljs-built_in">next</span>(<span class="hljs-literal">NULL</span>) &#123;&#125;<br>&#125;;<br><br><span class="hljs-comment">// 添加节点到循环链表的末尾</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addNode</span><span class="hljs-params">(ListNode* &amp;head, <span class="hljs-type">int</span> val)</span> </span>&#123;<br>    ListNode* newNode = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(val);<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">NULL</span>) &#123;<br>        head = newNode;<br>        newNode-&gt;next = head;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        ListNode* temp = head;<br>        <span class="hljs-keyword">while</span> (temp-&gt;next != head) &#123;<br>            temp = temp-&gt;next;<br>        &#125;<br>        temp-&gt;next = newNode;<br>        newNode-&gt;next = head;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 打印循环链表</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printList</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span>;<br>    ListNode* temp = head;<br>    <span class="hljs-keyword">do</span> &#123;<br>        std::cout &lt;&lt; temp-&gt;val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        temp = temp-&gt;next;<br>    &#125; <span class="hljs-keyword">while</span> (temp != head);<br>    std::cout &lt;&lt; std::endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 创建一个空的循环链表</span><br>    ListNode* head = <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-comment">// 添加节点到循环链表</span><br>    <span class="hljs-built_in">addNode</span>(head, <span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">addNode</span>(head, <span class="hljs-number">2</span>);<br>    <span class="hljs-built_in">addNode</span>(head, <span class="hljs-number">3</span>);<br><br>    <span class="hljs-comment">// 打印循环链表</span><br>    <span class="hljs-built_in">printList</span>(head);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个程序首先定义了一个链表节点的结构，然后定义了两个函数：<code>addNode</code>用于向循环链表的末尾添加新的节点，<code>printList</code>用于打印循环链表的所有节点。在<code>main</code>函数中，它创建了一个空的循环链表，然后添加了几个节点，并打印出了这个循环链表。</p><p>请注意，这个程序没有释放分配给链表节点的内存。在实际使用中，你应该在不再需要节点时释放它们的内存，以防止内存泄漏。此外，你可能还需要实现其他操作，如删除节点、查找节点等。这取决于你的具体需求。如果你需要帮助实现这些操作，请随时向我询问！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://cyberdownload.anrunlu.net/FlO6Qn0cVLJHriuYzOv453gkwMYY&quot; srcset=&quot;/img/loading.gif&quot; lazyload&gt;&lt;/p&gt;
&lt;h1 id=&quot;实验二主体&quot;&gt;&lt;a href=</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://w1ndys.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="数据结构作业" scheme="http://w1ndys.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%9C%E4%B8%9A/"/>
    
    <category term="实验" scheme="http://w1ndys.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%9C%E4%B8%9A/%E5%AE%9E%E9%AA%8C/"/>
    
    
    <category term="数据结构" scheme="http://w1ndys.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>C++类的基本学习</title>
    <link href="http://w1ndys.top/2023/09/17/C++-class-study/"/>
    <id>http://w1ndys.top/2023/09/17/C++-class-study/</id>
    <published>2023-09-17T10:47:10.657Z</published>
    <updated>2023-10-04T08:51:18.019Z</updated>
    
    <content type="html"><![CDATA[<p>（因为上学期C++选修课没认真听，导致这学期数据结构啥也不会，好吧，出来混迟早是要还的，现在开始恶补C++）</p><hr><h1 id="C-类-对象"><a href="#C-类-对象" class="headerlink" title="C++ 类 &amp; 对象"></a>C++ 类 &amp; 对象</h1><p>C++ 在 C 语言的基础上增加了面向对象编程，C++ 支持面向对象程序设计。类是 C++ 的核心特性，通常被称为用户定义的类型。</p><p>类用于指定对象的形式，是一种用户自定义的数据类型，它是一种封装了数据和函数的组合。类中的数据称为成员变量，函数称为成员函数。类可以被看作是一种模板，可以用来创建具有相同属性和行为的多个对象。</p><h2 id="C-类定义"><a href="#C-类定义" class="headerlink" title="C++ 类定义"></a>C++ 类定义</h2><p>定义一个类需要使用关键字 <strong>class</strong>，然后指定类的名称，并类的主体是包含在一对花括号中，主体包含类的成员变量和成员函数。</p><p>定义一个类，本质上是定义一个数据类型的蓝图，它定义了类的对象包括了什么，以及可以在这个对象上执行哪些操作。</p><p><img src="https://www.runoob.com/wp-content/uploads/2015/05/cpp-classes-objects-2020-12-10-11.png" srcset="/img/loading.gif" lazyload alt="img"></p><p>以下实例我们使用关键字 <strong>class</strong> 定义 Box 数据类型，包含了三个成员变量 length、breadth 和 height：</p><p>class Box {   public:      double length;   &#x2F;&#x2F; 盒子的长度      double breadth;  &#x2F;&#x2F; 盒子的宽度      double height;   &#x2F;&#x2F; 盒子的高度 };</p><p>关键字 <strong>public</strong> 确定了类成员的访问属性。在类对象作用域内，公共成员在类的外部是可访问的。您也可以指定类的成员为 <strong>private</strong> 或 <strong>protected</strong>，这个我们稍后会进行讲解。</p><h2 id="定义-C-对象"><a href="#定义-C-对象" class="headerlink" title="定义 C++ 对象"></a>定义 C++ 对象</h2><p>类提供了对象的蓝图，所以基本上，对象是根据类来创建的。声明类的对象，就像声明基本类型的变量一样。下面的语句声明了类 Box 的两个对象：</p><p>Box Box1;          &#x2F;&#x2F; 声明 Box1，类型为 Box Box Box2;          &#x2F;&#x2F; 声明 Box2，类型为 Box</p><p>对象 Box1 和 Box2 都有它们各自的数据成员。</p><h2 id="访问数据成员"><a href="#访问数据成员" class="headerlink" title="访问数据成员"></a>访问数据成员</h2><p>类的对象的公共数据成员可以使用直接成员访问运算符 <strong>.</strong> 来访问。</p><p><img src="https://www.runoob.com/wp-content/uploads/2015/05/cpp-classes-objects-2020-12-10-11-2.png" srcset="/img/loading.gif" lazyload alt="img"></p><p>为了更好地理解这些概念，让我们尝试一下下面的实例：</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br> <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br> <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Box</span><br>&#123;<br>   <span class="hljs-keyword">public</span>:<br>      <span class="hljs-type">double</span> length;   <span class="hljs-comment">// 长度</span><br>      <span class="hljs-type">double</span> breadth;  <span class="hljs-comment">// 宽度</span><br>      <span class="hljs-type">double</span> height;   <span class="hljs-comment">// 高度</span><br>      <span class="hljs-comment">// 成员函数声明</span><br>      <span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span>;<br>      <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">set</span><span class="hljs-params">( <span class="hljs-type">double</span> len, <span class="hljs-type">double</span> bre, <span class="hljs-type">double</span> hei )</span></span>;<br>&#125;;<br><span class="hljs-comment">// 成员函数定义</span><br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">Box::get</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> length * breadth * height;<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Box::set</span><span class="hljs-params">( <span class="hljs-type">double</span> len, <span class="hljs-type">double</span> bre, <span class="hljs-type">double</span> hei)</span></span><br><span class="hljs-function"></span>&#123;<br>    length = len;<br>    breadth = bre;<br>    height = hei;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">( )</span></span><br><span class="hljs-function"></span>&#123;<br>   Box Box1;        <span class="hljs-comment">// 声明 Box1，类型为 Box</span><br>   Box Box2;        <span class="hljs-comment">// 声明 Box2，类型为 Box</span><br>   Box Box3;        <span class="hljs-comment">// 声明 Box3，类型为 Box</span><br>   <span class="hljs-type">double</span> volume = <span class="hljs-number">0.0</span>;     <span class="hljs-comment">// 用于存储体积</span><br> <br>   <span class="hljs-comment">// box 1 详述</span><br>   Box1.height = <span class="hljs-number">5.0</span>; <br>   Box1.length = <span class="hljs-number">6.0</span>; <br>   Box1.breadth = <span class="hljs-number">7.0</span>;<br> <br>   <span class="hljs-comment">// box 2 详述</span><br>   Box2.height = <span class="hljs-number">10.0</span>;<br>   Box2.length = <span class="hljs-number">12.0</span>;<br>   Box2.breadth = <span class="hljs-number">13.0</span>;<br> <br>   <span class="hljs-comment">// box 1 的体积</span><br>   volume = Box1.height * Box1.length * Box1.breadth;<br>   cout &lt;&lt; <span class="hljs-string">&quot;Box1 的体积：&quot;</span> &lt;&lt; volume &lt;&lt;endl;<br> <br>   <span class="hljs-comment">// box 2 的体积</span><br>   volume = Box2.height * Box2.length * Box2.breadth;<br>   cout &lt;&lt; <span class="hljs-string">&quot;Box2 的体积：&quot;</span> &lt;&lt; volume &lt;&lt;endl;<br> <br> <br>   <span class="hljs-comment">// box 3 详述</span><br>   Box3.<span class="hljs-built_in">set</span>(<span class="hljs-number">16.0</span>, <span class="hljs-number">8.0</span>, <span class="hljs-number">12.0</span>); <br>   volume = Box3.<span class="hljs-built_in">get</span>(); <br>   cout &lt;&lt; <span class="hljs-string">&quot;Box3 的体积：&quot;</span> &lt;&lt; volume &lt;&lt;endl;<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Box1</span> 的体积：<span class="hljs-number">210</span><br><span class="hljs-attribute">Box2</span> 的体积：<span class="hljs-number">1560</span><br><span class="hljs-attribute">Box3</span> 的体积：<span class="hljs-number">1536</span><br></code></pre></td></tr></table></figure><p>需要注意的是，私有的成员和受保护的成员不能使用直接成员访问运算符 (.) 来直接访问。我们将在后续的教程中学习如何访问私有成员和受保护的成员。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;（因为上学期C++选修课没认真听，导致这学期数据结构啥也不会，好吧，出来混迟早是要还的，现在开始恶补C++）&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;C-类-对象&quot;&gt;&lt;a href=&quot;#C-类-对象&quot; class=&quot;headerlink&quot; title=&quot;C++ 类 &amp;amp; 对</summary>
      
    
    
    
    <category term="C++" scheme="http://w1ndys.top/categories/C/"/>
    
    <category term="类" scheme="http://w1ndys.top/categories/C/%E7%B1%BB/"/>
    
    
    <category term="C++" scheme="http://w1ndys.top/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>公文写作基础知识</title>
    <link href="http://w1ndys.top/2023/09/17/%E5%85%AC%E6%96%87%E5%86%99%E4%BD%9C%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://w1ndys.top/2023/09/17/%E5%85%AC%E6%96%87%E5%86%99%E4%BD%9C%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</id>
    <published>2023-09-17T05:01:06.430Z</published>
    <updated>2023-09-30T14:24:27.199Z</updated>
    
    <content type="html"><![CDATA[<h1 id="公文写作基础知识"><a href="#公文写作基础知识" class="headerlink" title="公文写作基础知识"></a>公文写作基础知识</h1><p>Word文档格式一般为：</p><p>①标题方正小标宋简体二号 不加粗 居中 段落固定值33磅</p><p>②标题与正文空一行（从正文开始打）</p><p>（空行字体字号与正文保持一致，仿宋三号固定值29磅）</p><p>③正文为仿宋三号不加粗，行间距固定值29磅。首行缩进2字符。两端对齐</p><p>3.标题：与正文缩进等相同、全部用中文字符</p><p>一级标题：黑体三号“一、XXXX”。</p><p>二级标题：楷体三号“（一）XXXX”。</p><p>三级标题：仿宋三号“1.XXXX”。</p><p>四级标题：仿宋三号“（1）XXXX”</p><p>4.Word表格</p><p>①标题方正小标宋简体二号不加粗居中。</p><p>②标题与表格间空一行，表格随内容适当调整。</p><p>③表格全部内容设置单元格格式居中对齐。</p><p>④注意标点。</p><p>⑤两个字的内容或人名中间空两格。</p><p>注：字体根据需要调整，三号，四号或小四。</p><p>5.其他注意点（视图选项）</p><p>①注意符号需为中文符号，区分中英文符号</p><p>如逗号, ， 冒号: ： 破折号- —— 括号( ) （ ）</p><p>②<strong>（根据实际情况进行增删）</strong></p>]]></content>
    
    
    <summary type="html">养成规范的好习惯！</summary>
    
    
    
    <category term="学习笔记" scheme="http://w1ndys.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="写作格式" scheme="http://w1ndys.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%86%99%E4%BD%9C%E6%A0%BC%E5%BC%8F/"/>
    
    
    <category term="文" scheme="http://w1ndys.top/tags/%E6%96%87/"/>
    
  </entry>
  
</feed>

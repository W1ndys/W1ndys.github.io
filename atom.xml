<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>hi！这里是W1ndys的小站</title>
  <icon>https://www.gravatar.com/avatar/35d8b83bb6ad9bce76c0b476a582c5cd</icon>
  <subtitle>清风愿渡我，我亦喜随风。</subtitle>
  <link href="http://w1ndys.top/atom.xml" rel="self"/>
  
  <link href="http://w1ndys.top/"/>
  <updated>2023-09-24T08:32:35.851Z</updated>
  <id>http://w1ndys.top/</id>
  
  <author>
    <name>W1ndys</name>
    <email>w2769731875@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>中华人民共和国网络安全法</title>
    <link href="http://w1ndys.top/2023/09/24/%E4%B8%AD%E5%8D%8E%E4%BA%BA%E6%B0%91%E5%85%B1%E5%92%8C%E5%9B%BD%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%B3%95/"/>
    <id>http://w1ndys.top/2023/09/24/%E4%B8%AD%E5%8D%8E%E4%BA%BA%E6%B0%91%E5%85%B1%E5%92%8C%E5%9B%BD%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%B3%95/</id>
    <published>2023-09-24T08:18:32.461Z</published>
    <updated>2023-09-24T08:32:35.851Z</updated>
    
    <content type="html"><![CDATA[<h1 id="中华人民共和国网络安全法"><a href="#中华人民共和国网络安全法" class="headerlink" title="中华人民共和国网络安全法"></a>中华人民共和国网络安全法</h1><h4 id="（2016年11月7日第十二届全国人民代表大会常务委员会第二十四次会议通过）"><a href="#（2016年11月7日第十二届全国人民代表大会常务委员会第二十四次会议通过）" class="headerlink" title="（2016年11月7日第十二届全国人民代表大会常务委员会第二十四次会议通过）"></a>（2016年11月7日第十二届全国人民代表大会常务委员会第二十四次会议通过）</h4><p>来源： 中国人大网 2016年11月7日 17:31:34</p><p>目  录</p><p>  第一章  总  则</p><p>  第二章  网络安全支持与促进</p><p>  第三章  网络运行安全</p><p>​  第一节 一般规定</p><pre><code class="hljs">  第二节 关键信息基础设施的运行安全</code></pre><p>  第四章  网络信息安全</p><p>  第五章 监测预警与应急处置</p><p>  第六章 法律责任</p><p>  第七章 附  则</p><h2 id="第一章-总-则"><a href="#第一章-总-则" class="headerlink" title="第一章  总  则"></a>第一章  总  则</h2><p><strong>第一条</strong> 为了保障网络安全，维护网络空间主权和国家安全、社会公共利益，保护公民、法人和其他组织的合法权益，促进经济社会信息化健康发展，制定本法。</p><p><strong>第二条</strong> 在中华人民共和国境内建设、运营、维护和使用网络，以及网络安全的监督管理，适用本法。</p><p><strong>第三条</strong> 国家坚持网络安全与信息化发展并重，遵循积极利用、科学发展、依法管理、确保安全的方针，推进网络基础设施建设和互联互通，鼓励网络技术创新和应用，支持培养网络安全人才，建立健全网络安全保障体系，提高网络安全保护能力。</p><p><strong>第四条</strong> 国家制定并不断完善网络安全战略，明确保障网络安全的基本要求和主要目标，提出重点领域的网络安全政策、工作任务和措施。</p><p><strong>第五条</strong> 国家采取措施，监测、防御、处置来源于中华人民共和国境内外的网络安全风险和威胁，保护关键信息基础设施免受攻击、侵入、干扰和破坏，依法惩治网络违法犯罪活动，维护网络空间安全和秩序。</p><p><strong>第六条</strong> 国家倡导诚实守信、健康文明的网络行为，推动传播社会主义核心价值观，采取措施提高全社会的网络安全意识和水平，形成全社会共同参与促进网络安全的良好环境。</p><p><strong>第七条</strong> 国家积极开展网络空间治理、网络技术研发和标准制定、打击网络违法犯罪等方面的国际交流与合作，推动构建和平、安全、开放、合作的网络空间，建立多边、民主、透明的网络治理体系。</p><p><strong>第八条</strong> 国家网信部门负责统筹协调网络安全工作和相关监督管理工作。国务院电信主管部门、公安部门和其他有关机关依照本法和有关法律、行政法规的规定，在各自职责范围内负责网络安全保护和监督管理工作。</p><p>县级以上地方人民政府有关部门的网络安全保护和监督管理职责，按照国家有关规定确定。</p><p><strong>第九条</strong> 网络运营者开展经营和服务活动，必须遵守法律、行政法规，尊重社会公德，遵守商业道德，诚实信用，履行网络安全保护义务，接受政府和社会的监督，承担社会责任。</p><p><strong>第十条</strong> 建设、运营网络或者通过网络提供服务，应当依照法律、行政法规的规定和国家标准的强制性要求，采取技术措施和其他必要措施，保障网络安全、稳定运行，有效应对网络安全事件，防范网络违法犯罪活动，维护网络数据的完整性、保密性和可用性。</p><p><strong>第十一条</strong> 网络相关行业组织按照章程，加强行业自律，制定网络安全行为规范，指导会员加强网络安全保护，提高网络安全保护水平，促进行业健康发展。</p><p><strong>第十二条</strong> 国家保护公民、法人和其他组织依法使用网络的权利，促进网络接入普及，提升网络服务水平，为社会提供安全、便利的网络服务，保障网络信息依法有序自由流动。</p><p>任何个人和组织使用网络应当遵守宪法法律，遵守公共秩序，尊重社会公德，不得危害网络安全，不得利用网络从事危害国家安全、荣誉和利益，煽动颠覆国家政权、推翻社会主义制度，煽动分裂国家、破坏国家统一，宣扬恐怖主义、极端主义，宣扬民族仇恨、民族歧视，传播暴力、淫秽色情信息，编造、传播虚假信息扰乱经济秩序和社会秩序，以及侵害他人名誉、隐私、知识产权和其他合法权益等活动。</p><p><strong>第十三条</strong> 国家支持研究开发有利于未成年人健康成长的网络产品和服务，依法惩治利用网络从事危害未成年人身心健康的活动，为未成年人提供安全、健康的网络环境。</p><p><strong>第十四条</strong> 任何个人和组织有权对危害网络安全的行为向网信、电信、公安等部门举报。收到举报的部门应当及时依法作出处理；不属于本部门职责的，应当及时移送有权处理的部门。</p><p>有关部门应当对举报人的相关信息予以保密，保护举报人的合法权益。</p><h2 id="第二章-网络安全支持与促进"><a href="#第二章-网络安全支持与促进" class="headerlink" title="第二章  网络安全支持与促进"></a>第二章  网络安全支持与促进</h2><p><strong>第十五条</strong> 国家建立和完善网络安全标准体系。国务院标准化行政主管部门和国务院其他有关部门根据各自的职责，组织制定并适时修订有关网络安全管理以及网络产品、服务和运行安全的国家标准、行业标准。</p><p>国家支持企业、研究机构、高等学校、网络相关行业组织参与网络安全国家标准、行业标准的制定。</p><p><strong>第十六条</strong> 国务院和省、自治区、直辖市人民政府应当统筹规划，加大投入，扶持重点网络安全技术产业和项目，支持网络安全技术的研究开发和应用，推广安全可信的网络产品和服务，保护网络技术知识产权，支持企业、研究机构和高等学校等参与国家网络安全技术创新项目。</p><p><strong>第十七条</strong> 国家推进网络安全社会化服务体系建设，鼓励有关企业、机构开展网络安全认证、检测和风险评估等安全服务。</p><p><strong>第十八条</strong> 国家鼓励开发网络数据安全保护和利用技术，促进公共数据资源开放，推动技术创新和经济社会发展。</p><p>国家支持创新网络安全管理方式，运用网络新技术，提升网络安全保护水平。</p><p><strong>第十九条</strong> 各级人民政府及其有关部门应当组织开展经常性的网络安全宣传教育，并指导、督促有关单位做好网络安全宣传教育工作。</p><p>大众传播媒介应当有针对性地面向社会进行网络安全宣传教育。</p><p><strong>第二十条</strong> 国家支持企业和高等学校、职业学校等教育培训机构开展网络安全相关教育与培训，采取多种方式培养网络安全人才，促进网络安全人才交流。</p><h2 id="第三章-网络运行安全"><a href="#第三章-网络运行安全" class="headerlink" title="第三章 网络运行安全"></a>第三章 网络运行安全</h2><h3 id="第一节-一般规定"><a href="#第一节-一般规定" class="headerlink" title="第一节 一般规定"></a>第一节 一般规定</h3><p><strong>第二十一条</strong> 国家实行网络安全等级保护制度。网络运营者应当按照网络安全等级保护制度的要求，履行下列安全保护义务，保障网络免受干扰、破坏或者未经授权的访问，防止网络数据泄露或者被窃取、篡改：</p><p>（一）制定内部安全管理制度和操作规程，确定网络安全负责人，落实网络安全保护责任；</p><p>（二）采取防范计算机病毒和网络攻击、网络侵入等危害网络安全行为的技术措施；</p><p>（三）采取监测、记录网络运行状态、网络安全事件的技术措施，并按照规定留存相关的网络日志不少于六个月；</p><p>（四）采取数据分类、重要数据备份和加密等措施；</p><p>（五）法律、行政法规规定的其他义务。</p><p><strong>第二十二条</strong> 网络产品、服务应当符合相关国家标准的强制性要求。网络产品、服务的提供者不得设置恶意程序；发现其网络产品、服务存在安全缺陷、漏洞等风险时，应当立即采取补救措施，按照规定及时告知用户并向有关主管部门报告。</p><p>网络产品、服务的提供者应当为其产品、服务持续提供安全维护；在规定或者当事人约定的期限内，不得终止提供安全维护。</p><p>网络产品、服务具有收集用户信息功能的，其提供者应当向用户明示并取得同意；涉及用户个人信息的，还应当遵守本法和有关法律、行政法规关于个人信息保护的规定。</p><p><strong>第二十三条</strong> 网络关键设备和网络安全专用产品应当按照相关国家标准的强制性要求，由具备资格的机构安全认证合格或者安全检测符合要求后，方可销售或者提供。国家网信部门会同国务院有关部门制定、公布网络关键设备和网络安全专用产品目录，并推动安全认证和安全检测结果互认，避免重复认证、检测。</p><p><strong>第二十四条</strong> 网络运营者为用户办理网络接入、域名注册服务，办理固定电话、移动电话等入网手续，或者为用户提供信息发布、即时通讯等服务，在与用户签订协议或者确认提供服务时，应当要求用户提供真实身份信息。用户不提供真实身份信息的，网络运营者不得为其提供相关服务。</p><p>国家实施网络可信身份战略，支持研究开发安全、方便的电子身份认证技术，推动不同电子身份认证之间的互认。</p><p><strong>第二十五条</strong> 网络运营者应当制定网络安全事件应急预案，及时处置系统漏洞、计算机病毒、网络攻击、网络侵入等安全风险；在发生危害网络安全的事件时，立即启动应急预案，采取相应的补救措施，并按照规定向有关主管部门报告。</p><p><strong>第二十六条</strong> 开展网络安全认证、检测、风险评估等活动，向社会发布系统漏洞、计算机病毒、网络攻击、网络侵入等网络安全信息，应当遵守国家有关规定。</p><p><strong>第二十七条</strong> 任何个人和组织不得从事非法侵入他人网络、干扰他人网络正常功能、窃取网络数据等危害网络安全的活动；不得提供专门用于从事侵入网络、干扰网络正常功能及防护措施、窃取网络数据等危害网络安全活动的程序、工具；明知他人从事危害网络安全的活动的，不得为其提供技术支持、广告推广、支付结算等帮助。</p><p><strong>第二十八条</strong> 网络运营者应当为公安机关、国家安全机关依法维护国家安全和侦查犯罪的活动提供技术支持和协助。</p><p><strong>第二十九条</strong> 国家支持网络运营者之间在网络安全信息收集、分析、通报和应急处置等方面进行合作，提高网络运营者的安全保障能力。</p><p>有关行业组织建立健全本行业的网络安全保护规范和协作机制，加强对网络安全风险的分析评估，定期向会员进行风险警示，支持、协助会员应对网络安全风险。</p><p><strong>第三十条</strong> 网信部门和有关部门在履行网络安全保护职责中获取的信息，只能用于维护网络安全的需要，不得用于其他用途。</p><h3 id="第二节-关键信息基础设施的运行安全"><a href="#第二节-关键信息基础设施的运行安全" class="headerlink" title="第二节 关键信息基础设施的运行安全"></a>第二节 关键信息基础设施的运行安全</h3><p><strong>第三十一条</strong> 国家对公共通信和信息服务、能源、交通、水利、金融、公共服务、电子政务等重要行业和领域，以及其他一旦遭到破坏、丧失功能或者数据泄露，可能严重危害国家安全、国计民生、公共利益的关键信息基础设施，在网络安全等级保护制度的基础上，实行重点保护。关键信息基础设施的具体范围和安全保护办法由国务院制定。</p><p>国家鼓励关键信息基础设施以外的网络运营者自愿参与关键信息基础设施保护体系。</p><p><strong>第三十二条</strong> 按照国务院规定的职责分工，负责关键信息基础设施安全保护工作的部门分别编制并组织实施本行业、本领域的关键信息基础设施安全规划，指导和监督关键信息基础设施运行安全保护工作。</p><p><strong>第三十三条</strong> 建设关键信息基础设施应当确保其具有支持业务稳定、持续运行的性能，并保证安全技术措施同步规划、同步建设、同步使用。</p><p><strong>第三十四条</strong> 除本法第二十一条的规定外，关键信息基础设施的运营者还应当履行下列安全保护义务：</p><p>（一）设置专门安全管理机构和安全管理负责人，并对该负责人和关键岗位的人员进行安全背景审查；</p><p>（二）定期对从业人员进行网络安全教育、技术培训和技能考核；</p><p>（三）对重要系统和数据库进行容灾备份；</p><p>（四）制定网络安全事件应急预案，并定期进行演练；</p><p>（五）法律、行政法规规定的其他义务。</p><p><strong>第三十五条</strong> 关键信息基础设施的运营者采购网络产品和服务，可能影响国家安全的，应当通过国家网信部门会同国务院有关部门组织的国家安全审查。</p><p><strong>第三十六条</strong> 关键信息基础设施的运营者采购网络产品和服务，应当按照规定与提供者签订安全保密协议，明确安全和保密义务与责任。</p><p><strong>第三十七条</strong> 关键信息基础设施的运营者在中华人民共和国境内运营中收集和产生的个人信息和重要数据应当在境内存储。因业务需要，确需向境外提供的，应当按照国家网信部门会同国务院有关部门制定的办法进行安全评估；法律、行政法规另有规定的，依照其规定。</p><p><strong>第三十八条</strong> 关键信息基础设施的运营者应当自行或者委托网络安全服务机构对其网络的安全性和可能存在的风险每年至少进行一次检测评估，并将检测评估情况和改进措施报送相关负责关键信息基础设施安全保护工作的部门。</p><p><strong>第三十九条</strong> 国家网信部门应当统筹协调有关部门对关键信息基础设施的安全保护采取下列措施：</p><p>（一）对关键信息基础设施的安全风险进行抽查检测，提出改进措施，必要时可以委托网络安全服务机构对网络存在的安全风险进行检测评估；</p><p>（二）定期组织关键信息基础设施的运营者进行网络安全应急演练，提高应对网络安全事件的水平和协同配合能力；</p><p>（三）促进有关部门、关键信息基础设施的运营者以及有关研究机构、网络安全服务机构等之间的网络安全信息共享；</p><p>（四）对网络安全事件的应急处置与网络功能的恢复等，提供技术支持和协助。</p><h2 id="第四章-网络信息安全"><a href="#第四章-网络信息安全" class="headerlink" title="第四章 网络信息安全"></a>第四章 网络信息安全</h2><p><strong>第四十条</strong> 网络运营者应当对其收集的用户信息严格保密，并建立健全用户信息保护制度。</p><p><strong>第四十一条</strong> 网络运营者收集、使用个人信息，应当遵循合法、正当、必要的原则，公开收集、使用规则，明示收集、使用信息的目的、方式和范围，并经被收集者同意。</p><p>网络运营者不得收集与其提供的服务无关的个人信息，不得违反法律、行政法规的规定和双方的约定收集、使用个人信息，并应当依照法律、行政法规的规定和与用户的约定，处理其保存的个人信息。</p><p><strong>第四十二条</strong> 网络运营者不得泄露、篡改、毁损其收集的个人信息；未经被收集者同意，不得向他人提供个人信息。但是，经过处理无法识别特定个人且不能复原的除外。</p><p>网络运营者应当采取技术措施和其他必要措施，确保其收集的个人信息安全，防止信息泄露、毁损、丢失。在发生或者可能发生个人信息泄露、毁损、丢失的情况时，应当立即采取补救措施，按照规定及时告知用户并向有关主管部门报告。</p><p><strong>第四十三条</strong> 个人发现网络运营者违反法律、行政法规的规定或者双方的约定收集、使用其个人信息的，有权要求网络运营者删除其个人信息；发现网络运营者收集、存储的其个人信息有错误的，有权要求网络运营者予以更正。网络运营者应当采取措施予以删除或者更正。</p><p><strong>第四十四条</strong> 任何个人和组织不得窃取或者以其他非法方式获取个人信息，不得非法出售或者非法向他人提供个人信息。</p><p><strong>第四十五条</strong> 依法负有网络安全监督管理职责的部门及其工作人员，必须对在履行职责中知悉的个人信息、隐私和商业秘密严格保密，不得泄露、出售或者非法向他人提供。</p><p><strong>第四十六条</strong> 任何个人和组织应当对其使用网络的行为负责，不得设立用于实施诈骗，传授犯罪方法，制作或者销售违禁物品、管制物品等违法犯罪活动的网站、通讯群组，不得利用网络发布涉及实施诈骗，制作或者销售违禁物品、管制物品以及其他违法犯罪活动的信息。</p><p><strong>第四十七条</strong> 网络运营者应当加强对其用户发布的信息的管理，发现法律、行政法规禁止发布或者传输的信息的，应当立即停止传输该信息，采取消除等处置措施，防止信息扩散，保存有关记录，并向有关主管部门报告。</p><p><strong>第四十八条</strong> 任何个人和组织发送的电子信息、提供的应用软件，不得设置恶意程序，不得含有法律、行政法规禁止发布或者传输的信息。</p><p>电子信息发送服务提供者和应用软件下载服务提供者，应当履行安全管理义务，知道其用户有前款规定行为的，应当停止提供服务，采取消除等处置措施，保存有关记录，并向有关主管部门报告。</p><p><strong>第四十九条</strong> 网络运营者应当建立网络信息安全投诉、举报制度，公布投诉、举报方式等信息，及时受理并处理有关网络信息安全的投诉和举报。</p><p>网络运营者对网信部门和有关部门依法实施的监督检查，应当予以配合。</p><p><strong>第五十条</strong> 国家网信部门和有关部门依法履行网络信息安全监督管理职责，发现法律、行政法规禁止发布或者传输的信息的，应当要求网络运营者停止传输，采取消除等处置措施，保存有关记录；对来源于中华人民共和国境外的上述信息，应当通知有关机构采取技术措施和其他必要措施阻断传播。</p><p>第五章 监测预警与应急处置</p><p><strong>第五十一条</strong> 国家建立网络安全监测预警和信息通报制度。国家网信部门应当统筹协调有关部门加强网络安全信息收集、分析和通报工作，按照规定统一发布网络安全监测预警信息。</p><p><strong>第五十二条</strong> 负责关键信息基础设施安全保护工作的部门，应当建立健全本行业、本领域的网络安全监测预警和信息通报制度，并按照规定报送网络安全监测预警信息。</p><p><strong>第五十三条</strong> 国家网信部门协调有关部门建立健全网络安全风险评估和应急工作机制，制定网络安全事件应急预案，并定期组织演练。</p><p>负责关键信息基础设施安全保护工作的部门应当制定本行业、本领域的网络安全事件应急预案，并定期组织演练。</p><p>网络安全事件应急预案应当按照事件发生后的危害程度、影响范围等因素对网络安全事件进行分级，并规定相应的应急处置措施。</p><p><strong>第五十四条</strong> 网络安全事件发生的风险增大时，省级以上人民政府有关部门应当按照规定的权限和程序，并根据网络安全风险的特点和可能造成的危害，采取下列措施：</p><p>（一）要求有关部门、机构和人员及时收集、报告有关信息，加强对网络安全风险的监测；</p><p>（二）组织有关部门、机构和专业人员，对网络安全风险信息进行分析评估，预测事件发生的可能性、影响范围和危害程度；</p><p>（三）向社会发布网络安全风险预警，发布避免、减轻危害的措施。</p><p><strong>第五十五条</strong> 发生网络安全事件，应当立即启动网络安全事件应急预案，对网络安全事件进行调查和评估，要求网络运营者采取技术措施和其他必要措施，消除安全隐患，防止危害扩大，并及时向社会发布与公众有关的警示信息。</p><p><strong>第五十六条</strong> 省级以上人民政府有关部门在履行网络安全监督管理职责中，发现网络存在较大安全风险或者发生安全事件的，可以按照规定的权限和程序对该网络的运营者的法定代表人或者主要负责人进行约谈。网络运营者应当按照要求采取措施，进行整改，消除隐患。</p><p><strong>第五十七条</strong> 因网络安全事件，发生突发事件或者生产安全事故的，应当依照《中华人民共和国突发事件应对法》、《中华人民共和国安全生产法》等有关法律、行政法规的规定处置。</p><p><strong>第五十八条</strong> 因维护国家安全和社会公共秩序，处置重大突发社会安全事件的需要，经国务院决定或者批准，可以在特定区域对网络通信采取限制等临时措施。</p><p>第六章 法律责任</p><p><strong>第五十九条</strong> 网络运营者不履行本法第二十一条、第二十五条规定的网络安全保护义务的，由有关主管部门责令改正，给予警告；拒不改正或者导致危害网络安全等后果的，处一万元以上十万元以下罚款，对直接负责的主管人员处五千元以上五万元以下罚款。</p><p>关键信息基础设施的运营者不履行本法第三十三条、第三十四条、第三十六条、第三十八条规定的网络安全保护义务的，由有关主管部门责令改正，给予警告；拒不改正或者导致危害网络安全等后果的，处十万元以上一百万元以下罚款，对直接负责的主管人员处一万元以上十万元以下罚款。</p><p><strong>第六十条</strong> 违反本法第二十二条第一款、第二款和第四十八条第一款规定，有下列行为之一的，由有关主管部门责令改正，给予警告；拒不改正或者导致危害网络安全等后果的，处五万元以上五十万元以下罚款，对直接负责的主管人员处一万元以上十万元以下罚款：</p><p>（一）设置恶意程序的；</p><p>（二）对其产品、服务存在的安全缺陷、漏洞等风险未立即采取补救措施，或者未按照规定及时告知用户并向有关主管部门报告的；</p><p>（三）擅自终止为其产品、服务提供安全维护的。</p><p><strong>第六十一条</strong> 网络运营者违反本法第二十四条第一款规定，未要求用户提供真实身份信息，或者对不提供真实身份信息的用户提供相关服务的，由有关主管部门责令改正；拒不改正或者情节严重的，处五万元以上五十万元以下罚款，并可以由有关主管部门责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照，对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款。</p><p><strong>第六十二条</strong> 违反本法第二十六条规定，开展网络安全认证、检测、风险评估等活动，或者向社会发布系统漏洞、计算机病毒、网络攻击、网络侵入等网络安全信息的，由有关主管部门责令改正，给予警告；拒不改正或者情节严重的，处一万元以上十万元以下罚款，并可以由有关主管部门责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照，对直接负责的主管人员和其他直接责任人员处五千元以上五万元以下罚款。</p><p><strong>第六十三条</strong> 违反本法第二十七条规定，从事危害网络安全的活动，或者提供专门用于从事危害网络安全活动的程序、工具，或者为他人从事危害网络安全的活动提供技术支持、广告推广、支付结算等帮助，尚不构成犯罪的，由公安机关没收违法所得，处五日以下拘留，可以并处五万元以上五十万元以下罚款；情节较重的，处五日以上十五日以下拘留，可以并处十万元以上一百万元以下罚款。</p><p>单位有前款行为的，由公安机关没收违法所得，处十万元以上一百万元以下罚款，并对直接负责的主管人员和其他直接责任人员依照前款规定处罚。</p><p>违反本法第二十七条规定，受到治安管理处罚的人员，五年内不得从事网络安全管理和网络运营关键岗位的工作；受到刑事处罚的人员，终身不得从事网络安全管理和网络运营关键岗位的工作。</p><p><strong>第六十四条</strong> 网络运营者、网络产品或者服务的提供者违反本法第二十二条第三款、第四十一条至第四十三条规定，侵害个人信息依法得到保护的权利的，由有关主管部门责令改正，可以根据情节单处或者并处警告、没收违法所得、处违法所得一倍以上十倍以下罚款，没有违法所得的，处一百万元以下罚款，对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款；情节严重的，并可以责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照。</p><p>违反本法第四十四条规定，窃取或者以其他非法方式获取、非法出售或者非法向他人提供个人信息，尚不构成犯罪的，由公安机关没收违法所得，并处违法所得一倍以上十倍以下罚款，没有违法所得的，处一百万元以下罚款。</p><p><strong>第六十五条</strong> 关键信息基础设施的运营者违反本法第三十五条规定，使用未经安全审查或者安全审查未通过的网络产品或者服务的，由有关主管部门责令停止使用，处采购金额一倍以上十倍以下罚款；对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款。</p><p><strong>第六十六条</strong> 关键信息基础设施的运营者违反本法第三十七条规定，在境外存储网络数据，或者向境外提供网络数据的，由有关主管部门责令改正，给予警告，没收违法所得，处五万元以上五十万元以下罚款，并可以责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照；对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款。</p><p><strong>第六十七条</strong> 违反本法第四十六条规定，设立用于实施违法犯罪活动的网站、通讯群组，或者利用网络发布涉及实施违法犯罪活动的信息，尚不构成犯罪的，由公安机关处五日以下拘留，可以并处一万元以上十万元以下罚款；情节较重的，处五日以上十五日以下拘留，可以并处五万元以上五十万元以下罚款。关闭用于实施违法犯罪活动的网站、通讯群组。</p><p>单位有前款行为的，由公安机关处十万元以上五十万元以下罚款，并对直接负责的主管人员和其他直接责任人员依照前款规定处罚。</p><p><strong>第六十八条</strong> 网络运营者违反本法第四十七条规定，对法律、行政法规禁止发布或者传输的信息未停止传输、采取消除等处置措施、保存有关记录的，由有关主管部门责令改正，给予警告，没收违法所得；拒不改正或者情节严重的，处十万元以上五十万元以下罚款，并可以责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照，对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款。</p><p>电子信息发送服务提供者、应用软件下载服务提供者，不履行本法第四十八条第二款规定的安全管理义务的，依照前款规定处罚。</p><p><strong>第六十九条</strong> 网络运营者违反本法规定，有下列行为之一的，由有关主管部门责令改正；拒不改正或者情节严重的，处五万元以上五十万元以下罚款，对直接负责的主管人员和其他直接责任人员，处一万元以上十万元以下罚款：</p><p>（一）不按照有关部门的要求对法律、行政法规禁止发布或者传输的信息，采取停止传输、消除等处置措施的；</p><p>（二）拒绝、阻碍有关部门依法实施的监督检查的；</p><p>（三）拒不向公安机关、国家安全机关提供技术支持和协助的。</p><p><strong>第七十条</strong> 发布或者传输本法第十二条第二款和其他法律、行政法规禁止发布或者传输的信息的，依照有关法律、行政法规的规定处罚。</p><p><strong>第七十一条</strong> 有本法规定的违法行为的，依照有关法律、行政法规的规定记入信用档案，并予以公示。</p><p><strong>第七十二条</strong> 国家机关政务网络的运营者不履行本法规定的网络安全保护义务的，由其上级机关或者有关机关责令改正；对直接负责的主管人员和其他直接责任人员依法给予处分。</p><p><strong>第七十三条</strong> 网信部门和有关部门违反本法第三十条规定，将在履行网络安全保护职责中获取的信息用于其他用途的，对直接负责的主管人员和其他直接责任人员依法给予处分。</p><p>网信部门和有关部门的工作人员玩忽职守、滥用职权、徇私舞弊，尚不构成犯罪的，依法给予处分。</p><p><strong>第七十四条</strong> 违反本法规定，给他人造成损害的，依法承担民事责任。</p><p>违反本法规定，构成违反治安管理行为的，依法给予治安管理处罚；构成犯罪的，依法追究刑事责任。</p><p><strong>第七十五条</strong> 境外的机构、组织、个人从事攻击、侵入、干扰、破坏等危害中华人民共和国的关键信息基础设施的活动，造成严重后果的，依法追究法律责任；国务院公安部门和有关部门并可以决定对该机构、组织、个人采取冻结财产或者其他必要的制裁措施。</p><p>第七章 附  则</p><p><strong>第七十六条</strong> 本法下列用语的含义：</p><p>（一）网络，是指由计算机或者其他信息终端及相关设备组成的按照一定的规则和程序对信息进行收集、存储、传输、交换、处理的系统。</p><p>（二）网络安全，是指通过采取必要措施，防范对网络的攻击、侵入、干扰、破坏和非法使用以及意外事故，使网络处于稳定可靠运行的状态，以及保障网络数据的完整性、保密性、可用性的能力。</p><p>（三）网络运营者，是指网络的所有者、管理者和网络服务提供者。</p><p>（四）网络数据，是指通过网络收集、存储、传输、处理和产生的各种电子数据。</p><p>（五）个人信息，是指以电子或者其他方式记录的能够单独或者与其他信息结合识别自然人个人身份的各种信息，包括但不限于自然人的姓名、出生日期、身份证件号码、个人生物识别信息、住址、电话号码等。</p><p><strong>第七十七条</strong> 存储、处理涉及国家秘密信息的网络的运行安全保护，除应当遵守本法外，还应当遵守保密法律、行政法规的规定。</p><p><strong>第七十八条</strong> 军事网络的安全保护，由中央军事委员会另行规定。</p><p><strong>第七十九条</strong> 本法自2017年6月1日起施行。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;中华人民共和国网络安全法&quot;&gt;&lt;a href=&quot;#中华人民共和国网络安全法&quot; class=&quot;headerlink&quot; title=&quot;中华人民共和国网络安全法&quot;&gt;&lt;/a&gt;中华人民共和国网络安全法&lt;/h1&gt;&lt;h4 id=&quot;（2016年11月7日第十二届全国人民代表大会常务</summary>
      
    
    
    
    <category term="法律" scheme="http://w1ndys.top/categories/%E6%B3%95%E5%BE%8B/"/>
    
    <category term="网络安全法" scheme="http://w1ndys.top/categories/%E6%B3%95%E5%BE%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%B3%95/"/>
    
    
    <category term="文" scheme="http://w1ndys.top/tags/%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>一些零碎的知识点</title>
    <link href="http://w1ndys.top/2023/09/24/%E4%B8%80%E4%BA%9B%E9%9B%B6%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>http://w1ndys.top/2023/09/24/%E4%B8%80%E4%BA%9B%E9%9B%B6%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/</id>
    <published>2023-09-24T08:02:59.559Z</published>
    <updated>2023-09-24T08:15:09.215Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于二维码"><a href="#关于二维码" class="headerlink" title="关于二维码"></a>关于二维码</h1><p>二维码除了定位点不能被遮挡外，其他地方不是有数据冗余机制嘛，允许10%-20%以内的遮挡&#x2F;噪声好像是</p><p>不同软件算法可能不一样，有的能算出来原始数据，有的算不出来</p><p>这也是那个stable diffusion生成二维码能契合原图的原因</p><p>在生成二维码的时候，由于有这部分冗余的存在，在一定程度上“丢掉”某些颜色差异与底图过大的信息是不影响数据表达的。但会影响传输可靠性</p><p>比如这个码你很难在 摄像设备歪斜&#x2F;远距离&#x2F;模糊的展板 的情况下成功扫出来</p><p>——来自芃哥</p><h1 id="修改文件创建时间等"><a href="#修改文件创建时间等" class="headerlink" title="修改文件创建时间等"></a>修改文件创建时间等</h1><p>使用windows自带的powershell即可，win+r键，输入powershell,在弹出的命令窗口输入命令，以abc.txt举例</p><p>1.修改文件创建时间</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">$</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">Get</span><span class="hljs-operator">-</span><span class="hljs-built_in">Item</span> <span class="hljs-variable">abc</span><span class="hljs-operator">.</span><span class="hljs-variable">txt</span><span class="hljs-punctuation">)</span><span class="hljs-operator">.</span><span class="hljs-variable">creationtime</span><span class="hljs-operator">=</span><span class="hljs-variable">$</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">Get</span><span class="hljs-operator">-</span><span class="hljs-built_in">Date</span> <span class="hljs-string">&quot;11/04/2019 20:42:23&quot;</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>2.修改文件最后访问时间</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">$</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">Get</span><span class="hljs-operator">-</span><span class="hljs-built_in">Item</span> <span class="hljs-variable">abc</span><span class="hljs-operator">.</span><span class="hljs-variable">txt</span><span class="hljs-punctuation">)</span><span class="hljs-operator">.</span><span class="hljs-variable">lastaccesstime</span><span class="hljs-operator">=</span><span class="hljs-variable">$</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">Get</span><span class="hljs-operator">-</span><span class="hljs-built_in">Date</span> <span class="hljs-string">&quot;11/04/2019 20:42:23&quot;</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>3.修改文件最后修改时间</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">$</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">Get</span><span class="hljs-operator">-</span><span class="hljs-built_in">Item</span> <span class="hljs-variable">abc</span><span class="hljs-operator">.</span><span class="hljs-variable">txt</span><span class="hljs-punctuation">)</span><span class="hljs-operator">.</span><span class="hljs-variable">lastwritetime</span><span class="hljs-operator">=</span><span class="hljs-variable">$</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">Get</span><span class="hljs-operator">-</span><span class="hljs-built_in">Date</span> <span class="hljs-string">&quot;11/04/2019 20:42:23&quot;</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><h1 id="关于Python—base64编码"><a href="#关于Python—base64编码" class="headerlink" title="关于Python—base64编码"></a>关于Python—base64编码</h1><p>crypt &#x3D; base64.b64encode(enc.encode(‘utf-8’)).decode(‘utf-8’)</p><p>cipher &#x3D; base64.b64decode(crypt).decode(‘utf-8’)</p><p>关于这两段为什么要写两个utf-8</p><p>​                                 </p><h1 id="关于Python解密"><a href="#关于Python解密" class="headerlink" title="关于Python解密"></a>关于Python解密</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python">Str = <span class="hljs-string">&quot;ylqq]aycqyp&#123;&quot;</span><br><br>flag = []<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(Str)):<br><br>  <span class="hljs-keyword">if</span> (Str[i] &lt;= <span class="hljs-built_in">chr</span>(<span class="hljs-number">94</span>) <span class="hljs-keyword">or</span> Str[i] &gt; <span class="hljs-built_in">chr</span>(<span class="hljs-number">96</span>)) <span class="hljs-keyword">and</span> (Str[i] &lt;= <span class="hljs-built_in">chr</span>(<span class="hljs-number">62</span>) <span class="hljs-keyword">or</span> Str[i] &gt; <span class="hljs-built_in">chr</span>(<span class="hljs-number">64</span>)):<br><br>     flag.append(<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(Str[i])+<span class="hljs-number">2</span>))<br><br>  <span class="hljs-keyword">else</span>:<br><br>     flag.append(<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(Str[i])-<span class="hljs-number">24</span>))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>.join(flag))<br><br><span class="hljs-comment"># 知识点</span><br><span class="hljs-comment"># flag要写为列表，字符串不可以直接相加减</span><br><span class="hljs-comment"># 做加减法的时候要先ord转化在加减然后转化为chr字符串</span><br><span class="hljs-comment"># 然后在字符操作</span><br><span class="hljs-comment"># 最后用join()拼接</span><br></code></pre></td></tr></table></figure><h1 id="关于Python找数组相同元素下标"><a href="#关于Python找数组相同元素下标" class="headerlink" title="关于Python找数组相同元素下标"></a>关于Python找数组相同元素下标</h1><p>可以直接用函数find，例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python">flag = <span class="hljs-string">&#x27;&#x27;</span><br><br>s = <span class="hljs-string">&#x27;wesyvbniazxchjko1973652048@$+-&amp;*&lt;&gt;&#x27;</span><br><br>result = <span class="hljs-string">&#x27;v0b9n1nkajz@j0c4jjo3oi1h1i937b395i5y5e0e$i&#x27;</span><br><br>len1=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">len</span>(result)/<span class="hljs-number">2</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(len1):<br><br>  s1 = s.find(result[i * <span class="hljs-number">2</span>]) - i<br><br>  s2 = <span class="hljs-number">34</span> - s.find(result[i * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>]) - i - <span class="hljs-number">1</span><br><br>  <span class="hljs-keyword">if</span> s2 &lt; <span class="hljs-number">0</span>:<br><br>     s2 = s2 + <span class="hljs-number">34</span><br><br>  <span class="hljs-keyword">else</span>:<br><br>     flag += <span class="hljs-built_in">chr</span>(s1 * <span class="hljs-number">17</span> + s2)<br><br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><p>其中s.find(result[i<em>2])就是找s中和result[2</em>i]元素相同元素的下标</p><h1 id="关于upx加壳脱壳指令"><a href="#关于upx加壳脱壳指令" class="headerlink" title="关于upx加壳脱壳指令"></a>关于upx加壳脱壳指令</h1><p>upx.exe –o 别名.exe –d 现名.exe</p><p>-o：表示输出；</p><p>-o 别名.exe：表示以别名.exe作为脱壳后的输出；</p><p>-d 现名.exe：表示以现名.exe作为脱壳前的输入。</p><h1 id="关于Python切片"><a href="#关于Python切片" class="headerlink" title="关于Python切片"></a>关于Python切片</h1><p><a href="https://blog.csdn.net/qq_30460949/article/details/118888961">Python切片操作_小魔王降临的博客-CSDN博客</a></p><h1 id="关于IDA"><a href="#关于IDA" class="headerlink" title="关于IDA"></a>关于IDA</h1><p>交叉引用就是看哪段代码引用了这个变量</p><h1 id="关于C语言伪代码转化"><a href="#关于C语言伪代码转化" class="headerlink" title="关于C语言伪代码转化"></a>关于C语言伪代码转化</h1><h1 id="关于Python的random库"><a href="#关于Python的random库" class="headerlink" title="关于Python的random库"></a>关于Python的random库</h1><p>import random</p><p>print(random.getrandbits(8))    #返回一个八位大小的整数</p><p>扩展：8位大小的整数是指二进制八位00000000-11111111的数，转换成十进制就是0-255</p><p>random.seed(1)             #设置一个种子为1并生成随机数，设置种子后生成的随机数就是固定的（逆向题可用）</p><h1 id="关于xor异或的逆运算"><a href="#关于xor异或的逆运算" class="headerlink" title="关于xor异或的逆运算"></a>关于xor异或的逆运算</h1><p>A&#x3D;A^B^B</p><h1 id="关于Python语法小记"><a href="#关于Python语法小记" class="headerlink" title="关于Python语法小记"></a>关于Python语法小记</h1><p>字符串连接时只能将字符和字符连接，flag+&#x3D;str（）</p><p>Ord是转化成对应的ascll</p><p>异或运算只能int类型，ord()^int()</p><p>定义字符串单双引号都可以</p><h1 id="关于大端序和小端序的区别"><a href="#关于大端序和小端序的区别" class="headerlink" title="关于大端序和小端序的区别"></a>关于大端序和小端序的区别</h1><p><a href="https://blog.csdn.net/afanzcf/article/details/118788007">BUUCTF SimpleRev（涉及大小端序存储的问题）_Afanbird的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/Casuall/article/details/98481469">大端序和小端序_Casuall的博客-CSDN博客</a></p><p>1、大端模式：高字节保存在内存的低地址</p><p>2、小端模式：高字节保存在内存的高地址</p><p>Big-endian：高位字节存入低地址，低位字节存入高地址</p><p>Little-endian：低位字节存入低地址，高位字节存入高地址</p><p>一般来说，x86系列CPU都是Little-endian字节序，PowerPC通常是Big-endian字节序。</p><h1 id="关于可以直接打进地址栏的文件类型"><a href="#关于可以直接打进地址栏的文件类型" class="headerlink" title="关于可以直接打进地址栏的文件类型"></a>关于可以直接打进地址栏的文件类型</h1><p>data:image&#x2F;png;base64,iVB………………………………</p><h1 id="关于base编码原理"><a href="#关于base编码原理" class="headerlink" title="关于base编码原理"></a>关于base编码原理</h1><p><a href="https://www.cnblogs.com/0yst3r-2046/p/11962942.html">Base系列编码浅析【base16 base32 base64 base85 base36 base 58 base91 base 92 base62】 - 0yst3r - 博客园 (cnblogs.com)</a></p><h1 id="关于CTF常见编码以及加解密"><a href="#关于CTF常见编码以及加解密" class="headerlink" title="关于CTF常见编码以及加解密"></a>关于CTF常见编码以及加解密</h1><p><a href="https://www.cnblogs.com/ruoli-s/p/14206145.html">CTF常见编码及加解密（超全） - ruoli-s - 博客园 (cnblogs.com)</a></p><h1 id="常用的在线编码工具"><a href="#常用的在线编码工具" class="headerlink" title="常用的在线编码工具"></a>常用的在线编码工具</h1><p><a href="https://gchq.github.io/CyberChef/">CyberChef (gchq.github.io)</a></p><p><a href="https://github.com/Ciphey/Ciphey">Ciphey&#x2F;Ciphey: ⚡ Automatically decrypt encryptions without knowing the key or cipher, decode encodings, and crack hashes ⚡ (github.com)</a></p><p><a href="http://www.hiencode.com/">CTF在线工具-CTF工具|CTF编码|CTF密码学|CTF加解密|程序员工具|在线编解码 (hiencode.com)</a></p><p><a href="https://ctf.bugku.com/tools">在线工具 - Bugku CTF</a></p><h1 id="关于ASCII逆向穷举"><a href="#关于ASCII逆向穷举" class="headerlink" title="关于ASCII逆向穷举"></a>关于ASCII逆向穷举</h1><p>例如：[ACTF新生赛2020]rome1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python">a= <span class="hljs-string">&#x27;ACTF&#123;&#x27;</span><br><br>enc=<span class="hljs-string">&#x27;Qsw3sj_lz4_Ujw@l&#x27;</span><br><br>s=<span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(enc)):<br><br>  <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">128</span>):<br><br>     j=n<br><br>     <span class="hljs-keyword">if</span> j &gt;<span class="hljs-number">64</span> <span class="hljs-keyword">and</span> j&lt;=<span class="hljs-number">90</span>:<br><br>       j=(j-<span class="hljs-number">51</span>)%<span class="hljs-number">26</span>+<span class="hljs-number">65</span><br><br>     <span class="hljs-keyword">if</span> j&gt;<span class="hljs-number">96</span> <span class="hljs-keyword">and</span> j&lt;=<span class="hljs-number">122</span>:<br><br>       j= (j-<span class="hljs-number">79</span>)%<span class="hljs-number">26</span> +<span class="hljs-number">97</span><br><br>     <span class="hljs-keyword">if</span> j==<span class="hljs-built_in">ord</span>(enc[i]):<br><br>       a=a+<span class="hljs-built_in">chr</span>(n)<br><br><span class="hljs-built_in">print</span>(a+<span class="hljs-string">&#x27;&#125;&#x27;</span>)<br></code></pre></td></tr></table></figure><p>ACTF{Cae3ar_th4_Gre@t}</p><p>题目中意思是输入的字符经过一系列加密得到enc，在逆向的过程中可以用穷举的方法逐渐得到结果，以顺代逆</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;关于二维码&quot;&gt;&lt;a href=&quot;#关于二维码&quot; class=&quot;headerlink&quot; title=&quot;关于二维码&quot;&gt;&lt;/a&gt;关于二维码&lt;/h1&gt;&lt;p&gt;二维码除了定位点不能被遮挡外，其他地方不是有数据冗余机制嘛，允许10%-20%以内的遮挡&amp;#x2F;噪声好像是&lt;/p</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://w1ndys.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="计算机" scheme="http://w1ndys.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
    <category term="计算机" scheme="http://w1ndys.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>简单两步，将Windows11右键菜单修改为Windows10风格</title>
    <link href="http://w1ndys.top/2023/09/23/%E5%B0%86Windows11%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%E4%BF%AE%E6%94%B9%E4%B8%BAWindows10%E9%A3%8E%E6%A0%BC/"/>
    <id>http://w1ndys.top/2023/09/23/%E5%B0%86Windows11%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%E4%BF%AE%E6%94%B9%E4%B8%BAWindows10%E9%A3%8E%E6%A0%BC/</id>
    <published>2023-09-23T08:14:52.964Z</published>
    <updated>2023-09-23T08:21:16.255Z</updated>
    
    <content type="html"><![CDATA[<p>原文链接<a href="http://t.csdn.cn/dhe9N">http://t.csdn.cn/dhe9N</a></p><p>Windows11更新后，右键菜单很多功能隐藏起来了，使用时需要点击“显示更多选型”才能获取完整功能。为了能获得Windows10右键菜单丝滑的体验，我总结了以下方法。</p><p>修改前：</p><p><a href="https://img-blog.csdnimg.cn/img_convert/59704c4ffbd6af9764dd5ab84c0fc7bf.gif">https://img-blog.csdnimg.cn/img_convert/59704c4ffbd6af9764dd5ab84c0fc7bf.gif</a></p><p>修改后：</p><p><a href="https://img-blog.csdnimg.cn/img_convert/1e8911f87d020b6034f90d8b5b1a9255.gif">https://img-blog.csdnimg.cn/img_convert/1e8911f87d020b6034f90d8b5b1a9255.gif</a></p><h1 id="方法一：控制台操作法"><a href="#方法一：控制台操作法" class="headerlink" title="方法一：控制台操作法"></a>方法一：控制台操作法</h1><p>按住win+R打开运行窗口</p><p>输入cmd，打开控制台<br>在控制泰中输入下方代码，回车，显示操作成功<br>开启旧版右键菜单：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">reg <span class="hljs-keyword">add</span><span class="language-bash"> <span class="hljs-string">&quot;HKCU\Software\Classes\CLSID\&#123;86ca1aa0-34aa-4e8b-a509-50c905bae2a2&#125;\InprocServer32&quot;</span> /f /ve</span><br></code></pre></td></tr></table></figure><p>恢复windows11新版右键菜单：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs subunit">reg delete &quot;HKCU\Software\Classes\CLSID\&#123;86ca1aa0<span class="hljs-string">-34</span>aa<span class="hljs-string">-4</span>e8b-a509<span class="hljs-string">-50</span>c905bae2a2&#125;&quot; /f<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;原文链接&lt;a href=&quot;http://t.csdn.cn/dhe9N&quot;&gt;http://t.csdn.cn/dhe9N&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Windows11更新后，右键菜单很多功能隐藏起来了，使用时需要点击“显示更多选型”才能获取完整功能。为了能获得Windows10右</summary>
      
    
    
    
    <category term="Windows" scheme="http://w1ndys.top/categories/Windows/"/>
    
    <category term="系统设置" scheme="http://w1ndys.top/categories/Windows/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E7%BD%AE/"/>
    
    
    <category term="Windows技术分享" scheme="http://w1ndys.top/tags/Windows%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>如何安装Microsoft office各种版本以及破解||office盗版弹窗的关闭方法</title>
    <link href="http://w1ndys.top/2023/09/22/office_error/"/>
    <id>http://w1ndys.top/2023/09/22/office_error/</id>
    <published>2023-09-22T13:52:49.899Z</published>
    <updated>2023-09-22T16:15:24.312Z</updated>
    
    <content type="html"><![CDATA[<p>想必大家都认识Microsoft office</p><p>就是常说的Word  Excel  PPT三大办公套件</p><p>当然也有Outlook OneNote Publisher Access  Teams等这些不常用的</p><p>但是，正版购买要七百多甚至一千多！太贵了怎么办</p><p>没事</p><p>教你不花钱免费用</p><h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><p>原地址：<a href="https://www.coolhub.top/archives/42">[新手必读] Office Tool Plus 入门教程</a></p><h2 id="写在开头"><a href="#写在开头" class="headerlink" title="写在开头"></a>写在开头</h2><p>Office Tool Plus 是一个强大且实用的 Office 部署工具。</p><p>Office Tool Plus 基于 <a href="https://aka.ms/ODT">Office 部署工具</a> 制作，可以很方便的部署 Office，其内置迅雷和 Downloader 引擎可帮助您更快地下载 Office。</p><p>你也可以使用 Office Tool Plus 的其他功能或者是内置的小工具方便、快捷地管理 Office 哦！</p><p>支持下列产品：</p><ul><li>Microsoft 365</li><li>Office 2016 - 2021</li><li>Visio Online Plan 2 &amp; Visio 2016 - 2021</li><li>Project Online Desktop Client &amp; Project 2016 - 2021</li></ul><p>个人主页：<a href="https://officetool.plus/">https://officetool.plus/</a></p><p>官方网站：<a href="https://otp.landian.vip/">https://otp.landian.vip/</a></p><p>帮助文档：<a href="https://otp.landian.vip/help/">https://otp.landian.vip/help/</a></p><p>GitHub：<a href="https://github.com/YerongAI/Office-Tool">https://github.com/YerongAI/Office-Tool</a></p><p>无论你是个体还是团队，Office Tool Plus 都是你的得力小助手。</p><h2 id="系统要求"><a href="#系统要求" class="headerlink" title="系统要求"></a>系统要求</h2><p>请查看<a href="https://otp.landian.vip/docs/zh-cn/start/requirement.html">帮助文档</a>。</p><h2 id="相关教程"><a href="#相关教程" class="headerlink" title="相关教程"></a>相关教程</h2><h3 id="点击阅读以下教程"><a href="#点击阅读以下教程" class="headerlink" title="点击阅读以下教程"></a>点击阅读以下教程</h3><p>[<a href="https://www.coolhub.top/archives/11">安装 Office] Office Tool Plus 入门教程</a></p><p>[<a href="https://www.coolhub.top/archives/14">激活 Office] Office Tool Plus 入门教程</a></p><p>[<a href="https://www.coolhub.top/archives/13">疑难解答] Office Tool Plus 入门教程</a></p><p>[<a href="https://www.coolhub.top/archives/44">技能扩展] Office Tool Plus 高级教程</a></p><h2 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h2><ul><li>创建 Office 安装配置，支持导出到本地；或从本地或网络位置导入。</li><li>下载 Office，支持所有通道的 Office，支持所有的 Office 语言。</li><li>安装 Office，支持对现有的 Office 进行修改，包括新增或卸载产品和应用程序。[1]</li><li>创建 Office ISO，支持默认安装配置、静默安装配置。</li><li>支持 Office 激活管理，包括许可证管理，密钥管理以及 KMS 管理。[2]</li><li>激活 Office，支持在线激活、电话激活、KMS 激活。[3]</li><li>修改 Office 更新通道，支持在不重装 Office 的情况下升级&#x2F;降级 Office.</li><li>移除 Office，在 Office 无法正常卸载的情况下强制移除 Office，几乎支持所有 Office 版本。</li><li>内置 Office 工具箱，可以修复安装或使用 Office 过程中遇到的大多数问题。</li><li>转换 Office 文档，基于 Office COM，稳定可靠。</li><li>自定义主题，打造你自己的专属 Office Tool Plus。</li></ul><p>还有更多功能，等待您的体验~</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">注<span class="hljs-selector-attr">[1]</span>：能够安装的 Office 版本视 Windows 版本决定。<br>注<span class="hljs-selector-attr">[2]</span>：安装许可证时，旧的许可证不会被清除，因此零售和批量许可证可以共存。<br>注<span class="hljs-selector-attr">[3]</span>：无论你如何激活 Office 都需要自行处理，Office Tool Plus 不会也不可能提供任何破解途径。<br></code></pre></td></tr></table></figure><h2 id="Office-Tool-Plus-合法吗？"><a href="#Office-Tool-Plus-合法吗？" class="headerlink" title="Office Tool Plus 合法吗？"></a>Office Tool Plus 合法吗？</h2><p>Office Tool Plus 是一款完全合法的应用程序，提供的是原版 Office，不对 Office 的任何东西进行未经授权的修改。我们给用户提供了 Office 的下载、安装、激活功能，具体 Office 正版与否，取决于用户如何激活 Office。</p><p>Office 是支持账户、密钥、KMS 激活的，前两者基本都是正版授权（网上找的密钥另说），KMS 的正版和非正版因为人们多少都有点误解，因此在这里补充解释一下。</p><h2 id="什么是-KMS？"><a href="#什么是-KMS？" class="headerlink" title="什么是 KMS？"></a>什么是 KMS？</h2><p>具体的技术性资料可从网上搜索得到，这里就简单粗暴地描述一下。</p><hr><p>KMS 激活类似于签名一样，在大多数现实情况下，签名可以仿写，就像是“家长签名”一样，很多时候其实不是真的家长签名吧 <img src="https://www.coolhub.top/wp-content/themes/kratos-pjax-0.4.3/static/images/smilies/huaji.png" srcset="/img/loading.gif" lazyload alt=":huaji:"></p><p>那么你把这份“经过家长签名”的东西给了老师或者领导，他们大多数时候也不会去验证是吧？</p><p>KMS 激活也是有正规的，正规的来讲就是要经过微软授权的（就比如签名一定得是家长本人签的）。</p><p>但 KMS 也可以像“家长签名”一样伪造，就是 Office 接收到了来自 KMS 主机返回的激活信息，它不知道这个信息是不是正版授权的，总之接收到了正确的信息然后就这么简单地就激活了。</p><p>一句话讲晒，就是冒名顶替，没人查确实不知道，一查出来你就 gg</p><hr><p>这就是 Office 与 KMS 的关系，简单来讲就是这样。再补充一下：</p><p>每隔 7 天（默认），Office 都会与 KMS 通信一次，以更新自己的许可证状态。</p><p>如果 KMS 允许你更新许可，那么新的许可就是 180 天期限。</p><p>如果 KMS 不允许你更新许可，或者 KMS 不可用，那么原来的 180 天期限到期后，你的 Office 就会变成未激活了。</p><h2 id="KMS-正版与否的区别"><a href="#KMS-正版与否的区别" class="headerlink" title="KMS 正版与否的区别"></a>KMS 正版与否的区别</h2><p>有微软授权的 KMS 服务器一般情况下只能部署在 Windows Server 上，且通常只在内网部署，不对外开放。</p><p>目前网上公开的基本都是基于 vlmcs 的 KMS 服务器，非正版，无激活限制，谁都可以访问。</p><h1 id="office提示你的许可证不是正版，你可能是盗版软件的受害者？"><a href="#office提示你的许可证不是正版，你可能是盗版软件的受害者？" class="headerlink" title="office提示你的许可证不是正版，你可能是盗版软件的受害者？"></a>office提示你的许可证不是正版，你可能是盗版软件的受害者？</h1><p>看这个</p><p><a href="https://blog.csdn.net/qq_44275213/article/details/128543910">office提示你的许可证不是正版，你可能是盗版软件的受害者？</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;想必大家都认识Microsoft office&lt;/p&gt;
&lt;p&gt;就是常说的Word  Excel  PPT三大办公套件&lt;/p&gt;
&lt;p&gt;当然也有Outlook OneNote Publisher Access  Teams等这些不常用的&lt;/p&gt;
&lt;p&gt;但是，正版购买要七百多甚至</summary>
      
    
    
    
    <category term="Windows" scheme="http://w1ndys.top/categories/Windows/"/>
    
    <category term="office" scheme="http://w1ndys.top/categories/Windows/office/"/>
    
    
    <category term="Windows技术分享" scheme="http://w1ndys.top/tags/Windows%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>一些好玩的网站</title>
    <link href="http://w1ndys.top/2023/09/21/%E4%B8%80%E4%BA%9B%E5%A5%BD%E7%8E%A9%E7%9A%84%E7%BD%91%E7%AB%99/"/>
    <id>http://w1ndys.top/2023/09/21/%E4%B8%80%E4%BA%9B%E5%A5%BD%E7%8E%A9%E7%9A%84%E7%BD%91%E7%AB%99/</id>
    <published>2023-09-21T10:42:17.364Z</published>
    <updated>2023-09-23T07:03:38.148Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-致美化"><a href="#1-致美化" class="headerlink" title="1.致美化"></a>1.<a href="https://zhutix.com/">致美化</a></h1><p>windows美化</p><p>致美化是一个老牌桌面美化分享站，创办于 2014 年。探索丰富多彩的主题、壁纸、图标、皮肤等酷炫的美化素材，更有全面的美化教程及工具，是一个比较良心的美化站。</p><h1 id="2-在线文件转换器"><a href="#2-在线文件转换器" class="headerlink" title="2.在线文件转换器"></a>2.<a href="https://cn.cloud-converter.com/">在线文件转换器</a></h1><p>使用这款免费快速在线转换器. 将pdf, 图像, 视频, 文档, 音频, 电子书及压缩等文件格式转换为其他格式。现支持超过20200多种不同格式转换。</p><h1 id="3-从0开始做博客"><a href="#3-从0开始做博客" class="headerlink" title="3.从0开始做博客"></a>3.<a href="https://zhuanlan.zhihu.com/p/102592286">从0开始做博客</a></h1><p>不用介绍什么了，这是知乎大佬收集的一篇文章，我的博客就是根据这个搭建的</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-致美化&quot;&gt;&lt;a href=&quot;#1-致美化&quot; class=&quot;headerlink&quot; title=&quot;1.致美化&quot;&gt;&lt;/a&gt;1.&lt;a href=&quot;https://zhutix.com/&quot;&gt;致美化&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;windows美化&lt;/p&gt;
&lt;p&gt;致美化是一个老</summary>
      
    
    
    
    <category term="网站收录" scheme="http://w1ndys.top/categories/%E7%BD%91%E7%AB%99%E6%94%B6%E5%BD%95/"/>
    
    
    <category term="网站收录" scheme="http://w1ndys.top/tags/%E7%BD%91%E7%AB%99%E6%94%B6%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>曲阜师范大学网络空间安全学院社团管理部</title>
    <link href="http://w1ndys.top/2023/09/20/qfnusgb/"/>
    <id>http://w1ndys.top/2023/09/20/qfnusgb/</id>
    <published>2023-09-20T13:13:54.174Z</published>
    <updated>2023-09-23T08:23:01.542Z</updated>
    
    <content type="html"><![CDATA[<p><font color='red' size=6>曲阜师范大学网络空间安全学院社团管理部欢迎你的到来！</font></p><p>点击链接加入群聊【社团管理部纳新群】：<a href="http://qm.qq.com/cgi-bin/qm/qr?_wv=1027&k=dXDA4Iy_JIHJIFv9fH2rF5hAnko1NtBE&authKey=UpUG3qGYb/Lna893qrZvM9/uUQ56EiOM33mBaEWl/PTKkZZQW8x1VNv4p9bfOLQS&noverify=0&group_code=927133937">http://qm.qq.com/cgi-bin/qm/qr?_wv=1027&amp;k=dXDA4Iy_JIHJIFv9fH2rF5hAnko1NtBE&amp;authKey=UpUG3qGYb%2FLna893qrZvM9%2FuUQ56EiOM33mBaEWl%2FPTKkZZQW8x1VNv4p9bfOLQS&amp;noverify=0&amp;group_code=927133937</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;font color=&#39;red&#39; size=6&gt;曲阜师范大学网络空间安全学院社团管理部欢迎你的到来！&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;点击链接加入群聊【社团管理部纳新群】：&lt;a href=&quot;http://qm.qq.com/cgi-bin/qm/qr?_wv=1027&amp;k=d</summary>
      
    
    
    
    <category term="QFNU" scheme="http://w1ndys.top/categories/QFNU/"/>
    
    
    <category term="QFNU" scheme="http://w1ndys.top/tags/QFNU/"/>
    
  </entry>
  
  <entry>
    <title>实验二、链式存储结构线性表的建立及操作</title>
    <link href="http://w1ndys.top/2023/09/17/%E5%AE%9E%E9%AA%8C%E4%BA%8C%20%20%20%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E5%BB%BA%E7%AB%8B%E5%8F%8A%E6%93%8D%E4%BD%9C/"/>
    <id>http://w1ndys.top/2023/09/17/%E5%AE%9E%E9%AA%8C%E4%BA%8C%20%20%20%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E5%BB%BA%E7%AB%8B%E5%8F%8A%E6%93%8D%E4%BD%9C/</id>
    <published>2023-09-17T10:53:12.653Z</published>
    <updated>2023-09-21T12:00:49.601Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cyberdownload.anrunlu.net/FlO6Qn0cVLJHriuYzOv453gkwMYY" srcset="/img/loading.gif" lazyload></p><h1 id="实验二主体"><a href="#实验二主体" class="headerlink" title="实验二主体"></a>实验二主体</h1><p>以下是一个简单的C++实现，用于维护单链表：</p><blockquote><p>来自bing ai</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span><br>&#123;<br>    DataType data;        <span class="hljs-comment">// 数据域</span><br>    Node&lt;DataType&gt;* next; <span class="hljs-comment">// 指针域</span><br>&#125;;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkList</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">LinkList</span>();                    <span class="hljs-comment">// 无参构造函数，建立只有头结点的空链表</span><br>    <span class="hljs-built_in">LinkList</span>(DataType a[], <span class="hljs-type">int</span> n); <span class="hljs-comment">// 有参构造函数，建立有n个元素的单链表</span><br>    ~<span class="hljs-built_in">LinkList</span>();                   <span class="hljs-comment">// 析构函数</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Length</span><span class="hljs-params">()</span></span>;                  <span class="hljs-comment">// 求单链表的长度</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Empety</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function">DataType <span class="hljs-title">Get</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span></span>;            <span class="hljs-comment">// 按位查找。查找第i个结点的元素值</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Locate</span><span class="hljs-params">(DataType x)</span></span>;         <span class="hljs-comment">// 按值查找。查找值为x的元素序号</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Insert</span><span class="hljs-params">(<span class="hljs-type">int</span> i, DataType x)</span></span>; <span class="hljs-comment">// 插入操作，第i个位置插入值为x的结点</span><br>    <span class="hljs-function">DataType <span class="hljs-title">Delete</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span></span>;         <span class="hljs-comment">// 删除操作，删除第i个结点</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PrintList</span><span class="hljs-params">()</span></span>;               <span class="hljs-comment">// 遍历操作，按序号依次输出各元素</span><br><span class="hljs-keyword">private</span>:<br>    Node&lt;DataType&gt;* first; <span class="hljs-comment">// 单链表的头指针</span><br>&#125;;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br>LinkList&lt;DataType&gt;::<span class="hljs-built_in">LinkList</span>()<br>&#123;<br>    first = <span class="hljs-keyword">new</span> Node&lt;DataType&gt;; <span class="hljs-comment">// 生成头结点</span><br>    first-&gt;next = <span class="hljs-literal">nullptr</span>;      <span class="hljs-comment">// 头结点的指针域置空</span><br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-type">int</span> LinkList&lt;DataType&gt;::<span class="hljs-built_in">Empety</span>()<br>&#123;<br>    <span class="hljs-keyword">if</span> (first-&gt;next == <span class="hljs-literal">nullptr</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-type">void</span> LinkList&lt;DataType&gt;::<span class="hljs-built_in">PrintList</span>()<br>&#123;<br>    Node&lt;DataType&gt;* p = first-&gt;next; <span class="hljs-comment">// 工作指针p初始化</span><br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">nullptr</span>)<br>    &#123;<br>        cout &lt;&lt; p-&gt;data &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span>;<br>        p = p-&gt;next; <span class="hljs-comment">// 工作指针p后移，注意不能写作p++</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-type">int</span> LinkList&lt;DataType&gt;::<span class="hljs-built_in">Length</span>()<br>&#123;<br>    Node&lt;DataType&gt;* p = first-&gt;next; <span class="hljs-comment">// 工作指针p初始化为开始接点</span><br>    <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;                   <span class="hljs-comment">// 累加器count初始化</span><br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">nullptr</span>)<br>    &#123;<br>        p = p-&gt;next;<br>        count++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> count; <span class="hljs-comment">// 注意count的初始化和返回值之间的关系</span><br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br>DataType LinkList&lt;DataType&gt;::<span class="hljs-built_in">Get</span>(<span class="hljs-type">int</span> i)<br>&#123;<br>    Node&lt;DataType&gt;* p = first-&gt;next; <span class="hljs-comment">// 工作指针p初始化</span><br>    <span class="hljs-type">int</span> count = <span class="hljs-number">1</span>;                   <span class="hljs-comment">// 累加器count初始化</span><br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">nullptr</span> &amp;&amp; count &lt; i)<br>    &#123;<br>        p = p-&gt;next; <span class="hljs-comment">// 工作指针p后移</span><br>        count++;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (p == <span class="hljs-literal">nullptr</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-string">&quot;位置&quot;</span>;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> p-&gt;data;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-type">int</span> LinkList&lt;DataType&gt;::<span class="hljs-built_in">Locate</span>(DataType x)<br>&#123;<br>    Node&lt;DataType&gt;* p = first-&gt;next; <span class="hljs-comment">// 工作指针p初始化</span><br>    <span class="hljs-type">int</span> count = <span class="hljs-number">1</span>;                   <span class="hljs-comment">// 累加器count初始化</span><br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">nullptr</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (p-&gt;data == x)<br>            <span class="hljs-keyword">return</span> count; <span class="hljs-comment">// 查找成功，结束函数并返回序号</span><br>        p = p-&gt;next;<br>        count++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 退出循环表明查找失败</span><br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br><span class="hljs-type">void</span> LinkList&lt;DataType&gt;::<span class="hljs-built_in">Insert</span>(<span class="hljs-type">int</span> i, DataType x)<br>&#123;<br>    Node&lt;DataType&gt;* p = first, * s = <span class="hljs-literal">nullptr</span>; <span class="hljs-comment">// 工作指针p初始化</span><br>    <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">nullptr</span> &amp;&amp; count &lt; i - <span class="hljs-number">1</span>) <span class="hljs-comment">// 查找第i – 1个结点</span><br>    &#123;<br>        p = p-&gt;next; <span class="hljs-comment">// 工作指针p后移</span><br>        count++;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (p == <span class="hljs-literal">nullptr</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-string">&quot;位置&quot;</span>; <span class="hljs-comment">// 没有找到第i – 1个结点</span><br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        s = <span class="hljs-keyword">new</span> Node&lt;DataType&gt;;<br>        s-&gt;data = x; <span class="hljs-comment">// 申请结点s，数据域为x</span><br>        s-&gt;next = p-&gt;next;<br>        p-&gt;next = s; <span class="hljs-comment">// 将结点s插入到结点p之后</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br>LinkList&lt;DataType&gt;::<span class="hljs-built_in">LinkList</span>(DataType a[], <span class="hljs-type">int</span> n)<br>&#123;<br>    first = <span class="hljs-keyword">new</span> Node&lt;DataType&gt;;              <span class="hljs-comment">// 生成头结点</span><br>    Node&lt;DataType&gt;* r = first, * s = <span class="hljs-literal">nullptr</span>; <span class="hljs-comment">// 尾指针初始化</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        s = <span class="hljs-keyword">new</span> Node&lt;DataType&gt;;<br>        s-&gt;data = a[i];<br>        r-&gt;next = s;<br>        r = s; <span class="hljs-comment">// 将结点s插入到终端结点之后</span><br>    &#125;<br>    r-&gt;next = <span class="hljs-literal">nullptr</span>; <span class="hljs-comment">// 单链表建立完毕，将终端结点的指针域置空</span><br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> DataType&gt;<br>DataType LinkList&lt;DataType&gt;::<span class="hljs-built_in">Delete</span>(<span class="hljs-type">int</span> i)<br>&#123;<br>    DataType x;<br>    Node&lt;DataType&gt;* p = first, * q = <span class="hljs-literal">nullptr</span>; <span class="hljs-comment">// 工作指针p指向头结点</span><br>    <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">nullptr</span> &amp;&amp; count &lt; i - <span class="hljs-number">1</span>) <span class="hljs-comment">// 查找第i-1个结点</span><br>    &#123;<br>        p = p-&gt;next;<br>        count++;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (p == <span class="hljs-literal">nullptr</span> || p-&gt;next == <span class="hljs-literal">nullptr</span>) <span class="hljs-comment">// 结点p不存在或p的后继结点不存在</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-string">&quot;位置&quot;</span>;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        q = p-&gt;next;<br>        x = q-&gt;data;       <span class="hljs-comment">// 暂存被删结点</span><br>        p-&gt;next = q-&gt;next; <span class="hljs-comment">// 摘链</span><br>        <span class="hljs-keyword">delete</span> q;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">DataType</span>&gt;<br>LinkList&lt;DataType&gt;::~<span class="hljs-built_in">LinkList</span>()<br>&#123;<br>    Node&lt;DataType&gt;* q = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">while</span> (first != <span class="hljs-literal">NULL</span>) <span class="hljs-comment">// 释放单链表的每一个结点的存储空间</span><br>    &#123;<br>        q = first;           <span class="hljs-comment">// 暂存被释放结点</span><br>        first = first-&gt;next; <span class="hljs-comment">// first指向被释放结点的下一个结点</span><br>        <span class="hljs-keyword">delete</span> q;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> maxsize;<br>    cout &lt;&lt; <span class="hljs-string">&quot;请输入你要创建数组的大小&quot;</span> &lt;&lt; endl;<br>    cin &gt;&gt; maxsize;<br>    <span class="hljs-type">int</span>* a = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[maxsize];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; maxsize; i++)<br>    &#123;<br>        a[i] = i+<span class="hljs-number">1</span>;<br>        cout &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; endl;<br>    &#125;<br>    cout &lt;&lt; <span class="hljs-string">&quot;已创建一个最大长度&quot;</span>&lt;&lt;maxsize&lt;&lt;<span class="hljs-string">&quot;的随机数链表&quot;</span> &lt;&lt; endl;<br>    LinkList&lt;<span class="hljs-type">int</span>&gt; L&#123; a, maxsize &#125;;<br>    cout &lt;&lt; <span class="hljs-string">&quot;执行遍历链表&quot;</span> &lt;&lt; endl;<br>    L.<span class="hljs-built_in">PrintList</span>();<br>    cout &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;请输入一个最大长度内的数字查找元素&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-type">int</span> i;<br>    cin &gt;&gt; i;<br>    cout &lt;&lt; L.<span class="hljs-built_in">Locate</span>(i) &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;请插入一个新数字元素，请依次输入位置和数据&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-type">int</span> j, k;<br>    cin &gt;&gt; j &gt;&gt; k;<br>    L.<span class="hljs-built_in">Insert</span>(j, k);<br>    cout &lt;&lt; <span class="hljs-string">&quot;执行遍历链表&quot;</span> &lt;&lt; endl;<br>    L.<span class="hljs-built_in">PrintList</span>();<br>    cout &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;请删除一个新数字元素，请输入位置&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-type">int</span> l;<br>    cin &gt;&gt; l;<br>    cout &lt;&lt; <span class="hljs-string">&quot;删除的元素位置是&quot;</span> &lt;&lt; l &lt;&lt; <span class="hljs-string">&quot;数据是&quot;</span> &lt;&lt; L.<span class="hljs-built_in">Get</span>(l) &lt;&lt; endl;<br>    L.<span class="hljs-built_in">Delete</span>(l);<br>    cout &lt;&lt; <span class="hljs-string">&quot;执行遍历链表&quot;</span> &lt;&lt; endl;<br>    L.<span class="hljs-built_in">PrintList</span>();<br>    cout &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个程序首先创建了一个空的单链表，然后向其中添加了一些节点。然后，它遍历了整个列表，查找了一个元素，插入了一个新的元素，删除了一个元素，然后再次遍历了整个列表。希望这个示例能对你有所帮助！</p><h1 id="两个有序单链表合并为一个有序单链表"><a href="#两个有序单链表合并为一个有序单链表" class="headerlink" title="两个有序单链表合并为一个有序单链表"></a>两个有序单链表合并为一个有序单链表</h1><p>当然，这是一个包含main函数的完整程序，它创建了两个有序链表，并将它们合并为一个有序链表：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-comment">// 定义链表节点</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ListNode</span> &#123;<br>    <span class="hljs-type">int</span> val;<br>    ListNode *next;<br>    <span class="hljs-built_in">ListNode</span>(<span class="hljs-type">int</span> x) : <span class="hljs-built_in">val</span>(x), <span class="hljs-built_in">next</span>(<span class="hljs-literal">NULL</span>) &#123;&#125;<br>&#125;;<br><br><span class="hljs-comment">// 合并两个有序链表</span><br><span class="hljs-function">ListNode* <span class="hljs-title">mergeTwoLists</span><span class="hljs-params">(ListNode* l1, ListNode* l2)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (l1 == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> l2;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (l2 == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> l1;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (l1-&gt;val &lt; l2-&gt;val) &#123;<br>        l1-&gt;next = <span class="hljs-built_in">mergeTwoLists</span>(l1-&gt;next, l2);<br>        <span class="hljs-keyword">return</span> l1;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        l2-&gt;next = <span class="hljs-built_in">mergeTwoLists</span>(l1, l2-&gt;next);<br>        <span class="hljs-keyword">return</span> l2;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 创建第一个有序链表：1 -&gt; 3 -&gt; 5</span><br>    ListNode *l1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">1</span>);<br>    l1-&gt;next = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">3</span>);<br>    l1-&gt;next-&gt;next = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">5</span>);<br><br>    <span class="hljs-comment">// 创建第二个有序链表：2 -&gt; 4 -&gt; 6</span><br>    ListNode *l2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">2</span>);<br>    l2-&gt;next = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">4</span>);<br>    l2-&gt;next-&gt;next = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">6</span>);<br><br>    <span class="hljs-comment">// 合并两个有序链表</span><br>    ListNode *merged = <span class="hljs-built_in">mergeTwoLists</span>(l1, l2);<br><br>    <span class="hljs-comment">// 打印合并后的链表</span><br>    <span class="hljs-keyword">while</span> (merged != <span class="hljs-literal">NULL</span>) &#123;<br>        std::cout &lt;&lt; merged-&gt;val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        merged = merged-&gt;next;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个程序首先创建了两个有序链表<code>l1</code>和<code>l2</code>，然后调用<code>mergeTwoLists</code>函数将它们合并为一个新的有序链表。最后，它遍历新的链表并打印出每个节点的值。</p><p>请注意，这个程序没有释放分配给链表节点的内存。在实际使用中，你应该在不再需要节点时释放它们的内存，以防止内存泄漏。此外，这个程序假设输入的链表已经排序。如果输入的链表没有排序，你需要先对它们进行排序。</p><h1 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h1><p>双链表是一种更复杂的线性数据结构，它的每个节点都有两个链接，一个指向前一个节点，另一个指向后一个节点。以下是一个使用C++实现的双链表的基本设计：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-comment">// 定义双链表节点</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ListNode</span> &#123;<br>    <span class="hljs-type">int</span> val;<br>    ListNode *prev;<br>    ListNode *next;<br>    <span class="hljs-built_in">ListNode</span>(<span class="hljs-type">int</span> x) : <span class="hljs-built_in">val</span>(x), <span class="hljs-built_in">prev</span>(<span class="hljs-literal">NULL</span>), <span class="hljs-built_in">next</span>(<span class="hljs-literal">NULL</span>) &#123;&#125;<br>&#125;;<br><br><span class="hljs-comment">// 添加节点到双链表的末尾</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addNode</span><span class="hljs-params">(ListNode* &amp;head, <span class="hljs-type">int</span> val)</span> </span>&#123;<br>    ListNode* newNode = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(val);<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">NULL</span>) &#123;<br>        head = newNode;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        ListNode* temp = head;<br>        <span class="hljs-keyword">while</span> (temp-&gt;next != <span class="hljs-literal">NULL</span>) &#123;<br>            temp = temp-&gt;next;<br>        &#125;<br>        temp-&gt;next = newNode;<br>        newNode-&gt;prev = temp;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 打印双链表</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printList</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;<br>    ListNode* temp = head;<br>    <span class="hljs-keyword">while</span> (temp != <span class="hljs-literal">NULL</span>) &#123;<br>        std::cout &lt;&lt; temp-&gt;val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        temp = temp-&gt;next;<br>    &#125;<br>    std::cout &lt;&lt; std::endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 创建一个空的双链表</span><br>    ListNode* head = <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-comment">// 添加节点到双链表</span><br>    <span class="hljs-built_in">addNode</span>(head, <span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">addNode</span>(head, <span class="hljs-number">2</span>);<br>    <span class="hljs-built_in">addNode</span>(head, <span class="hljs-number">3</span>);<br><br>    <span class="hljs-comment">// 打印双链表</span><br>    <span class="hljs-built_in">printList</span>(head);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个程序首先定义了一个双链表节点的结构，然后定义了两个函数：<code>addNode</code>用于向双链表的末尾添加新的节点，<code>printList</code>用于打印双链表的所有节点。在<code>main</code>函数中，它创建了一个空的双链表，然后添加了几个节点，并打印出了这个双链表。</p><p>请注意，这个程序没有释放分配给链表节点的内存。在实际使用中，你应该在不再需要节点时释放它们的内存，以防止内存泄漏。此外，你可能还需要实现其他操作，如删除节点、查找节点等。这取决于你的具体需求。如果你需要帮助实现这些操作，请随时向我询问！</p><h1 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h1><p>循环链表是一种特殊的链表，其中最后一个元素指向链表的第一个元素。这种类型的数据结构可以用于实现需要循环或重复的算法。以下是一个使用C++实现的循环链表的基本设计：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-comment">// 定义链表节点</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ListNode</span> &#123;<br>    <span class="hljs-type">int</span> val;<br>    ListNode *next;<br>    <span class="hljs-built_in">ListNode</span>(<span class="hljs-type">int</span> x) : <span class="hljs-built_in">val</span>(x), <span class="hljs-built_in">next</span>(<span class="hljs-literal">NULL</span>) &#123;&#125;<br>&#125;;<br><br><span class="hljs-comment">// 添加节点到循环链表的末尾</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addNode</span><span class="hljs-params">(ListNode* &amp;head, <span class="hljs-type">int</span> val)</span> </span>&#123;<br>    ListNode* newNode = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(val);<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">NULL</span>) &#123;<br>        head = newNode;<br>        newNode-&gt;next = head;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        ListNode* temp = head;<br>        <span class="hljs-keyword">while</span> (temp-&gt;next != head) &#123;<br>            temp = temp-&gt;next;<br>        &#125;<br>        temp-&gt;next = newNode;<br>        newNode-&gt;next = head;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 打印循环链表</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printList</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span>;<br>    ListNode* temp = head;<br>    <span class="hljs-keyword">do</span> &#123;<br>        std::cout &lt;&lt; temp-&gt;val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        temp = temp-&gt;next;<br>    &#125; <span class="hljs-keyword">while</span> (temp != head);<br>    std::cout &lt;&lt; std::endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 创建一个空的循环链表</span><br>    ListNode* head = <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-comment">// 添加节点到循环链表</span><br>    <span class="hljs-built_in">addNode</span>(head, <span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">addNode</span>(head, <span class="hljs-number">2</span>);<br>    <span class="hljs-built_in">addNode</span>(head, <span class="hljs-number">3</span>);<br><br>    <span class="hljs-comment">// 打印循环链表</span><br>    <span class="hljs-built_in">printList</span>(head);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个程序首先定义了一个链表节点的结构，然后定义了两个函数：<code>addNode</code>用于向循环链表的末尾添加新的节点，<code>printList</code>用于打印循环链表的所有节点。在<code>main</code>函数中，它创建了一个空的循环链表，然后添加了几个节点，并打印出了这个循环链表。</p><p>请注意，这个程序没有释放分配给链表节点的内存。在实际使用中，你应该在不再需要节点时释放它们的内存，以防止内存泄漏。此外，你可能还需要实现其他操作，如删除节点、查找节点等。这取决于你的具体需求。如果你需要帮助实现这些操作，请随时向我询问！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://cyberdownload.anrunlu.net/FlO6Qn0cVLJHriuYzOv453gkwMYY&quot; srcset=&quot;/img/loading.gif&quot; lazyload&gt;&lt;/p&gt;
&lt;h1 id=&quot;实验二主体&quot;&gt;&lt;a href=</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://w1ndys.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="数据结构作业" scheme="http://w1ndys.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%9C%E4%B8%9A/"/>
    
    
    <category term="QFNU" scheme="http://w1ndys.top/tags/QFNU/"/>
    
  </entry>
  
  <entry>
    <title>C++类的基本学习</title>
    <link href="http://w1ndys.top/2023/09/17/C++%E7%B1%BB%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%AD%A6%E4%B9%A0/"/>
    <id>http://w1ndys.top/2023/09/17/C++%E7%B1%BB%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%AD%A6%E4%B9%A0/</id>
    <published>2023-09-17T10:47:10.657Z</published>
    <updated>2023-09-21T11:21:32.004Z</updated>
    
    <content type="html"><![CDATA[<p>（因为上学期C++选修课没认真听，导致这学期数据结构啥也不会，好吧，出来混迟早是要还的，现在开始恶补C++）</p><hr><h1 id="C-类-对象"><a href="#C-类-对象" class="headerlink" title="C++ 类 &amp; 对象"></a>C++ 类 &amp; 对象</h1><p>C++ 在 C 语言的基础上增加了面向对象编程，C++ 支持面向对象程序设计。类是 C++ 的核心特性，通常被称为用户定义的类型。</p><p>类用于指定对象的形式，是一种用户自定义的数据类型，它是一种封装了数据和函数的组合。类中的数据称为成员变量，函数称为成员函数。类可以被看作是一种模板，可以用来创建具有相同属性和行为的多个对象。</p><h2 id="C-类定义"><a href="#C-类定义" class="headerlink" title="C++ 类定义"></a>C++ 类定义</h2><p>定义一个类需要使用关键字 <strong>class</strong>，然后指定类的名称，并类的主体是包含在一对花括号中，主体包含类的成员变量和成员函数。</p><p>定义一个类，本质上是定义一个数据类型的蓝图，它定义了类的对象包括了什么，以及可以在这个对象上执行哪些操作。</p><p><img src="https://www.runoob.com/wp-content/uploads/2015/05/cpp-classes-objects-2020-12-10-11.png" srcset="/img/loading.gif" lazyload alt="img"></p><p>以下实例我们使用关键字 <strong>class</strong> 定义 Box 数据类型，包含了三个成员变量 length、breadth 和 height：</p><p>class Box {   public:      double length;   &#x2F;&#x2F; 盒子的长度      double breadth;  &#x2F;&#x2F; 盒子的宽度      double height;   &#x2F;&#x2F; 盒子的高度 };</p><p>关键字 <strong>public</strong> 确定了类成员的访问属性。在类对象作用域内，公共成员在类的外部是可访问的。您也可以指定类的成员为 <strong>private</strong> 或 <strong>protected</strong>，这个我们稍后会进行讲解。</p><h2 id="定义-C-对象"><a href="#定义-C-对象" class="headerlink" title="定义 C++ 对象"></a>定义 C++ 对象</h2><p>类提供了对象的蓝图，所以基本上，对象是根据类来创建的。声明类的对象，就像声明基本类型的变量一样。下面的语句声明了类 Box 的两个对象：</p><p>Box Box1;          &#x2F;&#x2F; 声明 Box1，类型为 Box Box Box2;          &#x2F;&#x2F; 声明 Box2，类型为 Box</p><p>对象 Box1 和 Box2 都有它们各自的数据成员。</p><h2 id="访问数据成员"><a href="#访问数据成员" class="headerlink" title="访问数据成员"></a>访问数据成员</h2><p>类的对象的公共数据成员可以使用直接成员访问运算符 <strong>.</strong> 来访问。</p><p><img src="https://www.runoob.com/wp-content/uploads/2015/05/cpp-classes-objects-2020-12-10-11-2.png" srcset="/img/loading.gif" lazyload alt="img"></p><p>为了更好地理解这些概念，让我们尝试一下下面的实例：</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br> <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br> <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Box</span><br>&#123;<br>   <span class="hljs-keyword">public</span>:<br>      <span class="hljs-type">double</span> length;   <span class="hljs-comment">// 长度</span><br>      <span class="hljs-type">double</span> breadth;  <span class="hljs-comment">// 宽度</span><br>      <span class="hljs-type">double</span> height;   <span class="hljs-comment">// 高度</span><br>      <span class="hljs-comment">// 成员函数声明</span><br>      <span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span>;<br>      <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">set</span><span class="hljs-params">( <span class="hljs-type">double</span> len, <span class="hljs-type">double</span> bre, <span class="hljs-type">double</span> hei )</span></span>;<br>&#125;;<br><span class="hljs-comment">// 成员函数定义</span><br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">Box::get</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> length * breadth * height;<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Box::set</span><span class="hljs-params">( <span class="hljs-type">double</span> len, <span class="hljs-type">double</span> bre, <span class="hljs-type">double</span> hei)</span></span><br><span class="hljs-function"></span>&#123;<br>    length = len;<br>    breadth = bre;<br>    height = hei;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">( )</span></span><br><span class="hljs-function"></span>&#123;<br>   Box Box1;        <span class="hljs-comment">// 声明 Box1，类型为 Box</span><br>   Box Box2;        <span class="hljs-comment">// 声明 Box2，类型为 Box</span><br>   Box Box3;        <span class="hljs-comment">// 声明 Box3，类型为 Box</span><br>   <span class="hljs-type">double</span> volume = <span class="hljs-number">0.0</span>;     <span class="hljs-comment">// 用于存储体积</span><br> <br>   <span class="hljs-comment">// box 1 详述</span><br>   Box1.height = <span class="hljs-number">5.0</span>; <br>   Box1.length = <span class="hljs-number">6.0</span>; <br>   Box1.breadth = <span class="hljs-number">7.0</span>;<br> <br>   <span class="hljs-comment">// box 2 详述</span><br>   Box2.height = <span class="hljs-number">10.0</span>;<br>   Box2.length = <span class="hljs-number">12.0</span>;<br>   Box2.breadth = <span class="hljs-number">13.0</span>;<br> <br>   <span class="hljs-comment">// box 1 的体积</span><br>   volume = Box1.height * Box1.length * Box1.breadth;<br>   cout &lt;&lt; <span class="hljs-string">&quot;Box1 的体积：&quot;</span> &lt;&lt; volume &lt;&lt;endl;<br> <br>   <span class="hljs-comment">// box 2 的体积</span><br>   volume = Box2.height * Box2.length * Box2.breadth;<br>   cout &lt;&lt; <span class="hljs-string">&quot;Box2 的体积：&quot;</span> &lt;&lt; volume &lt;&lt;endl;<br> <br> <br>   <span class="hljs-comment">// box 3 详述</span><br>   Box3.<span class="hljs-built_in">set</span>(<span class="hljs-number">16.0</span>, <span class="hljs-number">8.0</span>, <span class="hljs-number">12.0</span>); <br>   volume = Box3.<span class="hljs-built_in">get</span>(); <br>   cout &lt;&lt; <span class="hljs-string">&quot;Box3 的体积：&quot;</span> &lt;&lt; volume &lt;&lt;endl;<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Box1</span> 的体积：<span class="hljs-number">210</span><br><span class="hljs-attribute">Box2</span> 的体积：<span class="hljs-number">1560</span><br><span class="hljs-attribute">Box3</span> 的体积：<span class="hljs-number">1536</span><br></code></pre></td></tr></table></figure><p>需要注意的是，私有的成员和受保护的成员不能使用直接成员访问运算符 (.) 来直接访问。我们将在后续的教程中学习如何访问私有成员和受保护的成员。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;（因为上学期C++选修课没认真听，导致这学期数据结构啥也不会，好吧，出来混迟早是要还的，现在开始恶补C++）&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;C-类-对象&quot;&gt;&lt;a href=&quot;#C-类-对象&quot; class=&quot;headerlink&quot; title=&quot;C++ 类 &amp;amp; 对</summary>
      
    
    
    
    <category term="C++" scheme="http://w1ndys.top/categories/C/"/>
    
    <category term="类" scheme="http://w1ndys.top/categories/C/%E7%B1%BB/"/>
    
    
    <category term="理" scheme="http://w1ndys.top/tags/%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>公文写作基础知识</title>
    <link href="http://w1ndys.top/2023/09/17/%E5%85%AC%E6%96%87%E5%86%99%E4%BD%9C%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://w1ndys.top/2023/09/17/%E5%85%AC%E6%96%87%E5%86%99%E4%BD%9C%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</id>
    <published>2023-09-17T05:01:06.430Z</published>
    <updated>2023-09-17T05:36:02.297Z</updated>
    
    <content type="html"><![CDATA[<h1 id="公文写作基础知识"><a href="#公文写作基础知识" class="headerlink" title="公文写作基础知识"></a>公文写作基础知识</h1><p>Word文档格式一般为：</p><p>①标题方正小标宋简体二号 不加粗 居中 段落固定值33磅</p><p>②标题与正文空一行（从正文开始打）</p><p>（空行字体字号与正文保持一致，仿宋三号固定值29磅）</p><p>③正文为仿宋三号不加粗，行间距固定值29磅。首行缩进2字符。两端对齐</p><p>3.标题：与正文缩进等相同、全部用中文字符</p><p>一级标题：黑体三号“一、XXXX”。</p><p>二级标题：楷体三号“（一）XXXX”。</p><p>三级标题：仿宋三号“1.XXXX”。</p><p>四级标题：仿宋三号“（1）XXXX”</p><p>4.Word表格</p><p>①标题方正小标宋简体二号不加粗居中。</p><p>②标题与表格间空一行，表格随内容适当调整。</p><p>③表格全部内容设置单元格格式居中对齐。</p><p>④注意标点。</p><p>⑤两个字的内容或人名中间空两格。</p><p>注：字体根据需要调整，三号，四号或小四。</p><p>5.其他注意点（视图选项）</p><p>①注意符号需为中文符号，区分中英文符号</p><p>如逗号, ， 冒号: ： 破折号- —— 括号( ) （ ）</p><p>②<strong>（根据实际情况进行增删）</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;公文写作基础知识&quot;&gt;&lt;a href=&quot;#公文写作基础知识&quot; class=&quot;headerlink&quot; title=&quot;公文写作基础知识&quot;&gt;&lt;/a&gt;公文写作基础知识&lt;/h1&gt;&lt;p&gt;Word文档格式一般为：&lt;/p&gt;
&lt;p&gt;①标题方正小标宋简体二号 不加粗 居中 段落固定值3</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://w1ndys.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="写作格式" scheme="http://w1ndys.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%86%99%E4%BD%9C%E6%A0%BC%E5%BC%8F/"/>
    
    
    <category term="文" scheme="http://w1ndys.top/tags/%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>2023年下半年（12月）全国大学英语四六级考试报名通知</title>
    <link href="http://w1ndys.top/2023/09/17/2023%E5%B9%B4%E4%B8%8B%E5%8D%8A%E5%B9%B4%EF%BC%8812%E6%9C%88%EF%BC%89%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E8%8B%B1%E8%AF%AD%E5%9B%9B%E5%85%AD%E7%BA%A7%E8%80%83%E8%AF%95%E6%8A%A5%E5%90%8D%E9%80%9A%E7%9F%A5/"/>
    <id>http://w1ndys.top/2023/09/17/2023%E5%B9%B4%E4%B8%8B%E5%8D%8A%E5%B9%B4%EF%BC%8812%E6%9C%88%EF%BC%89%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E8%8B%B1%E8%AF%AD%E5%9B%9B%E5%85%AD%E7%BA%A7%E8%80%83%E8%AF%95%E6%8A%A5%E5%90%8D%E9%80%9A%E7%9F%A5/</id>
    <published>2023-09-17T04:33:27.798Z</published>
    <updated>2023-09-17T05:37:11.239Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/qfnu.gif" srcset="/img/loading.gif" lazyload></p><hr><p>各学院：</p><p>2023年下半年（12月）全国大学英语四六级考试笔试（以下简称CET）和口试（以下简称CET-SET）报名工作即将开始。我校两校区分别为独立考点，均采用全国统一的网上报名及缴费方式,现将有关事项通知如下：</p><p><strong>一、</strong> <strong>笔试考试科目及时间</strong></p><table><thead><tr><th><strong>考试日期</strong></th><th><strong>考试科目</strong></th><th><strong>考试代码</strong></th><th><strong>考试时间</strong></th></tr></thead><tbody><tr><td>12月16日上午</td><td>英语四级考试（CET4）</td><td>1</td><td>9:00—11:20</td></tr><tr><td>12月16日下午</td><td>英语六级考试（CET6）</td><td>2</td><td>15:00—17:25</td></tr></tbody></table><p><strong>二、</strong> <strong>口试考试科目及日期</strong></p><table><thead><tr><th><strong>考试日期</strong></th><th><strong>考试科目</strong></th></tr></thead><tbody><tr><td>11月18日（F233次）</td><td>英语四级口语考试（CET-SET4）</td></tr><tr><td>11月19日（S234次）</td><td>英语六级口语考试（CET-SET6）</td></tr></tbody></table><p><strong>三、</strong> <strong>口试考试场次时间安排</strong></p><table><thead><tr><th><strong>上 午</strong></th><th><strong>下 午</strong></th><th></th><th></th></tr></thead><tbody><tr><td><strong>场次</strong></td><td><strong>时间</strong></td><td><strong>场次</strong></td><td><strong>时间</strong></td></tr><tr><td>场次1</td><td>8:30—9:00</td><td>场次6</td><td>13:30—14:00</td></tr><tr><td>场次2</td><td>9:15—9:45</td><td>场次7</td><td>14:15—14:45</td></tr><tr><td>场次3</td><td>10:00—10:30</td><td>场次8</td><td>15:00—15:30</td></tr><tr><td>场次4</td><td>10:45—11:15</td><td>场次9</td><td>15:45—16:15</td></tr><tr><td>场次5</td><td>11:30—12:00</td><td>场次10</td><td>16:30—17:00</td></tr><tr><td>备用场（21）</td><td>12:15—12:45</td><td>场次11</td><td>17:15—17:45</td></tr><tr><td>–</td><td>–</td><td>备用场（22）</td><td>18:00—18:30</td></tr><tr><td>–</td><td>–</td><td>备用场（23）</td><td>18:45—19:15</td></tr></tbody></table><p><strong>四、报名资格和报名时间</strong></p><p>（一）笔试报名资格</p><p>1.具有我校学籍的2022级及以上全日制本科生、各年级研究生，不接受跨校区报考。</p><p>2.英语四级成绩在425分以上的学生可以报考英语六级。</p><p>3.英语四级、六级不得兼报。</p><p>4.不允许已获得本级考试合格成绩的学生再次报考同一级别考试。</p><p>（二）口试报名资格</p><p>1.只有完成对应级别笔试科目报考的考生才可报考口试CET-SET，即完成本次CET4笔试报名后方可报考CET-SET4，完成本次CET6笔试报名后方可报考CET-SET6。</p><p>（三）报名时间</p><p>网上报名时间为：2023年9月19日9:00至2023年9月26日17:00。</p><p>请务必在此时间段内报名，报名后须尽快网上支付报名费，24小时内不进行支付的将自动删除报名信息，被删除的考生也可再次报名。名额有限，报满为止。</p><p><strong>五、网上报名流程</strong></p><p>（一）考生注册</p><p>考生在规定时间内登陆CET全国网上报名系统(网址：<a href="https://cet-bm.neea.edu.cn/">https://cet-bm.neea.edu.cn/</a>) 网站，点击“注册新用户”，用电子邮箱注册通行证账号后进入“报名和准考证打印”界面完成笔试和口试科目的报名及缴费，已经有通行证账号的可以直接使用。电子邮箱即为个人账号，务必使用个人常用邮箱，邮箱可用于接收缴费成功通知和重置密码等。通行证注册后及时验证邮箱，以免输错邮箱。</p><p>（二）网上报名</p><p>分为考生报名资格确认与复核、网上缴费、准考证打印3个步骤。</p><p>1.考生报名资格确认与复核</p><p>报名开始前，考生应查看阅读首页的考试简介、考生须知、考试时间、报名流程、常见问题、特别提示、最新动态等信息；确认学籍信息是否正确，有错误的须于9月18日17时前联系相应考点复核更正，报名开始后无法再修改学籍信息。报名时需要先报笔试再报口试。</p><p>2.考位候补</p><p>教育部教育考试院改进了四六级报名系统，增加了“考位候补”的功能，类似于中国铁路12306网站上买车票的候补功能，考位已满的时候，考生可在报名界面上点击“候补” ，考位空出后，将自动排序填补未缴费空位。“候补”成功后，系统将短信通知考生缴费。</p><p>3.网上缴费</p><p>（1）CET笔试报名考试费为32元&#x2F;人。CET-SET口试报名考试费50元&#x2F;人。</p><p>（2）考试报名费支持网银及支付宝两种支付方式。</p><p>（3）考生要在规定的报名截止时间前完成网上缴费，缴费时先缴笔试费用，再缴口试费用。未完成缴费的，系统会在24小时后删除考生报考信息。信息删除后，报名规定时间内考生可重新报考。考生科目报名成功的唯一标识是：对应科目的支付状态为“已支付”。</p><p>（4）在规定报名时间内，已报考未支付的科目可以随时修改，已支付的科目不可修改或取消。</p><p>（5）缴费时，如银行扣费成功，但系统显示科目支付状态为“未支付”时，不要重复缴费，可点击“更新”按钮更新支付状态。因考务问题或技术问题造成重复缴费需要退费的，教育部考试中心会在考试结束一个月内原路退回考生账户。</p><p>4.准考证打印</p><p>考生在报名网站自主打印准考证，考试时须携带准考证、身份证、学生证参加考试。11月13日9:00以后可以打印口试准考证，12月7日9：00以后可以打印笔试准考证。如果忘记通行证密码可以通过邮箱重置，如果忘记通行证可通过“找回已报名账号”或通过拨打考点服务电话找回。</p><p>考点咨询电话：</p><p>曲阜校区：0537-4456969</p><p>日照校区：0633-3980076</p><p>曲阜师范大学教务处</p><p>2023年9月17日</p><hr><p>搬运自曲阜师范大学官方文档<a href="https://jwc.qfnu.edu.cn/info/1120/6724.htm">2023年下半年（12月）全国大学英语四六级考试报名通知-曲阜师范大学教务处 (qfnu.edu.cn)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/img/qfnu.gif&quot; srcset=&quot;/img/loading.gif&quot; lazyload&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;各学院：&lt;/p&gt;
&lt;p&gt;2023年下半年（12月）全国大学英语四六级考试笔试（以下简称CET）和口试（以下简称CET-SET）报</summary>
      
    
    
    
    <category term="QFNU" scheme="http://w1ndys.top/categories/QFNU/"/>
    
    <category term="官方文档" scheme="http://w1ndys.top/categories/QFNU/%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3/"/>
    
    <category term="证书考试" scheme="http://w1ndys.top/categories/QFNU/%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3/%E8%AF%81%E4%B9%A6%E8%80%83%E8%AF%95/"/>
    
    <category term="CET" scheme="http://w1ndys.top/categories/QFNU/%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3/%E8%AF%81%E4%B9%A6%E8%80%83%E8%AF%95/CET/"/>
    
    
    <category term="QFNU" scheme="http://w1ndys.top/tags/QFNU/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界-Reverse-easyxorwriteup</title>
    <link href="http://w1ndys.top/2023/09/16/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-Reverse-easyxorwriteup/"/>
    <id>http://w1ndys.top/2023/09/16/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-Reverse-easyxorwriteup/</id>
    <published>2023-09-16T10:22:06.620Z</published>
    <updated>2023-09-17T05:36:05.020Z</updated>
    
    <content type="html"><![CDATA[<h1 id="查壳"><a href="#查壳" class="headerlink" title="查壳"></a>查壳</h1><p>无壳</p><h1 id="反编译"><a href="#反编译" class="headerlink" title="反编译"></a>反编译</h1><p>拉进漂亮姐姐中（IDA）</p><p>shift+F12看一下字串</p><p><img src="https://z1.ax1x.com/2023/09/16/pPfDEYF.jpg" srcset="/img/loading.gif" lazyload></p><p>首先看到一个关键信息，点进去，Ctrl+x交叉引用</p><p><img src="https://z1.ax1x.com/2023/09/16/pPfDVW4.jpg" srcset="/img/loading.gif" lazyload></p><p>F5看一下伪代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> __cdecl <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">int</span> v3; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">char</span> v4; <span class="hljs-comment">// al</span><br>  <span class="hljs-type">int</span> v5; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">char</span> v7; <span class="hljs-comment">// [rsp+33h] [rbp-Dh]</span><br>  <span class="hljs-type">char</span> v8; <span class="hljs-comment">// [rsp+33h] [rbp-Dh]</span><br>  <span class="hljs-type">int</span> v9; <span class="hljs-comment">// [rsp+34h] [rbp-Ch]</span><br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+38h] [rbp-8h]</span><br>  <span class="hljs-type">int</span> v11; <span class="hljs-comment">// [rsp+3Ch] [rbp-4h]</span><br><br>  _main();<br>  v11 = <span class="hljs-number">0</span>;<br>  v9 = <span class="hljs-number">0</span>;<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Please input your flag:&quot;</span>);<br>  <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>  &#123;<br>    v8 = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">if</span> ( v8 == <span class="hljs-number">10</span> )<br>      <span class="hljs-keyword">break</span>;<br>v7 = key[v9 % <span class="hljs-number">4</span>] ^ v8;<span class="hljs-comment">//输入的字符，进行异或操作，得到v7</span><br>    <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>    &#123;<br>      v4 = v7--;<span class="hljs-comment">//循环v7次</span><br>      <span class="hljs-keyword">if</span> ( v4 &lt;= <span class="hljs-number">0</span> )<span class="hljs-comment">//此while循环是向s[]中输入v7个1</span><br>        <span class="hljs-keyword">break</span>;<br>      v3 = v11++;<br>      s[v3] = <span class="hljs-number">1</span>;<br>    &#125;<br>    v5 = v11++;<span class="hljs-comment">//输出v7个1后，使用0与下一串1隔开</span><br>    s[v5] = <span class="hljs-number">0</span>;<br>    ++v9;<br>  &#125;<br>  <span class="hljs-keyword">while</span> ( v11 &lt;= <span class="hljs-number">2559</span> )<span class="hljs-comment">//输入的字符全部转化为1之后，不够2559个的话填充-1（255）</span><br>    s[v11++] = <span class="hljs-number">-1</span>;<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">2559</span>; ++i )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( r[i] != s[i] )<span class="hljs-comment">//进行比较</span><br>    &#123;<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Lose lose lose!&quot;</span>);<br>      <span class="hljs-keyword">break</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">if</span> ( i == <span class="hljs-number">2560</span> )<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Win win win!&quot;</span>);<br>  <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中r是</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">r = [<span class="hljs-number">0x35</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x70</span>,<br>     <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x66</span>,<br>     <span class="hljs-number">0x21</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x28</span>]<br></code></pre></td></tr></table></figure><p>key是SCNU</p><h1 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h1><p>写一下解密python</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">r = [<span class="hljs-number">0x35</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x70</span>,<br>     <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x66</span>,<br>     <span class="hljs-number">0x21</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x28</span>]<br>key = <span class="hljs-string">&quot;SCNU&quot;</span><br>flag=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(r)):<br>    flag+=<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(key[i % <span class="hljs-number">4</span>]) ^ r[i])<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><h1 id="FLAG"><a href="#FLAG" class="headerlink" title="FLAG"></a>FLAG</h1><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">flag&#123;Wi<span class="hljs-symbol">nn3</span>r_<span class="hljs-symbol">n0</span>t_L<span class="hljs-number">0</span>s<span class="hljs-number">3</span>r_<span class="hljs-attr">#&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;查壳&quot;&gt;&lt;a href=&quot;#查壳&quot; class=&quot;headerlink&quot; title=&quot;查壳&quot;&gt;&lt;/a&gt;查壳&lt;/h1&gt;&lt;p&gt;无壳&lt;/p&gt;
&lt;h1 id=&quot;反编译&quot;&gt;&lt;a href=&quot;#反编译&quot; class=&quot;headerlink&quot; title=&quot;反编译&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    <category term="CTF" scheme="http://w1ndys.top/categories/CTF/"/>
    
    <category term="WP" scheme="http://w1ndys.top/categories/CTF/WP/"/>
    
    <category term="RE" scheme="http://w1ndys.top/categories/CTF/WP/RE/"/>
    
    
    <category term="CTF" scheme="http://w1ndys.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>密码学——凯撒密码原理</title>
    <link href="http://w1ndys.top/2023/09/16/%E5%AF%86%E7%A0%81%E5%AD%A6%E2%80%94%E2%80%94%E5%87%AF%E6%92%92%E5%AF%86%E7%A0%81%E5%8E%9F%E7%90%86/"/>
    <id>http://w1ndys.top/2023/09/16/%E5%AF%86%E7%A0%81%E5%AD%A6%E2%80%94%E2%80%94%E5%87%AF%E6%92%92%E5%AF%86%E7%A0%81%E5%8E%9F%E7%90%86/</id>
    <published>2023-09-16T07:58:45.051Z</published>
    <updated>2023-09-17T05:36:13.846Z</updated>
    
    <content type="html"><![CDATA[<h1 id="凯撒密码"><a href="#凯撒密码" class="headerlink" title="凯撒密码"></a>凯撒密码</h1><blockquote><p>来自千千秀字</p></blockquote><p>凯撒密码最早由古罗马军事统帅盖乌斯·尤利乌斯·凯撒在军队中用来传递加密信息，故称凯撒密码。这是一种位移加密方式，只对26个字母进行位移替换加密，规则简单，容易破解。下面是位移1次的对比：</p><table><thead><tr><th>明文字母表</th><th>Z</th><th>A</th><th>B</th><th>C</th><th>D</th><th>E</th><th>F</th><th>G</th><th>H</th><th>I</th><th>J</th><th>K</th><th>L</th><th>M</th><th>N</th><th>O</th><th>P</th><th>Q</th><th>R</th><th>S</th><th>T</th><th>U</th><th>V</th><th>W</th><th>X</th><th>Y</th></tr></thead><tbody><tr><td>密文字母表</td><td>A</td><td>B</td><td>C</td><td>D</td><td>E</td><td>F</td><td>G</td><td>H</td><td>I</td><td>J</td><td>K</td><td>L</td><td>M</td><td>N</td><td>O</td><td>P</td><td>Q</td><td>R</td><td>S</td><td>T</td><td>U</td><td>V</td><td>W</td><td>X</td><td>Y</td><td>Z</td></tr></tbody></table><p>将明文字母表向后移动1位，A变成了B，B变成了C……，Z变成了A。同理，若将明文字母表向后移动3位：</p><table><thead><tr><th>明文字母表</th><th>X</th><th>Y</th><th>Z</th><th>A</th><th>B</th><th>C</th><th>D</th><th>E</th><th>F</th><th>G</th><th>H</th><th>I</th><th>J</th><th>K</th><th>L</th><th>M</th><th>N</th><th>O</th><th>P</th><th>Q</th><th>R</th><th>S</th><th>T</th><th>U</th><th>V</th><th>W</th></tr></thead><tbody><tr><td>密文字母表</td><td>A</td><td>B</td><td>C</td><td>D</td><td>E</td><td>F</td><td>G</td><td>H</td><td>I</td><td>J</td><td>K</td><td>L</td><td>M</td><td>N</td><td>O</td><td>P</td><td>Q</td><td>R</td><td>S</td><td>T</td><td>U</td><td>V</td><td>W</td><td>X</td><td>Y</td><td>Z</td></tr></tbody></table><p>则A变成了D，B变成了E……，Z变成了C。</p><p>字母表最多可以移动25位。凯撒密码的明文字母表向后或向前移动都是可以的，通常表述为向后移动，如果要向前移动1位，则等同于向后移动25位，位移选择为25即可。</p><h1 id="尝试一下"><a href="#尝试一下" class="headerlink" title="尝试一下"></a>尝试一下</h1><p>现在你已经知道原理了，解密一下下面这个吧</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">oknqdbqmo<span class="hljs-string">q&#123;kag_tmhq_xqmdzqp_omqemd_qzodkbfuaz&#125;</span><br></code></pre></td></tr></table></figure><p>.</p><p>.</p><h1 id="在线解密地址"><a href="#在线解密地址" class="headerlink" title="在线解密地址"></a>在线解密地址</h1><p><a href="https://www.qqxiuzi.cn/bianma/kaisamima.php">凯撒密码在线加密解密 - 千千秀字 (qqxiuzi.cn)</a></p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>.</p><p>cyberpeace{you_have_learned_caesar_encryption}</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;凯撒密码&quot;&gt;&lt;a href=&quot;#凯撒密码&quot; class=&quot;headerlink&quot; title=&quot;凯撒密码&quot;&gt;&lt;/a&gt;凯撒密码&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;来自千千秀字&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;凯撒密码最早由古罗马军事统帅盖乌斯·尤利乌</summary>
      
    
    
    
    <category term="CTF" scheme="http://w1ndys.top/categories/CTF/"/>
    
    <category term="密码学" scheme="http://w1ndys.top/categories/CTF/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    
    <category term="CTF" scheme="http://w1ndys.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>曲阜师范大学中秋节、国庆节放假安排来啦！</title>
    <link href="http://w1ndys.top/2023/09/16/%E4%B8%AD%E7%A7%8B%E8%8A%82%E3%80%81%E5%9B%BD%E5%BA%86%E8%8A%82%E6%94%BE%E5%81%87%E5%AE%89%E6%8E%92%E6%9D%A5%E5%95%A6%EF%BC%81/"/>
    <id>http://w1ndys.top/2023/09/16/%E4%B8%AD%E7%A7%8B%E8%8A%82%E3%80%81%E5%9B%BD%E5%BA%86%E8%8A%82%E6%94%BE%E5%81%87%E5%AE%89%E6%8E%92%E6%9D%A5%E5%95%A6%EF%BC%81/</id>
    <published>2023-09-16T04:27:59.859Z</published>
    <updated>2023-09-17T04:33:42.387Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/qfnu.gif" srcset="/img/loading.gif" lazyload></p><hr><p>根据《国务院办公厅关于2023年部分节假日安排的通知》精神，结合我校实际，现对2023年中秋节、国庆节放假安排通知如下：</p><p><font color='red'>9月29日</font>至<font color='red'>10月6日</font>放假调休，<font color='red'>共8天</font>。<u>10月7日（星期六）</u>执行第6周周四的教学安排、<u>10月8日（星期日）</u>执行第6周周五的教学安排。</p><p>如实验或课程性质有特殊需要，不宜按上述时间放假的，学院可根据需要自行安排，并向教务处备案。</p><p><u><strong>10月7日起执行秋（冬）季作息时间，上午作息时间不变，下午调整为14:00上课上班。</strong></u></p><p>各部门、各单位要严格落实学校安全工作各项部署要求，加强值班值守，如遇突发情况需按学校相关规定及时报告并妥善处置。</p><hr><p>​ 党委办公室（学校办公室）</p><p>​2023年9月15日</p><p><a href="https://mp.weixin.qq.com/s/5WuKt2Pk2qoBSm6c2hJzXQ">来自：中秋节、国庆节放假安排来啦！ (qq.com)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/img/qfnu.gif&quot; srcset=&quot;/img/loading.gif&quot; lazyload&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;根据《国务院办公厅关于2023年部分节假日安排的通知》精神，结合我校实际，现对2023年中秋节、国庆节放假安排通知如下：&lt;/p&gt;</summary>
      
    
    
    
    <category term="QFNU" scheme="http://w1ndys.top/categories/QFNU/"/>
    
    <category term="官方文档" scheme="http://w1ndys.top/categories/QFNU/%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3/"/>
    
    <category term="假期安排" scheme="http://w1ndys.top/categories/QFNU/%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3/%E5%81%87%E6%9C%9F%E5%AE%89%E6%8E%92/"/>
    
    
    <category term="QFNU" scheme="http://w1ndys.top/tags/QFNU/"/>
    
  </entry>
  
  <entry>
    <title>DS作业-2-22网安物联网-20230913</title>
    <link href="http://w1ndys.top/2023/09/15/DS%E4%BD%9C%E4%B8%9A-2-22%E7%BD%91%E5%AE%89%E7%89%A9%E8%81%94%E7%BD%91-20230913/"/>
    <id>http://w1ndys.top/2023/09/15/DS%E4%BD%9C%E4%B8%9A-2-22%E7%BD%91%E5%AE%89%E7%89%A9%E8%81%94%E7%BD%91-20230913/</id>
    <published>2023-09-15T13:13:05.753Z</published>
    <updated>2023-09-17T05:36:56.447Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DS作业-2-22网安物联网-20230913"><a href="#DS作业-2-22网安物联网-20230913" class="headerlink" title="DS作业-2-22网安物联网-20230913"></a><strong>DS作业-2-22网安物联网-20230913</strong></h1><h2 id="作业Ch1-4-P24-P25-1-选择题"><a href="#作业Ch1-4-P24-P25-1-选择题" class="headerlink" title="作业Ch1-4:  P24-P25 1.选择题"></a><strong>作业Ch1-4:</strong>  P24-P25 1.选择题</h2><p>1-5  <u>CD</u>    B  B A A   6-9  C  <u>CE</u>  </p><p>第九题解析</p><blockquote><p>这段代码的时间复杂度是O(n²)。这是因为外部循环会执行n次，而内部循环会执行2<em>i次，其中i的最大值是n。因此，最坏情况下，内部循环会执行2n次。所以，总的执行次数是n</em>(2n)，即O(n²)。这意味着，如果输入大小（即n的值）增加，那么执行时间将按平方增加。这是典型的二次时间复杂度的例子。</p></blockquote><h2 id="作业Ch1-5-算法编程题，给出代码、测试过程和运行结果："><a href="#作业Ch1-5-算法编程题，给出代码、测试过程和运行结果：" class="headerlink" title="作业Ch1-5:  算法编程题，给出代码、测试过程和运行结果："></a><strong>作业Ch1-5:</strong>  算法编程题，给出代码、测试过程和运行结果：</h2><p><font color='red'>这个题存疑，算法思路还没看懂</font></p><p>将一个具有 n 个元素的数组A[n]向左循环移动k个位置，要求时间复杂度为O(n)，空间复杂度为O(1)。</p><blockquote><p>答案（来自bing ai</p></blockquote><p>这是一个经典的问题，可以通过三次反转数组的方法来解决。首先，我们将数组的前k个元素反转，然后将剩余的元素反转，最后将整个数组反转。这样就可以实现将数组向左循环移动k个位置。以下是具体的C++代码实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">reverse</span><span class="hljs-params">(<span class="hljs-type">int</span> A[], <span class="hljs-type">int</span> start, <span class="hljs-type">int</span> end)</span> </span>&#123;<br>    <span class="hljs-keyword">while</span>(start &lt; end) &#123;<br>        <span class="hljs-built_in">swap</span>(A[start], A[end]);<br>        start++;<br>        end--;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">leftRotate</span><span class="hljs-params">(<span class="hljs-type">int</span> A[], <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> k)</span> </span>&#123;<br>    <span class="hljs-built_in">reverse</span>(A, <span class="hljs-number">0</span>, k<span class="hljs-number">-1</span>);<br>    <span class="hljs-built_in">reverse</span>(A, k, n<span class="hljs-number">-1</span>);<br>    <span class="hljs-built_in">reverse</span>(A, <span class="hljs-number">0</span>, n<span class="hljs-number">-1</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> A[] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>&#125;;<br>    <span class="hljs-type">int</span> n = <span class="hljs-built_in">sizeof</span>(A)/<span class="hljs-built_in">sizeof</span>(A[<span class="hljs-number">0</span>]);<br>    <span class="hljs-type">int</span> k = <span class="hljs-number">2</span>;<br>    <br>    <span class="hljs-built_in">leftRotate</span>(A, n, k);<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        cout &lt;&lt; A[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这段代码首先定义了一个<code>reverse</code>函数，用于反转数组中从<code>start</code>到<code>end</code>的元素。然后定义了一个<code>leftRotate</code>函数，用于将数组向左循环移动k个位置。在<code>main</code>函数中，我们创建了一个数组，并调用了<code>leftRotate</code>函数来进行旋转。最后，我们打印出旋转后的数组。</p><p>这个解决方案的时间复杂度为O(n)，空间复杂度为O(1)，满足了题目的要求。希望这个答案对你有所帮助！</p><p><font color='red'>新知识，要使其不大于最大长度可以用取模运算来解决</font></p><h2 id="作业Ch1-6-算法编程题，给出代码、测试过程和运行结果："><a href="#作业Ch1-6-算法编程题，给出代码、测试过程和运行结果：" class="headerlink" title="作业Ch1-6:  算法编程题，给出代码、测试过程和运行结果："></a><strong>作业Ch1-6:</strong>  算法编程题，给出代码、测试过程和运行结果：</h2><p>找出整型数组A[n]中的最大值和次最大值。</p><blockquote><p>答案（来自bing ai</p></blockquote><p>以下是一个C++代码片段，它可以找出整型数组A[n]中的最大值和次最大值。这个代码假设数组中至少有两个元素，并且所有元素都是唯一的。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">findMaxAndSecondMax</span><span class="hljs-params">(<span class="hljs-type">int</span> A[], <span class="hljs-type">int</span> n)</span> </span>&#123;<br>    <span class="hljs-type">int</span> max1 = A[<span class="hljs-number">0</span>], max2 = A[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-keyword">if</span>(A[i] &gt; max1) &#123;<br>            max2 = max1;<br>            max1 = A[i];<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(A[i] &gt; max2) &#123;<br>            max2 = A[i];<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; <span class="hljs-string">&quot;最大值: &quot;</span> &lt;&lt; max1 &lt;&lt; <span class="hljs-string">&quot;, 次最大值: &quot;</span> &lt;&lt; max2 &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> A[] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>&#125;;<br>    <span class="hljs-type">int</span> n = <span class="hljs-built_in">sizeof</span>(A)/<span class="hljs-built_in">sizeof</span>(A[<span class="hljs-number">0</span>]);<br>    <br>    <span class="hljs-built_in">findMaxAndSecondMax</span>(A, n);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这段代码首先定义了一个<code>findMaxAndSecondMax</code>函数，用于找出数组中的最大值和次最大值。然后在<code>main</code>函数中，我们创建了一个数组，并调用了<code>findMaxAndSecondMax</code>函数来找出最大值和次最大值。希望这个答案对你有所帮助！</p><h1 id="END"><a href="#END" class="headerlink" title="END"></a>END</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;DS作业-2-22网安物联网-20230913&quot;&gt;&lt;a href=&quot;#DS作业-2-22网安物联网-20230913&quot; class=&quot;headerlink&quot; title=&quot;DS作业-2-22网安物联网-20230913&quot;&gt;&lt;/a&gt;&lt;strong&gt;DS作业-2-22</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://w1ndys.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="数据结构作业" scheme="http://w1ndys.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%9C%E4%B8%9A/"/>
    
    
    <category term="QFNU" scheme="http://w1ndys.top/tags/QFNU/"/>
    
  </entry>
  
  <entry>
    <title>CTF入门指北——web</title>
    <link href="http://w1ndys.top/2023/09/15/CTF%E5%85%A5%E9%97%A8%E6%8C%87%E5%8C%97%E2%80%94%E2%80%94web/"/>
    <id>http://w1ndys.top/2023/09/15/CTF%E5%85%A5%E9%97%A8%E6%8C%87%E5%8C%97%E2%80%94%E2%80%94web/</id>
    <published>2023-09-14T17:01:22.421Z</published>
    <updated>2023-09-17T05:36:52.452Z</updated>
    
    <content type="html"><![CDATA[<h1 id="moectf2023-web-入门指南"><a href="#moectf2023-web-入门指南" class="headerlink" title="moectf2023 web 入门指南"></a>moectf2023 web 入门指南</h1><p>Klutton</p><h1 id="知识和资源的获取"><a href="#知识和资源的获取" class="headerlink" title="知识和资源的获取"></a>知识和资源的获取</h1><p>前言</p><p>ctf知识的学习与课内一板一眼式的教书不同，如果你想要获得成长的能力，那么你 必须 获取 自主获取知识 的 能力，如果你是一个初学者，这是一个脱离以前填鸭式应试教育的学习模式，你需要不得不逐步适应新的学习 方式， 这样的能力不管在哪个方向，甚至在别的竞赛学科中，都是必要的 </p><p>这样的学习方式是受益终生的，不是吗？</p><h2 id="从公开资源获取知识和资源"><a href="#从公开资源获取知识和资源" class="headerlink" title="从公开资源获取知识和资源"></a>从公开资源获取知识和资源</h2><p>这个目录表是有难易顺序的，因为每一个途径都需要一定的经验和知识才能掌握</p><h3 id="搜索引擎"><a href="#搜索引擎" class="headerlink" title="搜索引擎"></a>搜索引擎</h3><p>优先选择bing和google</p><p> 不会就先搜，搜索引擎的速度肯定比管理员回消息快</p><p> 在上面两引擎信息不足情况下考虑其他引擎</p><h3 id="人工智能"><a href="#人工智能" class="headerlink" title="人工智能"></a>人工智能</h3><p>随着时代的发展，从2023年（笔者确信）开始，无论国内外，语言模型的发展使得我们可以大概 地与人工智能沟通获取知识，人工智能不怕累、不怕麻烦，值得重复问一些简单问题</p><p>如果不知道怎么弄，请接着看下面的内容</p><h3 id="GitHub等开源社区"><a href="#GitHub等开源社区" class="headerlink" title="GitHub等开源社区"></a>GitHub等开源社区</h3><p>搜索关键词，可能有热心的开源作者汇集的一些某某大全形式的攻击载荷，忘了就去翻翻嘛</p><p>例子： </p><p>​PayloadsAlltheThings —— payload大全 </p><p>​vulhub的docker（需要会使用搭配相应漏洞知识）</p><p>如果觉得你访问的仓库有价值，不妨给仓库一个一个star</p><h3 id="从私下获取资源"><a href="#从私下获取资源" class="headerlink" title="从私下获取资源"></a>从私下获取资源</h3><p>有些知识在互联网上传播是有风险的，例如怎么上GitHub，我老是上不去，不妨私下问问你的室友如何解决 <del>或 者你可以陪我跑跑山吃吃饭的时候聊一聊</del></p><p>例如：chatgpt不允许国内访问；openai的账号注册需要外国手机号码</p><p>那你可以找朋友问一问，借一借</p><h3 id="从私下获取知识"><a href="#从私下获取知识" class="headerlink" title="从私下获取知识"></a>从私下获取知识</h3><p>那就和问老师问题一样嘛（而且老师还比同学多出来一个教人的义务），主要几点</p><p>不要问“在吗？”一类的字眼，言语谦逊地完整提出问题再等待答复 </p><p>被提问者不一定了解具体的细节，要及时补充要求的具体内容</p><p>如果被问者也不知道，请原谅他 </p><p>如果认为受益匪浅，不妨给出物质上的答谢</p><h4 id="综上，遇到不会的怎么办"><a href="#综上，遇到不会的怎么办" class="headerlink" title="综上，遇到不会的怎么办"></a>综上，遇到不会的怎么办</h4><p>把你认为是特征内容的复制下来 </p><p>扔给上面提到的资源</p><h2 id="如何练习"><a href="#如何练习" class="headerlink" title="如何练习"></a>如何练习</h2><h4 id="一些练习场"><a href="#一些练习场" class="headerlink" title="一些练习场"></a>一些练习场</h4><p>buuoj </p><p>bugku （可以看三哈师傅的网站了解更多平台）<a href="https://www.su-sanha.cn/platforms">https://www.su-sanha.cn/platforms</a></p><p>需要知道的：<strong>靶场分普通的ctf靶场，有的是awd或者awdp，有的则是给你一个虚拟机自己从头到尾拿下系统 权限（vulnhub）最前者是最基础的，如果想要了解完整真实的渗透流程，可以去尝试vulnhub这类网站</strong></p><h4 id="学会查看题解write-up（wp）"><a href="#学会查看题解write-up（wp）" class="headerlink" title="学会查看题解write up（wp）"></a>学会查看题解write up（wp）</h4><p>在平时的练习中，肯定会遇到不会的题，千万不要死磕，不会就看wp，下一道更好！ 在搜索引擎或者开源社 区查找wp，在看wp的过程中，补充并且掌握自己的不会的知识点</p><h3 id="如何配置环境"><a href="#如何配置环境" class="headerlink" title="如何配置环境"></a>如何配置环境</h3><p><strong>一定要有耐心！</strong> 一套环境不是十分钟二十分钟就能配完的，对于新手而言，几天甚至一两周都有可能，反复地 确认自己的步骤、教程的日期、教程使用的系统版本是否正确；</p><p>尽量选择官方网站的配置方式：寻找document字样去看文档，这是最稳的方法，但是比较费力； 可以去看私 人的文章，但不一定能成功</p><p><strong>熟能生巧</strong></p><p>可以自己尝试配置一套lamp环境，或者配一台虚拟机，运行一个docker</p><h3 id="一些知识清单"><a href="#一些知识清单" class="headerlink" title="一些知识清单"></a>一些知识清单</h3><p>编码</p><p>在网络传输中，数据被编码成为二进制内容经过网络传输之后解码，由于在这个过程中应用了不同的规则，只 有使用了相应的编码才能正确地解析内容，有很多编码形式需要你了解（正经和不正经的），在深度了解编码 规则后，你甚至可以自创独属于你的编码规则！</p><p>可供参考的资料：<a href="https://www.cnblogs.com/ruoli-s/p/14206145.html">https://www.cnblogs.com/ruoli-s/p/14206145.html</a></p><p>编程语言</p><p>当提到计算机，不可避免地需要了解编程，事实上，已经存在相当多主流的编程语言，有一些适用于提供和处 理web服务，例如python, java, php, golang, rust，你需要具备对于这些代码最少有审计能力（看得懂在做什么）</p><p>工具</p><p><strong>够用</strong>： </p><p>​postman </p><p>​burp </p><p>​sqlmap</p><p><strong>计网知识</strong> </p><p>​标准的OSI七层模型（其实了解tcp足矣） </p><p>​了解 “协议”（例如http，https，ftp，gopher，也需要了解php伪协议）</p><p><strong>HTTP</strong> </p><p>​请求方法（get&#x2F;post） </p><p>​请求内容（json&#x2F;raw&#x2F;binary） </p><p>​请求头（content-type&#x2F;xff&#x2F;referer&#x2F;cookie）</p><p><strong>服务框架</strong></p><p>​有现成的网络框架用于高效并发处理请求，所以你需要了解函数是干嘛用的，怎么处理请求的</p><p>​python: Flask, Django, Tornado </p><p>​java: Spring Boot</p><p><strong>用户凭证</strong></p><p>​http是无状态协议，因此需要储存处理用户信息，你需要了解：</p><p>​cookie </p><p>​session </p><p>​jwt</p><p>​有时会涉及到用户信息伪造，例如flask框架下的session伪造，通过获取（或者弱口令爆破）secret_key来伪造 一个session，通常需要自己写脚本（或者获取GitHub现成的脚本改一改使用）</p><p><strong>数据储存</strong></p><p>实际上，大部分持久化信息是储存在数据库的，有的出题人为了简化流程也会直接把信息储存在内存里</p><p><strong>数据库管理系统</strong>（DBMS）</p><p>​你需要知道去哪儿了解不同DBMS的sql语法，以便完成相应的挑战：</p><p>​sql injection注入：查询脚本由于过滤不严导致查询语句可控，用户得以访问数据库</p><p>​有回显</p><p>​盲注</p><p>​文件读写：通过数据库进行文件的读写，可以配合起来getshell</p><p>（sql注入可以尝试sqlmap一把梭，前提是你找对了注入点）</p><p><strong>反序列化</strong></p><p>反序列化一直是一个离不开的话题，大体来说，序列化就是把内存里处理好的数据变成二进制内容（通常）用 来传输或储存；反序列化就是按照序列化的规则的把内容读取到内存中参与程序运行；如果反序列化不得当， 被恶意构造的内容就可能导致机器被”骇入”</p><p>xxe（xml外部实体攻击 libxml 2.8.0以下） </p><p>php反序列化（包括了解其中的魔术方法）</p><p>pickle反序列化（可能会有r指令过滤不过涉及出题不多）</p><p>java反序列化（pop链）</p><p><strong>CMS</strong></p><p>​上网查吧（杂 </p><p>​内网渗透</p><p><strong>代理工具</strong></p><p>配置socks代理，继续进行内网渗透 </p><p>​nps </p><p>​frp </p><p>​proxifier </p><p>​proxychains</p><p><strong>扫描工具</strong> </p><p>发现内网资产 </p><p>​nmap</p><p>​fscan</p><h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1><p>祝你能玩得愉快，学得愉快！</p><hr><p>666c61673d6257396c5933526d6533637a62454e7662575666564739666257396c513152475831637959 6c396a61474673624756755a3055684958303d</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;moectf2023-web-入门指南&quot;&gt;&lt;a href=&quot;#moectf2023-web-入门指南&quot; class=&quot;headerlink&quot; title=&quot;moectf2023 web 入门指南&quot;&gt;&lt;/a&gt;moectf2023 web 入门指南&lt;/h1&gt;&lt;p&gt;Kl</summary>
      
    
    
    
    <category term="CTF" scheme="http://w1ndys.top/categories/CTF/"/>
    
    <category term="CTF入门指北" scheme="http://w1ndys.top/categories/CTF/CTF%E5%85%A5%E9%97%A8%E6%8C%87%E5%8C%97/"/>
    
    
    <category term="CTF" scheme="http://w1ndys.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>通过 Hexo 5 注入器为主题添加新功能</title>
    <link href="http://w1ndys.top/2023/09/13/%E9%80%9A%E8%BF%87-Hexo-5-%E6%B3%A8%E5%85%A5%E5%99%A8%E4%B8%BA%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%96%B0%E5%8A%9F%E8%83%BD/"/>
    <id>http://w1ndys.top/2023/09/13/%E9%80%9A%E8%BF%87-Hexo-5-%E6%B3%A8%E5%85%A5%E5%99%A8%E4%B8%BA%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%96%B0%E5%8A%9F%E8%83%BD/</id>
    <published>2023-09-13T15:35:18.607Z</published>
    <updated>2023-09-17T05:36:23.263Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hexo-注入器"><a href="#Hexo-注入器" class="headerlink" title="Hexo 注入器"></a>Hexo 注入器</h2><p><a href="https://hexo.io/zh-cn/api/injector.html">Hexo 注入器</a>是 Hexo 5 版本自身加入的一项新功能，所以在所有 Hexo 主题都是支持这个功能的。</p><p>该注入器可以将 HTML 片段注入生成页面的 <code>&lt;head&gt;</code> 和 <code>&lt;body&gt;</code> 节点中。</p><p>编写注入代码，需要在博客的根目录下创建 <code>scripts</code> 文件夹，然后在里面任意命名创建一个 js 文件即可。</p><p>例如创建一个 <code>/blog/scripts/example.js</code>，内容为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml">hexo.extend.injector.register(&#x27;body_end&#x27;, &#x27;<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/jquery.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>&#x27;, &#x27;default&#x27;);<br><br>JAVASCRIPT<br></code></pre></td></tr></table></figure><p>上述代码会在生成的页面 <code>&lt;/body&gt;</code> 注入加载 <code>jquery.js</code> 的代码。</p><p><code>register</code> 函数可接受三个参数，第一个参数是代码片段注入的位置，接受以下值：<br>- <code>head_begin</code>: 注入在 <code>&lt;head&gt;</code> 之后（默认）<br>- <code>head_end</code>: 注入在 <code>&lt;/head&gt;</code> 之前<br>- <code>body_begin</code>: 注入在 <code>&lt;body&gt;</code> 之后<br>- <code>body_end</code>: 注入在 <code>&lt;/body&gt;</code> 之前</p><p>第二个参数是注入的片段，可以是字符串，也可以是一个返回值为字符串的函数。</p><p>第三个参数是注入的页面类型，接受以下值：<br>- <code>default</code>: 注入到每个页面（默认值）<br>- <code>home</code>: 只注入到主页（<code>is_home()</code> 为 <code>true</code> 的页面）<br>- <code>post</code>: 只注入到文章页面（<code>is_post()</code> 为 <code>true</code> 的页面）<br>- <code>page</code>: 只注入到独立页面（<code>is_page()</code> 为 <code>true</code> 的页面）<br>- <code>archive</code>: 只注入到归档页面（<code>is_archive()</code> 为 <code>true</code> 的页面）<br>- <code>category</code>: 只注入到分类页面（<code>is_category()</code> 为 <code>true</code> 的页面）<br>- <code>tag</code>: 只注入到标签页面（<code>is_tag()</code> 为 <code>true</code> 的页面）<br>- 或是其他自定义 layout 名称，例如在Fluid 主题中 <code>about</code> 对应关于页、<code>links</code> 对应友联页</p><h2 id="实际案例"><a href="#实际案例" class="headerlink" title="实际案例"></a>实际案例</h2><p>在实际使用中，建议将 js 代码独立成为 js 文件，存放在博客的 <code>source</code> 目录下，然后在 <code>scripts</code> 里通过一个包含 injector 的 js 文件统一引入。</p><p>例如创建一个 <code>/source/js/custom.js</code>，里面包含初始化的代码，然后在 <code>/scripts/injector.js</code> 里写入：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">hexo<span class="hljs-selector-class">.extend</span><span class="hljs-selector-class">.injector</span><span class="hljs-selector-class">.register</span>(<span class="hljs-string">&#x27;body_end&#x27;</span>, `<br>  &lt;script <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;/js/custom.js&quot;</span>&gt;&lt;/script&gt;<br>`)<br><br>JAVASCRIPT<br></code></pre></td></tr></table></figure><p>以下案例都采用类似的形式，不再赘述。</p><h3 id="APlayer-音乐播放器"><a href="#APlayer-音乐播放器" class="headerlink" title="APlayer 音乐播放器"></a>APlayer 音乐播放器</h3><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs xquery">hexo.extend.injector.register(<span class="hljs-string">&#x27;body_end&#x27;</span>, `<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;aplayer&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  &lt;link defer rel=<span class="hljs-string">&quot;stylesheet&quot;</span> href=<span class="hljs-string">&quot;https://cdn.staticfile.org/aplayer/1.10.1/APlayer.min.css&quot;</span> /&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.staticfile.org/aplayer/1.10.1/APlayer.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>  &lt;script defer src=<span class="hljs-string">&quot;/js/aplayer.js&quot;</span>&gt;&lt;/script&gt;<br>`);<br><br>JAVASCRIPT<br>!(<span class="hljs-keyword">function</span>() &#123;<br>  var oldLoadAp = <span class="hljs-keyword">window</span>.onload;<br>  <span class="hljs-keyword">window</span>.onload = <span class="hljs-keyword">function</span> () &#123;<br>    oldLoadAp &amp;&amp; oldLoadAp();<br><br>    new APlayer(&#123;<br>      container:<span class="hljs-built_in"> document</span>.getElementById(<span class="hljs-string">&#x27;aplayer&#x27;</span>),<br>      fixed:<span class="hljs-built_in"> true</span>,<br>      autoplay:<span class="hljs-built_in"> false</span>,<br>      loop: <span class="hljs-string">&#x27;all&#x27;</span>,<br>      order: <span class="hljs-string">&#x27;random&#x27;</span>,<br>      theme: <span class="hljs-string">&#x27;#b7daff&#x27;</span>,<br>      preload: <span class="hljs-string">&#x27;none&#x27;</span>,<br>      audio: [<br>        &#123;<br>         <span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;song1&#x27;</span>,<br>          artist: <span class="hljs-string">&#x27;artist1&#x27;</span>,<br>          url: <span class="hljs-string">&#x27;/songs/song1.mp3&#x27;</span>,<br>          cover: <span class="hljs-string">&#x27;/img/cover.jpg&#x27;</span><br>        &#125;<br>      ]<br>    &#125;);<br>  &#125;<br>&#125;)();<br><br>JAVASCRIPT<br></code></pre></td></tr></table></figure><p>更多参数详见 <a href="https://aplayer.js.org/#/zh-Hans/?id=%E5%8F%82%E6%95%B0">Aplayer 文档</a>。</p><h3 id="DaoVoice-聊天插件"><a href="#DaoVoice-聊天插件" class="headerlink" title="DaoVoice 聊天插件"></a>DaoVoice 聊天插件</h3><p>先在 <a href="https://daovoice.io/">https://daovoice.io</a> 注册一个账号，按其中的引导获得 appId，然后添加如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs javascript">hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">injector</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;body_end&#x27;</span>, <span class="hljs-string">`</span><br><span class="hljs-string">  &lt;script defer src=&quot;/js/daovoice.js&quot;&gt;&lt;/script&gt;</span><br><span class="hljs-string">`</span>);<br><br><span class="hljs-variable constant_">XML</span><br>!(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> appId = <span class="hljs-string">&#x27;这里填上注册后账号的 appId&#x27;</span>;<br><br>  (<span class="hljs-keyword">function</span> (<span class="hljs-params">i, s, o, g, r, a, m</span>) &#123;  <br>    i[<span class="hljs-string">&#x27;DaoVoiceObject&#x27;</span>] = r;<br>    i[r] = i[r] ||<br>      <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        (i[r].<span class="hljs-property">q</span> = i[r].<span class="hljs-property">q</span> || []).<span class="hljs-title function_">push</span>(<span class="hljs-variable language_">arguments</span>);<br>      &#125;;<br>    i[r].<span class="hljs-property">l</span> = <span class="hljs-number">1</span> * <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>    a = s.<span class="hljs-title function_">createElement</span>(o);<br>    m = s.<span class="hljs-title function_">getElementsByTagName</span>(o)[<span class="hljs-number">0</span>];<br>    a.<span class="hljs-property">async</span> = <span class="hljs-number">1</span>;<br>    a.<span class="hljs-property">src</span> = g;<br>    a.<span class="hljs-property">charset</span> = <span class="hljs-string">&#x27;utf-8&#x27;</span>;<br>    m.<span class="hljs-property">parentNode</span>.<span class="hljs-title function_">insertBefore</span>(a, m);<br>  &#125;)(<span class="hljs-variable language_">window</span>, <span class="hljs-variable language_">document</span>, <span class="hljs-string">&#x27;script&#x27;</span>, (<span class="hljs-string">&#x27;https:&#x27;</span> === <span class="hljs-variable language_">document</span>.<span class="hljs-property">location</span>.<span class="hljs-property">protocol</span> ? <span class="hljs-string">&#x27;https:&#x27;</span> : <span class="hljs-string">&#x27;http:&#x27;</span>) + <span class="hljs-string">&#x27;//widget.daovoice.io/widget/&#x27;</span> + appId + <span class="hljs-string">&#x27;.js&#x27;</span>, <span class="hljs-string">&#x27;daovoice&#x27;</span>);<br>  <span class="hljs-title function_">daovoice</span>(<span class="hljs-string">&#x27;init&#x27;</span>, &#123;<br>    <span class="hljs-attr">app_id</span>: appId,<br>  &#125;);<br>  <span class="hljs-title function_">daovoice</span>(<span class="hljs-string">&#x27;update&#x27;</span>);<br>&#125;)();<br><br><span class="hljs-variable constant_">JAVASCRIPT</span><br></code></pre></td></tr></table></figure><h3 id="文章时效性提示"><a href="#文章时效性提示" class="headerlink" title="文章时效性提示"></a>文章时效性提示</h3><p>技术性文章往往存在时效性的问题，比如某些文章会介绍一些临时解决方案，但随着时间推移可能已经失效了。我们可以通过判断发布时间（即文章设置的 <code>date</code>）与当前时间的间隔，来为文章开头插入一条提示。</p><p>代码效果如下所示：</p><p>文章时效性提示</p><p>这是一篇发布于 263 天前的文章，部分信息可能已发生改变，请注意甄别。</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs scheme">(<span class="hljs-name">function</span>() &#123;<br>  var times = document.getElementsByTagName(<span class="hljs-symbol">&#x27;time</span>&#x27;)<span class="hljs-comment">;</span><br>  if (<span class="hljs-name">times.length</span> === <span class="hljs-number">0</span>) &#123; return<span class="hljs-comment">; &#125;</span><br>  var posts = document.getElementsByClassName(<span class="hljs-symbol">&#x27;post-content</span>&#x27;)<span class="hljs-comment">;</span><br>  if (<span class="hljs-name">posts.length</span> === <span class="hljs-number">0</span>) &#123; return<span class="hljs-comment">; &#125;</span><br><br>  var pubTime = new Date(<span class="hljs-name">times</span>[<span class="hljs-name">0</span>].dateTime)<span class="hljs-comment">;  /* 文章发布时间戳 */</span><br>  var now = Date.now()  /* 当前时间戳 */<br>  var interval = parseInt(<span class="hljs-name">now</span> - pubTime)<br>  /* 发布时间超过指定时间（毫秒） */<br>  if (<span class="hljs-name">interval</span> &gt; <span class="hljs-number">3600</span>*24*30*1000)&#123;<br>    var days = parseInt(<span class="hljs-name">interval</span> / <span class="hljs-number">86400000</span>)<br>    posts[<span class="hljs-name">0</span>].innerHTML = <span class="hljs-symbol">&#x27;&lt;div</span> class=<span class="hljs-string">&quot;note note-warning&quot;</span> style=<span class="hljs-string">&quot;font-size:0.9rem&quot;</span>&gt;&lt;p&gt;&#x27; +<br>      <span class="hljs-symbol">&#x27;&lt;div</span> class=<span class="hljs-string">&quot;h6&quot;</span>&gt;文章时效性提示&lt;/div&gt;&lt;p&gt;这是一篇发布于 &#x27; + days + &#x27; 天前的文章，部分信息可能已发生改变，请注意甄别。&#x27; +<br>      <span class="hljs-symbol">&#x27;&lt;/p&gt;&lt;/p&gt;&lt;/div&gt;</span>&#x27; + posts[<span class="hljs-name">0</span>].innerHTML<span class="hljs-comment">;</span><br>  &#125;<br>&#125;)()<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Hexo-注入器&quot;&gt;&lt;a href=&quot;#Hexo-注入器&quot; class=&quot;headerlink&quot; title=&quot;Hexo 注入器&quot;&gt;&lt;/a&gt;Hexo 注入器&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://hexo.io/zh-cn/api/injector.ht</summary>
      
    
    
    
    <category term="hexo" scheme="http://w1ndys.top/categories/hexo/"/>
    
    <category term="用法" scheme="http://w1ndys.top/categories/hexo/%E7%94%A8%E6%B3%95/"/>
    
    
    <category term="hexo" scheme="http://w1ndys.top/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>hexo博客中tags与categories用法</title>
    <link href="http://w1ndys.top/2023/09/13/hexo%E5%8D%9A%E5%AE%A2%E4%B8%ADtags%E4%B8%8Ecategories%E7%94%A8%E6%B3%95/"/>
    <id>http://w1ndys.top/2023/09/13/hexo%E5%8D%9A%E5%AE%A2%E4%B8%ADtags%E4%B8%8Ecategories%E7%94%A8%E6%B3%95/</id>
    <published>2023-09-13T15:31:37.933Z</published>
    <updated>2023-09-18T04:56:25.908Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/348131730">hexo博客中tags与categories用法 - 知乎 (zhihu.com)</a></p><h3 id="tags与categories"><a href="#tags与categories" class="headerlink" title="tags与categories"></a>tags与categories</h3><p>在hexo中使用tags与categories往往需要使用多标签和多分类,这里记录一下它们的用法。</p><h3 id="tag"><a href="#tag" class="headerlink" title="tag"></a>tag</h3><p>用法：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">tags:<br>  - 123<br>  - 456<br>tags: [123, 456]<br></code></pre></td></tr></table></figure><p>多标签写法，这2种都是一样的效果，用哪个都可以，建议使用列表[]式，直观清晰。</p><h3 id="categories"><a href="#categories" class="headerlink" title="categories"></a>categories</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs text"># 这是默认的写法，给文章添加一个分类。<br>categories: 123<br># 这会将文章分类123/456子分类目录下。<br>categories: [123, 456]<br>这会将文章分类到123/456子分类目录下。<br>categories:<br>   - 123<br>   - 456<br>多标签写法，文章被分类到123、456以及123的自分类789这3个分类下面，官方指定写法。<br>categories:<br>   - [123]<br>   - [456]<br>   - [123, 789]<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/348131730&quot;&gt;hexo博客中tags与categories用法 - 知乎 (zhihu.com)&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;tags与categories&quot;&gt;&lt;a href=&quot;#tag</summary>
      
    
    
    
    <category term="hexo" scheme="http://w1ndys.top/categories/hexo/"/>
    
    <category term="用法" scheme="http://w1ndys.top/categories/hexo/%E7%94%A8%E6%B3%95/"/>
    
    
    <category term="hexo" scheme="http://w1ndys.top/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>CTF入门指北——reserve</title>
    <link href="http://w1ndys.top/2023/09/13/CTF%E5%85%A5%E9%97%A8%E6%8C%87%E5%8C%97%E2%80%94%E2%80%94reserve/"/>
    <id>http://w1ndys.top/2023/09/13/CTF%E5%85%A5%E9%97%A8%E6%8C%87%E5%8C%97%E2%80%94%E2%80%94reserve/</id>
    <published>2023-09-13T12:20:46.375Z</published>
    <updated>2023-09-17T05:36:50.139Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>来自西安电子科技大学Moectf</p></blockquote><h1 id="逆向工程（re"><a href="#逆向工程（re" class="headerlink" title="逆向工程（re)"></a>逆向工程（re)</h1><blockquote><p>来自维基</p></blockquote><blockquote><p>逆向工程（英语：Reverse Engineering），又称反向工程，是一种技术仿造过程。 即对一项目标产品进行逆向分析及研究，从而演绎并得出该产品的处理流程、组织结构、功能性能规 其主要目的是，在无法轻易获得必要的生产信息下，直接从成品的分析，推导产品的设计原理</p></blockquote><p>那么，我们要做的是对于软件的逆向工程</p><p>一般，CTF中的逆向工程题目形式为：程序接收用户的一个输入，并在程序中进行一系 列校验算法，如通过校验则提示成功，此时的输入即flag。这些校验算法可以是已经成 熟的加解密方案，也可以是作者自创的某种算法。比如，一个小游戏将用户的输入作为 游戏的操作步骤进行判断等。这类题目要求参赛者具备一定的算法能力、思维能力，甚 至联想能力。</p><p>我们知道，我们可以阅读源代码，了解一个程序的功能 但是一个程序不一定需要源代码才能运行。 事实上，我们在运行可执行文件，那么他 们打开来实际上是一些二进制数据。</p><p> 例如下面这一段程序源码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello world&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>我们使用记事本打开就能看到逻辑。但是真正编译出来的，我们用来运行的程序，使用 记事本打开是这样的</p><p><img src="https://z1.ax1x.com/2023/09/13/pPRF6uF.png" srcset="/img/loading.gif" lazyload></p><p>这些二进制数据直接无法识读，但是包含了程序执行所需要的东西，而我们的工作就 是，识读他们，找到flag！</p><h1 id="如何开始逆向呢"><a href="#如何开始逆向呢" class="headerlink" title="如何开始逆向呢"></a>如何开始逆向呢</h1><p>ctf中的逆向（ reverse ）涉及很多编程语言，最常见的是C、C++ 、python、java、C#，或者一 常见的编程语言golang、rust、lisp等等。 除了windows与linux系统下可执行文件的逆向，还经常遇到安卓的（ apk ）逆向、系统驱动、固 件逆向等等。 但是作为一个 beginner ，你不需要在刚入门的时候就去掌握这么多的编程语言 从C语言以及C语言逆向开始，是一个比较好的选择 因为C语言十分接近高级语言，又有充分的系统底层的支持 同时入门的逆向题很多是用C语言写的 并且当你学会了C语言，尽管你无法使用java、python等语言进行编程，但是你会发现，看懂这些高 语言写的代码还是比较容易的。</p><h1 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a>常用工具</h1><blockquote><p>来自含树</p></blockquote><h2 id="常用工具介绍"><a href="#常用工具介绍" class="headerlink" title="常用工具介绍"></a>常用工具介绍</h2><h3 id="1．IDA-Pro"><a href="#1．IDA-Pro" class="headerlink" title="1．IDA Pro"></a>1．IDA Pro</h3><p>IDA（Interactive DisAssembler）Pro（以下简称IDA）是一款强大的可执行文件分析工 具，可以对包括但不限于x86&#x2F;x64、ARM、MIPS等架构，PE、ELF等格式的可执行文件进行静态分析和动态调试。IDA集成了Hex-Rays Decompiler，提供了从汇编语言到C 语言伪代码的反编译功能，可以极大地减少分析程序时的工作量</p><h3 id="2．OllyDbg和x64dbg"><a href="#2．OllyDbg和x64dbg" class="headerlink" title="2．OllyDbg和x64dbg"></a>2．OllyDbg和x64dbg</h3><p>OllyDbg是Windows 32位环境下一款优秀的调试器，最强大的功能是可扩展性，许多开 发者为其开发了具备各种功能的插件，能够绕过许多软件保护措施。但OllyDbg在64位 环境下已经不能使用，许多人因此转而使用了x64dbg。</p><h1 id="这些怎么下载？"><a href="#这些怎么下载？" class="headerlink" title="这些怎么下载？"></a>这些怎么下载？</h1><p><a href="https://down.52pojie.cn/">爱盘 - 最新的在线破解工具包 (52pojie.cn)</a></p><h1 id="下好了怎么用呢"><a href="#下好了怎么用呢" class="headerlink" title="下好了怎么用呢"></a>下好了怎么用呢</h1><p>推荐查阅一些书籍，如 《从0到1：CTFer成长之路》 re篇 </p><p>或者直接b站搜ctf re入门</p><p> 以及第一题的bin在压缩包里，试试ida吧，你会需要它的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;来自西安电子科技大学Moectf&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;逆向工程（re&quot;&gt;&lt;a href=&quot;#逆向工程（re&quot; class=&quot;headerlink&quot; title=&quot;逆向工程（re)&quot;&gt;&lt;/a&gt;逆向工程（re)&lt;/h1&gt;</summary>
      
    
    
    
    <category term="CTF" scheme="http://w1ndys.top/categories/CTF/"/>
    
    <category term="CTF入门指北" scheme="http://w1ndys.top/categories/CTF/CTF%E5%85%A5%E9%97%A8%E6%8C%87%E5%8C%97/"/>
    
    
    <category term="CTF" scheme="http://w1ndys.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>更新日志</title>
    <link href="http://w1ndys.top/2023/09/08/%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97/"/>
    <id>http://w1ndys.top/2023/09/08/%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97/</id>
    <published>2023-09-08T10:47:32.709Z</published>
    <updated>2023-09-17T05:35:59.564Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2023年9月17日"><a href="#2023年9月17日" class="headerlink" title="2023年9月17日"></a>2023年9月17日</h1><p>美化工作基本结束</p><h1 id="2023年9月10日"><a href="#2023年9月10日" class="headerlink" title="2023年9月10日"></a>2023年9月10日</h1><p>删除背景动态线条特效</p><p>删除全局樱花飘落特效，只保留主页</p><p>恢复核心价值观点击特效和爱心点击特效</p><p>2023年9月10日21:00由于占用较高，出于简洁考虑，取消爱心点击特效</p><h1 id="2023年9月8日"><a href="#2023年9月8日" class="headerlink" title="2023年9月8日"></a>2023年9月8日</h1><p>将更新日志移动到单独文章页</p><p>关于页面留白填其他内容</p><h1 id="2023年9月6日"><a href="#2023年9月6日" class="headerlink" title="2023年9月6日"></a>2023年9月6日</h1><p>更新了友链界面曲阜师范大学和网络空间安全学院的头像（之前曲阜师范大学头像歪了）</p><p>修改了【曲阜师范大学选课指北】的部分语言描述</p><h1 id="2023年9月2日"><a href="#2023年9月2日" class="headerlink" title="2023年9月2日"></a>2023年9月2日</h1><p>修复了文章页面不出现樱花特效的bug</p><p>修复了文章页面不出现live2d看板娘的bug(PC)</p><p>​哎，这bug是自打新增live2d看板娘的时候就发现的，直到今天看CSDN的时候才偶然定位到bug的所在之处。原因是只在_config.fluid.yml里面引入js部分特效只会在主页出现，在文章页会被覆盖掉(一开始我还以为是层级的问题直到现在)，然后今天我在layout.ejs里面也引入了js，bug消失了，困扰我一周的bug终于修复了，耶耶耶！</p><h1 id="2023年9月1日"><a href="#2023年9月1日" class="headerlink" title="2023年9月1日"></a>2023年9月1日</h1><p>【曲阜师范大学选课指北】已经正式开启运行，十分感谢大家的支持和对数据完整的帮助，本次更新调整了该项目局部页面，使其更加美观便捷</p><p>调整了更新日志界面，改为根据时间倒叙排列，时间最新的在最前面</p><h1 id="2023年8月30日"><a href="#2023年8月30日" class="headerlink" title="2023年8月30日"></a>2023年8月30日</h1><p>修复评论区被墙，已换新服务器</p><p>更新域名w1ndys.top</p><p>因工作需要，背景临时改为静态风景壁纸</p><p>发表新博文【曲阜师范大学网络空间安全学院迎新解密】</p><p>评论功能更新，推荐使用账号注册评论，评论新增新评论邮箱提醒</p><h1 id="2023年8月27日"><a href="#2023年8月27日" class="headerlink" title="2023年8月27日"></a>2023年8月27日</h1><p>新增点击爆炸特效</p><p>增加了樱花飘落特效樱花的数量</p><p>背景图改为全屏</p><p>背景图接入二次元壁纸api，随机刷新</p><p>电脑UA界面右下角新增live2d看板娘</p><p>修复了友链页面lukzia字母丢失的bug</p><h1 id="2023年8月25日"><a href="#2023年8月25日" class="headerlink" title="2023年8月25日"></a>2023年8月25日</h1><p>美化工作</p><p>添加了标签恶搞</p><p>去除banner图（效果不好，于是取消这一改动）</p><p>新增鼠标样式</p><p>新增鼠标移动特效</p><p>新增樱花飘落特效</p><p>接入随机一言api，主页副标题改为随机一言</p><p>新增主页文章滑动浏览动画</p><h1 id="2023年8月24日"><a href="#2023年8月24日" class="headerlink" title="2023年8月24日"></a>2023年8月24日</h1><p>添加了浪浪山的柒念大佬的友链</p><p>删除了博文【自述】</p><p>新发表博文【曲阜师范大学生存指北】预计一学期内完成</p><h1 id="2023年8月23日"><a href="#2023年8月23日" class="headerlink" title="2023年8月23日"></a>2023年8月23日</h1><p>发表一篇博客【曲阜师范大学选课指北（试运行）】，目的是收集全校同学意见无偿奉献给大家，解决你的选课担忧</p><p>添加了Naiteiy大佬的友链</p><h1 id="2023年8月22日"><a href="#2023年8月22日" class="headerlink" title="2023年8月22日"></a>2023年8月22日</h1><p>建站的第一天</p><p>仅仅完成了网站的搭建</p><p>草草的套了一个主题</p><p>还没有认真地美化</p><p>持续更新……</p><p>更新了鼠标点击爱心特效</p><p>更新了底部文字加跳转</p><p>添加了lukzia大佬的友链</p><p>更新了网站图标</p><p>给博文添加了标签和分类</p><p>加油！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2023年9月17日&quot;&gt;&lt;a href=&quot;#2023年9月17日&quot; class=&quot;headerlink&quot; title=&quot;2023年9月17日&quot;&gt;&lt;/a&gt;2023年9月17日&lt;/h1&gt;&lt;p&gt;美化工作基本结束&lt;/p&gt;
&lt;h1 id=&quot;2023年9月10日&quot;&gt;&lt;a hr</summary>
      
    
    
    
    <category term="博客日志" scheme="http://w1ndys.top/categories/%E5%8D%9A%E5%AE%A2%E6%97%A5%E5%BF%97/"/>
    
    
    <category term="博客日志" scheme="http://w1ndys.top/tags/%E5%8D%9A%E5%AE%A2%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>“这些文案像光一样救赎过我”</title>
    <link href="http://w1ndys.top/2023/09/06/%E5%85%B3%E4%BA%8E%E6%84%8F%E5%91%B3%E6%B7%B1%E9%95%BF%E7%9A%84%E5%8F%A5%E5%AD%90/"/>
    <id>http://w1ndys.top/2023/09/06/%E5%85%B3%E4%BA%8E%E6%84%8F%E5%91%B3%E6%B7%B1%E9%95%BF%E7%9A%84%E5%8F%A5%E5%AD%90/</id>
    <published>2023-09-06T14:36:45.337Z</published>
    <updated>2023-09-24T08:05:19.049Z</updated>
    
    <content type="html"><![CDATA[<hr><p>“即使降临不到我身上，但爱是存在的”</p><hr><p>突然就放下了所有执念，我还有万里路要行</p><hr><p>风是抓不住的，花也会凋谢</p><p>人总是要学会和不属于自己的东西说再见</p><p>当你不再奢望遥不可及，很多美好将触手可得。</p><p>有人理解是我之幸，无人理解我淡定独行</p><hr><p>知世故而不世故，善自嘲而不嘲人</p><hr><p>越是艰难处，越是修心时</p><hr><p>我这一生都是坚定不移的唯物主义者，唯有你我希望有来生。</p><hr><p>第一次吻你 是用我的眼睛</p><hr><p>我曾经七次鄙视自己的灵魂</p><p>第一次，当它本可进取时，却故作谦卑；</p><p>第二次，当它在空虚时，用爱欲来填充；</p><p>第三次，在困难和容易之间，它选择了容易；</p><p>第四次，它犯了错，却借由别人也会犯错来宽慰自己；</p><p>第五次，它自由软弱，却把它认为是生命的坚韧；</p><p>第六次，当它鄙夷一张丑恶的嘴脸时，却不知那正是自己面具中的一副；</p><p>第七次，它侧身于生活的污泥中，虽不甘心，却又畏首畏尾。</p><hr><p>当你以阴谋的眼光看世界，那什么都是阴谋</p><hr><p>我独我， </p><p>世间第一等， </p><p>此间最上乘。</p><hr><p>愿你勇怀善意， </p><p>清澈明朗。</p><hr><p>视他人之疑目如盏盏鬼火，</p><p>大胆地去走你的夜路。</p><hr><p>日落是免费的，</p><p>春夏秋冬也是，</p><p>不要觉得人生那么无望，</p><p>希望你快乐。</p><hr><p>麻木不仁的日子里，</p><p>记录 就是反抗。</p><hr><p>再坚持一下吧 ，</p><p>山那边就是海了。</p><hr><p>他们说答案都在路上。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;“即使降临不到我身上，但爱是存在的”&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;突然就放下了所有执念，我还有万里路要行&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;风是抓不住的，花也会凋谢&lt;/p&gt;
&lt;p&gt;人总是要学会和不属于自己的东西说再见&lt;/p&gt;
&lt;p&gt;当你不再奢望遥不可及，很多美好将触手可得。&lt;/</summary>
      
    
    
    
    <category term="文" scheme="http://w1ndys.top/categories/%E6%96%87/"/>
    
    
    <category term="学习笔记" scheme="http://w1ndys.top/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="文案" scheme="http://w1ndys.top/tags/%E6%96%87%E6%A1%88/"/>
    
  </entry>
  
</feed>
